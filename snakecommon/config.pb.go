// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakecommon/config.proto

package snakecommon

import (
	config "git.17zjh.com/snake/snake_proto/snakeapi/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShortCutConfig_SceneType int32

const (
	ShortCutConfig_invalidStatus    ShortCutConfig_SceneType = 0
	ShortCutConfig_SceneFriend      ShortCutConfig_SceneType = 1
	ShortCutConfig_SceneWorld       ShortCutConfig_SceneType = 2
	ShortCutConfig_SceneMatch       ShortCutConfig_SceneType = 3
	ShortCutConfig_SceneClan        ShortCutConfig_SceneType = 5
	ShortCutConfig_SceneCoupleMatch ShortCutConfig_SceneType = 7
	ShortCutConfig_SceneRaceRoom    ShortCutConfig_SceneType = 8
)

// Enum value maps for ShortCutConfig_SceneType.
var (
	ShortCutConfig_SceneType_name = map[int32]string{
		0: "invalidStatus",
		1: "SceneFriend",
		2: "SceneWorld",
		3: "SceneMatch",
		5: "SceneClan",
		7: "SceneCoupleMatch",
		8: "SceneRaceRoom",
	}
	ShortCutConfig_SceneType_value = map[string]int32{
		"invalidStatus":    0,
		"SceneFriend":      1,
		"SceneWorld":       2,
		"SceneMatch":       3,
		"SceneClan":        5,
		"SceneCoupleMatch": 7,
		"SceneRaceRoom":    8,
	}
)

func (x ShortCutConfig_SceneType) Enum() *ShortCutConfig_SceneType {
	p := new(ShortCutConfig_SceneType)
	*p = x
	return p
}

func (x ShortCutConfig_SceneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShortCutConfig_SceneType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakecommon_config_proto_enumTypes[0].Descriptor()
}

func (ShortCutConfig_SceneType) Type() protoreflect.EnumType {
	return &file_snakecommon_config_proto_enumTypes[0]
}

func (x ShortCutConfig_SceneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShortCutConfig_SceneType.Descriptor instead.
func (ShortCutConfig_SceneType) EnumDescriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{26, 0}
}

type CRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                               // 奖励类型
	SkinId     int32       `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`             // 奖励 id
	Num        int64       `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`                                 // 奖励数量
	BigNum     *string     `protobuf:"bytes,4,opt,name=big_num,json=bigNum,proto3,oneof" json:"big_num,omitempty"`        // 奖励数量，大数
	Name       string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                // 奖励名称
	Imgurl     string      `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`                            // 奖励图片
	UseInfo    *string     `protobuf:"bytes,7,opt,name=use_info,json=useInfo,proto3,oneof" json:"use_info,omitempty"`     // 有效期，单位秒
	Index      *int32      `protobuf:"varint,8,opt,name=index,proto3,oneof" json:"index,omitempty"`                       // 奖励序号
	WorthLevel int32       `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"` // 稀有度
	MarkId     *int32      `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3,oneof" json:"mark_id,omitempty"`      // 来源标签id
	Convert    []*CConvert `protobuf:"bytes,11,rep,name=convert,proto3" json:"convert,omitempty"`                         // 奖励折算
}

func (x *CRewardItem) Reset() {
	*x = CRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRewardItem) ProtoMessage() {}

func (x *CRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRewardItem.ProtoReflect.Descriptor instead.
func (*CRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{0}
}

func (x *CRewardItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CRewardItem) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *CRewardItem) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CRewardItem) GetBigNum() string {
	if x != nil && x.BigNum != nil {
		return *x.BigNum
	}
	return ""
}

func (x *CRewardItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRewardItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *CRewardItem) GetUseInfo() string {
	if x != nil && x.UseInfo != nil {
		return *x.UseInfo
	}
	return ""
}

func (x *CRewardItem) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CRewardItem) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *CRewardItem) GetMarkId() int32 {
	if x != nil && x.MarkId != nil {
		return *x.MarkId
	}
	return 0
}

func (x *CRewardItem) GetConvert() []*CConvert {
	if x != nil {
		return x.Convert
	}
	return nil
}

// 奖励折算结构
type CConvert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                   // 类型
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                     // 数量
	SkinId int32 `protobuf:"varint,3,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` // id
}

func (x *CConvert) Reset() {
	*x = CConvert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CConvert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CConvert) ProtoMessage() {}

func (x *CConvert) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CConvert.ProtoReflect.Descriptor instead.
func (*CConvert) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{1}
}

func (x *CConvert) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CConvert) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CConvert) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

type UnityQualifyingOpenConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekdays     []int32 `protobuf:"varint,1,rep,packed,name=weekdays,proto3" json:"weekdays,omitempty"`
	DayStartTime string  `protobuf:"bytes,2,opt,name=day_start_time,json=dayStartTime,proto3" json:"day_start_time,omitempty"`
	DayEndTime   string  `protobuf:"bytes,3,opt,name=day_end_time,json=dayEndTime,proto3" json:"day_end_time,omitempty"`
}

func (x *UnityQualifyingOpenConfig) Reset() {
	*x = UnityQualifyingOpenConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityQualifyingOpenConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityQualifyingOpenConfig) ProtoMessage() {}

func (x *UnityQualifyingOpenConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityQualifyingOpenConfig.ProtoReflect.Descriptor instead.
func (*UnityQualifyingOpenConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{2}
}

func (x *UnityQualifyingOpenConfig) GetWeekdays() []int32 {
	if x != nil {
		return x.Weekdays
	}
	return nil
}

func (x *UnityQualifyingOpenConfig) GetDayStartTime() string {
	if x != nil {
		return x.DayStartTime
	}
	return ""
}

func (x *UnityQualifyingOpenConfig) GetDayEndTime() string {
	if x != nil {
		return x.DayEndTime
	}
	return ""
}

type RecoderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighlightList []*HaighLight `protobuf:"bytes,1,rep,name=highlight_list,json=highlightList,proto3" json:"highlight_list,omitempty"`
	Open          int32         `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
}

func (x *RecoderConfig) Reset() {
	*x = RecoderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoderConfig) ProtoMessage() {}

func (x *RecoderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoderConfig.ProtoReflect.Descriptor instead.
func (*RecoderConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{3}
}

func (x *RecoderConfig) GetHighlightList() []*HaighLight {
	if x != nil {
		return x.HighlightList
	}
	return nil
}

func (x *RecoderConfig) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

type HaighLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Obj       int32 `protobuf:"varint,2,opt,name=obj,proto3" json:"obj,omitempty"`
	Time      int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	DelayTime int32 `protobuf:"varint,4,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
}

func (x *HaighLight) Reset() {
	*x = HaighLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HaighLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HaighLight) ProtoMessage() {}

func (x *HaighLight) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HaighLight.ProtoReflect.Descriptor instead.
func (*HaighLight) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{4}
}

func (x *HaighLight) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HaighLight) GetObj() int32 {
	if x != nil {
		return x.Obj
	}
	return 0
}

func (x *HaighLight) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HaighLight) GetDelayTime() int32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

type EndLessBuffPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffType  int32              `protobuf:"varint,1,opt,name=buff_type,json=buffType,proto3" json:"buff_type,omitempty"`
	FreeTimes int32              `protobuf:"varint,2,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	PriceList []*RandomPriceInfo `protobuf:"bytes,3,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PropList  []*RandomPropInfo  `protobuf:"bytes,4,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
}

func (x *EndLessBuffPropInfo) Reset() {
	*x = EndLessBuffPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLessBuffPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLessBuffPropInfo) ProtoMessage() {}

func (x *EndLessBuffPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLessBuffPropInfo.ProtoReflect.Descriptor instead.
func (*EndLessBuffPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{5}
}

func (x *EndLessBuffPropInfo) GetBuffType() int32 {
	if x != nil {
		return x.BuffType
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetPriceList() []*RandomPriceInfo {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *EndLessBuffPropInfo) GetPropList() []*RandomPropInfo {
	if x != nil {
		return x.PropList
	}
	return nil
}

type RandomPriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Num      int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Discount int32 `protobuf:"varint,3,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *RandomPriceInfo) Reset() {
	*x = RandomPriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPriceInfo) ProtoMessage() {}

func (x *RandomPriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPriceInfo.ProtoReflect.Descriptor instead.
func (*RandomPriceInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{6}
}

func (x *RandomPriceInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RandomPriceInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RandomPriceInfo) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type RandomPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Num    int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl string `protobuf:"bytes,5,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *RandomPropInfo) Reset() {
	*x = RandomPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPropInfo) ProtoMessage() {}

func (x *RandomPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPropInfo.ProtoReflect.Descriptor instead.
func (*RandomPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{7}
}

func (x *RandomPropInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RandomPropInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RandomPropInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RandomPropInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RandomPropInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

type PingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingStrategy      int32             `protobuf:"varint,1,opt,name=ping_strategy,json=pingStrategy,proto3" json:"ping_strategy,omitempty"`
	NewPingCount      int32             `protobuf:"varint,2,opt,name=new_ping_count,json=newPingCount,proto3" json:"new_ping_count,omitempty"`
	PingLossRate      float32           `protobuf:"fixed32,3,opt,name=ping_loss_rate,json=pingLossRate,proto3" json:"ping_loss_rate,omitempty"`
	PingIntervalTime  int32             `protobuf:"varint,4,opt,name=ping_interval_time,json=pingIntervalTime,proto3" json:"ping_interval_time,omitempty"`
	PingIntervalCount int32             `protobuf:"varint,5,opt,name=ping_interval_count,json=pingIntervalCount,proto3" json:"ping_interval_count,omitempty"`
	PingIpList        map[string]string `protobuf:"bytes,6,rep,name=ping_ip_list,json=pingIpList,proto3" json:"ping_ip_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PingConfig) Reset() {
	*x = PingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingConfig) ProtoMessage() {}

func (x *PingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingConfig.ProtoReflect.Descriptor instead.
func (*PingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{8}
}

func (x *PingConfig) GetPingStrategy() int32 {
	if x != nil {
		return x.PingStrategy
	}
	return 0
}

func (x *PingConfig) GetNewPingCount() int32 {
	if x != nil {
		return x.NewPingCount
	}
	return 0
}

func (x *PingConfig) GetPingLossRate() float32 {
	if x != nil {
		return x.PingLossRate
	}
	return 0
}

func (x *PingConfig) GetPingIntervalTime() int32 {
	if x != nil {
		return x.PingIntervalTime
	}
	return 0
}

func (x *PingConfig) GetPingIntervalCount() int32 {
	if x != nil {
		return x.PingIntervalCount
	}
	return 0
}

func (x *PingConfig) GetPingIpList() map[string]string {
	if x != nil {
		return x.PingIpList
	}
	return nil
}

type ChargeVipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelList []*VipLevel `protobuf:"bytes,1,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
	IntroUrl  string      `protobuf:"bytes,2,opt,name=intro_url,json=introUrl,proto3" json:"intro_url,omitempty"`
}

func (x *ChargeVipConfig) Reset() {
	*x = ChargeVipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeVipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeVipConfig) ProtoMessage() {}

func (x *ChargeVipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeVipConfig.ProtoReflect.Descriptor instead.
func (*ChargeVipConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{9}
}

func (x *ChargeVipConfig) GetLevelList() []*VipLevel {
	if x != nil {
		return x.LevelList
	}
	return nil
}

func (x *ChargeVipConfig) GetIntroUrl() string {
	if x != nil {
		return x.IntroUrl
	}
	return ""
}

type VipLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        int32                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	ChargeExp    int32                  `protobuf:"varint,2,opt,name=charge_exp,json=chargeExp,proto3" json:"charge_exp,omitempty"`   // 需要的积分，是人民币的10倍
	Privilege    []*VipPrivilege        `protobuf:"bytes,4,rep,name=privilege,proto3" json:"privilege,omitempty"`                     // 特权展示
	RewardList   []*config.RewardConfig `protobuf:"bytes,5,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"` // 特权奖励
	AnimUrl      string                 `protobuf:"bytes,6,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`          // 大icon动效
	AnimType     int32                  `protobuf:"varint,7,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	IconUrl      string                 `protobuf:"bytes,8,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"` // 小icon动效
	IconAnimType int32                  `protobuf:"varint,9,opt,name=icon_anim_type,json=iconAnimType,proto3" json:"icon_anim_type,omitempty"`
	WeekReward   []*config.RewardConfig `protobuf:"bytes,10,rep,name=week_reward,json=weekReward,proto3" json:"week_reward,omitempty"` // 每周好礼奖励
}

func (x *VipLevel) Reset() {
	*x = VipLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevel) ProtoMessage() {}

func (x *VipLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevel.ProtoReflect.Descriptor instead.
func (*VipLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{10}
}

func (x *VipLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *VipLevel) GetChargeExp() int32 {
	if x != nil {
		return x.ChargeExp
	}
	return 0
}

func (x *VipLevel) GetPrivilege() []*VipPrivilege {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *VipLevel) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *VipLevel) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *VipLevel) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *VipLevel) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *VipLevel) GetIconAnimType() int32 {
	if x != nil {
		return x.IconAnimType
	}
	return 0
}

func (x *VipLevel) GetWeekReward() []*config.RewardConfig {
	if x != nil {
		return x.WeekReward
	}
	return nil
}

type VipPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl   string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Desc     string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` // 特权类型，1:照片数量加上限
	PhotoNum int32  `protobuf:"varint,4,opt,name=photo_num,json=photoNum,proto3" json:"photo_num,omitempty"`
}

func (x *VipPrivilege) Reset() {
	*x = VipPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPrivilege) ProtoMessage() {}

func (x *VipPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPrivilege.ProtoReflect.Descriptor instead.
func (*VipPrivilege) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{11}
}

func (x *VipPrivilege) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *VipPrivilege) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *VipPrivilege) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VipPrivilege) GetPhotoNum() int32 {
	if x != nil {
		return x.PhotoNum
	}
	return 0
}

type NetFrameGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualifyingGuide    int32             `protobuf:"varint,1,opt,name=qualifying_guide,json=qualifyingGuide,proto3" json:"qualifying_guide,omitempty"` //1:强引导，2：弱引导
	QualifyingConfig   *QualifyingConfig `protobuf:"bytes,2,opt,name=qualifying_config,json=qualifyingConfig,proto3" json:"qualifying_config,omitempty"`
	ExitButtonPlan     int32             `protobuf:"varint,3,opt,name=exit_button_plan,json=exitButtonPlan,proto3" json:"exit_button_plan,omitempty"`
	TeamSuitTextConfig string            `protobuf:"bytes,4,opt,name=team_suit_text_config,json=teamSuitTextConfig,proto3" json:"team_suit_text_config,omitempty"` // 团战队服说明文案
}

func (x *NetFrameGameConfig) Reset() {
	*x = NetFrameGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetFrameGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetFrameGameConfig) ProtoMessage() {}

func (x *NetFrameGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetFrameGameConfig.ProtoReflect.Descriptor instead.
func (*NetFrameGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{12}
}

func (x *NetFrameGameConfig) GetQualifyingGuide() int32 {
	if x != nil {
		return x.QualifyingGuide
	}
	return 0
}

func (x *NetFrameGameConfig) GetQualifyingConfig() *QualifyingConfig {
	if x != nil {
		return x.QualifyingConfig
	}
	return nil
}

func (x *NetFrameGameConfig) GetExitButtonPlan() int32 {
	if x != nil {
		return x.ExitButtonPlan
	}
	return 0
}

func (x *NetFrameGameConfig) GetTeamSuitTextConfig() string {
	if x != nil {
		return x.TeamSuitTextConfig
	}
	return ""
}

type QualifyingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntroUrlsV2   []string `protobuf:"bytes,1,rep,name=intro_urls_v2,json=introUrlsV2,proto3" json:"intro_urls_v2,omitempty"`
	UnlockTip     string   `protobuf:"bytes,2,opt,name=unlock_tip,json=unlockTip,proto3" json:"unlock_tip,omitempty"`     // 解锁提示"无尽模式达到***分解锁"
	GameRule      string   `protobuf:"bytes,3,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`        // 结算页点赞说明
	ForceGuide    int32    `protobuf:"varint,4,opt,name=force_guide,json=forceGuide,proto3" json:"force_guide,omitempty"` //1有引导 // 对于未玩过团战的玩家,无尽模式以高于一定分数的成绩结束后是否出现强制团战引导
	BannerUrl     string   `protobuf:"bytes,5,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	BannerLink    string   `protobuf:"bytes,6,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	IconUrl       string   `protobuf:"bytes,7,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	IconLink      string   `protobuf:"bytes,8,opt,name=icon_link,json=iconLink,proto3" json:"icon_link,omitempty"`
	PrettyPage    int32    `protobuf:"varint,9,opt,name=pretty_page,json=prettyPage,proto3" json:"pretty_page,omitempty"`
	NetworkSurvey int32    `protobuf:"varint,10,opt,name=network_survey,json=networkSurvey,proto3" json:"network_survey,omitempty"`
}

func (x *QualifyingConfig) Reset() {
	*x = QualifyingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingConfig) ProtoMessage() {}

func (x *QualifyingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingConfig.ProtoReflect.Descriptor instead.
func (*QualifyingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{13}
}

func (x *QualifyingConfig) GetIntroUrlsV2() []string {
	if x != nil {
		return x.IntroUrlsV2
	}
	return nil
}

func (x *QualifyingConfig) GetUnlockTip() string {
	if x != nil {
		return x.UnlockTip
	}
	return ""
}

func (x *QualifyingConfig) GetGameRule() string {
	if x != nil {
		return x.GameRule
	}
	return ""
}

func (x *QualifyingConfig) GetForceGuide() int32 {
	if x != nil {
		return x.ForceGuide
	}
	return 0
}

func (x *QualifyingConfig) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *QualifyingConfig) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *QualifyingConfig) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *QualifyingConfig) GetIconLink() string {
	if x != nil {
		return x.IconLink
	}
	return ""
}

func (x *QualifyingConfig) GetPrettyPage() int32 {
	if x != nil {
		return x.PrettyPage
	}
	return 0
}

func (x *QualifyingConfig) GetNetworkSurvey() int32 {
	if x != nil {
		return x.NetworkSurvey
	}
	return 0
}

type SocialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastIntervalTime  int32              `protobuf:"varint,1,opt,name=broadcast_interval_time,json=broadcastIntervalTime,proto3" json:"broadcast_interval_time,omitempty"` //广播刷新时间
	WorldSpeakMinStar      int32              `protobuf:"varint,2,opt,name=world_speak_min_star,json=worldSpeakMinStar,proto3" json:"world_speak_min_star,omitempty"`           //世界发言最低星数
	WorldSpeakMinStarV2    int32              `protobuf:"varint,3,opt,name=world_speak_min_star_v2,json=worldSpeakMinStarV2,proto3" json:"world_speak_min_star_v2,omitempty"`   //查看世界发言最低星数
	WorldSpeakIntervalTime int32              `protobuf:"varint,4,opt,name=world_speak_interval_time,json=worldSpeakIntervalTime,proto3" json:"world_speak_interval_time,omitempty"`
	GroupSpeakMinStar      int32              `protobuf:"varint,5,opt,name=group_speak_min_star,json=groupSpeakMinStar,proto3" json:"group_speak_min_star,omitempty"`
	MarriageVowHead        string             `protobuf:"bytes,6,opt,name=marriage_vow_head,json=marriageVowHead,proto3" json:"marriage_vow_head,omitempty"`
	MarriageVowContent     string             `protobuf:"bytes,7,opt,name=marriage_vow_content,json=marriageVowContent,proto3" json:"marriage_vow_content,omitempty"`
	MarriageVowFoot        string             `protobuf:"bytes,8,opt,name=marriage_vow_foot,json=marriageVowFoot,proto3" json:"marriage_vow_foot,omitempty"`
	MarryPoint             int32              `protobuf:"varint,9,opt,name=marry_point,json=marryPoint,proto3" json:"marry_point,omitempty"`
	CharmLevel             []*CharmLevel      `protobuf:"bytes,10,rep,name=charm_level,json=charmLevel,proto3" json:"charm_level,omitempty"`
	CharmTopConfig         *CharmSocialConfig `protobuf:"bytes,11,opt,name=charm_top_config,json=charmTopConfig,proto3" json:"charm_top_config,omitempty"`
}

func (x *SocialConfig) Reset() {
	*x = SocialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialConfig) ProtoMessage() {}

func (x *SocialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialConfig.ProtoReflect.Descriptor instead.
func (*SocialConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{14}
}

func (x *SocialConfig) GetBroadcastIntervalTime() int32 {
	if x != nil {
		return x.BroadcastIntervalTime
	}
	return 0
}

func (x *SocialConfig) GetWorldSpeakMinStar() int32 {
	if x != nil {
		return x.WorldSpeakMinStar
	}
	return 0
}

func (x *SocialConfig) GetWorldSpeakMinStarV2() int32 {
	if x != nil {
		return x.WorldSpeakMinStarV2
	}
	return 0
}

func (x *SocialConfig) GetWorldSpeakIntervalTime() int32 {
	if x != nil {
		return x.WorldSpeakIntervalTime
	}
	return 0
}

func (x *SocialConfig) GetGroupSpeakMinStar() int32 {
	if x != nil {
		return x.GroupSpeakMinStar
	}
	return 0
}

func (x *SocialConfig) GetMarriageVowHead() string {
	if x != nil {
		return x.MarriageVowHead
	}
	return ""
}

func (x *SocialConfig) GetMarriageVowContent() string {
	if x != nil {
		return x.MarriageVowContent
	}
	return ""
}

func (x *SocialConfig) GetMarriageVowFoot() string {
	if x != nil {
		return x.MarriageVowFoot
	}
	return ""
}

func (x *SocialConfig) GetMarryPoint() int32 {
	if x != nil {
		return x.MarryPoint
	}
	return 0
}

func (x *SocialConfig) GetCharmLevel() []*CharmLevel {
	if x != nil {
		return x.CharmLevel
	}
	return nil
}

func (x *SocialConfig) GetCharmTopConfig() *CharmSocialConfig {
	if x != nil {
		return x.CharmTopConfig
	}
	return nil
}

type ShareConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareUrl       string            `protobuf:"bytes,1,opt,name=share_url,json=shareUrl,proto3" json:"share_url,omitempty"`
	ShareTitle     string            `protobuf:"bytes,2,opt,name=share_title,json=shareTitle,proto3" json:"share_title,omitempty"`
	ShareText      string            `protobuf:"bytes,3,opt,name=share_text,json=shareText,proto3" json:"share_text,omitempty"`
	MyQrUrl        string            `protobuf:"bytes,4,opt,name=my_qr_url,json=myQrUrl,proto3" json:"my_qr_url,omitempty"`
	ChannelConfig  *ChannelConfig    `protobuf:"bytes,5,opt,name=channel_config,json=channelConfig,proto3" json:"channel_config,omitempty"`
	GameInvite     *GameInvite       `protobuf:"bytes,6,opt,name=game_invite,json=gameInvite,proto3" json:"game_invite,omitempty"`
	VideoShareIcon []*VideoShareIcon `protobuf:"bytes,7,rep,name=video_share_icon,json=videoShareIcon,proto3" json:"video_share_icon,omitempty"`
	ClipboardCheck []*ClipBoardCheck `protobuf:"bytes,8,rep,name=clipboard_check,json=clipboardCheck,proto3" json:"clipboard_check,omitempty"`
	ShareTag       *ShareTag         `protobuf:"bytes,9,opt,name=share_tag,json=shareTag,proto3" json:"share_tag,omitempty"`
}

func (x *ShareConfig) Reset() {
	*x = ShareConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareConfig) ProtoMessage() {}

func (x *ShareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareConfig.ProtoReflect.Descriptor instead.
func (*ShareConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{15}
}

func (x *ShareConfig) GetShareUrl() string {
	if x != nil {
		return x.ShareUrl
	}
	return ""
}

func (x *ShareConfig) GetShareTitle() string {
	if x != nil {
		return x.ShareTitle
	}
	return ""
}

func (x *ShareConfig) GetShareText() string {
	if x != nil {
		return x.ShareText
	}
	return ""
}

func (x *ShareConfig) GetMyQrUrl() string {
	if x != nil {
		return x.MyQrUrl
	}
	return ""
}

func (x *ShareConfig) GetChannelConfig() *ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

func (x *ShareConfig) GetGameInvite() *GameInvite {
	if x != nil {
		return x.GameInvite
	}
	return nil
}

func (x *ShareConfig) GetVideoShareIcon() []*VideoShareIcon {
	if x != nil {
		return x.VideoShareIcon
	}
	return nil
}

func (x *ShareConfig) GetClipboardCheck() []*ClipBoardCheck {
	if x != nil {
		return x.ClipboardCheck
	}
	return nil
}

func (x *ShareConfig) GetShareTag() *ShareTag {
	if x != nil {
		return x.ShareTag
	}
	return nil
}

type ShareTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kuaishou string `protobuf:"bytes,1,opt,name=kuaishou,proto3" json:"kuaishou,omitempty"`
	Douyin   string `protobuf:"bytes,2,opt,name=douyin,proto3" json:"douyin,omitempty"`
	Weibo    string `protobuf:"bytes,3,opt,name=weibo,proto3" json:"weibo,omitempty"`
}

func (x *ShareTag) Reset() {
	*x = ShareTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareTag) ProtoMessage() {}

func (x *ShareTag) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareTag.ProtoReflect.Descriptor instead.
func (*ShareTag) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{16}
}

func (x *ShareTag) GetKuaishou() string {
	if x != nil {
		return x.Kuaishou
	}
	return ""
}

func (x *ShareTag) GetDouyin() string {
	if x != nil {
		return x.Douyin
	}
	return ""
}

func (x *ShareTag) GetWeibo() string {
	if x != nil {
		return x.Weibo
	}
	return ""
}

type ClipBoardCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Act        string `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty"`
	Reg        string `protobuf:"bytes,4,opt,name=reg,proto3" json:"reg,omitempty"`
}

func (x *ClipBoardCheck) Reset() {
	*x = ClipBoardCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClipBoardCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClipBoardCheck) ProtoMessage() {}

func (x *ClipBoardCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClipBoardCheck.ProtoReflect.Descriptor instead.
func (*ClipBoardCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{17}
}

func (x *ClipBoardCheck) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ClipBoardCheck) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *ClipBoardCheck) GetAct() string {
	if x != nil {
		return x.Act
	}
	return ""
}

func (x *ClipBoardCheck) GetReg() string {
	if x != nil {
		return x.Reg
	}
	return ""
}

type VideoShareIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	StartTime  int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Imgurl     string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Link       string `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *VideoShareIcon) Reset() {
	*x = VideoShareIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoShareIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoShareIcon) ProtoMessage() {}

func (x *VideoShareIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoShareIcon.ProtoReflect.Descriptor instead.
func (*VideoShareIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{18}
}

func (x *VideoShareIcon) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VideoShareIcon) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VideoShareIcon) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *VideoShareIcon) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *VideoShareIcon) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WechatFriend int32 `protobuf:"varint,1,opt,name=wechat_friend,json=wechatFriend,proto3" json:"wechat_friend,omitempty"`
	WechatCircle int32 `protobuf:"varint,2,opt,name=wechat_circle,json=wechatCircle,proto3" json:"wechat_circle,omitempty"`
	QqCircle     int32 `protobuf:"varint,3,opt,name=qq_circle,json=qqCircle,proto3" json:"qq_circle,omitempty"`
	QqFriend     int32 `protobuf:"varint,4,opt,name=qq_friend,json=qqFriend,proto3" json:"qq_friend,omitempty"`
	Weibo        int32 `protobuf:"varint,5,opt,name=weibo,proto3" json:"weibo,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelConfig) GetWechatFriend() int32 {
	if x != nil {
		return x.WechatFriend
	}
	return 0
}

func (x *ChannelConfig) GetWechatCircle() int32 {
	if x != nil {
		return x.WechatCircle
	}
	return 0
}

func (x *ChannelConfig) GetQqCircle() int32 {
	if x != nil {
		return x.QqCircle
	}
	return 0
}

func (x *ChannelConfig) GetQqFriend() int32 {
	if x != nil {
		return x.QqFriend
	}
	return 0
}

func (x *ChannelConfig) GetWeibo() int32 {
	if x != nil {
		return x.Weibo
	}
	return 0
}

type GameInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XiaomiImg string `protobuf:"bytes,4,opt,name=xiaomi_img,json=xiaomiImg,proto3" json:"xiaomi_img,omitempty"`
}

func (x *GameInvite) Reset() {
	*x = GameInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInvite) ProtoMessage() {}

func (x *GameInvite) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInvite.ProtoReflect.Descriptor instead.
func (*GameInvite) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{20}
}

func (x *GameInvite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GameInvite) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GameInvite) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GameInvite) GetXiaomiImg() string {
	if x != nil {
		return x.XiaomiImg
	}
	return ""
}

type CharmExpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmExpRanks   []*CharmExpRank         `protobuf:"bytes,1,rep,name=charm_exp_ranks,json=charmExpRanks,proto3" json:"charm_exp_ranks,omitempty"`     // 魅力勋章等级配置
	PrivilegeConfig []*CharmPrivilegeConfig `protobuf:"bytes,2,rep,name=privilege_config,json=privilegeConfig,proto3" json:"privilege_config,omitempty"` // 特权配置
	RuleUrl         string                  `protobuf:"bytes,3,opt,name=rule_url,json=ruleUrl,proto3" json:"rule_url,omitempty"`                         // 规则说明url
	PrivilegeDesc   string                  `protobuf:"bytes,4,opt,name=privilege_desc,json=privilegeDesc,proto3" json:"privilege_desc,omitempty"`       // 特权说明
	CharmDetail     string                  `protobuf:"bytes,5,opt,name=charm_detail,json=charmDetail,proto3" json:"charm_detail,omitempty"`             // 魅力勋章详情页
}

func (x *CharmExpConfig) Reset() {
	*x = CharmExpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmExpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmExpConfig) ProtoMessage() {}

func (x *CharmExpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmExpConfig.ProtoReflect.Descriptor instead.
func (*CharmExpConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{21}
}

func (x *CharmExpConfig) GetCharmExpRanks() []*CharmExpRank {
	if x != nil {
		return x.CharmExpRanks
	}
	return nil
}

func (x *CharmExpConfig) GetPrivilegeConfig() []*CharmPrivilegeConfig {
	if x != nil {
		return x.PrivilegeConfig
	}
	return nil
}

func (x *CharmExpConfig) GetRuleUrl() string {
	if x != nil {
		return x.RuleUrl
	}
	return ""
}

func (x *CharmExpConfig) GetPrivilegeDesc() string {
	if x != nil {
		return x.PrivilegeDesc
	}
	return ""
}

func (x *CharmExpConfig) GetCharmDetail() string {
	if x != nil {
		return x.CharmDetail
	}
	return ""
}

type CharmExpRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        int32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon         string  `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	NeedExp      int32   `protobuf:"varint,4,opt,name=need_exp,json=needExp,proto3" json:"need_exp,omitempty"`
	PrivilegeIds []int32 `protobuf:"varint,5,rep,packed,name=privilege_ids,json=privilegeIds,proto3" json:"privilege_ids,omitempty"`
	TextBgUrl    string  `protobuf:"bytes,6,opt,name=text_bg_url,json=textBgUrl,proto3" json:"text_bg_url,omitempty"` // 首页魅力勋章背景图
}

func (x *CharmExpRank) Reset() {
	*x = CharmExpRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmExpRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmExpRank) ProtoMessage() {}

func (x *CharmExpRank) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmExpRank.ProtoReflect.Descriptor instead.
func (*CharmExpRank) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{22}
}

func (x *CharmExpRank) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharmExpRank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharmExpRank) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CharmExpRank) GetNeedExp() int32 {
	if x != nil {
		return x.NeedExp
	}
	return 0
}

func (x *CharmExpRank) GetPrivilegeIds() []int32 {
	if x != nil {
		return x.PrivilegeIds
	}
	return nil
}

func (x *CharmExpRank) GetTextBgUrl() string {
	if x != nil {
		return x.TextBgUrl
	}
	return ""
}

type CharmPrivilegeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl   string `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	MinLevel int32  `protobuf:"varint,4,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
}

func (x *CharmPrivilegeConfig) Reset() {
	*x = CharmPrivilegeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmPrivilegeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmPrivilegeConfig) ProtoMessage() {}

func (x *CharmPrivilegeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmPrivilegeConfig.ProtoReflect.Descriptor instead.
func (*CharmPrivilegeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{23}
}

func (x *CharmPrivilegeConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharmPrivilegeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharmPrivilegeConfig) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *CharmPrivilegeConfig) GetMinLevel() int32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

type TextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmStar            string              `protobuf:"bytes,1,opt,name=charm_star,json=charmStar,proto3" json:"charm_star,omitempty"`
	HappycoinTitle       string              `protobuf:"bytes,2,opt,name=happycoin_title,json=happycoinTitle,proto3" json:"happycoin_title,omitempty"`
	CoinDealNotify       string              `protobuf:"bytes,3,opt,name=coin_deal_notify,json=coinDealNotify,proto3" json:"coin_deal_notify,omitempty"`
	ShareTextList        []string            `protobuf:"bytes,4,rep,name=share_text_list,json=shareTextList,proto3" json:"share_text_list,omitempty"`
	QualifyingBetaRule   string              `protobuf:"bytes,5,opt,name=qualifying_beta_rule,json=qualifyingBetaRule,proto3" json:"qualifying_beta_rule,omitempty"`
	GiftRule             string              `protobuf:"bytes,6,opt,name=gift_rule,json=giftRule,proto3" json:"gift_rule,omitempty"`
	EndlessTips          string              `protobuf:"bytes,7,opt,name=endless_tips,json=endlessTips,proto3" json:"endless_tips,omitempty"`
	GiftLikeTextList     *GiftLikeTextConfig `protobuf:"bytes,8,opt,name=gift_like_text_list,json=giftLikeTextList,proto3" json:"gift_like_text_list,omitempty"`
	QuickPhraseTextList  []*ShortCutConfig   `protobuf:"bytes,9,rep,name=quick_phrase_text_list,json=quickPhraseTextList,proto3" json:"quick_phrase_text_list,omitempty"`
	AiAnchorNicknameList []string            `protobuf:"bytes,10,rep,name=ai_anchor_nickname_list,json=aiAnchorNicknameList,proto3" json:"ai_anchor_nickname_list,omitempty"`
	ReportBehaviorList   []*ReportBehavior   `protobuf:"bytes,11,rep,name=report_behavior_list,json=reportBehaviorList,proto3" json:"report_behavior_list,omitempty"`
}

func (x *TextConfig) Reset() {
	*x = TextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextConfig) ProtoMessage() {}

func (x *TextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextConfig.ProtoReflect.Descriptor instead.
func (*TextConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{24}
}

func (x *TextConfig) GetCharmStar() string {
	if x != nil {
		return x.CharmStar
	}
	return ""
}

func (x *TextConfig) GetHappycoinTitle() string {
	if x != nil {
		return x.HappycoinTitle
	}
	return ""
}

func (x *TextConfig) GetCoinDealNotify() string {
	if x != nil {
		return x.CoinDealNotify
	}
	return ""
}

func (x *TextConfig) GetShareTextList() []string {
	if x != nil {
		return x.ShareTextList
	}
	return nil
}

func (x *TextConfig) GetQualifyingBetaRule() string {
	if x != nil {
		return x.QualifyingBetaRule
	}
	return ""
}

func (x *TextConfig) GetGiftRule() string {
	if x != nil {
		return x.GiftRule
	}
	return ""
}

func (x *TextConfig) GetEndlessTips() string {
	if x != nil {
		return x.EndlessTips
	}
	return ""
}

func (x *TextConfig) GetGiftLikeTextList() *GiftLikeTextConfig {
	if x != nil {
		return x.GiftLikeTextList
	}
	return nil
}

func (x *TextConfig) GetQuickPhraseTextList() []*ShortCutConfig {
	if x != nil {
		return x.QuickPhraseTextList
	}
	return nil
}

func (x *TextConfig) GetAiAnchorNicknameList() []string {
	if x != nil {
		return x.AiAnchorNicknameList
	}
	return nil
}

func (x *TextConfig) GetReportBehaviorList() []*ReportBehavior {
	if x != nil {
		return x.ReportBehaviorList
	}
	return nil
}

type GiftLikeTextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner []string `protobuf:"bytes,1,rep,name=partner,proto3" json:"partner,omitempty"`
	Enemy   []string `protobuf:"bytes,2,rep,name=enemy,proto3" json:"enemy,omitempty"`
}

func (x *GiftLikeTextConfig) Reset() {
	*x = GiftLikeTextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftLikeTextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftLikeTextConfig) ProtoMessage() {}

func (x *GiftLikeTextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftLikeTextConfig.ProtoReflect.Descriptor instead.
func (*GiftLikeTextConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{25}
}

func (x *GiftLikeTextConfig) GetPartner() []string {
	if x != nil {
		return x.Partner
	}
	return nil
}

func (x *GiftLikeTextConfig) GetEnemy() []string {
	if x != nil {
		return x.Enemy
	}
	return nil
}

type ShortCutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShortCutConfig) Reset() {
	*x = ShortCutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCutConfig) ProtoMessage() {}

func (x *ShortCutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCutConfig.ProtoReflect.Descriptor instead.
func (*ShortCutConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{26}
}

func (x *ShortCutConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ShortCutConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortCutConfig) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type ReportBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ReportBehavior) Reset() {
	*x = ReportBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBehavior) ProtoMessage() {}

func (x *ReportBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBehavior.ProtoReflect.Descriptor instead.
func (*ReportBehavior) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{27}
}

func (x *ReportBehavior) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReportBehavior) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ActivityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassCheckV2        *PassCheckV2         `protobuf:"bytes,1,opt,name=pass_check_v2,json=passCheckV2,proto3" json:"pass_check_v2,omitempty"`
	NewMeetupV3        *MeetupConfig        `protobuf:"bytes,2,opt,name=new_meetup_v3,json=newMeetupV3,proto3" json:"new_meetup_v3,omitempty"`
	HatchEgg           *HatchEgg            `protobuf:"bytes,3,opt,name=hatch_egg,json=hatchEgg,proto3" json:"hatch_egg,omitempty"`
	NewbieCheckin      *NewbieConfig        `protobuf:"bytes,4,opt,name=newbie_checkin,json=newbieCheckin,proto3" json:"newbie_checkin,omitempty"`
	EndlessGameReward  *EndlessRewardConfig `protobuf:"bytes,5,opt,name=endless_game_reward,json=endlessGameReward,proto3" json:"endless_game_reward,omitempty"`
	Turntable          *RouletteConfig      `protobuf:"bytes,6,opt,name=turntable,proto3" json:"turntable,omitempty"`
	SkinUgc            *SkinUgcConfig       `protobuf:"bytes,7,opt,name=skin_ugc,json=skinUgc,proto3" json:"skin_ugc,omitempty"`
	PassCheckPackActId string               `protobuf:"bytes,8,opt,name=pass_check_pack_act_id,json=passCheckPackActId,proto3" json:"pass_check_pack_act_id,omitempty"`
	SkinUgcV2          *SkinUgcConfigV2     `protobuf:"bytes,9,opt,name=skin_ugc_v2,json=skinUgcV2,proto3" json:"skin_ugc_v2,omitempty"`
	EndlessFloatingV2  *EndlessFloatingV2   `protobuf:"bytes,10,opt,name=endless_floating_v2,json=endlessFloatingV2,proto3" json:"endless_floating_v2,omitempty"`
	SuperShow          *SuperShowConfig     `protobuf:"bytes,11,opt,name=super_show,json=superShow,proto3" json:"super_show,omitempty"`
	SeasonActivity     *SeasonActivity      `protobuf:"bytes,12,opt,name=season_activity,json=seasonActivity,proto3" json:"season_activity,omitempty"`
}

func (x *ActivityConfig) Reset() {
	*x = ActivityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityConfig) ProtoMessage() {}

func (x *ActivityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityConfig.ProtoReflect.Descriptor instead.
func (*ActivityConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{28}
}

func (x *ActivityConfig) GetPassCheckV2() *PassCheckV2 {
	if x != nil {
		return x.PassCheckV2
	}
	return nil
}

func (x *ActivityConfig) GetNewMeetupV3() *MeetupConfig {
	if x != nil {
		return x.NewMeetupV3
	}
	return nil
}

func (x *ActivityConfig) GetHatchEgg() *HatchEgg {
	if x != nil {
		return x.HatchEgg
	}
	return nil
}

func (x *ActivityConfig) GetNewbieCheckin() *NewbieConfig {
	if x != nil {
		return x.NewbieCheckin
	}
	return nil
}

func (x *ActivityConfig) GetEndlessGameReward() *EndlessRewardConfig {
	if x != nil {
		return x.EndlessGameReward
	}
	return nil
}

func (x *ActivityConfig) GetTurntable() *RouletteConfig {
	if x != nil {
		return x.Turntable
	}
	return nil
}

func (x *ActivityConfig) GetSkinUgc() *SkinUgcConfig {
	if x != nil {
		return x.SkinUgc
	}
	return nil
}

func (x *ActivityConfig) GetPassCheckPackActId() string {
	if x != nil {
		return x.PassCheckPackActId
	}
	return ""
}

func (x *ActivityConfig) GetSkinUgcV2() *SkinUgcConfigV2 {
	if x != nil {
		return x.SkinUgcV2
	}
	return nil
}

func (x *ActivityConfig) GetEndlessFloatingV2() *EndlessFloatingV2 {
	if x != nil {
		return x.EndlessFloatingV2
	}
	return nil
}

func (x *ActivityConfig) GetSuperShow() *SuperShowConfig {
	if x != nil {
		return x.SuperShow
	}
	return nil
}

func (x *ActivityConfig) GetSeasonActivity() *SeasonActivity {
	if x != nil {
		return x.SeasonActivity
	}
	return nil
}

type EndlessFloatingV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId                   string                             `protobuf:"bytes,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	StartTime               int32                              `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                 int32                              `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FloatingRefreshConfigV2 []*IllustrateFloatingRefreshConfig `protobuf:"bytes,4,rep,name=floating_refresh_config_v2,json=floatingRefreshConfigV2,proto3" json:"floating_refresh_config_v2,omitempty"`
	FloatingConfig          []*FloatingInfo                    `protobuf:"bytes,5,rep,name=floating_config,json=floatingConfig,proto3" json:"floating_config,omitempty"`
	TreasureHouse           []*TreasureHouseThemeInfo          `protobuf:"bytes,6,rep,name=treasure_house,json=treasureHouse,proto3" json:"treasure_house,omitempty"`
	Boss                    []*BossTheme                       `protobuf:"bytes,7,rep,name=boss,proto3" json:"boss,omitempty"`
	ExtraBuff               *ExtraBuff                         `protobuf:"bytes,8,opt,name=extra_buff,json=extraBuff,proto3" json:"extra_buff,omitempty"`
	AiSkin                  []*FloatingAiSkin                  `protobuf:"bytes,9,rep,name=ai_skin,json=aiSkin,proto3" json:"ai_skin,omitempty"`
	AiSkinRate              []*FloatingAiSkinRateInfo          `protobuf:"bytes,10,rep,name=ai_skin_rate,json=aiSkinRate,proto3" json:"ai_skin_rate,omitempty"`
	AiKilleffect            []*FloatingAiKillEffect            `protobuf:"bytes,11,rep,name=ai_killeffect,json=aiKilleffect,proto3" json:"ai_killeffect,omitempty"`
	AiKilleffectRate        []*FloatingAiKillEffectRateInfo    `protobuf:"bytes,12,rep,name=ai_killeffect_rate,json=aiKilleffectRate,proto3" json:"ai_killeffect_rate,omitempty"`
	MainMapTheme            []*FloatingMainMapTheme            `protobuf:"bytes,13,rep,name=main_map_theme,json=mainMapTheme,proto3" json:"main_map_theme,omitempty"`
	IllustrateConfig        []*IllustrateConfig                `protobuf:"bytes,14,rep,name=illustrate_config,json=illustrateConfig,proto3" json:"illustrate_config,omitempty"`
	IconStartTime           int64                              `protobuf:"varint,15,opt,name=icon_start_time,json=iconStartTime,proto3" json:"icon_start_time,omitempty"`
	IconEndTime             int64                              `protobuf:"varint,16,opt,name=icon_end_time,json=iconEndTime,proto3" json:"icon_end_time,omitempty"`
	HomepageUrl             string                             `protobuf:"bytes,17,opt,name=homepage_url,json=homepageUrl,proto3" json:"homepage_url,omitempty"`
}

func (x *EndlessFloatingV2) Reset() {
	*x = EndlessFloatingV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessFloatingV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessFloatingV2) ProtoMessage() {}

func (x *EndlessFloatingV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessFloatingV2.ProtoReflect.Descriptor instead.
func (*EndlessFloatingV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{29}
}

func (x *EndlessFloatingV2) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *EndlessFloatingV2) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetFloatingRefreshConfigV2() []*IllustrateFloatingRefreshConfig {
	if x != nil {
		return x.FloatingRefreshConfigV2
	}
	return nil
}

func (x *EndlessFloatingV2) GetFloatingConfig() []*FloatingInfo {
	if x != nil {
		return x.FloatingConfig
	}
	return nil
}

func (x *EndlessFloatingV2) GetTreasureHouse() []*TreasureHouseThemeInfo {
	if x != nil {
		return x.TreasureHouse
	}
	return nil
}

func (x *EndlessFloatingV2) GetBoss() []*BossTheme {
	if x != nil {
		return x.Boss
	}
	return nil
}

func (x *EndlessFloatingV2) GetExtraBuff() *ExtraBuff {
	if x != nil {
		return x.ExtraBuff
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiSkin() []*FloatingAiSkin {
	if x != nil {
		return x.AiSkin
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiSkinRate() []*FloatingAiSkinRateInfo {
	if x != nil {
		return x.AiSkinRate
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiKilleffect() []*FloatingAiKillEffect {
	if x != nil {
		return x.AiKilleffect
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiKilleffectRate() []*FloatingAiKillEffectRateInfo {
	if x != nil {
		return x.AiKilleffectRate
	}
	return nil
}

func (x *EndlessFloatingV2) GetMainMapTheme() []*FloatingMainMapTheme {
	if x != nil {
		return x.MainMapTheme
	}
	return nil
}

func (x *EndlessFloatingV2) GetIllustrateConfig() []*IllustrateConfig {
	if x != nil {
		return x.IllustrateConfig
	}
	return nil
}

func (x *EndlessFloatingV2) GetIconStartTime() int64 {
	if x != nil {
		return x.IconStartTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetIconEndTime() int64 {
	if x != nil {
		return x.IconEndTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetHomepageUrl() string {
	if x != nil {
		return x.HomepageUrl
	}
	return ""
}

type IllustrateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *IllustrateConfig) Reset() {
	*x = IllustrateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllustrateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllustrateConfig) ProtoMessage() {}

func (x *IllustrateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllustrateConfig.ProtoReflect.Descriptor instead.
func (*IllustrateConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{30}
}

func (x *IllustrateConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IllustrateConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type IllustrateFloatingRefreshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                int32                  `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	StartTime             int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               int64                  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FloatingRefreshConfig *FloatingRefreshConfig `protobuf:"bytes,4,opt,name=floating_refresh_config,json=floatingRefreshConfig,proto3" json:"floating_refresh_config,omitempty"`
}

func (x *IllustrateFloatingRefreshConfig) Reset() {
	*x = IllustrateFloatingRefreshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllustrateFloatingRefreshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllustrateFloatingRefreshConfig) ProtoMessage() {}

func (x *IllustrateFloatingRefreshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllustrateFloatingRefreshConfig.ProtoReflect.Descriptor instead.
func (*IllustrateFloatingRefreshConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{31}
}

func (x *IllustrateFloatingRefreshConfig) GetPoolId() int32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetFloatingRefreshConfig() *FloatingRefreshConfig {
	if x != nil {
		return x.FloatingRefreshConfig
	}
	return nil
}

type FloatingRefreshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshInterval     []int32 `protobuf:"varint,1,rep,packed,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	FloatingKind        []int32 `protobuf:"varint,2,rep,packed,name=floating_kind,json=floatingKind,proto3" json:"floating_kind,omitempty"`
	FloatingNum         []int32 `protobuf:"varint,3,rep,packed,name=floating_num,json=floatingNum,proto3" json:"floating_num,omitempty"`
	FloatingRange       int32   `protobuf:"varint,4,opt,name=floating_range,json=floatingRange,proto3" json:"floating_range,omitempty"`
	FloatingMinDistance int32   `protobuf:"varint,5,opt,name=floating_min_distance,json=floatingMinDistance,proto3" json:"floating_min_distance,omitempty"`
	WallRate            int32   `protobuf:"varint,6,opt,name=wall_rate,json=wallRate,proto3" json:"wall_rate,omitempty"`
	WallDistance        []int32 `protobuf:"varint,7,rep,packed,name=wall_distance,json=wallDistance,proto3" json:"wall_distance,omitempty"`
	WallFloatingNum     int32   `protobuf:"varint,8,opt,name=wall_floating_num,json=wallFloatingNum,proto3" json:"wall_floating_num,omitempty"`
}

func (x *FloatingRefreshConfig) Reset() {
	*x = FloatingRefreshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingRefreshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingRefreshConfig) ProtoMessage() {}

func (x *FloatingRefreshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingRefreshConfig.ProtoReflect.Descriptor instead.
func (*FloatingRefreshConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{32}
}

func (x *FloatingRefreshConfig) GetRefreshInterval() []int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingKind() []int32 {
	if x != nil {
		return x.FloatingKind
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingNum() []int32 {
	if x != nil {
		return x.FloatingNum
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingRange() int32 {
	if x != nil {
		return x.FloatingRange
	}
	return 0
}

func (x *FloatingRefreshConfig) GetFloatingMinDistance() int32 {
	if x != nil {
		return x.FloatingMinDistance
	}
	return 0
}

func (x *FloatingRefreshConfig) GetWallRate() int32 {
	if x != nil {
		return x.WallRate
	}
	return 0
}

func (x *FloatingRefreshConfig) GetWallDistance() []int32 {
	if x != nil {
		return x.WallDistance
	}
	return nil
}

func (x *FloatingRefreshConfig) GetWallFloatingNum() int32 {
	if x != nil {
		return x.WallFloatingNum
	}
	return 0
}

type FloatingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                  string  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	LengthLimit           int32   `protobuf:"varint,4,opt,name=length_limit,json=lengthLimit,proto3" json:"length_limit,omitempty"`
	TimeLimit             int32   `protobuf:"varint,5,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	NotCollectAllRate     int32   `protobuf:"varint,6,opt,name=not_collect_all_rate,json=notCollectAllRate,proto3" json:"not_collect_all_rate,omitempty"`
	CollectAllRate        int32   `protobuf:"varint,7,opt,name=collect_all_rate,json=collectAllRate,proto3" json:"collect_all_rate,omitempty"`
	FirstAddScore         int32   `protobuf:"varint,8,opt,name=first_add_score,json=firstAddScore,proto3" json:"first_add_score,omitempty"`
	AddScore              int32   `protobuf:"varint,9,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	Imgurl                string  `protobuf:"bytes,10,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Area                  string  `protobuf:"bytes,11,opt,name=area,proto3" json:"area,omitempty"`
	NeedNum               int32   `protobuf:"varint,12,opt,name=need_num,json=needNum,proto3" json:"need_num,omitempty"`
	DiamondLimit          int32   `protobuf:"varint,13,opt,name=diamond_limit,json=diamondLimit,proto3" json:"diamond_limit,omitempty"`
	ReliveLimit           int32   `protobuf:"varint,14,opt,name=relive_limit,json=reliveLimit,proto3" json:"relive_limit,omitempty"`
	IsRare                int32   `protobuf:"varint,15,opt,name=is_rare,json=isRare,proto3" json:"is_rare,omitempty"`
	ImgScale              float32 `protobuf:"fixed32,16,opt,name=img_scale,json=imgScale,proto3" json:"img_scale,omitempty"`
	Maps                  []int32 `protobuf:"varint,17,rep,packed,name=maps,proto3" json:"maps,omitempty"`
	Period                string  `protobuf:"bytes,18,opt,name=period,proto3" json:"period,omitempty"`
	MiddleItemId          int32   `protobuf:"varint,19,opt,name=middle_item_id,json=middleItemId,proto3" json:"middle_item_id,omitempty"`
	UnlockDesc            string  `protobuf:"bytes,20,opt,name=unlock_desc,json=unlockDesc,proto3" json:"unlock_desc,omitempty"`
	TotalLimit            int32   `protobuf:"varint,21,opt,name=total_limit,json=totalLimit,proto3" json:"total_limit,omitempty"`
	WallNotCollectAllRate int32   `protobuf:"varint,22,opt,name=wall_not_collect_all_rate,json=wallNotCollectAllRate,proto3" json:"wall_not_collect_all_rate,omitempty"`
	WallCollectAllRate    int32   `protobuf:"varint,23,opt,name=wall_collect_all_rate,json=wallCollectAllRate,proto3" json:"wall_collect_all_rate,omitempty"`
	Type                  int32   `protobuf:"varint,24,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FloatingInfo) Reset() {
	*x = FloatingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingInfo) ProtoMessage() {}

func (x *FloatingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingInfo.ProtoReflect.Descriptor instead.
func (*FloatingInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{33}
}

func (x *FloatingInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FloatingInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FloatingInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FloatingInfo) GetLengthLimit() int32 {
	if x != nil {
		return x.LengthLimit
	}
	return 0
}

func (x *FloatingInfo) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *FloatingInfo) GetNotCollectAllRate() int32 {
	if x != nil {
		return x.NotCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetCollectAllRate() int32 {
	if x != nil {
		return x.CollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetFirstAddScore() int32 {
	if x != nil {
		return x.FirstAddScore
	}
	return 0
}

func (x *FloatingInfo) GetAddScore() int32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *FloatingInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *FloatingInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *FloatingInfo) GetNeedNum() int32 {
	if x != nil {
		return x.NeedNum
	}
	return 0
}

func (x *FloatingInfo) GetDiamondLimit() int32 {
	if x != nil {
		return x.DiamondLimit
	}
	return 0
}

func (x *FloatingInfo) GetReliveLimit() int32 {
	if x != nil {
		return x.ReliveLimit
	}
	return 0
}

func (x *FloatingInfo) GetIsRare() int32 {
	if x != nil {
		return x.IsRare
	}
	return 0
}

func (x *FloatingInfo) GetImgScale() float32 {
	if x != nil {
		return x.ImgScale
	}
	return 0
}

func (x *FloatingInfo) GetMaps() []int32 {
	if x != nil {
		return x.Maps
	}
	return nil
}

func (x *FloatingInfo) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *FloatingInfo) GetMiddleItemId() int32 {
	if x != nil {
		return x.MiddleItemId
	}
	return 0
}

func (x *FloatingInfo) GetUnlockDesc() string {
	if x != nil {
		return x.UnlockDesc
	}
	return ""
}

func (x *FloatingInfo) GetTotalLimit() int32 {
	if x != nil {
		return x.TotalLimit
	}
	return 0
}

func (x *FloatingInfo) GetWallNotCollectAllRate() int32 {
	if x != nil {
		return x.WallNotCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetWallCollectAllRate() int32 {
	if x != nil {
		return x.WallCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type TreasureHouseThemeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId               int32  `protobuf:"varint,1,opt,name=ThemeId,proto3" json:"ThemeId,omitempty"`
	MapAssetPath          string `protobuf:"bytes,2,opt,name=MapAssetPath,proto3" json:"MapAssetPath,omitempty"`
	CenterSpawnPrefabPath string `protobuf:"bytes,3,opt,name=CenterSpawnPrefabPath,proto3" json:"CenterSpawnPrefabPath,omitempty"`
	CandyElementId        int32  `protobuf:"varint,4,opt,name=CandyElementId,proto3" json:"CandyElementId,omitempty"`
	MushroomElementId     int32  `protobuf:"varint,5,opt,name=MushroomElementId,proto3" json:"MushroomElementId,omitempty"`
	SpawnScale            int32  `protobuf:"varint,6,opt,name=SpawnScale,proto3" json:"SpawnScale,omitempty"`
	MushRoomId            int32  `protobuf:"varint,7,opt,name=MushRoomId,proto3" json:"MushRoomId,omitempty"`
	BroadcastUrl          string `protobuf:"bytes,8,opt,name=broadcast_url,json=broadcastUrl,proto3" json:"broadcast_url,omitempty"`
	ProgressContent       string `protobuf:"bytes,9,opt,name=progress_content,json=progressContent,proto3" json:"progress_content,omitempty"`
	StartTime             int32  `protobuf:"varint,10,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime               int32  `protobuf:"varint,11,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *TreasureHouseThemeInfo) Reset() {
	*x = TreasureHouseThemeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureHouseThemeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureHouseThemeInfo) ProtoMessage() {}

func (x *TreasureHouseThemeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureHouseThemeInfo.ProtoReflect.Descriptor instead.
func (*TreasureHouseThemeInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{34}
}

func (x *TreasureHouseThemeInfo) GetThemeId() int32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMapAssetPath() string {
	if x != nil {
		return x.MapAssetPath
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetCenterSpawnPrefabPath() string {
	if x != nil {
		return x.CenterSpawnPrefabPath
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetCandyElementId() int32 {
	if x != nil {
		return x.CandyElementId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMushroomElementId() int32 {
	if x != nil {
		return x.MushroomElementId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetSpawnScale() int32 {
	if x != nil {
		return x.SpawnScale
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMushRoomId() int32 {
	if x != nil {
		return x.MushRoomId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetBroadcastUrl() string {
	if x != nil {
		return x.BroadcastUrl
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetProgressContent() string {
	if x != nil {
		return x.ProgressContent
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type BossTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId         int32   `protobuf:"varint,1,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	BossFirecracker []int32 `protobuf:"varint,2,rep,packed,name=boss_firecracker,json=bossFirecracker,proto3" json:"boss_firecracker,omitempty"`
	Blood           string  `protobuf:"bytes,3,opt,name=blood,proto3" json:"blood,omitempty"`
	Desc            string  `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	EntityId        int32   `protobuf:"varint,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	AddScore        int32   `protobuf:"varint,6,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	AddFloating     []int32 `protobuf:"varint,7,rep,packed,name=add_floating,json=addFloating,proto3" json:"add_floating,omitempty"`
	AddFloatingRate []int32 `protobuf:"varint,8,rep,packed,name=add_floating_rate,json=addFloatingRate,proto3" json:"add_floating_rate,omitempty"`
	PropId          int32   `protobuf:"varint,9,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	PropTime        int32   `protobuf:"varint,10,opt,name=prop_time,json=propTime,proto3" json:"prop_time,omitempty"`
	StartTime       int64   `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64   `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type            int32   `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BossTheme) Reset() {
	*x = BossTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossTheme) ProtoMessage() {}

func (x *BossTheme) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossTheme.ProtoReflect.Descriptor instead.
func (*BossTheme) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{35}
}

func (x *BossTheme) GetThemeId() int32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *BossTheme) GetBossFirecracker() []int32 {
	if x != nil {
		return x.BossFirecracker
	}
	return nil
}

func (x *BossTheme) GetBlood() string {
	if x != nil {
		return x.Blood
	}
	return ""
}

func (x *BossTheme) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BossTheme) GetEntityId() int32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *BossTheme) GetAddScore() int32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *BossTheme) GetAddFloating() []int32 {
	if x != nil {
		return x.AddFloating
	}
	return nil
}

func (x *BossTheme) GetAddFloatingRate() []int32 {
	if x != nil {
		return x.AddFloatingRate
	}
	return nil
}

func (x *BossTheme) GetPropId() int32 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *BossTheme) GetPropTime() int32 {
	if x != nil {
		return x.PropTime
	}
	return 0
}

func (x *BossTheme) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BossTheme) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BossTheme) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ExtraBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColdSecond int32                      `protobuf:"varint,1,opt,name=cold_second,json=coldSecond,proto3" json:"cold_second,omitempty"`
	Interval   int32                      `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	DailyLimit int32                      `protobuf:"varint,3,opt,name=daily_limit,json=dailyLimit,proto3" json:"daily_limit,omitempty"`
	BuffList   []*ExtraBuff_ExtraBuffInfo `protobuf:"bytes,4,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
}

func (x *ExtraBuff) Reset() {
	*x = ExtraBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraBuff) ProtoMessage() {}

func (x *ExtraBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraBuff.ProtoReflect.Descriptor instead.
func (*ExtraBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{36}
}

func (x *ExtraBuff) GetColdSecond() int32 {
	if x != nil {
		return x.ColdSecond
	}
	return 0
}

func (x *ExtraBuff) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ExtraBuff) GetDailyLimit() int32 {
	if x != nil {
		return x.DailyLimit
	}
	return 0
}

func (x *ExtraBuff) GetBuffList() []*ExtraBuff_ExtraBuffInfo {
	if x != nil {
		return x.BuffList
	}
	return nil
}

type FloatingAiSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinId       int32 `protobuf:"varint,1,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	RandomWeight int32 `protobuf:"varint,2,opt,name=random_weight,json=randomWeight,proto3" json:"random_weight,omitempty"`
	StartTime    int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IllustrateId int32 `protobuf:"varint,5,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
}

func (x *FloatingAiSkin) Reset() {
	*x = FloatingAiSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiSkin) ProtoMessage() {}

func (x *FloatingAiSkin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiSkin.ProtoReflect.Descriptor instead.
func (*FloatingAiSkin) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{37}
}

func (x *FloatingAiSkin) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *FloatingAiSkin) GetRandomWeight() int32 {
	if x != nil {
		return x.RandomWeight
	}
	return 0
}

func (x *FloatingAiSkin) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FloatingAiSkin) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FloatingAiSkin) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

type FloatingAiSkinRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId    int32 `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	SpecialSkinRate int32 `protobuf:"varint,2,opt,name=special_skin_rate,json=specialSkinRate,proto3" json:"special_skin_rate,omitempty"`
}

func (x *FloatingAiSkinRateInfo) Reset() {
	*x = FloatingAiSkinRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiSkinRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiSkinRateInfo) ProtoMessage() {}

func (x *FloatingAiSkinRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiSkinRateInfo.ProtoReflect.Descriptor instead.
func (*FloatingAiSkinRateInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{38}
}

func (x *FloatingAiSkinRateInfo) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingAiSkinRateInfo) GetSpecialSkinRate() int32 {
	if x != nil {
		return x.SpecialSkinRate
	}
	return 0
}

type FloatingAiKillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillEffectId int32 `protobuf:"varint,1,opt,name=kill_effect_id,json=killEffectId,proto3" json:"kill_effect_id,omitempty"`
	RandomWeight int32 `protobuf:"varint,2,opt,name=random_weight,json=randomWeight,proto3" json:"random_weight,omitempty"`
	StartTime    int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IllustrateId int32 `protobuf:"varint,5,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
}

func (x *FloatingAiKillEffect) Reset() {
	*x = FloatingAiKillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiKillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiKillEffect) ProtoMessage() {}

func (x *FloatingAiKillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiKillEffect.ProtoReflect.Descriptor instead.
func (*FloatingAiKillEffect) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{39}
}

func (x *FloatingAiKillEffect) GetKillEffectId() int32 {
	if x != nil {
		return x.KillEffectId
	}
	return 0
}

func (x *FloatingAiKillEffect) GetRandomWeight() int32 {
	if x != nil {
		return x.RandomWeight
	}
	return 0
}

func (x *FloatingAiKillEffect) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FloatingAiKillEffect) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FloatingAiKillEffect) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

type FloatingAiKillEffectRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId          int32 `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	SpecialKillEffectRate int32 `protobuf:"varint,2,opt,name=special_kill_effect_rate,json=specialKillEffectRate,proto3" json:"special_kill_effect_rate,omitempty"`
}

func (x *FloatingAiKillEffectRateInfo) Reset() {
	*x = FloatingAiKillEffectRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiKillEffectRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiKillEffectRateInfo) ProtoMessage() {}

func (x *FloatingAiKillEffectRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiKillEffectRateInfo.ProtoReflect.Descriptor instead.
func (*FloatingAiKillEffectRateInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{40}
}

func (x *FloatingAiKillEffectRateInfo) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingAiKillEffectRateInfo) GetSpecialKillEffectRate() int32 {
	if x != nil {
		return x.SpecialKillEffectRate
	}
	return 0
}

type FloatingMainMapTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId int32  `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	MapAssetPath string `protobuf:"bytes,2,opt,name=map_asset_path,json=mapAssetPath,proto3" json:"map_asset_path,omitempty"`
}

func (x *FloatingMainMapTheme) Reset() {
	*x = FloatingMainMapTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingMainMapTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingMainMapTheme) ProtoMessage() {}

func (x *FloatingMainMapTheme) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingMainMapTheme.ProtoReflect.Descriptor instead.
func (*FloatingMainMapTheme) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{41}
}

func (x *FloatingMainMapTheme) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingMainMapTheme) GetMapAssetPath() string {
	if x != nil {
		return x.MapAssetPath
	}
	return ""
}

type SeasonCaiDan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc   string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Imgurl string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *SeasonCaiDan) Reset() {
	*x = SeasonCaiDan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonCaiDan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonCaiDan) ProtoMessage() {}

func (x *SeasonCaiDan) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonCaiDan.ProtoReflect.Descriptor instead.
func (*SeasonCaiDan) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{42}
}

func (x *SeasonCaiDan) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeasonCaiDan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeasonCaiDan) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SeasonCaiDan) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

type SeasonActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId           int32           `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	StartTime          int64           `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64           `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CaidanList         []*SeasonCaiDan `protobuf:"bytes,4,rep,name=caidan_list,json=caidanList,proto3" json:"caidan_list,omitempty"`
	SeasonHomepageUrl  string          `protobuf:"bytes,5,opt,name=season_homepage_url,json=seasonHomepageUrl,proto3" json:"season_homepage_url,omitempty"`
	PassportUrl        string          `protobuf:"bytes,6,opt,name=passport_url,json=passportUrl,proto3" json:"passport_url,omitempty"`
	TreasureHuntingUrl string          `protobuf:"bytes,7,opt,name=treasure_hunting_url,json=treasureHuntingUrl,proto3" json:"treasure_hunting_url,omitempty"`
	ChaseSeaUrl        string          `protobuf:"bytes,8,opt,name=chase_sea_url,json=chaseSeaUrl,proto3" json:"chase_sea_url,omitempty"`
	TrueLoveUrl        string          `protobuf:"bytes,9,opt,name=true_love_url,json=trueLoveUrl,proto3" json:"true_love_url,omitempty"`
}

func (x *SeasonActivity) Reset() {
	*x = SeasonActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonActivity) ProtoMessage() {}

func (x *SeasonActivity) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonActivity.ProtoReflect.Descriptor instead.
func (*SeasonActivity) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{43}
}

func (x *SeasonActivity) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeasonActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SeasonActivity) GetCaidanList() []*SeasonCaiDan {
	if x != nil {
		return x.CaidanList
	}
	return nil
}

func (x *SeasonActivity) GetSeasonHomepageUrl() string {
	if x != nil {
		return x.SeasonHomepageUrl
	}
	return ""
}

func (x *SeasonActivity) GetPassportUrl() string {
	if x != nil {
		return x.PassportUrl
	}
	return ""
}

func (x *SeasonActivity) GetTreasureHuntingUrl() string {
	if x != nil {
		return x.TreasureHuntingUrl
	}
	return ""
}

func (x *SeasonActivity) GetChaseSeaUrl() string {
	if x != nil {
		return x.ChaseSeaUrl
	}
	return ""
}

func (x *SeasonActivity) GetTrueLoveUrl() string {
	if x != nil {
		return x.TrueLoveUrl
	}
	return ""
}

type NewbieConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndlessShowCount int32                    `protobuf:"varint,1,opt,name=endless_show_count,json=endlessShowCount,proto3" json:"endless_show_count,omitempty"` // 新手无尽玩几局强制弹出引导
	DayList          []*NewbieSingleDayReward `protobuf:"bytes,2,rep,name=day_list,json=dayList,proto3" json:"day_list,omitempty"`
}

func (x *NewbieConfig) Reset() {
	*x = NewbieConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieConfig) ProtoMessage() {}

func (x *NewbieConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieConfig.ProtoReflect.Descriptor instead.
func (*NewbieConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{44}
}

func (x *NewbieConfig) GetEndlessShowCount() int32 {
	if x != nil {
		return x.EndlessShowCount
	}
	return 0
}

func (x *NewbieConfig) GetDayList() []*NewbieSingleDayReward {
	if x != nil {
		return x.DayList
	}
	return nil
}

type NewbieSingleDayReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl     string                 `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	AnimUrl    string                 `protobuf:"bytes,2,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	RewardList []*config.RewardConfig `protobuf:"bytes,3,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *NewbieSingleDayReward) Reset() {
	*x = NewbieSingleDayReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieSingleDayReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieSingleDayReward) ProtoMessage() {}

func (x *NewbieSingleDayReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieSingleDayReward.ProtoReflect.Descriptor instead.
func (*NewbieSingleDayReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{45}
}

func (x *NewbieSingleDayReward) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *NewbieSingleDayReward) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *NewbieSingleDayReward) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type HatchEgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        int64                  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime       int64                  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	DisappearTime    int64                  `protobuf:"varint,3,opt,name=disappear_time,json=disappearTime,proto3" json:"disappear_time,omitempty"`
	Disappear        int32                  `protobuf:"varint,4,opt,name=disappear,proto3" json:"disappear,omitempty"`
	Intro            string                 `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	RewardReviewUrl  string                 `protobuf:"bytes,6,opt,name=reward_review_url,json=rewardReviewUrl,proto3" json:"reward_review_url,omitempty"`
	RewardReviewList []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward_review_list,json=rewardReviewList,proto3" json:"reward_review_list,omitempty"`
	AdReduceSecond   int32                  `protobuf:"varint,8,opt,name=ad_reduce_second,json=adReduceSecond,proto3" json:"ad_reduce_second,omitempty"`
	EggList          []*EggLevelInfo        `protobuf:"bytes,9,rep,name=egg_list,json=eggList,proto3" json:"egg_list,omitempty"`
	TitleDesc        string                 `protobuf:"bytes,10,opt,name=title_desc,json=titleDesc,proto3" json:"title_desc,omitempty"`
	TitleUrl         string                 `protobuf:"bytes,11,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	BgUrl            string                 `protobuf:"bytes,12,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`
}

func (x *HatchEgg) Reset() {
	*x = HatchEgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HatchEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HatchEgg) ProtoMessage() {}

func (x *HatchEgg) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HatchEgg.ProtoReflect.Descriptor instead.
func (*HatchEgg) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{46}
}

func (x *HatchEgg) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HatchEgg) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *HatchEgg) GetDisappearTime() int64 {
	if x != nil {
		return x.DisappearTime
	}
	return 0
}

func (x *HatchEgg) GetDisappear() int32 {
	if x != nil {
		return x.Disappear
	}
	return 0
}

func (x *HatchEgg) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *HatchEgg) GetRewardReviewUrl() string {
	if x != nil {
		return x.RewardReviewUrl
	}
	return ""
}

func (x *HatchEgg) GetRewardReviewList() []*config.RewardConfig {
	if x != nil {
		return x.RewardReviewList
	}
	return nil
}

func (x *HatchEgg) GetAdReduceSecond() int32 {
	if x != nil {
		return x.AdReduceSecond
	}
	return 0
}

func (x *HatchEgg) GetEggList() []*EggLevelInfo {
	if x != nil {
		return x.EggList
	}
	return nil
}

func (x *HatchEgg) GetTitleDesc() string {
	if x != nil {
		return x.TitleDesc
	}
	return ""
}

func (x *HatchEgg) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

func (x *HatchEgg) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

type EggLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardList   []*config.RewardConfig `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`        // 奖励配置
	Level        int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                   // 等级 1 普通；2 中级；3高级
	NeedCollect  int32                  `protobuf:"varint,3,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"`    // 每个蛋需要收集数量
	HatchTime    int64                  `protobuf:"varint,4,opt,name=hatch_time,json=hatchTime,proto3" json:"hatch_time,omitempty"`          // 孵化时间
	DiamondValue int32                  `protobuf:"varint,5,opt,name=diamond_value,json=diamondValue,proto3" json:"diamond_value,omitempty"` // 彩蛋价值
}

func (x *EggLevelInfo) Reset() {
	*x = EggLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggLevelInfo) ProtoMessage() {}

func (x *EggLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggLevelInfo.ProtoReflect.Descriptor instead.
func (*EggLevelInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{47}
}

func (x *EggLevelInfo) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *EggLevelInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EggLevelInfo) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *EggLevelInfo) GetHatchTime() int64 {
	if x != nil {
		return x.HatchTime
	}
	return 0
}

func (x *EggLevelInfo) GetDiamondValue() int32 {
	if x != nil {
		return x.DiamondValue
	}
	return 0
}

type MeetupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define fields for MeetupConfig
	HomepageIcon      string              `protobuf:"bytes,1,opt,name=homepage_icon,json=homepageIcon,proto3" json:"homepage_icon,omitempty"`
	HomepageIconLink  string              `protobuf:"bytes,2,opt,name=homepage_icon_link,json=homepageIconLink,proto3" json:"homepage_icon_link,omitempty"`
	HomepageIconStart int64               `protobuf:"varint,3,opt,name=homepage_icon_start,json=homepageIconStart,proto3" json:"homepage_icon_start,omitempty"`
	HomepageIconEnd   int64               `protobuf:"varint,4,opt,name=homepage_icon_end,json=homepageIconEnd,proto3" json:"homepage_icon_end,omitempty"`
	List              []*MeetupConfigItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MeetupConfig) Reset() {
	*x = MeetupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetupConfig) ProtoMessage() {}

func (x *MeetupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetupConfig.ProtoReflect.Descriptor instead.
func (*MeetupConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{48}
}

func (x *MeetupConfig) GetHomepageIcon() string {
	if x != nil {
		return x.HomepageIcon
	}
	return ""
}

func (x *MeetupConfig) GetHomepageIconLink() string {
	if x != nil {
		return x.HomepageIconLink
	}
	return ""
}

func (x *MeetupConfig) GetHomepageIconStart() int64 {
	if x != nil {
		return x.HomepageIconStart
	}
	return 0
}

func (x *MeetupConfig) GetHomepageIconEnd() int64 {
	if x != nil {
		return x.HomepageIconEnd
	}
	return 0
}

func (x *MeetupConfig) GetList() []*MeetupConfigItem {
	if x != nil {
		return x.List
	}
	return nil
}

type MeetupConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define fields for MeetupConfigItem
	ActId      int32              `protobuf:"varint,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	FinishTime int64              `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Intro      string             `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro,omitempty"`
	DaysList   []*SingleDayReward `protobuf:"bytes,4,rep,name=days_list,json=daysList,proto3" json:"days_list,omitempty"`
}

func (x *MeetupConfigItem) Reset() {
	*x = MeetupConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetupConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetupConfigItem) ProtoMessage() {}

func (x *MeetupConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetupConfigItem.ProtoReflect.Descriptor instead.
func (*MeetupConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{49}
}

func (x *MeetupConfigItem) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *MeetupConfigItem) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *MeetupConfigItem) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *MeetupConfigItem) GetDaysList() []*SingleDayReward {
	if x != nil {
		return x.DaysList
	}
	return nil
}

type SingleDayReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthList []*SingleRewardItem `protobuf:"bytes,1,rep,name=length_list,json=lengthList,proto3" json:"length_list,omitempty"`
}

func (x *SingleDayReward) Reset() {
	*x = SingleDayReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDayReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDayReward) ProtoMessage() {}

func (x *SingleDayReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDayReward.ProtoReflect.Descriptor instead.
func (*SingleDayReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{50}
}

func (x *SingleDayReward) GetLengthList() []*SingleRewardItem {
	if x != nil {
		return x.LengthList
	}
	return nil
}

type SingleRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UnlockDays   int32                  `protobuf:"varint,2,opt,name=unlock_days,json=unlockDays,proto3" json:"unlock_days,omitempty"`
	UnlockLength int32                  `protobuf:"varint,3,opt,name=unlock_length,json=unlockLength,proto3" json:"unlock_length,omitempty"`
	Price        int32                  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Diamond      int32                  `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Desc         string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	PopupCount   int32                  `protobuf:"varint,7,opt,name=popup_count,json=popupCount,proto3" json:"popup_count,omitempty"` //弹窗次数
	Important    int32                  `protobuf:"varint,8,opt,name=important,proto3" json:"important,omitempty"`                     //是否重点奖励，0否，1是
	WatchAd      int32                  `protobuf:"varint,9,opt,name=watch_ad,json=watchAd,proto3" json:"watch_ad,omitempty"`
	RewardList   []*config.RewardConfig `protobuf:"bytes,10,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	RmbPrice     int32                  `protobuf:"varint,11,opt,name=rmb_price,json=rmbPrice,proto3" json:"rmb_price,omitempty"` // rmb购买价格
	PackId       int32                  `protobuf:"varint,12,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`       // rmb购买礼包id
	GoodsId      int32                  `protobuf:"varint,13,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`    // 礼包档位id
}

func (x *SingleRewardItem) Reset() {
	*x = SingleRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRewardItem) ProtoMessage() {}

func (x *SingleRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRewardItem.ProtoReflect.Descriptor instead.
func (*SingleRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{51}
}

func (x *SingleRewardItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SingleRewardItem) GetUnlockDays() int32 {
	if x != nil {
		return x.UnlockDays
	}
	return 0
}

func (x *SingleRewardItem) GetUnlockLength() int32 {
	if x != nil {
		return x.UnlockLength
	}
	return 0
}

func (x *SingleRewardItem) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SingleRewardItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *SingleRewardItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SingleRewardItem) GetPopupCount() int32 {
	if x != nil {
		return x.PopupCount
	}
	return 0
}

func (x *SingleRewardItem) GetImportant() int32 {
	if x != nil {
		return x.Important
	}
	return 0
}

func (x *SingleRewardItem) GetWatchAd() int32 {
	if x != nil {
		return x.WatchAd
	}
	return 0
}

func (x *SingleRewardItem) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *SingleRewardItem) GetRmbPrice() int32 {
	if x != nil {
		return x.RmbPrice
	}
	return 0
}

func (x *SingleRewardItem) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *SingleRewardItem) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type EndlessRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleImg string           `protobuf:"bytes,1,opt,name=title_img,json=titleImg,proto3" json:"title_img,omitempty"`
	Intro    string           `protobuf:"bytes,2,opt,name=intro,proto3" json:"intro,omitempty"`
	ActId    int32            `protobuf:"varint,3,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	Period   string           `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	List     []*EndlessReward `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EndlessRewardConfig) Reset() {
	*x = EndlessRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessRewardConfig) ProtoMessage() {}

func (x *EndlessRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessRewardConfig.ProtoReflect.Descriptor instead.
func (*EndlessRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{52}
}

func (x *EndlessRewardConfig) GetTitleImg() string {
	if x != nil {
		return x.TitleImg
	}
	return ""
}

func (x *EndlessRewardConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *EndlessRewardConfig) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *EndlessRewardConfig) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *EndlessRewardConfig) GetList() []*EndlessReward {
	if x != nil {
		return x.List
	}
	return nil
}

type EndlessReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc         string               `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Important    int32                `protobuf:"varint,3,opt,name=important,proto3" json:"important,omitempty"`                           //是否重点奖励，0否，1是
	PopupCount   int32                `protobuf:"varint,4,opt,name=popup_count,json=popupCount,proto3" json:"popup_count,omitempty"`       //弹窗次数
	DiamondPrice int32                `protobuf:"varint,5,opt,name=diamond_price,json=diamondPrice,proto3" json:"diamond_price,omitempty"` // 增加苹果购买配置，0表示不可用苹果购买，>0表示苹果价格
	UnlockLength int32                `protobuf:"varint,6,opt,name=unlock_length,json=unlockLength,proto3" json:"unlock_length,omitempty"`
	UnlockTime   int64                `protobuf:"varint,7,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"` // 默认0，没有时间限制
	UnlockTip    string               `protobuf:"bytes,8,opt,name=unlock_tip,json=unlockTip,proto3" json:"unlock_tip,omitempty"`     // 某日活动开启后才可领取
	Diamond      int32                `protobuf:"varint,9,opt,name=diamond,proto3" json:"diamond,omitempty"`                         // 苹果购买价格
	WatchAd      int32                `protobuf:"varint,10,opt,name=watch_ad,json=watchAd,proto3" json:"watch_ad,omitempty"`         //需要看广告次数
	RmbPrice     int32                `protobuf:"varint,11,opt,name=rmb_price,json=rmbPrice,proto3" json:"rmb_price,omitempty"`      // rmb购买价格
	PackId       int32                `protobuf:"varint,12,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`            // rmb购买礼包id
	GoodsId      int32                `protobuf:"varint,13,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`         // 礼包档位id
	Reward       *config.RewardConfig `protobuf:"bytes,14,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *EndlessReward) Reset() {
	*x = EndlessReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessReward) ProtoMessage() {}

func (x *EndlessReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessReward.ProtoReflect.Descriptor instead.
func (*EndlessReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{53}
}

func (x *EndlessReward) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EndlessReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *EndlessReward) GetImportant() int32 {
	if x != nil {
		return x.Important
	}
	return 0
}

func (x *EndlessReward) GetPopupCount() int32 {
	if x != nil {
		return x.PopupCount
	}
	return 0
}

func (x *EndlessReward) GetDiamondPrice() int32 {
	if x != nil {
		return x.DiamondPrice
	}
	return 0
}

func (x *EndlessReward) GetUnlockLength() int32 {
	if x != nil {
		return x.UnlockLength
	}
	return 0
}

func (x *EndlessReward) GetUnlockTime() int64 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

func (x *EndlessReward) GetUnlockTip() string {
	if x != nil {
		return x.UnlockTip
	}
	return ""
}

func (x *EndlessReward) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *EndlessReward) GetWatchAd() int32 {
	if x != nil {
		return x.WatchAd
	}
	return 0
}

func (x *EndlessReward) GetRmbPrice() int32 {
	if x != nil {
		return x.RmbPrice
	}
	return 0
}

func (x *EndlessReward) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *EndlessReward) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *EndlessReward) GetReward() *config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

type PassCheckV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int32               `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Common        *PassCommonConfig   `protobuf:"bytes,2,opt,name=common,proto3" json:"common,omitempty"`
	RewardConfig  *PassRewardConfig   `protobuf:"bytes,3,opt,name=reward_config,json=rewardConfig,proto3" json:"reward_config,omitempty"`
	TaskConfig    *PassTaskConfig     `protobuf:"bytes,4,opt,name=task_config,json=taskConfig,proto3" json:"task_config,omitempty"`
	StoreConfig   *PassStoreConfig    `protobuf:"bytes,5,opt,name=store_config,json=storeConfig,proto3" json:"store_config,omitempty"`
	MaxBreakLevel int32               `protobuf:"varint,6,opt,name=max_break_level,json=maxBreakLevel,proto3" json:"max_break_level,omitempty"` // 最大突破礼等级
	TotalReward   []*BattleRankReward `protobuf:"bytes,7,rep,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`          //榜单奖励
}

func (x *PassCheckV2) Reset() {
	*x = PassCheckV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckV2) ProtoMessage() {}

func (x *PassCheckV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckV2.ProtoReflect.Descriptor instead.
func (*PassCheckV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{54}
}

func (x *PassCheckV2) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PassCheckV2) GetCommon() *PassCommonConfig {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *PassCheckV2) GetRewardConfig() *PassRewardConfig {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

func (x *PassCheckV2) GetTaskConfig() *PassTaskConfig {
	if x != nil {
		return x.TaskConfig
	}
	return nil
}

func (x *PassCheckV2) GetStoreConfig() *PassStoreConfig {
	if x != nil {
		return x.StoreConfig
	}
	return nil
}

func (x *PassCheckV2) GetMaxBreakLevel() int32 {
	if x != nil {
		return x.MaxBreakLevel
	}
	return 0
}

func (x *PassCheckV2) GetTotalReward() []*BattleRankReward {
	if x != nil {
		return x.TotalReward
	}
	return nil
}

type PassCommonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	StartTime       int64   `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime      int64   `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	ShowFinish      string  `protobuf:"bytes,4,opt,name=show_finish,json=showFinish,proto3" json:"show_finish,omitempty"`
	Season          int32   `protobuf:"varint,5,opt,name=season,proto3" json:"season,omitempty"`
	RuleDesc        string  `protobuf:"bytes,6,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"`                         //玩法说明
	ExpDesc         string  `protobuf:"bytes,7,opt,name=exp_desc,json=expDesc,proto3" json:"exp_desc,omitempty"`                            //积分(经验)说明
	TaskDesc        string  `protobuf:"bytes,8,opt,name=task_desc,json=taskDesc,proto3" json:"task_desc,omitempty"`                         //任务说明
	TopDesc         string  `protobuf:"bytes,9,opt,name=top_desc,json=topDesc,proto3" json:"top_desc,omitempty"`                            //排行榜说明
	TopRewardImgurl string  `protobuf:"bytes,10,opt,name=top_reward_imgurl,json=topRewardImgurl,proto3" json:"top_reward_imgurl,omitempty"` //排行榜奖励说明图
	UpgradeImgurl   string  `protobuf:"bytes,11,opt,name=upgrade_imgurl,json=upgradeImgurl,proto3" json:"upgrade_imgurl,omitempty"`         //进阶说明图
	GuideImgurl     string  `protobuf:"bytes,12,opt,name=guide_imgurl,json=guideImgurl,proto3" json:"guide_imgurl,omitempty"`
	HasExpMode      []int32 `protobuf:"varint,13,rep,packed,name=has_exp_mode,json=hasExpMode,proto3" json:"has_exp_mode,omitempty"` //能获得且要展示经验的游戏模式
	PerRankExp      int32   `protobuf:"varint,14,opt,name=per_rank_exp,json=perRankExp,proto3" json:"per_rank_exp,omitempty"`        //每个等级需要的经验
	// 首页
	BgUrl               string `protobuf:"bytes,15,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`                                             // 背景url
	BgAnimType          int32  `protobuf:"varint,16,opt,name=bg_anim_type,json=bgAnimType,proto3" json:"bg_anim_type,omitempty"`                           // 主页背景动效类型
	MainRewardUrl       string `protobuf:"bytes,17,opt,name=main_reward_url,json=mainRewardUrl,proto3" json:"main_reward_url,omitempty"`                   // 主奖励展示动效svga
	MainRewardAnimType  int32  `protobuf:"varint,18,opt,name=main_reward_anim_type,json=mainRewardAnimType,proto3" json:"main_reward_anim_type,omitempty"` // 主奖励动效类型
	MainRewardBottom    string `protobuf:"bytes,19,opt,name=main_reward_bottom,json=mainRewardBottom,proto3" json:"main_reward_bottom,omitempty"`          // 主奖励底图
	MainRewardCondition string `protobuf:"bytes,20,opt,name=main_reward_condition,json=mainRewardCondition,proto3" json:"main_reward_condition,omitempty"` // 主奖励获取条件文案
	// 通行证进阶
	AdvanceBgUrl      string `protobuf:"bytes,21,opt,name=advance_bg_url,json=advanceBgUrl,proto3" json:"advance_bg_url,omitempty"`                   // 进阶通行证背景url
	AdvanceBgAnimType int32  `protobuf:"varint,22,opt,name=advance_bg_anim_type,json=advanceBgAnimType,proto3" json:"advance_bg_anim_type,omitempty"` // 进阶通行证背景动效类型
	AdvanceHonorUrl   string `protobuf:"bytes,23,opt,name=advance_honor_url,json=advanceHonorUrl,proto3" json:"advance_honor_url,omitempty"`          // 荣耀通行证卡片
	AdvanceLuxuryUrl  string `protobuf:"bytes,24,opt,name=advance_luxury_url,json=advanceLuxuryUrl,proto3" json:"advance_luxury_url,omitempty"`       // 豪华通行证卡片
}

func (x *PassCommonConfig) Reset() {
	*x = PassCommonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCommonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCommonConfig) ProtoMessage() {}

func (x *PassCommonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCommonConfig.ProtoReflect.Descriptor instead.
func (*PassCommonConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{55}
}

func (x *PassCommonConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PassCommonConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PassCommonConfig) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *PassCommonConfig) GetShowFinish() string {
	if x != nil {
		return x.ShowFinish
	}
	return ""
}

func (x *PassCommonConfig) GetSeason() int32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *PassCommonConfig) GetRuleDesc() string {
	if x != nil {
		return x.RuleDesc
	}
	return ""
}

func (x *PassCommonConfig) GetExpDesc() string {
	if x != nil {
		return x.ExpDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTopDesc() string {
	if x != nil {
		return x.TopDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTopRewardImgurl() string {
	if x != nil {
		return x.TopRewardImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetUpgradeImgurl() string {
	if x != nil {
		return x.UpgradeImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetGuideImgurl() string {
	if x != nil {
		return x.GuideImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetHasExpMode() []int32 {
	if x != nil {
		return x.HasExpMode
	}
	return nil
}

func (x *PassCommonConfig) GetPerRankExp() int32 {
	if x != nil {
		return x.PerRankExp
	}
	return 0
}

func (x *PassCommonConfig) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *PassCommonConfig) GetBgAnimType() int32 {
	if x != nil {
		return x.BgAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetMainRewardUrl() string {
	if x != nil {
		return x.MainRewardUrl
	}
	return ""
}

func (x *PassCommonConfig) GetMainRewardAnimType() int32 {
	if x != nil {
		return x.MainRewardAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetMainRewardBottom() string {
	if x != nil {
		return x.MainRewardBottom
	}
	return ""
}

func (x *PassCommonConfig) GetMainRewardCondition() string {
	if x != nil {
		return x.MainRewardCondition
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceBgUrl() string {
	if x != nil {
		return x.AdvanceBgUrl
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceBgAnimType() int32 {
	if x != nil {
		return x.AdvanceBgAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetAdvanceHonorUrl() string {
	if x != nil {
		return x.AdvanceHonorUrl
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceLuxuryUrl() string {
	if x != nil {
		return x.AdvanceLuxuryUrl
	}
	return ""
}

type PassRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfinityRankImgurl string                 `protobuf:"bytes,1,opt,name=infinity_rank_imgurl,json=infinityRankImgurl,proto3" json:"infinity_rank_imgurl,omitempty"`
	NormalRank         int32                  `protobuf:"varint,2,opt,name=normal_rank,json=normalRank,proto3" json:"normal_rank,omitempty"` // 奖励list里超过此数的关卡循环展示
	RewardList         []*PassReward          `protobuf:"bytes,3,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	RewardPreview      *PassRewardPreview     `protobuf:"bytes,4,opt,name=reward_preview,json=rewardPreview,proto3" json:"reward_preview,omitempty"`
	RewardSort         []*config.RewardConfig `protobuf:"bytes,5,rep,name=reward_sort,json=rewardSort,proto3" json:"reward_sort,omitempty"`
}

func (x *PassRewardConfig) Reset() {
	*x = PassRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassRewardConfig) ProtoMessage() {}

func (x *PassRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassRewardConfig.ProtoReflect.Descriptor instead.
func (*PassRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{56}
}

func (x *PassRewardConfig) GetInfinityRankImgurl() string {
	if x != nil {
		return x.InfinityRankImgurl
	}
	return ""
}

func (x *PassRewardConfig) GetNormalRank() int32 {
	if x != nil {
		return x.NormalRank
	}
	return 0
}

func (x *PassRewardConfig) GetRewardList() []*PassReward {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *PassRewardConfig) GetRewardPreview() *PassRewardPreview {
	if x != nil {
		return x.RewardPreview
	}
	return nil
}

func (x *PassRewardConfig) GetRewardSort() []*config.RewardConfig {
	if x != nil {
		return x.RewardSort
	}
	return nil
}

type PassRewardPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeReward []*config.RewardConfig `protobuf:"bytes,1,rep,name=free_reward,json=freeReward,proto3" json:"free_reward,omitempty"`
	HighReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=high_reward,json=highReward,proto3" json:"high_reward,omitempty"`
	// 奖励橱窗
	WindowReward []*WindowReward        `protobuf:"bytes,3,rep,name=window_reward,json=windowReward,proto3" json:"window_reward,omitempty"`
	HonorReward  []*config.RewardConfig `protobuf:"bytes,4,rep,name=honor_reward,json=honorReward,proto3" json:"honor_reward,omitempty"`
	LuxuryReward []*config.RewardConfig `protobuf:"bytes,5,rep,name=luxury_reward,json=luxuryReward,proto3" json:"luxury_reward,omitempty"`
}

func (x *PassRewardPreview) Reset() {
	*x = PassRewardPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassRewardPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassRewardPreview) ProtoMessage() {}

func (x *PassRewardPreview) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassRewardPreview.ProtoReflect.Descriptor instead.
func (*PassRewardPreview) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{57}
}

func (x *PassRewardPreview) GetFreeReward() []*config.RewardConfig {
	if x != nil {
		return x.FreeReward
	}
	return nil
}

func (x *PassRewardPreview) GetHighReward() []*config.RewardConfig {
	if x != nil {
		return x.HighReward
	}
	return nil
}

func (x *PassRewardPreview) GetWindowReward() []*WindowReward {
	if x != nil {
		return x.WindowReward
	}
	return nil
}

func (x *PassRewardPreview) GetHonorReward() []*config.RewardConfig {
	if x != nil {
		return x.HonorReward
	}
	return nil
}

func (x *PassRewardPreview) GetLuxuryReward() []*config.RewardConfig {
	if x != nil {
		return x.LuxuryReward
	}
	return nil
}

type WindowReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId      int32                  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` //物品id
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl      string                 `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Num         int32                  `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	BigNum      string                 `protobuf:"bytes,6,opt,name=big_num,json=bigNum,proto3" json:"big_num,omitempty"`              // 大数展示，为空展示num字段
	UserInfo    string                 `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`        //限时外观和头像框使用
	IsValuable  int32                  `protobuf:"varint,8,opt,name=is_valuable,json=isValuable,proto3" json:"is_valuable,omitempty"` //是否有高价值弹框，默认没有
	WorthLevel  int32                  `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"` //稀有度等级，从 1 开始。0 的话默认为 C 等级
	MarkId      int32                  `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`            //0: 忽略 1: 豪华版通行证加成 2: 回归加成 3: 师徒加成
	Convert     []*config.RewardConfig `protobuf:"bytes,11,rep,name=convert,proto3" json:"convert,omitempty"`                         //奖励折算，没有折算则为空
	Probability int32                  `protobuf:"varint,12,opt,name=probability,proto3" json:"probability,omitempty"`
	UseInfo     string                 `protobuf:"bytes,13,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	Desc        string                 `protobuf:"bytes,14,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *WindowReward) Reset() {
	*x = WindowReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowReward) ProtoMessage() {}

func (x *WindowReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowReward.ProtoReflect.Descriptor instead.
func (*WindowReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{58}
}

func (x *WindowReward) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WindowReward) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *WindowReward) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowReward) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *WindowReward) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WindowReward) GetBigNum() string {
	if x != nil {
		return x.BigNum
	}
	return ""
}

func (x *WindowReward) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

func (x *WindowReward) GetIsValuable() int32 {
	if x != nil {
		return x.IsValuable
	}
	return 0
}

func (x *WindowReward) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *WindowReward) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *WindowReward) GetConvert() []*config.RewardConfig {
	if x != nil {
		return x.Convert
	}
	return nil
}

func (x *WindowReward) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *WindowReward) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *WindowReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type PassReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	FreeReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=free_reward,json=freeReward,proto3" json:"free_reward,omitempty"`
	HighReward []*config.RewardConfig `protobuf:"bytes,3,rep,name=high_reward,json=highReward,proto3" json:"high_reward,omitempty"`
}

func (x *PassReward) Reset() {
	*x = PassReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassReward) ProtoMessage() {}

func (x *PassReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassReward.ProtoReflect.Descriptor instead.
func (*PassReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{59}
}

func (x *PassReward) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PassReward) GetFreeReward() []*config.RewardConfig {
	if x != nil {
		return x.FreeReward
	}
	return nil
}

func (x *PassReward) GetHighReward() []*config.RewardConfig {
	if x != nil {
		return x.HighReward
	}
	return nil
}

type PassTaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonTask   *SeasonTask   `protobuf:"bytes,1,opt,name=season_task,json=seasonTask,proto3" json:"season_task,omitempty"`
	GradeTask    *GradeTask    `protobuf:"bytes,2,opt,name=grade_task,json=gradeTask,proto3" json:"grade_task,omitempty"`
	WeeklyTask   []*WeeklyTask `protobuf:"bytes,3,rep,name=weekly_task,json=weeklyTask,proto3" json:"weekly_task,omitempty"`
	DailyTask    []*DailyTask  `protobuf:"bytes,4,rep,name=daily_task,json=dailyTask,proto3" json:"daily_task,omitempty"`
	WeekExpLimit int64         `protobuf:"varint,5,opt,name=week_exp_limit,json=weekExpLimit,proto3" json:"week_exp_limit,omitempty"`
	DayExpLimit  int64         `protobuf:"varint,6,opt,name=day_exp_limit,json=dayExpLimit,proto3" json:"day_exp_limit,omitempty"`
}

func (x *PassTaskConfig) Reset() {
	*x = PassTaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassTaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTaskConfig) ProtoMessage() {}

func (x *PassTaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTaskConfig.ProtoReflect.Descriptor instead.
func (*PassTaskConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{60}
}

func (x *PassTaskConfig) GetSeasonTask() *SeasonTask {
	if x != nil {
		return x.SeasonTask
	}
	return nil
}

func (x *PassTaskConfig) GetGradeTask() *GradeTask {
	if x != nil {
		return x.GradeTask
	}
	return nil
}

func (x *PassTaskConfig) GetWeeklyTask() []*WeeklyTask {
	if x != nil {
		return x.WeeklyTask
	}
	return nil
}

func (x *PassTaskConfig) GetDailyTask() []*DailyTask {
	if x != nil {
		return x.DailyTask
	}
	return nil
}

func (x *PassTaskConfig) GetWeekExpLimit() int64 {
	if x != nil {
		return x.WeekExpLimit
	}
	return 0
}

func (x *PassTaskConfig) GetDayExpLimit() int64 {
	if x != nil {
		return x.DayExpLimit
	}
	return 0
}

type DailyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc       string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	BtnType    int32  `protobuf:"varint,3,opt,name=btn_type,json=btnType,proto3" json:"btn_type,omitempty"`
	BtnLink    string `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	BtnLinkDev string `protobuf:"bytes,5,opt,name=btn_link_dev,json=btnLinkDev,proto3" json:"btn_link_dev,omitempty"`
}

func (x *DailyTask) Reset() {
	*x = DailyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTask) ProtoMessage() {}

func (x *DailyTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTask.ProtoReflect.Descriptor instead.
func (*DailyTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{61}
}

func (x *DailyTask) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DailyTask) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DailyTask) GetBtnType() int32 {
	if x != nil {
		return x.BtnType
	}
	return 0
}

func (x *DailyTask) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *DailyTask) GetBtnLinkDev() string {
	if x != nil {
		return x.BtnLinkDev
	}
	return ""
}

type WeeklyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64            `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64            `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	TaskList   []*PassTaskModel `protobuf:"bytes,3,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *WeeklyTask) Reset() {
	*x = WeeklyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyTask) ProtoMessage() {}

func (x *WeeklyTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyTask.ProtoReflect.Descriptor instead.
func (*WeeklyTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{62}
}

func (x *WeeklyTask) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WeeklyTask) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *WeeklyTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type SeasonTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*PassTaskModel `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *SeasonTask) Reset() {
	*x = SeasonTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonTask) ProtoMessage() {}

func (x *SeasonTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonTask.ProtoReflect.Descriptor instead.
func (*SeasonTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{63}
}

func (x *SeasonTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type GradeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*PassTaskModel `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *GradeTask) Reset() {
	*x = GradeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeTask) ProtoMessage() {}

func (x *GradeTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeTask.ProtoReflect.Descriptor instead.
func (*GradeTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{64}
}

func (x *GradeTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type PassTaskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          int32  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Desc            string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	BtnLink         string `protobuf:"bytes,3,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	Param           int32  `protobuf:"varint,4,opt,name=param,proto3" json:"param,omitempty"`
	RewardExp       int32  `protobuf:"varint,5,opt,name=reward_exp,json=rewardExp,proto3" json:"reward_exp,omitempty"`
	NeedTaskCardNum int32  `protobuf:"varint,6,opt,name=need_task_card_num,json=needTaskCardNum,proto3" json:"need_task_card_num,omitempty"` // 完成周任务需要的任务卡数量
	Title           string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`                                                 // 日常任务才有
}

func (x *PassTaskModel) Reset() {
	*x = PassTaskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassTaskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTaskModel) ProtoMessage() {}

func (x *PassTaskModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTaskModel.ProtoReflect.Descriptor instead.
func (*PassTaskModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{65}
}

func (x *PassTaskModel) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *PassTaskModel) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PassTaskModel) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *PassTaskModel) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *PassTaskModel) GetRewardExp() int32 {
	if x != nil {
		return x.RewardExp
	}
	return 0
}

func (x *PassTaskModel) GetNeedTaskCardNum() int32 {
	if x != nil {
		return x.NeedTaskCardNum
	}
	return 0
}

func (x *PassTaskModel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type PassStoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankPrice       *config.PriceInfo   `protobuf:"bytes,1,opt,name=rank_price,json=rankPrice,proto3" json:"rank_price,omitempty"`
	ExchangeStore   []*ExchangeStore    `protobuf:"bytes,2,rep,name=exchange_store,json=exchangeStore,proto3" json:"exchange_store,omitempty"`
	HighStoreImgurl string              `protobuf:"bytes,3,opt,name=high_store_imgurl,json=highStoreImgurl,proto3" json:"high_store_imgurl,omitempty"`
	HighStoreAnim   string              `protobuf:"bytes,4,opt,name=high_store_anim,json=highStoreAnim,proto3" json:"high_store_anim,omitempty"`
	HighStore       []*config.PackModel `protobuf:"bytes,5,rep,name=high_store,json=highStore,proto3" json:"high_store,omitempty"`
}

func (x *PassStoreConfig) Reset() {
	*x = PassStoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassStoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassStoreConfig) ProtoMessage() {}

func (x *PassStoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassStoreConfig.ProtoReflect.Descriptor instead.
func (*PassStoreConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{66}
}

func (x *PassStoreConfig) GetRankPrice() *config.PriceInfo {
	if x != nil {
		return x.RankPrice
	}
	return nil
}

func (x *PassStoreConfig) GetExchangeStore() []*ExchangeStore {
	if x != nil {
		return x.ExchangeStore
	}
	return nil
}

func (x *PassStoreConfig) GetHighStoreImgurl() string {
	if x != nil {
		return x.HighStoreImgurl
	}
	return ""
}

func (x *PassStoreConfig) GetHighStoreAnim() string {
	if x != nil {
		return x.HighStoreAnim
	}
	return ""
}

func (x *PassStoreConfig) GetHighStore() []*config.PackModel {
	if x != nil {
		return x.HighStore
	}
	return nil
}

type ExchangeStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          int32          `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId        int32          `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Id            int32          `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"` // 请求兑换接口时传入的id
	Num           int32          `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Name          string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl        string         `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	UseInfo       string         `protobuf:"bytes,7,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	TimeUnit      int64          `protobuf:"varint,8,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Desc          string         `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	BuyLimit      int32          `protobuf:"varint,10,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"` // 次数限制
	Price         *ExchangePrice `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	RankLimit     int32          `protobuf:"varint,12,opt,name=rank_limit,json=rankLimit,proto3" json:"rank_limit,omitempty"`              // 通行证等级
	NeedVip       int32          `protobuf:"varint,13,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`                    // 通行证版本 0免费 1 荣耀 2 豪华
	NabobAddition float32        `protobuf:"fixed32,14,opt,name=nabob_addition,json=nabobAddition,proto3" json:"nabob_addition,omitempty"` // 限购加成百分比，豪华版才有
}

func (x *ExchangeStore) Reset() {
	*x = ExchangeStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeStore) ProtoMessage() {}

func (x *ExchangeStore) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeStore.ProtoReflect.Descriptor instead.
func (*ExchangeStore) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{67}
}

func (x *ExchangeStore) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangeStore) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *ExchangeStore) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeStore) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ExchangeStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeStore) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *ExchangeStore) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *ExchangeStore) GetTimeUnit() int64 {
	if x != nil {
		return x.TimeUnit
	}
	return 0
}

func (x *ExchangeStore) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ExchangeStore) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *ExchangeStore) GetPrice() *ExchangePrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeStore) GetRankLimit() int32 {
	if x != nil {
		return x.RankLimit
	}
	return 0
}

func (x *ExchangeStore) GetNeedVip() int32 {
	if x != nil {
		return x.NeedVip
	}
	return 0
}

func (x *ExchangeStore) GetNabobAddition() float32 {
	if x != nil {
		return x.NabobAddition
	}
	return 0
}

type ExchangePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`         // 类型中间道具11，写死
	Num      int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`           // 兑换需要的通行币数量
	Discount int32 `protobuf:"varint,3,opt,name=discount,proto3" json:"discount,omitempty"` // 如果配置了就用这个作为价格，否则就用 num
}

func (x *ExchangePrice) Reset() {
	*x = ExchangePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangePrice) ProtoMessage() {}

func (x *ExchangePrice) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangePrice.ProtoReflect.Descriptor instead.
func (*ExchangePrice) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{68}
}

func (x *ExchangePrice) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangePrice) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ExchangePrice) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type BattleRankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank     int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	RankDesc string                 `protobuf:"bytes,2,opt,name=rank_desc,json=rankDesc,proto3" json:"rank_desc,omitempty"`
	Mail     string                 `protobuf:"bytes,3,opt,name=mail,proto3" json:"mail,omitempty"`
	Reward   []*config.RewardConfig `protobuf:"bytes,4,rep,name=reward,proto3" json:"reward,omitempty"`
}

func (x *BattleRankReward) Reset() {
	*x = BattleRankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRankReward) ProtoMessage() {}

func (x *BattleRankReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRankReward.ProtoReflect.Descriptor instead.
func (*BattleRankReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{69}
}

func (x *BattleRankReward) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *BattleRankReward) GetRankDesc() string {
	if x != nil {
		return x.RankDesc
	}
	return ""
}

func (x *BattleRankReward) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *BattleRankReward) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

type RankConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime            int64         `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SeasonName         string        `protobuf:"bytes,2,opt,name=season_name,json=seasonName,proto3" json:"season_name,omitempty"`
	SeasonIntroduceUrl string        `protobuf:"bytes,3,opt,name=season_introduce_url,json=seasonIntroduceUrl,proto3" json:"season_introduce_url,omitempty"`
	PrimeKingRange     int32         `protobuf:"varint,4,opt,name=prime_king_range,json=primeKingRange,proto3" json:"prime_king_range,omitempty"` //最强王者数目
	PrimeTopUrls       []string      `protobuf:"bytes,5,rep,name=prime_top_urls,json=primeTopUrls,proto3" json:"prime_top_urls,omitempty"`
	Level              []*Level      `protobuf:"bytes,6,rep,name=level,proto3" json:"level,omitempty"`
	RankReward         []*RankReward `protobuf:"bytes,7,rep,name=rank_reward,json=rankReward,proto3" json:"rank_reward,omitempty"`
}

func (x *RankConfig) Reset() {
	*x = RankConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankConfig) ProtoMessage() {}

func (x *RankConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankConfig.ProtoReflect.Descriptor instead.
func (*RankConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{70}
}

func (x *RankConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RankConfig) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *RankConfig) GetSeasonIntroduceUrl() string {
	if x != nil {
		return x.SeasonIntroduceUrl
	}
	return ""
}

func (x *RankConfig) GetPrimeKingRange() int32 {
	if x != nil {
		return x.PrimeKingRange
	}
	return 0
}

func (x *RankConfig) GetPrimeTopUrls() []string {
	if x != nil {
		return x.PrimeTopUrls
	}
	return nil
}

func (x *RankConfig) GetLevel() []*Level {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *RankConfig) GetRankReward() []*RankReward {
	if x != nil {
		return x.RankReward
	}
	return nil
}

type RankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "star_range": [0, 3],
	StarRange []int32 `protobuf:"varint,1,rep,packed,name=star_range,json=starRange,proto3" json:"star_range,omitempty"`
	// "reward_list": [通用奖励数组]
	RewardList []*config.RewardConfig `protobuf:"bytes,2,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *RankReward) Reset() {
	*x = RankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankReward) ProtoMessage() {}

func (x *RankReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankReward.ProtoReflect.Descriptor instead.
func (*RankReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{71}
}

func (x *RankReward) GetStarRange() []int32 {
	if x != nil {
		return x.StarRange
	}
	return nil
}

func (x *RankReward) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarStartNum int32   `protobuf:"varint,1,opt,name=star_start_num,json=starStartNum,proto3" json:"star_start_num,omitempty"`
	Rule         []int32 `protobuf:"varint,2,rep,packed,name=rule,proto3" json:"rule,omitempty"`
	StarEndNum   int32   `protobuf:"varint,3,opt,name=star_end_num,json=starEndNum,proto3" json:"star_end_num,omitempty"`
	Url          string  `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Name         string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Mvp          int32   `protobuf:"varint,6,opt,name=mvp,proto3" json:"mvp,omitempty"`
	SpriteName   string  `protobuf:"bytes,7,opt,name=sprite_name,json=spriteName,proto3" json:"sprite_name,omitempty"`
}

func (x *Level) Reset() {
	*x = Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level) ProtoMessage() {}

func (x *Level) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level.ProtoReflect.Descriptor instead.
func (*Level) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{72}
}

func (x *Level) GetStarStartNum() int32 {
	if x != nil {
		return x.StarStartNum
	}
	return 0
}

func (x *Level) GetRule() []int32 {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Level) GetStarEndNum() int32 {
	if x != nil {
		return x.StarEndNum
	}
	return 0
}

func (x *Level) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Level) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Level) GetMvp() int32 {
	if x != nil {
		return x.Mvp
	}
	return 0
}

func (x *Level) GetSpriteName() string {
	if x != nil {
		return x.SpriteName
	}
	return ""
}

type ClanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanRewardTips   string             `protobuf:"bytes,1,opt,name=clan_reward_tips,json=clanRewardTips,proto3" json:"clan_reward_tips,omitempty"`
	UnlockStar       int32              `protobuf:"varint,2,opt,name=unlock_star,json=unlockStar,proto3" json:"unlock_star,omitempty"`
	PermissionImgurl string             `protobuf:"bytes,3,opt,name=permission_imgurl,json=permissionImgurl,proto3" json:"permission_imgurl,omitempty"`
	LevelConfig      []*ClanLevelConfig `protobuf:"bytes,4,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty"`
	// 这是新的，预览的时候用
	RewardExplainConfig []*ClanRewardConfig `protobuf:"bytes,5,rep,name=reward_explain_config,json=rewardExplainConfig,proto3" json:"reward_explain_config,omitempty"` // 服务器返回从大到小的排序，内部用的是从小到大的排序
	// 这是老的，结算的时候用
	RewardConfig   []*ClanRewardConfig `protobuf:"bytes,6,rep,name=reward_config,json=rewardConfig,proto3" json:"reward_config,omitempty"` // 服务器返回从大到小的排序，内部用的是从小到大的排序
	RaceTimeConfig []*RaceTimeConfig   `protobuf:"bytes,7,rep,name=race_time_config,json=raceTimeConfig,proto3" json:"race_time_config,omitempty"`
	// 这是新的，预览的时候用
	RewardExplainPartition []int32 `protobuf:"varint,8,rep,packed,name=reward_explain_partition,json=rewardExplainPartition,proto3" json:"reward_explain_partition,omitempty"` //[0]为高，[1]为中，[2]为低
	// 这是老的，结算的时候用
	RewardPartition       []int32   `protobuf:"varint,9,rep,packed,name=reward_partition,json=rewardPartition,proto3" json:"reward_partition,omitempty"` //[0]为高，[1]为中，[2]为低
	QrcodeFormat          string    `protobuf:"bytes,10,opt,name=qrcode_format,json=qrcodeFormat,proto3" json:"qrcode_format,omitempty"`
	CreateClanCostDiamond int32     `protobuf:"varint,11,opt,name=create_clan_cost_diamond,json=createClanCostDiamond,proto3" json:"create_clan_cost_diamond,omitempty"`
	RuleDesc              *RuleDesc `protobuf:"bytes,12,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"` //战队赛增加活跃点规则
	SeasonCupUrl          string    `protobuf:"bytes,13,opt,name=season_cup_url,json=seasonCupUrl,proto3" json:"season_cup_url,omitempty"`
	RewardWeb             string    `protobuf:"bytes,14,opt,name=reward_web,json=rewardWeb,proto3" json:"reward_web,omitempty"`
	DescUrlV2             string    `protobuf:"bytes,15,opt,name=desc_url_v2,json=descUrlV2,proto3" json:"desc_url_v2,omitempty"`
}

func (x *ClanConfig) Reset() {
	*x = ClanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanConfig) ProtoMessage() {}

func (x *ClanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanConfig.ProtoReflect.Descriptor instead.
func (*ClanConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{73}
}

func (x *ClanConfig) GetClanRewardTips() string {
	if x != nil {
		return x.ClanRewardTips
	}
	return ""
}

func (x *ClanConfig) GetUnlockStar() int32 {
	if x != nil {
		return x.UnlockStar
	}
	return 0
}

func (x *ClanConfig) GetPermissionImgurl() string {
	if x != nil {
		return x.PermissionImgurl
	}
	return ""
}

func (x *ClanConfig) GetLevelConfig() []*ClanLevelConfig {
	if x != nil {
		return x.LevelConfig
	}
	return nil
}

func (x *ClanConfig) GetRewardExplainConfig() []*ClanRewardConfig {
	if x != nil {
		return x.RewardExplainConfig
	}
	return nil
}

func (x *ClanConfig) GetRewardConfig() []*ClanRewardConfig {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

func (x *ClanConfig) GetRaceTimeConfig() []*RaceTimeConfig {
	if x != nil {
		return x.RaceTimeConfig
	}
	return nil
}

func (x *ClanConfig) GetRewardExplainPartition() []int32 {
	if x != nil {
		return x.RewardExplainPartition
	}
	return nil
}

func (x *ClanConfig) GetRewardPartition() []int32 {
	if x != nil {
		return x.RewardPartition
	}
	return nil
}

func (x *ClanConfig) GetQrcodeFormat() string {
	if x != nil {
		return x.QrcodeFormat
	}
	return ""
}

func (x *ClanConfig) GetCreateClanCostDiamond() int32 {
	if x != nil {
		return x.CreateClanCostDiamond
	}
	return 0
}

func (x *ClanConfig) GetRuleDesc() *RuleDesc {
	if x != nil {
		return x.RuleDesc
	}
	return nil
}

func (x *ClanConfig) GetSeasonCupUrl() string {
	if x != nil {
		return x.SeasonCupUrl
	}
	return ""
}

func (x *ClanConfig) GetRewardWeb() string {
	if x != nil {
		return x.RewardWeb
	}
	return ""
}

func (x *ClanConfig) GetDescUrlV2() string {
	if x != nil {
		return x.DescUrlV2
	}
	return ""
}

type RuleDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamAddCupRule      string                 `protobuf:"bytes,1,opt,name=team_add_cup_rule,json=teamAddCupRule,proto3" json:"team_add_cup_rule,omitempty"`              //战队赛增加活跃点规则
	AddCupRule          string                 `protobuf:"bytes,2,opt,name=add_cup_rule,json=addCupRule,proto3" json:"add_cup_rule,omitempty"`                            //团战增加活跃点规则
	FormalMemberCup     int32                  `protobuf:"varint,3,opt,name=formal_member_cup,json=formalMemberCup,proto3" json:"formal_member_cup,omitempty"`            //候补队员转正提示
	LevelExplainUrl     string                 `protobuf:"bytes,4,opt,name=level_explain_url,json=levelExplainUrl,proto3" json:"level_explain_url,omitempty"`             //战队等级介绍 url
	ActivePointAddition []*ActivePointAddition `protobuf:"bytes,5,rep,name=active_point_addition,json=activePointAddition,proto3" json:"active_point_addition,omitempty"` //排位赛战队成员组队加成
	RaceCupRate         int32                  `protobuf:"varint,6,opt,name=race_cup_rate,json=raceCupRate,proto3" json:"race_cup_rate,omitempty"`                        //战队赛倍数
}

func (x *RuleDesc) Reset() {
	*x = RuleDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDesc) ProtoMessage() {}

func (x *RuleDesc) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDesc.ProtoReflect.Descriptor instead.
func (*RuleDesc) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{74}
}

func (x *RuleDesc) GetTeamAddCupRule() string {
	if x != nil {
		return x.TeamAddCupRule
	}
	return ""
}

func (x *RuleDesc) GetAddCupRule() string {
	if x != nil {
		return x.AddCupRule
	}
	return ""
}

func (x *RuleDesc) GetFormalMemberCup() int32 {
	if x != nil {
		return x.FormalMemberCup
	}
	return 0
}

func (x *RuleDesc) GetLevelExplainUrl() string {
	if x != nil {
		return x.LevelExplainUrl
	}
	return ""
}

func (x *RuleDesc) GetActivePointAddition() []*ActivePointAddition {
	if x != nil {
		return x.ActivePointAddition
	}
	return nil
}

func (x *RuleDesc) GetRaceCupRate() int32 {
	if x != nil {
		return x.RaceCupRate
	}
	return 0
}

type ActivePointAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member int32  `protobuf:"varint,1,opt,name=member,proto3" json:"member,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ActivePointAddition) Reset() {
	*x = ActivePointAddition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePointAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePointAddition) ProtoMessage() {}

func (x *ActivePointAddition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePointAddition.ProtoReflect.Descriptor instead.
func (*ActivePointAddition) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{75}
}

func (x *ActivePointAddition) GetMember() int32 {
	if x != nil {
		return x.Member
	}
	return 0
}

func (x *ActivePointAddition) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RaceTimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeekDay   int32  `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`      // 星期日为7
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 格式24:00:00
	EndTime   string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 格式24:00:00
}

func (x *RaceTimeConfig) Reset() {
	*x = RaceTimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceTimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceTimeConfig) ProtoMessage() {}

func (x *RaceTimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceTimeConfig.ProtoReflect.Descriptor instead.
func (*RaceTimeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{76}
}

func (x *RaceTimeConfig) GetWeekDay() int32 {
	if x != nil {
		return x.WeekDay
	}
	return 0
}

func (x *RaceTimeConfig) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *RaceTimeConfig) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type ClanRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // 只代表id，不代表等级的高低
	BadgeImgurl  string                 `protobuf:"bytes,2,opt,name=badge_imgurl,json=badgeImgurl,proto3" json:"badge_imgurl,omitempty"`
	Grade        string                 `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	BorderImgurl string                 `protobuf:"bytes,4,opt,name=border_imgurl,json=borderImgurl,proto3" json:"border_imgurl,omitempty"`
	Rank         int32                  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	Diamond      int32                  `protobuf:"varint,6,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Reward       []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward,proto3" json:"reward,omitempty"`
	CupStart     int32                  `protobuf:"varint,8,opt,name=cup_start,json=cupStart,proto3" json:"cup_start,omitempty"`
	RewardId     int32                  `protobuf:"varint,9,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// 下一个不同 grade 的 rank 位置
	NextRank int32 `protobuf:"varint,10,opt,name=nextRank,proto3" json:"nextRank,omitempty"`
	Degree   int32 `protobuf:"varint,11,opt,name=degree,proto3" json:"degree,omitempty"` // 依据服务器返回来的等级列表位置，小的一定等级低，最低等级为0；0,1,2,3...n-1 中间没有空位
}

func (x *ClanRewardConfig) Reset() {
	*x = ClanRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanRewardConfig) ProtoMessage() {}

func (x *ClanRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanRewardConfig.ProtoReflect.Descriptor instead.
func (*ClanRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{77}
}

func (x *ClanRewardConfig) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ClanRewardConfig) GetBadgeImgurl() string {
	if x != nil {
		return x.BadgeImgurl
	}
	return ""
}

func (x *ClanRewardConfig) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *ClanRewardConfig) GetBorderImgurl() string {
	if x != nil {
		return x.BorderImgurl
	}
	return ""
}

func (x *ClanRewardConfig) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ClanRewardConfig) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *ClanRewardConfig) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ClanRewardConfig) GetCupStart() int32 {
	if x != nil {
		return x.CupStart
	}
	return 0
}

func (x *ClanRewardConfig) GetRewardId() int32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *ClanRewardConfig) GetNextRank() int32 {
	if x != nil {
		return x.NextRank
	}
	return 0
}

func (x *ClanRewardConfig) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

type ClanLevelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level         int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	IconUrl       string `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MemberNum     int32  `protobuf:"varint,4,opt,name=member_num,json=memberNum,proto3" json:"member_num,omitempty"`
	ExpandDiamond int32  `protobuf:"varint,5,opt,name=expand_diamond,json=expandDiamond,proto3" json:"expand_diamond,omitempty"`
	CupStart      int32  `protobuf:"varint,6,opt,name=cup_start,json=cupStart,proto3" json:"cup_start,omitempty"`
}

func (x *ClanLevelConfig) Reset() {
	*x = ClanLevelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanLevelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanLevelConfig) ProtoMessage() {}

func (x *ClanLevelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanLevelConfig.ProtoReflect.Descriptor instead.
func (*ClanLevelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{78}
}

func (x *ClanLevelConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ClanLevelConfig) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *ClanLevelConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClanLevelConfig) GetMemberNum() int32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *ClanLevelConfig) GetExpandDiamond() int32 {
	if x != nil {
		return x.ExpandDiamond
	}
	return 0
}

func (x *ClanLevelConfig) GetCupStart() int32 {
	if x != nil {
		return x.CupStart
	}
	return 0
}

type HomeUiConfigV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndlessIconV2        *IconConfig        `protobuf:"bytes,1,opt,name=endless_icon_v2,json=endlessIconV2,proto3" json:"endless_icon_v2,omitempty"`
	QualifyingIconV2     *IconConfig        `protobuf:"bytes,2,opt,name=qualifying_icon_v2,json=qualifyingIconV2,proto3" json:"qualifying_icon_v2,omitempty"`
	LeftCorner           *IconConfig        `protobuf:"bytes,3,opt,name=left_corner,json=leftCorner,proto3" json:"left_corner,omitempty"`
	RightCorner          *IconConfig        `protobuf:"bytes,4,opt,name=right_corner,json=rightCorner,proto3" json:"right_corner,omitempty"`
	MoreGame             []*MoreGame        `protobuf:"bytes,5,rep,name=more_game,json=moreGame,proto3" json:"more_game,omitempty"`
	NewbieCondition      *NewbieCondition   `protobuf:"bytes,6,opt,name=newbie_condition,json=newbieCondition,proto3" json:"newbie_condition,omitempty"`
	EndlessHugeIcon      *IconConfig        `protobuf:"bytes,7,opt,name=endless_huge_icon,json=endlessHugeIcon,proto3" json:"endless_huge_icon,omitempty"`
	GameSlideIntervalSec int64              `protobuf:"varint,8,opt,name=game_slide_interval_sec,json=gameSlideIntervalSec,proto3" json:"game_slide_interval_sec,omitempty"`
	GameSlideList        []*SlideIconConfig `protobuf:"bytes,9,rep,name=game_slide_list,json=gameSlideList,proto3" json:"game_slide_list,omitempty"`
}

func (x *HomeUiConfigV3) Reset() {
	*x = HomeUiConfigV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeUiConfigV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeUiConfigV3) ProtoMessage() {}

func (x *HomeUiConfigV3) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeUiConfigV3.ProtoReflect.Descriptor instead.
func (*HomeUiConfigV3) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{79}
}

func (x *HomeUiConfigV3) GetEndlessIconV2() *IconConfig {
	if x != nil {
		return x.EndlessIconV2
	}
	return nil
}

func (x *HomeUiConfigV3) GetQualifyingIconV2() *IconConfig {
	if x != nil {
		return x.QualifyingIconV2
	}
	return nil
}

func (x *HomeUiConfigV3) GetLeftCorner() *IconConfig {
	if x != nil {
		return x.LeftCorner
	}
	return nil
}

func (x *HomeUiConfigV3) GetRightCorner() *IconConfig {
	if x != nil {
		return x.RightCorner
	}
	return nil
}

func (x *HomeUiConfigV3) GetMoreGame() []*MoreGame {
	if x != nil {
		return x.MoreGame
	}
	return nil
}

func (x *HomeUiConfigV3) GetNewbieCondition() *NewbieCondition {
	if x != nil {
		return x.NewbieCondition
	}
	return nil
}

func (x *HomeUiConfigV3) GetEndlessHugeIcon() *IconConfig {
	if x != nil {
		return x.EndlessHugeIcon
	}
	return nil
}

func (x *HomeUiConfigV3) GetGameSlideIntervalSec() int64 {
	if x != nil {
		return x.GameSlideIntervalSec
	}
	return 0
}

func (x *HomeUiConfigV3) GetGameSlideList() []*SlideIconConfig {
	if x != nil {
		return x.GameSlideList
	}
	return nil
}

type SlideIconConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url            string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	LockUrl        string  `protobuf:"bytes,2,opt,name=lock_url,json=lockUrl,proto3" json:"lock_url,omitempty"`
	Link           string  `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Bubble         *Bubble `protobuf:"bytes,4,opt,name=bubble,proto3" json:"bubble,omitempty"`
	SupportVersion string  `protobuf:"bytes,5,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"`
	TextImgurl     string  `protobuf:"bytes,6,opt,name=text_imgurl,json=textImgurl,proto3" json:"text_imgurl,omitempty"`
	AnimUrl        string  `protobuf:"bytes,7,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType       int32   `protobuf:"varint,8,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	OpenDayStart   string  `protobuf:"bytes,9,opt,name=open_day_start,json=openDayStart,proto3" json:"open_day_start,omitempty"`
	OpenDayEnd     string  `protobuf:"bytes,10,opt,name=open_day_end,json=openDayEnd,proto3" json:"open_day_end,omitempty"`
	StartTime      int64   `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64   `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *SlideIconConfig) Reset() {
	*x = SlideIconConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideIconConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideIconConfig) ProtoMessage() {}

func (x *SlideIconConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideIconConfig.ProtoReflect.Descriptor instead.
func (*SlideIconConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{80}
}

func (x *SlideIconConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SlideIconConfig) GetLockUrl() string {
	if x != nil {
		return x.LockUrl
	}
	return ""
}

func (x *SlideIconConfig) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *SlideIconConfig) GetBubble() *Bubble {
	if x != nil {
		return x.Bubble
	}
	return nil
}

func (x *SlideIconConfig) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

func (x *SlideIconConfig) GetTextImgurl() string {
	if x != nil {
		return x.TextImgurl
	}
	return ""
}

func (x *SlideIconConfig) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *SlideIconConfig) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *SlideIconConfig) GetOpenDayStart() string {
	if x != nil {
		return x.OpenDayStart
	}
	return ""
}

func (x *SlideIconConfig) GetOpenDayEnd() string {
	if x != nil {
		return x.OpenDayEnd
	}
	return ""
}

func (x *SlideIconConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SlideIconConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type IconConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url            string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	LockUrl        string  `protobuf:"bytes,2,opt,name=lock_url,json=lockUrl,proto3" json:"lock_url,omitempty"`
	Link           string  `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Bubble         *Bubble `protobuf:"bytes,4,opt,name=bubble,proto3" json:"bubble,omitempty"`
	SupportVersion string  `protobuf:"bytes,5,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"`
	TextImgurl     string  `protobuf:"bytes,6,opt,name=text_imgurl,json=textImgurl,proto3" json:"text_imgurl,omitempty"`
	AnimUrl        string  `protobuf:"bytes,7,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType       int32   `protobuf:"varint,8,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
}

func (x *IconConfig) Reset() {
	*x = IconConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IconConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IconConfig) ProtoMessage() {}

func (x *IconConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IconConfig.ProtoReflect.Descriptor instead.
func (*IconConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{81}
}

func (x *IconConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *IconConfig) GetLockUrl() string {
	if x != nil {
		return x.LockUrl
	}
	return ""
}

func (x *IconConfig) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *IconConfig) GetBubble() *Bubble {
	if x != nil {
		return x.Bubble
	}
	return nil
}

func (x *IconConfig) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

func (x *IconConfig) GetTextImgurl() string {
	if x != nil {
		return x.TextImgurl
	}
	return ""
}

func (x *IconConfig) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *IconConfig) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

type MoreGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url            string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	LockUrl        string  `protobuf:"bytes,2,opt,name=lock_url,json=lockUrl,proto3" json:"lock_url,omitempty"`
	ReviewHide     int32   `protobuf:"varint,3,opt,name=review_hide,json=reviewHide,proto3" json:"review_hide,omitempty"` // 在审核模式下是否隐藏，1是，0否
	NewbieHide     int32   `protobuf:"varint,4,opt,name=newbie_hide,json=newbieHide,proto3" json:"newbie_hide,omitempty"` // 对新手是否隐藏，1是，0否
	SizeType       int32   `protobuf:"varint,5,opt,name=size_type,json=sizeType,proto3" json:"size_type,omitempty"`       // 大图0
	Link           string  `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Bubble         *Bubble `protobuf:"bytes,7,opt,name=bubble,proto3" json:"bubble,omitempty"`
	SupportVersion string  `protobuf:"bytes,8,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"`
	OpenDayStart   string  `protobuf:"bytes,9,opt,name=open_day_start,json=openDayStart,proto3" json:"open_day_start,omitempty"`
	OpenDayEnd     string  `protobuf:"bytes,10,opt,name=open_day_end,json=openDayEnd,proto3" json:"open_day_end,omitempty"`
	StartTime      int64   `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64   `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MoreGame) Reset() {
	*x = MoreGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreGame) ProtoMessage() {}

func (x *MoreGame) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreGame.ProtoReflect.Descriptor instead.
func (*MoreGame) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{82}
}

func (x *MoreGame) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MoreGame) GetLockUrl() string {
	if x != nil {
		return x.LockUrl
	}
	return ""
}

func (x *MoreGame) GetReviewHide() int32 {
	if x != nil {
		return x.ReviewHide
	}
	return 0
}

func (x *MoreGame) GetNewbieHide() int32 {
	if x != nil {
		return x.NewbieHide
	}
	return 0
}

func (x *MoreGame) GetSizeType() int32 {
	if x != nil {
		return x.SizeType
	}
	return 0
}

func (x *MoreGame) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *MoreGame) GetBubble() *Bubble {
	if x != nil {
		return x.Bubble
	}
	return nil
}

func (x *MoreGame) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

func (x *MoreGame) GetOpenDayStart() string {
	if x != nil {
		return x.OpenDayStart
	}
	return ""
}

func (x *MoreGame) GetOpenDayEnd() string {
	if x != nil {
		return x.OpenDayEnd
	}
	return ""
}

func (x *MoreGame) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MoreGame) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type Bubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	StaySecond int32  `protobuf:"varint,2,opt,name=stay_second,json=staySecond,proto3" json:"stay_second,omitempty"`
	ShowStart  int64  `protobuf:"varint,3,opt,name=show_start,json=showStart,proto3" json:"show_start,omitempty"`
	ShowEnd    int64  `protobuf:"varint,4,opt,name=show_end,json=showEnd,proto3" json:"show_end,omitempty"`
}

func (x *Bubble) Reset() {
	*x = Bubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bubble) ProtoMessage() {}

func (x *Bubble) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bubble.ProtoReflect.Descriptor instead.
func (*Bubble) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{83}
}

func (x *Bubble) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Bubble) GetStaySecond() int32 {
	if x != nil {
		return x.StaySecond
	}
	return 0
}

func (x *Bubble) GetShowStart() int64 {
	if x != nil {
		return x.ShowStart
	}
	return 0
}

func (x *Bubble) GetShowEnd() int64 {
	if x != nil {
		return x.ShowEnd
	}
	return 0
}

type NewbieCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterDay int32 `protobuf:"varint,1,opt,name=register_day,json=registerDay,proto3" json:"register_day,omitempty"`
	SingleLen   int64 `protobuf:"varint,2,opt,name=single_len,json=singleLen,proto3" json:"single_len,omitempty"`
}

func (x *NewbieCondition) Reset() {
	*x = NewbieCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieCondition) ProtoMessage() {}

func (x *NewbieCondition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieCondition.ProtoReflect.Descriptor instead.
func (*NewbieCondition) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{84}
}

func (x *NewbieCondition) GetRegisterDay() int32 {
	if x != nil {
		return x.RegisterDay
	}
	return 0
}

func (x *NewbieCondition) GetSingleLen() int64 {
	if x != nil {
		return x.SingleLen
	}
	return 0
}

type CharmSocialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserShowDay  int32  `protobuf:"varint,1,opt,name=user_show_day,json=userShowDay,proto3" json:"user_show_day,omitempty"`
	ListCount    int32  `protobuf:"varint,2,opt,name=list_count,json=listCount,proto3" json:"list_count,omitempty"`
	IncreaseDesc string `protobuf:"bytes,3,opt,name=increase_desc,json=increaseDesc,proto3" json:"increase_desc,omitempty"`
}

func (x *CharmSocialConfig) Reset() {
	*x = CharmSocialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmSocialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmSocialConfig) ProtoMessage() {}

func (x *CharmSocialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmSocialConfig.ProtoReflect.Descriptor instead.
func (*CharmSocialConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{85}
}

func (x *CharmSocialConfig) GetUserShowDay() int32 {
	if x != nil {
		return x.UserShowDay
	}
	return 0
}

func (x *CharmSocialConfig) GetListCount() int32 {
	if x != nil {
		return x.ListCount
	}
	return 0
}

func (x *CharmSocialConfig) GetIncreaseDesc() string {
	if x != nil {
		return x.IncreaseDesc
	}
	return ""
}

type CharmLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmStart int32  `protobuf:"varint,1,opt,name=charm_start,json=charmStart,proto3" json:"charm_start,omitempty"`
	IconUrl    string `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	IconUrlV2  string `protobuf:"bytes,3,opt,name=icon_url_v2,json=iconUrlV2,proto3" json:"icon_url_v2,omitempty"`
	Num        int32  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *CharmLevel) Reset() {
	*x = CharmLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmLevel) ProtoMessage() {}

func (x *CharmLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmLevel.ProtoReflect.Descriptor instead.
func (*CharmLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{86}
}

func (x *CharmLevel) GetCharmStart() int32 {
	if x != nil {
		return x.CharmStart
	}
	return 0
}

func (x *CharmLevel) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CharmLevel) GetIconUrlV2() string {
	if x != nil {
		return x.IconUrlV2
	}
	return ""
}

func (x *CharmLevel) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type RewardMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 角标id
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"` // 角标图片
}

func (x *RewardMark) Reset() {
	*x = RewardMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardMark) ProtoMessage() {}

func (x *RewardMark) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardMark.ProtoReflect.Descriptor instead.
func (*RewardMark) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{87}
}

func (x *RewardMark) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RewardMark) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type RouletteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopupInterval int32              `protobuf:"varint,1,opt,name=popup_interval,json=popupInterval,proto3" json:"popup_interval,omitempty"`
	RewardTable   []*RewardTableBean `protobuf:"bytes,2,rep,name=reward_table,json=rewardTable,proto3" json:"reward_table,omitempty"`
	Config        *RouletteSubConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *RouletteConfig) Reset() {
	*x = RouletteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouletteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouletteConfig) ProtoMessage() {}

func (x *RouletteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouletteConfig.ProtoReflect.Descriptor instead.
func (*RouletteConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{88}
}

func (x *RouletteConfig) GetPopupInterval() int32 {
	if x != nil {
		return x.PopupInterval
	}
	return 0
}

func (x *RouletteConfig) GetRewardTable() []*RewardTableBean {
	if x != nil {
		return x.RewardTable
	}
	return nil
}

func (x *RouletteConfig) GetConfig() *RouletteSubConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type RewardTableBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Mode   int32  `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *RewardTableBean) Reset() {
	*x = RewardTableBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardTableBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardTableBean) ProtoMessage() {}

func (x *RewardTableBean) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardTableBean.ProtoReflect.Descriptor instead.
func (*RewardTableBean) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{89}
}

func (x *RewardTableBean) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RewardTableBean) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RewardTableBean) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type RouletteSubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotteryLink     string `protobuf:"bytes,1,opt,name=lottery_link,json=lotteryLink,proto3" json:"lottery_link,omitempty"`
	LotteryLinkIos  string `protobuf:"bytes,2,opt,name=lottery_link_ios,json=lotteryLinkIos,proto3" json:"lottery_link_ios,omitempty"`
	EndlessIconUrl  string `protobuf:"bytes,3,opt,name=endless_icon_url,json=endlessIconUrl,proto3" json:"endless_icon_url,omitempty"`
	GoldCoinIconUrl string `protobuf:"bytes,4,opt,name=gold_coin_icon_url,json=goldCoinIconUrl,proto3" json:"gold_coin_icon_url,omitempty"`
	EndlessEndtime  int64  `protobuf:"varint,5,opt,name=endless_endtime,json=endlessEndtime,proto3" json:"endless_endtime,omitempty"` // 单机轮盘结束时间，以s计算
}

func (x *RouletteSubConfig) Reset() {
	*x = RouletteSubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouletteSubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouletteSubConfig) ProtoMessage() {}

func (x *RouletteSubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouletteSubConfig.ProtoReflect.Descriptor instead.
func (*RouletteSubConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{90}
}

func (x *RouletteSubConfig) GetLotteryLink() string {
	if x != nil {
		return x.LotteryLink
	}
	return ""
}

func (x *RouletteSubConfig) GetLotteryLinkIos() string {
	if x != nil {
		return x.LotteryLinkIos
	}
	return ""
}

func (x *RouletteSubConfig) GetEndlessIconUrl() string {
	if x != nil {
		return x.EndlessIconUrl
	}
	return ""
}

func (x *RouletteSubConfig) GetGoldCoinIconUrl() string {
	if x != nil {
		return x.GoldCoinIconUrl
	}
	return ""
}

func (x *RouletteSubConfig) GetEndlessEndtime() int64 {
	if x != nil {
		return x.EndlessEndtime
	}
	return 0
}

type ShowAdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnakeCoinAdConfig        []*AdRewardModel      `protobuf:"bytes,1,rep,name=snake_coin_ad_config,json=snakeCoinAdConfig,proto3" json:"snake_coin_ad_config,omitempty"` //看广告的银币
	CouponAdConfig           []*AdRewardModel      `protobuf:"bytes,2,rep,name=coupon_ad_config,json=couponAdConfig,proto3" json:"coupon_ad_config,omitempty"`            //看广告得奖券
	SingleAddBuffUi          string                `protobuf:"bytes,3,opt,name=single_add_buff_ui,json=singleAddBuffUi,proto3" json:"single_add_buff_ui,omitempty"`
	AndroidAdPopupsConfig    *AdPopupsConfig       `protobuf:"bytes,4,opt,name=android_ad_popups_config,json=androidAdPopupsConfig,proto3" json:"android_ad_popups_config,omitempty"`
	AdPopupsConfig           *AdPopupsConfig       `protobuf:"bytes,5,opt,name=ad_popups_config,json=adPopupsConfig,proto3" json:"ad_popups_config,omitempty"`
	EndlessCheckoutRecommend []*EndlessAdRecommend `protobuf:"bytes,6,rep,name=endless_checkout_recommend,json=endlessCheckoutRecommend,proto3" json:"endless_checkout_recommend,omitempty"`
	MeleeCheckoutRecommend   []*EndlessAdRecommend `protobuf:"bytes,7,rep,name=melee_checkout_recommend,json=meleeCheckoutRecommend,proto3" json:"melee_checkout_recommend,omitempty"`
}

func (x *ShowAdConfig) Reset() {
	*x = ShowAdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAdConfig) ProtoMessage() {}

func (x *ShowAdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAdConfig.ProtoReflect.Descriptor instead.
func (*ShowAdConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{91}
}

func (x *ShowAdConfig) GetSnakeCoinAdConfig() []*AdRewardModel {
	if x != nil {
		return x.SnakeCoinAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetCouponAdConfig() []*AdRewardModel {
	if x != nil {
		return x.CouponAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetSingleAddBuffUi() string {
	if x != nil {
		return x.SingleAddBuffUi
	}
	return ""
}

func (x *ShowAdConfig) GetAndroidAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AndroidAdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetEndlessCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.EndlessCheckoutRecommend
	}
	return nil
}

func (x *ShowAdConfig) GetMeleeCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.MeleeCheckoutRecommend
	}
	return nil
}

type AdRewardModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColdTime int32 `protobuf:"varint,1,opt,name=cold_time,json=coldTime,proto3" json:"cold_time,omitempty"`
	Index    int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Num      int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Type     int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` //货币类型
}

func (x *AdRewardModel) Reset() {
	*x = AdRewardModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdRewardModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdRewardModel) ProtoMessage() {}

func (x *AdRewardModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdRewardModel.ProtoReflect.Descriptor instead.
func (*AdRewardModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{92}
}

func (x *AdRewardModel) GetColdTime() int32 {
	if x != nil {
		return x.ColdTime
	}
	return 0
}

func (x *AdRewardModel) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AdRewardModel) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AdRewardModel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AdPopupsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrioGameCount       int32                `protobuf:"varint,1,opt,name=trio_game_count,json=trioGameCount,proto3" json:"trio_game_count,omitempty"` //新用户首次允许弹出弹窗的局数（新手保护）
	PopusOrder          []string             `protobuf:"bytes,2,rep,name=popus_order,json=popusOrder,proto3" json:"popus_order,omitempty"`             //重来时皮肤与buff都满足触发条件，优先顺序可配（默认皮肤优先）
	PopupPositionConfig *PopupPositionConfig `protobuf:"bytes,3,opt,name=popup_position_config,json=popupPositionConfig,proto3" json:"popup_position_config,omitempty"`
	EndPopupOrder       []string             `protobuf:"bytes,4,rep,name=end_popup_order,json=endPopupOrder,proto3" json:"end_popup_order,omitempty"`
	NewEndPopupOrder1   []string             `protobuf:"bytes,5,rep,name=new_end_popup_order1,json=newEndPopupOrder1,proto3" json:"new_end_popup_order1,omitempty"`
	NewEndPopupOrder2   []string             `protobuf:"bytes,6,rep,name=new_end_popup_order2,json=newEndPopupOrder2,proto3" json:"new_end_popup_order2,omitempty"`
	EndPopupCount       int32                `protobuf:"varint,7,opt,name=end_popup_count,json=endPopupCount,proto3" json:"end_popup_count,omitempty"`
}

func (x *AdPopupsConfig) Reset() {
	*x = AdPopupsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdPopupsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdPopupsConfig) ProtoMessage() {}

func (x *AdPopupsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdPopupsConfig.ProtoReflect.Descriptor instead.
func (*AdPopupsConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{93}
}

func (x *AdPopupsConfig) GetTrioGameCount() int32 {
	if x != nil {
		return x.TrioGameCount
	}
	return 0
}

func (x *AdPopupsConfig) GetPopusOrder() []string {
	if x != nil {
		return x.PopusOrder
	}
	return nil
}

func (x *AdPopupsConfig) GetPopupPositionConfig() *PopupPositionConfig {
	if x != nil {
		return x.PopupPositionConfig
	}
	return nil
}

func (x *AdPopupsConfig) GetEndPopupOrder() []string {
	if x != nil {
		return x.EndPopupOrder
	}
	return nil
}

func (x *AdPopupsConfig) GetNewEndPopupOrder1() []string {
	if x != nil {
		return x.NewEndPopupOrder1
	}
	return nil
}

func (x *AdPopupsConfig) GetNewEndPopupOrder2() []string {
	if x != nil {
		return x.NewEndPopupOrder2
	}
	return nil
}

func (x *AdPopupsConfig) GetEndPopupCount() int32 {
	if x != nil {
		return x.EndPopupCount
	}
	return 0
}

type PopupPositionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinTrial   *PopupConfig `protobuf:"bytes,1,opt,name=skin_trial,json=skinTrial,proto3" json:"skin_trial,omitempty"`
	EndlessBuff *PopupConfig `protobuf:"bytes,2,opt,name=endless_buff,json=endlessBuff,proto3" json:"endless_buff,omitempty"`
	Lottery     *PopupConfig `protobuf:"bytes,3,opt,name=lottery,proto3" json:"lottery,omitempty"`
}

func (x *PopupPositionConfig) Reset() {
	*x = PopupPositionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopupPositionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopupPositionConfig) ProtoMessage() {}

func (x *PopupPositionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopupPositionConfig.ProtoReflect.Descriptor instead.
func (*PopupPositionConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{94}
}

func (x *PopupPositionConfig) GetSkinTrial() *PopupConfig {
	if x != nil {
		return x.SkinTrial
	}
	return nil
}

func (x *PopupPositionConfig) GetEndlessBuff() *PopupConfig {
	if x != nil {
		return x.EndlessBuff
	}
	return nil
}

func (x *PopupPositionConfig) GetLottery() *PopupConfig {
	if x != nil {
		return x.Lottery
	}
	return nil
}

type PopupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times         int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`                                      //首次弹出的局数
	IntervalTimes int32 `protobuf:"varint,2,opt,name=interval_times,json=intervalTimes,proto3" json:"interval_times,omitempty"` //弹出间隔局数
	ShowLimit     int32 `protobuf:"varint,3,opt,name=show_limit,json=showLimit,proto3" json:"show_limit,omitempty"`             //每日展示上限
}

func (x *PopupConfig) Reset() {
	*x = PopupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopupConfig) ProtoMessage() {}

func (x *PopupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopupConfig.ProtoReflect.Descriptor instead.
func (*PopupConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{95}
}

func (x *PopupConfig) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *PopupConfig) GetIntervalTimes() int32 {
	if x != nil {
		return x.IntervalTimes
	}
	return 0
}

func (x *PopupConfig) GetShowLimit() int32 {
	if x != nil {
		return x.ShowLimit
	}
	return 0
}

type EndlessAdRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId      int32  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`       //id
	AnimType    int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"` //通用动画类型,1:图片,5:视频
	AnimUrl     string `protobuf:"bytes,3,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`     //动画链接
	Link        string `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`                          //通用跳转链接
	Probability int32  `protobuf:"varint,5,opt,name=probability,proto3" json:"probability,omitempty"`           //权重
}

func (x *EndlessAdRecommend) Reset() {
	*x = EndlessAdRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessAdRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessAdRecommend) ProtoMessage() {}

func (x *EndlessAdRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessAdRecommend.ProtoReflect.Descriptor instead.
func (*EndlessAdRecommend) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{96}
}

func (x *EndlessAdRecommend) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *EndlessAdRecommend) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *EndlessAdRecommend) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *EndlessAdRecommend) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *EndlessAdRecommend) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type SkinUgcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IconImgurl string `protobuf:"bytes,3,opt,name=icon_imgurl,json=iconImgurl,proto3" json:"icon_imgurl,omitempty"`
	BtnLink    string `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
}

func (x *SkinUgcConfig) Reset() {
	*x = SkinUgcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinUgcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinUgcConfig) ProtoMessage() {}

func (x *SkinUgcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinUgcConfig.ProtoReflect.Descriptor instead.
func (*SkinUgcConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{97}
}

func (x *SkinUgcConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SkinUgcConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SkinUgcConfig) GetIconImgurl() string {
	if x != nil {
		return x.IconImgurl
	}
	return ""
}

func (x *SkinUgcConfig) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

type OrderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlivePackPopup   []int32            `protobuf:"varint,1,rep,packed,name=alive_pack_popup,json=alivePackPopup,proto3" json:"alive_pack_popup,omitempty"`
	AlivePopupOrder  []int32            `protobuf:"varint,2,rep,packed,name=alive_popup_order,json=alivePopupOrder,proto3" json:"alive_popup_order,omitempty"`
	DiamondGoodsList []*IAPPackGoods    `protobuf:"bytes,3,rep,name=diamond_goods_list,json=diamondGoodsList,proto3" json:"diamond_goods_list,omitempty"`
	ExcitePopupOrder []int32            `protobuf:"varint,4,rep,packed,name=excite_popup_order,json=excitePopupOrder,proto3" json:"excite_popup_order,omitempty"`
	IapppaySwitch    int32              `protobuf:"varint,5,opt,name=iapppay_switch,json=iapppaySwitch,proto3" json:"iapppay_switch,omitempty"`
	PackGoodsList    []*IAPPackGoods    `protobuf:"bytes,6,rep,name=pack_goods_list,json=packGoodsList,proto3" json:"pack_goods_list,omitempty"`
	RedPackGoodsList []*IAPPackGoods    `protobuf:"bytes,7,rep,name=red_pack_goods_list,json=redPackGoodsList,proto3" json:"red_pack_goods_list,omitempty"`
	ServiceContact   string             `protobuf:"bytes,8,opt,name=service_contact,json=serviceContact,proto3" json:"service_contact,omitempty"`
	NeedBind         int32              `protobuf:"varint,9,opt,name=need_bind,json=needBind,proto3" json:"need_bind,omitempty"`
	RandomDouble     *OrderRandomDouble `protobuf:"bytes,10,opt,name=random_double,json=randomDouble,proto3" json:"random_double,omitempty"`
}

func (x *OrderConfig) Reset() {
	*x = OrderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderConfig) ProtoMessage() {}

func (x *OrderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderConfig.ProtoReflect.Descriptor instead.
func (*OrderConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{98}
}

func (x *OrderConfig) GetAlivePackPopup() []int32 {
	if x != nil {
		return x.AlivePackPopup
	}
	return nil
}

func (x *OrderConfig) GetAlivePopupOrder() []int32 {
	if x != nil {
		return x.AlivePopupOrder
	}
	return nil
}

func (x *OrderConfig) GetDiamondGoodsList() []*IAPPackGoods {
	if x != nil {
		return x.DiamondGoodsList
	}
	return nil
}

func (x *OrderConfig) GetExcitePopupOrder() []int32 {
	if x != nil {
		return x.ExcitePopupOrder
	}
	return nil
}

func (x *OrderConfig) GetIapppaySwitch() int32 {
	if x != nil {
		return x.IapppaySwitch
	}
	return 0
}

func (x *OrderConfig) GetPackGoodsList() []*IAPPackGoods {
	if x != nil {
		return x.PackGoodsList
	}
	return nil
}

func (x *OrderConfig) GetRedPackGoodsList() []*IAPPackGoods {
	if x != nil {
		return x.RedPackGoodsList
	}
	return nil
}

func (x *OrderConfig) GetServiceContact() string {
	if x != nil {
		return x.ServiceContact
	}
	return ""
}

func (x *OrderConfig) GetNeedBind() int32 {
	if x != nil {
		return x.NeedBind
	}
	return 0
}

func (x *OrderConfig) GetRandomDouble() *OrderRandomDouble {
	if x != nil {
		return x.RandomDouble
	}
	return nil
}

type IAPPackGoods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsName  string `protobuf:"bytes,1,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	Imgurl     string `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Diamond    int32  `protobuf:"varint,7,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Tips       string `protobuf:"bytes,8,opt,name=tips,proto3" json:"tips,omitempty"`
	GoodsId    int32  `protobuf:"varint,9,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	GoodsPrice int32  `protobuf:"varint,10,opt,name=goods_price,json=goodsPrice,proto3" json:"goods_price,omitempty"`
}

func (x *IAPPackGoods) Reset() {
	*x = IAPPackGoods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAPPackGoods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAPPackGoods) ProtoMessage() {}

func (x *IAPPackGoods) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAPPackGoods.ProtoReflect.Descriptor instead.
func (*IAPPackGoods) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{99}
}

func (x *IAPPackGoods) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *IAPPackGoods) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *IAPPackGoods) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *IAPPackGoods) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

func (x *IAPPackGoods) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *IAPPackGoods) GetGoodsPrice() int32 {
	if x != nil {
		return x.GoodsPrice
	}
	return 0
}

type OrderRandomDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleImgurl string `protobuf:"bytes,1,opt,name=title_imgurl,json=titleImgurl,proto3" json:"title_imgurl,omitempty"`
}

func (x *OrderRandomDouble) Reset() {
	*x = OrderRandomDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRandomDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRandomDouble) ProtoMessage() {}

func (x *OrderRandomDouble) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRandomDouble.ProtoReflect.Descriptor instead.
func (*OrderRandomDouble) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{100}
}

func (x *OrderRandomDouble) GetTitleImgurl() string {
	if x != nil {
		return x.TitleImgurl
	}
	return ""
}

type Title struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img       string `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`                               // 背景
	StartTime int32  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始和结束时间不为0的为活动主题
	EndTime   int32  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Title) Reset() {
	*x = Title{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Title) ProtoMessage() {}

func (x *Title) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Title.ProtoReflect.Descriptor instead.
func (*Title) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{101}
}

func (x *Title) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Title) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Title) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *Title) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Title) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ShowIllustrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescUrl    string        `protobuf:"bytes,1,opt,name=desc_url,json=descUrl,proto3" json:"desc_url,omitempty"` // 说明文案
	TitleList  []*Title      `protobuf:"bytes,2,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
	HideIds    []int32       `protobuf:"varint,3,rep,packed,name=hide_ids,json=hideIds,proto3" json:"hide_ids,omitempty"` // 需隐藏的资源id配置
	SeasonList []*ShowSeason `protobuf:"bytes,4,rep,name=season_list,json=seasonList,proto3" json:"season_list,omitempty"`
}

func (x *ShowIllustrationConfig) Reset() {
	*x = ShowIllustrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIllustrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIllustrationConfig) ProtoMessage() {}

func (x *ShowIllustrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIllustrationConfig.ProtoReflect.Descriptor instead.
func (*ShowIllustrationConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{102}
}

func (x *ShowIllustrationConfig) GetDescUrl() string {
	if x != nil {
		return x.DescUrl
	}
	return ""
}

func (x *ShowIllustrationConfig) GetTitleList() []*Title {
	if x != nil {
		return x.TitleList
	}
	return nil
}

func (x *ShowIllustrationConfig) GetHideIds() []int32 {
	if x != nil {
		return x.HideIds
	}
	return nil
}

func (x *ShowIllustrationConfig) GetSeasonList() []*ShowSeason {
	if x != nil {
		return x.SeasonList
	}
	return nil
}

type ShowSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img       string                 `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`
	StartTime int64                  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BgImgurl  string                 `protobuf:"bytes,6,opt,name=bg_imgurl,json=bgImgurl,proto3" json:"bg_imgurl,omitempty"`
	Rewards   []*config.RewardConfig `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Resources []*SeasonResource      `protobuf:"bytes,8,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ShowSeason) Reset() {
	*x = ShowSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSeason) ProtoMessage() {}

func (x *ShowSeason) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSeason.ProtoReflect.Descriptor instead.
func (*ShowSeason) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{103}
}

func (x *ShowSeason) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowSeason) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowSeason) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *ShowSeason) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ShowSeason) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ShowSeason) GetBgImgurl() string {
	if x != nil {
		return x.BgImgurl
	}
	return ""
}

func (x *ShowSeason) GetRewards() []*config.RewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *ShowSeason) GetResources() []*SeasonResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SeasonResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId     int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Imgurl     string `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	GrayImgurl string `protobuf:"bytes,4,opt,name=gray_imgurl,json=grayImgurl,proto3" json:"gray_imgurl,omitempty"`
	X          int32  `protobuf:"varint,5,opt,name=x,proto3" json:"x,omitempty"`
	Y          int32  `protobuf:"varint,6,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *SeasonResource) Reset() {
	*x = SeasonResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonResource) ProtoMessage() {}

func (x *SeasonResource) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonResource.ProtoReflect.Descriptor instead.
func (*SeasonResource) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{104}
}

func (x *SeasonResource) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SeasonResource) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *SeasonResource) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *SeasonResource) GetGrayImgurl() string {
	if x != nil {
		return x.GrayImgurl
	}
	return ""
}

func (x *SeasonResource) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SeasonResource) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ShowBadgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intro                   string        `protobuf:"bytes,1,opt,name=intro,proto3" json:"intro,omitempty"`
	TitleList               []*BadgeTitle `protobuf:"bytes,2,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
	ShowIllustrationDescUrl string        `protobuf:"bytes,4,opt,name=show_illustration_desc_url,json=showIllustrationDescUrl,proto3" json:"show_illustration_desc_url,omitempty"`
	ActivityId              string        `protobuf:"bytes,5,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ShowBadgeConfig) Reset() {
	*x = ShowBadgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowBadgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBadgeConfig) ProtoMessage() {}

func (x *ShowBadgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBadgeConfig.ProtoReflect.Descriptor instead.
func (*ShowBadgeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{105}
}

func (x *ShowBadgeConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *ShowBadgeConfig) GetTitleList() []*BadgeTitle {
	if x != nil {
		return x.TitleList
	}
	return nil
}

func (x *ShowBadgeConfig) GetShowIllustrationDescUrl() string {
	if x != nil {
		return x.ShowIllustrationDescUrl
	}
	return ""
}

func (x *ShowBadgeConfig) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type BadgeTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rewards        []*config.RewardConfig `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
	NeedCollect    int32                  `protobuf:"varint,3,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"`
	StartShowLevel int32                  `protobuf:"varint,4,opt,name=start_show_level,json=startShowLevel,proto3" json:"start_show_level,omitempty"`
	EndShowLevel   int32                  `protobuf:"varint,5,opt,name=end_show_level,json=endShowLevel,proto3" json:"end_show_level,omitempty"`
	Desc           string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *BadgeTitle) Reset() {
	*x = BadgeTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeTitle) ProtoMessage() {}

func (x *BadgeTitle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeTitle.ProtoReflect.Descriptor instead.
func (*BadgeTitle) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{106}
}

func (x *BadgeTitle) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BadgeTitle) GetRewards() []*config.RewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *BadgeTitle) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *BadgeTitle) GetStartShowLevel() int32 {
	if x != nil {
		return x.StartShowLevel
	}
	return 0
}

func (x *BadgeTitle) GetEndShowLevel() int32 {
	if x != nil {
		return x.EndShowLevel
	}
	return 0
}

func (x *BadgeTitle) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type SkinUgcConfigV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     int64       `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64       `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IconImgurl    string      `protobuf:"bytes,3,opt,name=icon_imgurl,json=iconImgurl,proto3" json:"icon_imgurl,omitempty"`
	BtnLink       string      `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	SkinTopicList []*UgcTopic `protobuf:"bytes,5,rep,name=skin_topic_list,json=skinTopicList,proto3" json:"skin_topic_list,omitempty"`
	KsTopicList   []*UgcTopic `protobuf:"bytes,6,rep,name=ks_topic_list,json=ksTopicList,proto3" json:"ks_topic_list,omitempty"`
	BgTopicList   []*UgcTopic `protobuf:"bytes,7,rep,name=bg_topic_list,json=bgTopicList,proto3" json:"bg_topic_list,omitempty"`
	SuitTopicList []*UgcTopic `protobuf:"bytes,8,rep,name=suit_topic_list,json=suitTopicList,proto3" json:"suit_topic_list,omitempty"`
	VipCost       int64       `protobuf:"varint,9,opt,name=vip_cost,json=vipCost,proto3" json:"vip_cost,omitempty"`
	TitleUrl      string      `protobuf:"bytes,10,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
}

func (x *SkinUgcConfigV2) Reset() {
	*x = SkinUgcConfigV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinUgcConfigV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinUgcConfigV2) ProtoMessage() {}

func (x *SkinUgcConfigV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinUgcConfigV2.ProtoReflect.Descriptor instead.
func (*SkinUgcConfigV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{107}
}

func (x *SkinUgcConfigV2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SkinUgcConfigV2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SkinUgcConfigV2) GetIconImgurl() string {
	if x != nil {
		return x.IconImgurl
	}
	return ""
}

func (x *SkinUgcConfigV2) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *SkinUgcConfigV2) GetSkinTopicList() []*UgcTopic {
	if x != nil {
		return x.SkinTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetKsTopicList() []*UgcTopic {
	if x != nil {
		return x.KsTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetBgTopicList() []*UgcTopic {
	if x != nil {
		return x.BgTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetSuitTopicList() []*UgcTopic {
	if x != nil {
		return x.SuitTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetVipCost() int64 {
	if x != nil {
		return x.VipCost
	}
	return 0
}

func (x *SkinUgcConfigV2) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

type UgcTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bg            string `protobuf:"bytes,3,opt,name=bg,proto3" json:"bg,omitempty"`
	BgSmall       string `protobuf:"bytes,4,opt,name=bg_small,json=bgSmall,proto3" json:"bg_small,omitempty"`
	IsTopicCreate bool   `protobuf:"varint,5,opt,name=is_topic_create,json=isTopicCreate,proto3" json:"is_topic_create,omitempty"`
}

func (x *UgcTopic) Reset() {
	*x = UgcTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcTopic) ProtoMessage() {}

func (x *UgcTopic) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcTopic.ProtoReflect.Descriptor instead.
func (*UgcTopic) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{108}
}

func (x *UgcTopic) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UgcTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UgcTopic) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *UgcTopic) GetBgSmall() string {
	if x != nil {
		return x.BgSmall
	}
	return ""
}

func (x *UgcTopic) GetIsTopicCreate() bool {
	if x != nil {
		return x.IsTopicCreate
	}
	return false
}

type UgcWorks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Like     int32         `protobuf:"varint,3,opt,name=like,proto3" json:"like,omitempty"`                         // 点赞数
	Support  int32         `protobuf:"varint,4,opt,name=support,proto3" json:"support,omitempty"`                   // 应援数
	Uid      string        `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                            // 作者uid
	Nickname string        `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`                  // 作者名字
	Type     int32         `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                         // 1:皮肤，2:击杀效果，3:背景，4.套装
	SkinType int32         `protobuf:"varint,8,opt,name=skin_type,json=skinType,proto3" json:"skin_type,omitempty"` // 作品为皮肤时有效，1节点型，2丝带行，3拉伸型
	TopicId  int32         `protobuf:"varint,9,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	UploadTs int32         `protobuf:"varint,10,opt,name=upload_ts,json=uploadTs,proto3" json:"upload_ts,omitempty"`
	State    int32         `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`                      // 状态：0:审核中，1:已过审
	Normal   *UgcWorksLink `protobuf:"bytes,12,opt,name=normal,proto3" json:"normal,omitempty"`                     //作品为皮肤时有效，静态皮肤
	Speed    *UgcWorksLink `protobuf:"bytes,13,opt,name=speed,proto3" json:"speed,omitempty"`                       //作品为皮肤时有效，加速皮肤
	GameInfo string        `protobuf:"bytes,14,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"` // 作品图集信息
	SkinId   int32         `protobuf:"varint,15,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`      // 套装的皮肤id
	KsId     int32         `protobuf:"varint,16,opt,name=ks_id,json=ksId,proto3" json:"ks_id,omitempty"`            // 套装的击杀id
	BgId     int32         `protobuf:"varint,17,opt,name=bg_id,json=bgId,proto3" json:"bg_id,omitempty"`            // 套装的背景id
	SkinInfo *UgcWorks     `protobuf:"bytes,18,opt,name=skin_info,json=skinInfo,proto3" json:"skin_info,omitempty"` // 套装的皮肤信息
	KsInfo   *UgcWorks     `protobuf:"bytes,19,opt,name=ks_info,json=ksInfo,proto3" json:"ks_info,omitempty"`       // 套装的皮肤信息
	BgInfo   *UgcWorks     `protobuf:"bytes,20,opt,name=bg_info,json=bgInfo,proto3" json:"bg_info,omitempty"`       // 套装的皮肤信息
}

func (x *UgcWorks) Reset() {
	*x = UgcWorks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcWorks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcWorks) ProtoMessage() {}

func (x *UgcWorks) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcWorks.ProtoReflect.Descriptor instead.
func (*UgcWorks) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{109}
}

func (x *UgcWorks) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UgcWorks) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UgcWorks) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *UgcWorks) GetSupport() int32 {
	if x != nil {
		return x.Support
	}
	return 0
}

func (x *UgcWorks) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UgcWorks) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UgcWorks) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UgcWorks) GetSkinType() int32 {
	if x != nil {
		return x.SkinType
	}
	return 0
}

func (x *UgcWorks) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *UgcWorks) GetUploadTs() int32 {
	if x != nil {
		return x.UploadTs
	}
	return 0
}

func (x *UgcWorks) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UgcWorks) GetNormal() *UgcWorksLink {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *UgcWorks) GetSpeed() *UgcWorksLink {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *UgcWorks) GetGameInfo() string {
	if x != nil {
		return x.GameInfo
	}
	return ""
}

func (x *UgcWorks) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *UgcWorks) GetKsId() int32 {
	if x != nil {
		return x.KsId
	}
	return 0
}

func (x *UgcWorks) GetBgId() int32 {
	if x != nil {
		return x.BgId
	}
	return 0
}

func (x *UgcWorks) GetSkinInfo() *UgcWorks {
	if x != nil {
		return x.SkinInfo
	}
	return nil
}

func (x *UgcWorks) GetKsInfo() *UgcWorks {
	if x != nil {
		return x.KsInfo
	}
	return nil
}

func (x *UgcWorks) GetBgInfo() *UgcWorks {
	if x != nil {
		return x.BgInfo
	}
	return nil
}

type UgcWorksLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadImgurl string   `protobuf:"bytes,1,opt,name=head_imgurl,json=headImgurl,proto3" json:"head_imgurl,omitempty"`
	BodyImgurl []string `protobuf:"bytes,2,rep,name=body_imgurl,json=bodyImgurl,proto3" json:"body_imgurl,omitempty"`
	TailImgurl string   `protobuf:"bytes,3,opt,name=tail_imgurl,json=tailImgurl,proto3" json:"tail_imgurl,omitempty"`
}

func (x *UgcWorksLink) Reset() {
	*x = UgcWorksLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcWorksLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcWorksLink) ProtoMessage() {}

func (x *UgcWorksLink) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcWorksLink.ProtoReflect.Descriptor instead.
func (*UgcWorksLink) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{110}
}

func (x *UgcWorksLink) GetHeadImgurl() string {
	if x != nil {
		return x.HeadImgurl
	}
	return ""
}

func (x *UgcWorksLink) GetBodyImgurl() []string {
	if x != nil {
		return x.BodyImgurl
	}
	return nil
}

func (x *UgcWorksLink) GetTailImgurl() string {
	if x != nil {
		return x.TailImgurl
	}
	return ""
}

// MonthCard Start
type MonthCardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardDesc        string      `protobuf:"bytes,1,opt,name=card_desc,json=cardDesc,proto3" json:"card_desc,omitempty"` //底部叠加获得奖励及特权点击打开后弹窗的文案
	Source          string      `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	LittleMonthCard *CMonthCard `protobuf:"bytes,3,opt,name=little_month_card,json=littleMonthCard,proto3" json:"little_month_card,omitempty"` //超值月卡
	SuperMonthCard  *CMonthCard `protobuf:"bytes,4,opt,name=super_month_card,json=superMonthCard,proto3" json:"super_month_card,omitempty"`    //至尊月卡
}

func (x *MonthCardConfig) Reset() {
	*x = MonthCardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardConfig) ProtoMessage() {}

func (x *MonthCardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardConfig.ProtoReflect.Descriptor instead.
func (*MonthCardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{111}
}

func (x *MonthCardConfig) GetCardDesc() string {
	if x != nil {
		return x.CardDesc
	}
	return ""
}

func (x *MonthCardConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MonthCardConfig) GetLittleMonthCard() *CMonthCard {
	if x != nil {
		return x.LittleMonthCard
	}
	return nil
}

func (x *MonthCardConfig) GetSuperMonthCard() *CMonthCard {
	if x != nil {
		return x.SuperMonthCard
	}
	return nil
}

type CMonthCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //背景图
	DailyReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=daily_reward,json=dailyReward,proto3" json:"daily_reward,omitempty"`
	Title       string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"` //特权标题
	Desc        string                 `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`   //特权描述
	Duration    int32                  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	FreePack    int32                  `protobuf:"varint,6,opt,name=free_pack,json=freePack,proto3" json:"free_pack,omitempty"` //免费礼包id
	PackId      int32                  `protobuf:"varint,7,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`       //月卡id，也是礼包id
	PackList    []*MonthCardPackItem   `protobuf:"bytes,8,rep,name=pack_list,json=packList,proto3" json:"pack_list,omitempty"`  //礼包列表
}

func (x *CMonthCard) Reset() {
	*x = CMonthCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMonthCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMonthCard) ProtoMessage() {}

func (x *CMonthCard) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMonthCard.ProtoReflect.Descriptor instead.
func (*CMonthCard) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{112}
}

func (x *CMonthCard) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CMonthCard) GetDailyReward() []*config.RewardConfig {
	if x != nil {
		return x.DailyReward
	}
	return nil
}

func (x *CMonthCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CMonthCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CMonthCard) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CMonthCard) GetFreePack() int32 {
	if x != nil {
		return x.FreePack
	}
	return 0
}

func (x *CMonthCard) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *CMonthCard) GetPackList() []*MonthCardPackItem {
	if x != nil {
		return x.PackList
	}
	return nil
}

type MonthCardPackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalPrice int32 `protobuf:"varint,1,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"` //原价
	PackId        int32 `protobuf:"varint,2,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`                      //礼包id
}

func (x *MonthCardPackItem) Reset() {
	*x = MonthCardPackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardPackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardPackItem) ProtoMessage() {}

func (x *MonthCardPackItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardPackItem.ProtoReflect.Descriptor instead.
func (*MonthCardPackItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{113}
}

func (x *MonthCardPackItem) GetOriginalPrice() int32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *MonthCardPackItem) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

// TopListConfig Start
type TopListConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceList         []string `protobuf:"bytes,1,rep,name=province_list,json=provinceList,proto3" json:"province_list,omitempty"`
	UserTopListResetTips string   `protobuf:"bytes,2,opt,name=user_top_list_reset_tips,json=userTopListResetTips,proto3" json:"user_top_list_reset_tips,omitempty"`
	ClanTopListResetTips string   `protobuf:"bytes,3,opt,name=clan_top_list_reset_tips,json=clanTopListResetTips,proto3" json:"clan_top_list_reset_tips,omitempty"`
}

func (x *TopListConfig) Reset() {
	*x = TopListConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopListConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopListConfig) ProtoMessage() {}

func (x *TopListConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopListConfig.ProtoReflect.Descriptor instead.
func (*TopListConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{114}
}

func (x *TopListConfig) GetProvinceList() []string {
	if x != nil {
		return x.ProvinceList
	}
	return nil
}

func (x *TopListConfig) GetUserTopListResetTips() string {
	if x != nil {
		return x.UserTopListResetTips
	}
	return ""
}

func (x *TopListConfig) GetClanTopListResetTips() string {
	if x != nil {
		return x.ClanTopListResetTips
	}
	return ""
}

// 小秘书相关配置 Start
type SnakeSecretary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *SecretaryModel `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`   // 常见问题
	Account *SecretaryModel `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"` // 账户问题
	Order   *SecretaryModel `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`     // 充值问题
}

func (x *SnakeSecretary) Reset() {
	*x = SnakeSecretary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeSecretary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeSecretary) ProtoMessage() {}

func (x *SnakeSecretary) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeSecretary.ProtoReflect.Descriptor instead.
func (*SnakeSecretary) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{115}
}

func (x *SnakeSecretary) GetCommon() *SecretaryModel {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SnakeSecretary) GetAccount() *SecretaryModel {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *SnakeSecretary) GetOrder() *SecretaryModel {
	if x != nil {
		return x.Order
	}
	return nil
}

type SecretaryModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	QaList []*QAInfo `protobuf:"bytes,2,rep,name=qa_list,json=qaList,proto3" json:"qa_list,omitempty"`
}

func (x *SecretaryModel) Reset() {
	*x = SecretaryModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretaryModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretaryModel) ProtoMessage() {}

func (x *SecretaryModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretaryModel.ProtoReflect.Descriptor instead.
func (*SecretaryModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{116}
}

func (x *SecretaryModel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SecretaryModel) GetQaList() []*QAInfo {
	if x != nil {
		return x.QaList
	}
	return nil
}

type QAInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	A string `protobuf:"bytes,2,opt,name=a,proto3" json:"a,omitempty"`
}

func (x *QAInfo) Reset() {
	*x = QAInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QAInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QAInfo) ProtoMessage() {}

func (x *QAInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QAInfo.ProtoReflect.Descriptor instead.
func (*QAInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{117}
}

func (x *QAInfo) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *QAInfo) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

// 广告相关配置 Start
type AdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times                 int32            `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`                                //插页弹出局数间隔
	FirstTimes            int32            `protobuf:"varint,2,opt,name=first_times,json=firstTimes,proto3" json:"first_times,omitempty"`    //插页首弹局数
	TimesLimit            int32            `protobuf:"varint,3,opt,name=times_limit,json=timesLimit,proto3" json:"times_limit,omitempty"`    //插页每日弹出上限
	MinInterval           int32            `protobuf:"varint,4,opt,name=min_interval,json=minInterval,proto3" json:"min_interval,omitempty"` //最小时间间隔
	DelayLoad             int32            `protobuf:"varint,5,opt,name=delay_load,json=delayLoad,proto3" json:"delay_load,omitempty"`
	FirstTimeInterval     int32            `protobuf:"varint,6,opt,name=first_time_interval,json=firstTimeInterval,proto3" json:"first_time_interval,omitempty"`
	TimeInterval          int32            `protobuf:"varint,7,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	AdPercent             []*AdGrade       `protobuf:"bytes,8,rep,name=ad_percent,json=adPercent,proto3" json:"ad_percent,omitempty"`
	InterstitialAdPercent []*AdGrade       `protobuf:"bytes,9,rep,name=interstitial_ad_percent,json=interstitialAdPercent,proto3" json:"interstitial_ad_percent,omitempty"`
	ExcessiveAd           []*AdGrade       `protobuf:"bytes,10,rep,name=excessive_ad,json=excessiveAd,proto3" json:"excessive_ad,omitempty"`
	GoodsList             []*IAPPackGoods  `protobuf:"bytes,11,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	SwitchSetting         []*AdSwitch      `protobuf:"bytes,12,rep,name=switch_setting,json=switchSetting,proto3" json:"switch_setting,omitempty"`
	AdAppidConfig         []*AdAppidConfig `protobuf:"bytes,13,rep,name=ad_appid_config,json=adAppidConfig,proto3" json:"ad_appid_config,omitempty"`
	ExcessiveAdCount      int32            `protobuf:"varint,14,opt,name=excessive_ad_count,json=excessiveAdCount,proto3" json:"excessive_ad_count,omitempty"` //原生自定义广告展示局数
	AdDiamondState        int32            `protobuf:"varint,15,opt,name=ad_diamond_state,json=adDiamondState,proto3" json:"ad_diamond_state,omitempty"`
	AdReliveState         int32            `protobuf:"varint,16,opt,name=ad_relive_state,json=adReliveState,proto3" json:"ad_relive_state,omitempty"`
	ReviewState           int32            `protobuf:"varint,17,opt,name=review_state,json=reviewState,proto3" json:"review_state,omitempty"`                       //审核开关，0：不在审核，1：审核中，此参数优先级高于switch_setting
	IsAdBefore            int32            `protobuf:"varint,18,opt,name=is_ad_before,json=isAdBefore,proto3" json:"is_ad_before,omitempty"`                        //1是广告先播，2是结束页先播
	AdChestReduceTime     int32            `protobuf:"varint,19,opt,name=ad_chest_reduce_time,json=adChestReduceTime,proto3" json:"ad_chest_reduce_time,omitempty"` //宝箱看广告减cd
}

func (x *AdConfig) Reset() {
	*x = AdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdConfig) ProtoMessage() {}

func (x *AdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdConfig.ProtoReflect.Descriptor instead.
func (*AdConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{118}
}

func (x *AdConfig) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *AdConfig) GetFirstTimes() int32 {
	if x != nil {
		return x.FirstTimes
	}
	return 0
}

func (x *AdConfig) GetTimesLimit() int32 {
	if x != nil {
		return x.TimesLimit
	}
	return 0
}

func (x *AdConfig) GetMinInterval() int32 {
	if x != nil {
		return x.MinInterval
	}
	return 0
}

func (x *AdConfig) GetDelayLoad() int32 {
	if x != nil {
		return x.DelayLoad
	}
	return 0
}

func (x *AdConfig) GetFirstTimeInterval() int32 {
	if x != nil {
		return x.FirstTimeInterval
	}
	return 0
}

func (x *AdConfig) GetTimeInterval() int32 {
	if x != nil {
		return x.TimeInterval
	}
	return 0
}

func (x *AdConfig) GetAdPercent() []*AdGrade {
	if x != nil {
		return x.AdPercent
	}
	return nil
}

func (x *AdConfig) GetInterstitialAdPercent() []*AdGrade {
	if x != nil {
		return x.InterstitialAdPercent
	}
	return nil
}

func (x *AdConfig) GetExcessiveAd() []*AdGrade {
	if x != nil {
		return x.ExcessiveAd
	}
	return nil
}

func (x *AdConfig) GetGoodsList() []*IAPPackGoods {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *AdConfig) GetSwitchSetting() []*AdSwitch {
	if x != nil {
		return x.SwitchSetting
	}
	return nil
}

func (x *AdConfig) GetAdAppidConfig() []*AdAppidConfig {
	if x != nil {
		return x.AdAppidConfig
	}
	return nil
}

func (x *AdConfig) GetExcessiveAdCount() int32 {
	if x != nil {
		return x.ExcessiveAdCount
	}
	return 0
}

func (x *AdConfig) GetAdDiamondState() int32 {
	if x != nil {
		return x.AdDiamondState
	}
	return 0
}

func (x *AdConfig) GetAdReliveState() int32 {
	if x != nil {
		return x.AdReliveState
	}
	return 0
}

func (x *AdConfig) GetReviewState() int32 {
	if x != nil {
		return x.ReviewState
	}
	return 0
}

func (x *AdConfig) GetIsAdBefore() int32 {
	if x != nil {
		return x.IsAdBefore
	}
	return 0
}

func (x *AdConfig) GetAdChestReduceTime() int32 {
	if x != nil {
		return x.AdChestReduceTime
	}
	return 0
}

type AdGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Grade int32  `protobuf:"varint,2,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *AdGrade) Reset() {
	*x = AdGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdGrade) ProtoMessage() {}

func (x *AdGrade) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdGrade.ProtoReflect.Descriptor instead.
func (*AdGrade) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{119}
}

func (x *AdGrade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdGrade) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

type AdSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AdSwitch) Reset() {
	*x = AdSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdSwitch) ProtoMessage() {}

func (x *AdSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdSwitch.ProtoReflect.Descriptor instead.
func (*AdSwitch) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{120}
}

func (x *AdSwitch) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdSwitch) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AdAppidConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	AdKey string `protobuf:"bytes,2,opt,name=ad_key,json=adKey,proto3" json:"ad_key,omitempty"`
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AdId  string `protobuf:"bytes,4,opt,name=ad_id,json=adId,proto3" json:"ad_id,omitempty"`
}

func (x *AdAppidConfig) Reset() {
	*x = AdAppidConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdAppidConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAppidConfig) ProtoMessage() {}

func (x *AdAppidConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAppidConfig.ProtoReflect.Descriptor instead.
func (*AdAppidConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{121}
}

func (x *AdAppidConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdAppidConfig) GetAdKey() string {
	if x != nil {
		return x.AdKey
	}
	return ""
}

func (x *AdAppidConfig) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AdAppidConfig) GetAdId() string {
	if x != nil {
		return x.AdId
	}
	return ""
}

// 魅力之旅 Start
type CharmTourConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intro           string                         `protobuf:"bytes,1,opt,name=intro,proto3" json:"intro,omitempty"`
	CharmTitleList  []*CharmTourConfig_LevelDetail `protobuf:"bytes,2,rep,name=charm_title_list,json=charmTitleList,proto3" json:"charm_title_list,omitempty"`
	CharmLevelList  []*CharmTourConfig_LevelConfig `protobuf:"bytes,3,rep,name=charm_level_list,json=charmLevelList,proto3" json:"charm_level_list,omitempty"`
	WishGiftDescUrl string                         `protobuf:"bytes,4,opt,name=wish_gift_desc_url,json=wishGiftDescUrl,proto3" json:"wish_gift_desc_url,omitempty"`
	AllTagShowTime  int64                          `protobuf:"varint,5,opt,name=all_tag_show_time,json=allTagShowTime,proto3" json:"all_tag_show_time,omitempty"`
}

func (x *CharmTourConfig) Reset() {
	*x = CharmTourConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourConfig) ProtoMessage() {}

func (x *CharmTourConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourConfig.ProtoReflect.Descriptor instead.
func (*CharmTourConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{122}
}

func (x *CharmTourConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *CharmTourConfig) GetCharmTitleList() []*CharmTourConfig_LevelDetail {
	if x != nil {
		return x.CharmTitleList
	}
	return nil
}

func (x *CharmTourConfig) GetCharmLevelList() []*CharmTourConfig_LevelConfig {
	if x != nil {
		return x.CharmLevelList
	}
	return nil
}

func (x *CharmTourConfig) GetWishGiftDescUrl() string {
	if x != nil {
		return x.WishGiftDescUrl
	}
	return ""
}

func (x *CharmTourConfig) GetAllTagShowTime() int64 {
	if x != nil {
		return x.AllTagShowTime
	}
	return 0
}

// 礼物墙 Start
type GiftWallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftWallDesc  string                      `protobuf:"bytes,1,opt,name=gift_wall_desc,json=giftWallDesc,proto3" json:"gift_wall_desc,omitempty"`
	NameplateList []*GiftWallConfig_NamePlate `protobuf:"bytes,2,rep,name=nameplate_list,json=nameplateList,proto3" json:"nameplate_list,omitempty"`
}

func (x *GiftWallConfig) Reset() {
	*x = GiftWallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftWallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftWallConfig) ProtoMessage() {}

func (x *GiftWallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftWallConfig.ProtoReflect.Descriptor instead.
func (*GiftWallConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{123}
}

func (x *GiftWallConfig) GetGiftWallDesc() string {
	if x != nil {
		return x.GiftWallDesc
	}
	return ""
}

func (x *GiftWallConfig) GetNameplateList() []*GiftWallConfig_NamePlate {
	if x != nil {
		return x.NameplateList
	}
	return nil
}

type SuperShowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SkinId    int32 `protobuf:"varint,3,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` // 超级秀皮肤id
}

func (x *SuperShowConfig) Reset() {
	*x = SuperShowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperShowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperShowConfig) ProtoMessage() {}

func (x *SuperShowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperShowConfig.ProtoReflect.Descriptor instead.
func (*SuperShowConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{124}
}

func (x *SuperShowConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SuperShowConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SuperShowConfig) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

// 师徒 Start
type MentorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterPrivilegeConfig  []*MentorPrivilegeInfo    `protobuf:"bytes,1,rep,name=master_privilege_config,json=masterPrivilegeConfig,proto3" json:"master_privilege_config,omitempty"`
	BondTitleConfig        []*MentorshipBondConfig   `protobuf:"bytes,2,rep,name=bond_title_config,json=bondTitleConfig,proto3" json:"bond_title_config,omitempty"`
	FinishReward           *MentorFinishReward       `protobuf:"bytes,3,opt,name=finish_reward,json=finishReward,proto3" json:"finish_reward,omitempty"`
	MasterPrenticeStrategy []*MasterPrenticeStrategy `protobuf:"bytes,4,rep,name=master_prentice_strategy,json=masterPrenticeStrategy,proto3" json:"master_prentice_strategy,omitempty"`
	MasterStarLimit        int32                     `protobuf:"varint,5,opt,name=master_star_limit,json=masterStarLimit,proto3" json:"master_star_limit,omitempty"`
	BreakHourLimit         int32                     `protobuf:"varint,6,opt,name=break_hour_limit,json=breakHourLimit,proto3" json:"break_hour_limit,omitempty"`
	MentorshipOpen         int32                     `protobuf:"varint,7,opt,name=mentorship_open,json=mentorshipOpen,proto3" json:"mentorship_open,omitempty"`
}

func (x *MentorConfig) Reset() {
	*x = MentorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorConfig) ProtoMessage() {}

func (x *MentorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorConfig.ProtoReflect.Descriptor instead.
func (*MentorConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{125}
}

func (x *MentorConfig) GetMasterPrivilegeConfig() []*MentorPrivilegeInfo {
	if x != nil {
		return x.MasterPrivilegeConfig
	}
	return nil
}

func (x *MentorConfig) GetBondTitleConfig() []*MentorshipBondConfig {
	if x != nil {
		return x.BondTitleConfig
	}
	return nil
}

func (x *MentorConfig) GetFinishReward() *MentorFinishReward {
	if x != nil {
		return x.FinishReward
	}
	return nil
}

func (x *MentorConfig) GetMasterPrenticeStrategy() []*MasterPrenticeStrategy {
	if x != nil {
		return x.MasterPrenticeStrategy
	}
	return nil
}

func (x *MentorConfig) GetMasterStarLimit() int32 {
	if x != nil {
		return x.MasterStarLimit
	}
	return 0
}

func (x *MentorConfig) GetBreakHourLimit() int32 {
	if x != nil {
		return x.BreakHourLimit
	}
	return 0
}

func (x *MentorConfig) GetMentorshipOpen() int32 {
	if x != nil {
		return x.MentorshipOpen
	}
	return 0
}

type MentorPrivilegeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TitleImg        string                 `protobuf:"bytes,2,opt,name=title_img,json=titleImg,proto3" json:"title_img,omitempty"`
	Level           int32                  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	LevelExp        int32                  `protobuf:"varint,4,opt,name=level_exp,json=levelExp,proto3" json:"level_exp,omitempty"`
	Addition        int32                  `protobuf:"varint,5,opt,name=addition,proto3" json:"addition,omitempty"`
	PrivilegeConfig []*PrivilegeDetailInfo `protobuf:"bytes,6,rep,name=privilege_config,json=privilegeConfig,proto3" json:"privilege_config,omitempty"`
	PrivilegeReward []*config.RewardConfig `protobuf:"bytes,7,rep,name=privilege_reward,json=privilegeReward,proto3" json:"privilege_reward,omitempty"`
}

func (x *MentorPrivilegeInfo) Reset() {
	*x = MentorPrivilegeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorPrivilegeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorPrivilegeInfo) ProtoMessage() {}

func (x *MentorPrivilegeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorPrivilegeInfo.ProtoReflect.Descriptor instead.
func (*MentorPrivilegeInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{126}
}

func (x *MentorPrivilegeInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MentorPrivilegeInfo) GetTitleImg() string {
	if x != nil {
		return x.TitleImg
	}
	return ""
}

func (x *MentorPrivilegeInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetLevelExp() int32 {
	if x != nil {
		return x.LevelExp
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetAddition() int32 {
	if x != nil {
		return x.Addition
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetPrivilegeConfig() []*PrivilegeDetailInfo {
	if x != nil {
		return x.PrivilegeConfig
	}
	return nil
}

func (x *MentorPrivilegeInfo) GetPrivilegeReward() []*config.RewardConfig {
	if x != nil {
		return x.PrivilegeReward
	}
	return nil
}

type PrivilegeDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgUrl string `protobuf:"bytes,1,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PrivilegeDetailInfo) Reset() {
	*x = PrivilegeDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeDetailInfo) ProtoMessage() {}

func (x *PrivilegeDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeDetailInfo.ProtoReflect.Descriptor instead.
func (*PrivilegeDetailInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{127}
}

func (x *PrivilegeDetailInfo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *PrivilegeDetailInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type MentorshipBondConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FadeTime     int64 `protobuf:"varint,1,opt,name=fade_time,json=fadeTime,proto3" json:"fade_time,omitempty"`               // 褪色时间(s)
	BondLevel    int32 `protobuf:"varint,2,opt,name=bond_level,json=bondLevel,proto3" json:"bond_level,omitempty"`            // 羁绊等级
	BondLevelExp int32 `protobuf:"varint,3,opt,name=bond_level_exp,json=bondLevelExp,proto3" json:"bond_level_exp,omitempty"` // 羁绊等级对应经验值
}

func (x *MentorshipBondConfig) Reset() {
	*x = MentorshipBondConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorshipBondConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorshipBondConfig) ProtoMessage() {}

func (x *MentorshipBondConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorshipBondConfig.ProtoReflect.Descriptor instead.
func (*MentorshipBondConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{128}
}

func (x *MentorshipBondConfig) GetFadeTime() int64 {
	if x != nil {
		return x.FadeTime
	}
	return 0
}

func (x *MentorshipBondConfig) GetBondLevel() int32 {
	if x != nil {
		return x.BondLevel
	}
	return 0
}

func (x *MentorshipBondConfig) GetBondLevelExp() int32 {
	if x != nil {
		return x.BondLevelExp
	}
	return 0
}

type MentorFinishReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterReward   []*config.RewardConfig `protobuf:"bytes,1,rep,name=master_reward,json=masterReward,proto3" json:"master_reward,omitempty"`
	PrenticeReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=prentice_reward,json=prenticeReward,proto3" json:"prentice_reward,omitempty"`
}

func (x *MentorFinishReward) Reset() {
	*x = MentorFinishReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorFinishReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorFinishReward) ProtoMessage() {}

func (x *MentorFinishReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorFinishReward.ProtoReflect.Descriptor instead.
func (*MentorFinishReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{129}
}

func (x *MentorFinishReward) GetMasterReward() []*config.RewardConfig {
	if x != nil {
		return x.MasterReward
	}
	return nil
}

func (x *MentorFinishReward) GetPrenticeReward() []*config.RewardConfig {
	if x != nil {
		return x.PrenticeReward
	}
	return nil
}

type MasterPrenticeStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Img   string `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *MasterPrenticeStrategy) Reset() {
	*x = MasterPrenticeStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterPrenticeStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterPrenticeStrategy) ProtoMessage() {}

func (x *MasterPrenticeStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterPrenticeStrategy.ProtoReflect.Descriptor instead.
func (*MasterPrenticeStrategy) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{130}
}

func (x *MasterPrenticeStrategy) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MasterPrenticeStrategy) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// 礼物图鉴 Start
type GiftIllustrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescUrl   string                 `protobuf:"bytes,1,opt,name=desc_url,json=descUrl,proto3" json:"desc_url,omitempty"`
	GuideUrl  string                 `protobuf:"bytes,2,opt,name=guide_url,json=guideUrl,proto3" json:"guide_url,omitempty"`
	TitleList []*GiftTitleItemConfig `protobuf:"bytes,3,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
}

func (x *GiftIllustrationConfig) Reset() {
	*x = GiftIllustrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftIllustrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftIllustrationConfig) ProtoMessage() {}

func (x *GiftIllustrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftIllustrationConfig.ProtoReflect.Descriptor instead.
func (*GiftIllustrationConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{131}
}

func (x *GiftIllustrationConfig) GetDescUrl() string {
	if x != nil {
		return x.DescUrl
	}
	return ""
}

func (x *GiftIllustrationConfig) GetGuideUrl() string {
	if x != nil {
		return x.GuideUrl
	}
	return ""
}

func (x *GiftIllustrationConfig) GetTitleList() []*GiftTitleItemConfig {
	if x != nil {
		return x.TitleList
	}
	return nil
}

type GiftTitleItemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img  string `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *GiftTitleItemConfig) Reset() {
	*x = GiftTitleItemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTitleItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTitleItemConfig) ProtoMessage() {}

func (x *GiftTitleItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTitleItemConfig.ProtoReflect.Descriptor instead.
func (*GiftTitleItemConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{132}
}

func (x *GiftTitleItemConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftTitleItemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GiftTitleItemConfig) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

type ExtraBuff_ExtraBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Rate  int32  `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Tips  string `protobuf:"bytes,5,opt,name=tips,proto3" json:"tips,omitempty"`
}

func (x *ExtraBuff_ExtraBuffInfo) Reset() {
	*x = ExtraBuff_ExtraBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraBuff_ExtraBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraBuff_ExtraBuffInfo) ProtoMessage() {}

func (x *ExtraBuff_ExtraBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraBuff_ExtraBuffInfo.ProtoReflect.Descriptor instead.
func (*ExtraBuff_ExtraBuffInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{36, 0}
}

func (x *ExtraBuff_ExtraBuffInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtraBuff_ExtraBuffInfo) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

type CharmTourConfig_LevelDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameUrl         string                 `protobuf:"bytes,2,opt,name=name_url,json=nameUrl,proto3" json:"name_url,omitempty"` // 标题艺术字图片
	Title           string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                    // 标题文字
	IconUrl         string                 `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	AnimUrl         string                 `protobuf:"bytes,5,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType        int32                  `protobuf:"varint,6,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Rewards         []*config.RewardConfig `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	NeedCollect     int32                  `protobuf:"varint,8,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"` // 达到该等级需要解锁的礼物个数
	StartCharmLevel int32                  `protobuf:"varint,9,opt,name=start_charm_level,json=startCharmLevel,proto3" json:"start_charm_level,omitempty"`
	EndCharmLevel   int32                  `protobuf:"varint,10,opt,name=end_charm_level,json=endCharmLevel,proto3" json:"end_charm_level,omitempty"`
}

func (x *CharmTourConfig_LevelDetail) Reset() {
	*x = CharmTourConfig_LevelDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourConfig_LevelDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourConfig_LevelDetail) ProtoMessage() {}

func (x *CharmTourConfig_LevelDetail) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourConfig_LevelDetail.ProtoReflect.Descriptor instead.
func (*CharmTourConfig_LevelDetail) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{122, 0}
}

func (x *CharmTourConfig_LevelDetail) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharmTourConfig_LevelDetail) GetNameUrl() string {
	if x != nil {
		return x.NameUrl
	}
	return ""
}

func (x *CharmTourConfig_LevelDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CharmTourConfig_LevelDetail) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CharmTourConfig_LevelDetail) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *CharmTourConfig_LevelDetail) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *CharmTourConfig_LevelDetail) GetRewards() []*config.RewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *CharmTourConfig_LevelDetail) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *CharmTourConfig_LevelDetail) GetStartCharmLevel() int32 {
	if x != nil {
		return x.StartCharmLevel
	}
	return 0
}

func (x *CharmTourConfig_LevelDetail) GetEndCharmLevel() int32 {
	if x != nil {
		return x.EndCharmLevel
	}
	return 0
}

type CharmTourConfig_LevelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Charm int64 `protobuf:"varint,2,opt,name=charm,proto3" json:"charm,omitempty"`
}

func (x *CharmTourConfig_LevelConfig) Reset() {
	*x = CharmTourConfig_LevelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourConfig_LevelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourConfig_LevelConfig) ProtoMessage() {}

func (x *CharmTourConfig_LevelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourConfig_LevelConfig.ProtoReflect.Descriptor instead.
func (*CharmTourConfig_LevelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{122, 1}
}

func (x *CharmTourConfig_LevelConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharmTourConfig_LevelConfig) GetCharm() int64 {
	if x != nil {
		return x.Charm
	}
	return 0
}

type GiftWallConfig_NamePlate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Imgurl        string `protobuf:"bytes,2,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	NameplateType int32  `protobuf:"varint,3,opt,name=nameplate_type,json=nameplateType,proto3" json:"nameplate_type,omitempty"` // 1-集星周铭牌；2-累计集星铭牌；3-点亮铭牌
	NeedStar      int32  `protobuf:"varint,4,opt,name=need_star,json=needStar,proto3" json:"need_star,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GiftWallConfig_NamePlate) Reset() {
	*x = GiftWallConfig_NamePlate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftWallConfig_NamePlate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftWallConfig_NamePlate) ProtoMessage() {}

func (x *GiftWallConfig_NamePlate) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftWallConfig_NamePlate.ProtoReflect.Descriptor instead.
func (*GiftWallConfig_NamePlate) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{123, 0}
}

func (x *GiftWallConfig_NamePlate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *GiftWallConfig_NamePlate) GetNameplateType() int32 {
	if x != nil {
		return x.NameplateType
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetNeedStar() int32 {
	if x != nil {
		return x.NeedStar
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_snakecommon_config_proto protoreflect.FileDescriptor

var file_snakecommon_config_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1d, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x53, 0x4b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x43, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62,
	0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x08, 0x43, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x19, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x69,
	0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x65, 0x0a, 0x0a, 0x48, 0x61,
	0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x62, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66,
	0x66, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x0f,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x7b, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xe5,
	0x02, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x50,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0c,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x67, 0x49,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x56, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xf3, 0x02, 0x0a,
	0x08, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x78, 0x70, 0x12, 0x37,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x56, 0x69, 0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d,
	0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0x6b, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x22,
	0xe8, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x12, 0x4a, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd3, 0x02, 0x0a, 0x10, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x76, 0x32,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c,
	0x73, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x74,
	0x74, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x22, 0xc8, 0x04, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x56, 0x32,
	0x12, 0x39, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x56, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x56, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61,
	0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56,
	0x6f, 0x77, 0x46, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x72,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x72, 0x6d, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc4, 0x03, 0x0a, 0x0b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x71,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x79, 0x51,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x70,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0e,
	0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x61, 0x67, 0x22, 0x54, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x22, 0x74, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x70,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x67, 0x22, 0x8e,
	0x01, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0xa9, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71,
	0x71, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x71, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x71, 0x5f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x71, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x22, 0x67, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x69, 0x61, 0x6f, 0x6d, 0x69, 0x5f,
	0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x69, 0x61, 0x6f, 0x6d,
	0x69, 0x49, 0x6d, 0x67, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x6d,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x72, 0x6d, 0x45, 0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xac, 0x01,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x42, 0x67, 0x55, 0x72, 0x6c, 0x22, 0x6f, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc0, 0x04,
	0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x42, 0x65, 0x74, 0x61, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x67, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x16, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x69,
	0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x69, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x12, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x44, 0x0a, 0x12, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x43, 0x6c, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x08, 0x22,
	0x34, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x8c, 0x06, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x3d, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65,
	0x65, 0x74, 0x75, 0x70, 0x5f, 0x76, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x65, 0x74,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x65,
	0x74, 0x75, 0x70, 0x56, 0x33, 0x12, 0x32, 0x0a, 0x09, 0x68, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x67, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x74, 0x63, 0x68, 0x45, 0x67, 0x67, 0x52,
	0x08, 0x68, 0x61, 0x74, 0x63, 0x68, 0x45, 0x67, 0x67, 0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65,
	0x77, 0x62, 0x69, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x09, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74,
	0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e,
	0x5f, 0x75, 0x67, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x67, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x55, 0x67, 0x63, 0x12,
	0x32, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x41, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x75, 0x67, 0x63, 0x5f,
	0x76, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x67, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x55, 0x67, 0x63, 0x56,
	0x32, 0x12, 0x4e, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x52, 0x11,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56,
	0x32, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x44,
	0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x22, 0xe4, 0x07, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x1a, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x04, 0x62, 0x6f,
	0x73, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x69, 0x5f,
	0x73, 0x6b, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x06, 0x61, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x12,
	0x45, 0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x69, 0x53, 0x6b,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x52, 0x0c, 0x61, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x57,
	0x0a, 0x12, 0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x11, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x63, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x36, 0x0a, 0x10, 0x49,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1f, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x15, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd3, 0x02, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x61, 0x6c,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x22, 0x82, 0x06, 0x0a,
	0x0c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x72,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x52, 0x61, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x70, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x70, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x38, 0x0a, 0x19, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x77, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xaa, 0x03, 0x0a, 0x16, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61,
	0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x75, 0x73, 0x68,
	0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x4d, 0x75, 0x73, 0x68, 0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x70, 0x61, 0x77,
	0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x75, 0x73, 0x68, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x75, 0x73, 0x68,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x88,
	0x03, 0x0a, 0x09, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x66, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0f, 0x62, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x62, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x71, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x16, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1c, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x69, 0x44, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xf0, 0x02, 0x0a, 0x0e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x61, 0x69, 0x64, 0x61, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61,
	0x69, 0x44, 0x61, 0x6e, 0x52, 0x0a, 0x63, 0x61, 0x69, 0x64, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x72, 0x75,
	0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x75, 0x65, 0x4c, 0x6f, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x7b, 0x0a,
	0x0c, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x64,
	0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x62,
	0x69, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x07, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x03, 0x0a, 0x08, 0x48, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x67, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x12,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x67, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x65, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xcc, 0x01,
	0x0a, 0x0c, 0x45, 0x67, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x01, 0x0a,
	0x0c, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x2e, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x9b, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a,
	0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x98, 0x03, 0x0a, 0x10, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6d,
	0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x6d, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x13,
	0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xba, 0x03, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6d, 0x62,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6d,
	0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0x8a, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x56, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22,
	0xf2, 0x06, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x70, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x67, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x67, 0x41, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x31,
	0x0a, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62,
	0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f,
	0x6e, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x75, 0x78, 0x75, 0x72,
	0x79, 0x55, 0x72, 0x6c, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0b,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xdd,
	0x02, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x68, 0x6f,
	0x6e, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x75, 0x78,
	0x75, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x6c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x95,
	0x03, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x68, 0x69, 0x67, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0e,
	0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38,
	0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x38, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x45, 0x78,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x61, 0x79, 0x45, 0x78, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x74, 0x6e, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x45, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x09, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xcf, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x12, 0x2b,
	0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x69, 0x67, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x6e, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x65, 0x65, 0x64, 0x56, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x62, 0x6f, 0x62, 0x5f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x6e, 0x61, 0x62, 0x6f, 0x62, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a,
	0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x8f, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x4b, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x22, 0x6c, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xbc, 0x01, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x45, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x76, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xff, 0x05, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0d, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x45, 0x0a, 0x10, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x71,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x75, 0x70,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x65,
	0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57,
	0x65, 0x62, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76,
	0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c,
	0x56, 0x32, 0x22, 0xa9, 0x02, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x61, 0x63, 0x65, 0x43, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x22, 0x41,
	0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x22, 0x65, 0x0a, 0x0e, 0x52, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12,
	0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x44, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x22, 0xcd, 0x04, 0x0a, 0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x55, 0x69, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x33, 0x12, 0x3f, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x49,
	0x63, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x45, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x38, 0x0a, 0x0b,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74,
	0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x6d, 0x6f,
	0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x75, 0x67, 0x65, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x75, 0x67, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x0f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x83, 0x03, 0x0a, 0x0f, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0a, 0x49, 0x63, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x08, 0x4d, 0x6f, 0x72, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x48, 0x69,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x45, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x06, 0x42,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x45,
	0x6e, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x6d,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x22, 0x7a, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x56, 0x32, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x22, 0x30, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0c,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6e,
	0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x52,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6f, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x04,
	0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b,
	0x0a, 0x14, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x10, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x55, 0x69, 0x12, 0x54,
	0x0a, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x61, 0x64, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x1a, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x52, 0x18, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x59, 0x0a, 0x18, 0x6d, 0x65,
	0x6c, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x16, 0x6d,
	0x65, 0x6c, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x22, 0x68, 0x0a, 0x0d, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xe1, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x69,
	0x6f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x70, 0x75, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x70, 0x75, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x15, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x70, 0x6f,
	0x70, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x31, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x64, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65,
	0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x32, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x22, 0x69, 0x0a, 0x0b, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x9b, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x85,
	0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x67, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x99, 0x04, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0e, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x12,
	0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x10, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x10, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x61, 0x70, 0x70, 0x70, 0x61, 0x79, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x61, 0x70,
	0x70, 0x70, 0x61, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x0d,
	0x70, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x13, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x10, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x43, 0x0a,
	0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x49, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0x77, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x68, 0x69, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x67, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x38, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x79, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xb3, 0x03, 0x0a, 0x0f, 0x53, 0x6b,
	0x69, 0x6e, 0x55, 0x67, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x63,
	0x6f, 0x6e, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x0b, 0x6b, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0d, 0x62, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x62, 0x67, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x75, 0x69, 0x74,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x70, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0x81, 0x01, 0x0a, 0x08, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x62, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x22, 0xe1, 0x04, 0x0a, 0x08, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67,
	0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x73, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x62, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62,
	0x67, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x08, 0x73,
	0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x6b, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52,
	0x06, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52,
	0x06, 0x62, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x0c, 0x55, 0x67, 0x63, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x6f, 0x64, 0x79, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x0a,
	0x43, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0c,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x70, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x18,
	0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x63, 0x6c, 0x61, 0x6e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x54, 0x69, 0x70, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x71, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x41,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x71, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x06,
	0x51, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x61, 0x22, 0xe7, 0x06, 0x0a, 0x08, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x33,
	0x0a, 0x0a, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x09, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x0b, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x41, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x41, 0x50,
	0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x41, 0x70, 0x70, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x61, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x41, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x61, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x61, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x73, 0x41, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61,
	0x64, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x07,
	0x41, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x34, 0x0a,
	0x08, 0x41, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x0d, 0x41, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x22, 0xb7, 0x05, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x6d,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x12, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x47,
	0x69, 0x66, 0x74, 0x44, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xd2, 0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x6d, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x47, 0x69, 0x66, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x4c,
	0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x8b, 0x01, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x0f, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0xdb, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x11, 0x62,
	0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42,
	0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x64, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x5d, 0x0a, 0x18, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x16, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x75, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xaf,
	0x02, 0x0a, 0x13, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x22, 0x42, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x22, 0x78, 0x0a, 0x14, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e,
	0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x6e, 0x64,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x22, 0xa2,
	0x01, 0x0a, 0x12, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x22, 0x40, 0x0a, 0x16, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x69, 0x66,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37,
	0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakecommon_config_proto_rawDescOnce sync.Once
	file_snakecommon_config_proto_rawDescData = file_snakecommon_config_proto_rawDesc
)

func file_snakecommon_config_proto_rawDescGZIP() []byte {
	file_snakecommon_config_proto_rawDescOnce.Do(func() {
		file_snakecommon_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecommon_config_proto_rawDescData)
	})
	return file_snakecommon_config_proto_rawDescData
}

var file_snakecommon_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_snakecommon_config_proto_msgTypes = make([]protoimpl.MessageInfo, 138)
var file_snakecommon_config_proto_goTypes = []interface{}{
	(ShortCutConfig_SceneType)(0),           // 0: snakecommon.ShortCutConfig.SceneType
	(*CRewardItem)(nil),                     // 1: snakecommon.CRewardItem
	(*CConvert)(nil),                        // 2: snakecommon.CConvert
	(*UnityQualifyingOpenConfig)(nil),       // 3: snakecommon.UnityQualifyingOpenConfig
	(*RecoderConfig)(nil),                   // 4: snakecommon.RecoderConfig
	(*HaighLight)(nil),                      // 5: snakecommon.HaighLight
	(*EndLessBuffPropInfo)(nil),             // 6: snakecommon.EndLessBuffPropInfo
	(*RandomPriceInfo)(nil),                 // 7: snakecommon.RandomPriceInfo
	(*RandomPropInfo)(nil),                  // 8: snakecommon.RandomPropInfo
	(*PingConfig)(nil),                      // 9: snakecommon.PingConfig
	(*ChargeVipConfig)(nil),                 // 10: snakecommon.ChargeVipConfig
	(*VipLevel)(nil),                        // 11: snakecommon.VipLevel
	(*VipPrivilege)(nil),                    // 12: snakecommon.VipPrivilege
	(*NetFrameGameConfig)(nil),              // 13: snakecommon.NetFrameGameConfig
	(*QualifyingConfig)(nil),                // 14: snakecommon.QualifyingConfig
	(*SocialConfig)(nil),                    // 15: snakecommon.SocialConfig
	(*ShareConfig)(nil),                     // 16: snakecommon.ShareConfig
	(*ShareTag)(nil),                        // 17: snakecommon.ShareTag
	(*ClipBoardCheck)(nil),                  // 18: snakecommon.ClipBoardCheck
	(*VideoShareIcon)(nil),                  // 19: snakecommon.VideoShareIcon
	(*ChannelConfig)(nil),                   // 20: snakecommon.ChannelConfig
	(*GameInvite)(nil),                      // 21: snakecommon.GameInvite
	(*CharmExpConfig)(nil),                  // 22: snakecommon.CharmExpConfig
	(*CharmExpRank)(nil),                    // 23: snakecommon.CharmExpRank
	(*CharmPrivilegeConfig)(nil),            // 24: snakecommon.CharmPrivilegeConfig
	(*TextConfig)(nil),                      // 25: snakecommon.TextConfig
	(*GiftLikeTextConfig)(nil),              // 26: snakecommon.GiftLikeTextConfig
	(*ShortCutConfig)(nil),                  // 27: snakecommon.ShortCutConfig
	(*ReportBehavior)(nil),                  // 28: snakecommon.ReportBehavior
	(*ActivityConfig)(nil),                  // 29: snakecommon.ActivityConfig
	(*EndlessFloatingV2)(nil),               // 30: snakecommon.EndlessFloatingV2
	(*IllustrateConfig)(nil),                // 31: snakecommon.IllustrateConfig
	(*IllustrateFloatingRefreshConfig)(nil), // 32: snakecommon.IllustrateFloatingRefreshConfig
	(*FloatingRefreshConfig)(nil),           // 33: snakecommon.FloatingRefreshConfig
	(*FloatingInfo)(nil),                    // 34: snakecommon.FloatingInfo
	(*TreasureHouseThemeInfo)(nil),          // 35: snakecommon.TreasureHouseThemeInfo
	(*BossTheme)(nil),                       // 36: snakecommon.BossTheme
	(*ExtraBuff)(nil),                       // 37: snakecommon.ExtraBuff
	(*FloatingAiSkin)(nil),                  // 38: snakecommon.FloatingAiSkin
	(*FloatingAiSkinRateInfo)(nil),          // 39: snakecommon.FloatingAiSkinRateInfo
	(*FloatingAiKillEffect)(nil),            // 40: snakecommon.FloatingAiKillEffect
	(*FloatingAiKillEffectRateInfo)(nil),    // 41: snakecommon.FloatingAiKillEffectRateInfo
	(*FloatingMainMapTheme)(nil),            // 42: snakecommon.FloatingMainMapTheme
	(*SeasonCaiDan)(nil),                    // 43: snakecommon.SeasonCaiDan
	(*SeasonActivity)(nil),                  // 44: snakecommon.SeasonActivity
	(*NewbieConfig)(nil),                    // 45: snakecommon.NewbieConfig
	(*NewbieSingleDayReward)(nil),           // 46: snakecommon.NewbieSingleDayReward
	(*HatchEgg)(nil),                        // 47: snakecommon.HatchEgg
	(*EggLevelInfo)(nil),                    // 48: snakecommon.EggLevelInfo
	(*MeetupConfig)(nil),                    // 49: snakecommon.MeetupConfig
	(*MeetupConfigItem)(nil),                // 50: snakecommon.MeetupConfigItem
	(*SingleDayReward)(nil),                 // 51: snakecommon.SingleDayReward
	(*SingleRewardItem)(nil),                // 52: snakecommon.SingleRewardItem
	(*EndlessRewardConfig)(nil),             // 53: snakecommon.EndlessRewardConfig
	(*EndlessReward)(nil),                   // 54: snakecommon.EndlessReward
	(*PassCheckV2)(nil),                     // 55: snakecommon.PassCheckV2
	(*PassCommonConfig)(nil),                // 56: snakecommon.PassCommonConfig
	(*PassRewardConfig)(nil),                // 57: snakecommon.PassRewardConfig
	(*PassRewardPreview)(nil),               // 58: snakecommon.PassRewardPreview
	(*WindowReward)(nil),                    // 59: snakecommon.WindowReward
	(*PassReward)(nil),                      // 60: snakecommon.PassReward
	(*PassTaskConfig)(nil),                  // 61: snakecommon.PassTaskConfig
	(*DailyTask)(nil),                       // 62: snakecommon.DailyTask
	(*WeeklyTask)(nil),                      // 63: snakecommon.WeeklyTask
	(*SeasonTask)(nil),                      // 64: snakecommon.SeasonTask
	(*GradeTask)(nil),                       // 65: snakecommon.GradeTask
	(*PassTaskModel)(nil),                   // 66: snakecommon.PassTaskModel
	(*PassStoreConfig)(nil),                 // 67: snakecommon.PassStoreConfig
	(*ExchangeStore)(nil),                   // 68: snakecommon.ExchangeStore
	(*ExchangePrice)(nil),                   // 69: snakecommon.ExchangePrice
	(*BattleRankReward)(nil),                // 70: snakecommon.BattleRankReward
	(*RankConfig)(nil),                      // 71: snakecommon.RankConfig
	(*RankReward)(nil),                      // 72: snakecommon.RankReward
	(*Level)(nil),                           // 73: snakecommon.Level
	(*ClanConfig)(nil),                      // 74: snakecommon.ClanConfig
	(*RuleDesc)(nil),                        // 75: snakecommon.RuleDesc
	(*ActivePointAddition)(nil),             // 76: snakecommon.ActivePointAddition
	(*RaceTimeConfig)(nil),                  // 77: snakecommon.RaceTimeConfig
	(*ClanRewardConfig)(nil),                // 78: snakecommon.ClanRewardConfig
	(*ClanLevelConfig)(nil),                 // 79: snakecommon.ClanLevelConfig
	(*HomeUiConfigV3)(nil),                  // 80: snakecommon.HomeUiConfigV3
	(*SlideIconConfig)(nil),                 // 81: snakecommon.SlideIconConfig
	(*IconConfig)(nil),                      // 82: snakecommon.IconConfig
	(*MoreGame)(nil),                        // 83: snakecommon.MoreGame
	(*Bubble)(nil),                          // 84: snakecommon.Bubble
	(*NewbieCondition)(nil),                 // 85: snakecommon.NewbieCondition
	(*CharmSocialConfig)(nil),               // 86: snakecommon.CharmSocialConfig
	(*CharmLevel)(nil),                      // 87: snakecommon.CharmLevel
	(*RewardMark)(nil),                      // 88: snakecommon.RewardMark
	(*RouletteConfig)(nil),                  // 89: snakecommon.RouletteConfig
	(*RewardTableBean)(nil),                 // 90: snakecommon.RewardTableBean
	(*RouletteSubConfig)(nil),               // 91: snakecommon.RouletteSubConfig
	(*ShowAdConfig)(nil),                    // 92: snakecommon.ShowAdConfig
	(*AdRewardModel)(nil),                   // 93: snakecommon.AdRewardModel
	(*AdPopupsConfig)(nil),                  // 94: snakecommon.AdPopupsConfig
	(*PopupPositionConfig)(nil),             // 95: snakecommon.PopupPositionConfig
	(*PopupConfig)(nil),                     // 96: snakecommon.PopupConfig
	(*EndlessAdRecommend)(nil),              // 97: snakecommon.EndlessAdRecommend
	(*SkinUgcConfig)(nil),                   // 98: snakecommon.SkinUgcConfig
	(*OrderConfig)(nil),                     // 99: snakecommon.OrderConfig
	(*IAPPackGoods)(nil),                    // 100: snakecommon.IAPPackGoods
	(*OrderRandomDouble)(nil),               // 101: snakecommon.OrderRandomDouble
	(*Title)(nil),                           // 102: snakecommon.Title
	(*ShowIllustrationConfig)(nil),          // 103: snakecommon.ShowIllustrationConfig
	(*ShowSeason)(nil),                      // 104: snakecommon.ShowSeason
	(*SeasonResource)(nil),                  // 105: snakecommon.SeasonResource
	(*ShowBadgeConfig)(nil),                 // 106: snakecommon.ShowBadgeConfig
	(*BadgeTitle)(nil),                      // 107: snakecommon.BadgeTitle
	(*SkinUgcConfigV2)(nil),                 // 108: snakecommon.SkinUgcConfigV2
	(*UgcTopic)(nil),                        // 109: snakecommon.UgcTopic
	(*UgcWorks)(nil),                        // 110: snakecommon.UgcWorks
	(*UgcWorksLink)(nil),                    // 111: snakecommon.UgcWorksLink
	(*MonthCardConfig)(nil),                 // 112: snakecommon.MonthCardConfig
	(*CMonthCard)(nil),                      // 113: snakecommon.CMonthCard
	(*MonthCardPackItem)(nil),               // 114: snakecommon.MonthCardPackItem
	(*TopListConfig)(nil),                   // 115: snakecommon.TopListConfig
	(*SnakeSecretary)(nil),                  // 116: snakecommon.SnakeSecretary
	(*SecretaryModel)(nil),                  // 117: snakecommon.SecretaryModel
	(*QAInfo)(nil),                          // 118: snakecommon.QAInfo
	(*AdConfig)(nil),                        // 119: snakecommon.AdConfig
	(*AdGrade)(nil),                         // 120: snakecommon.AdGrade
	(*AdSwitch)(nil),                        // 121: snakecommon.AdSwitch
	(*AdAppidConfig)(nil),                   // 122: snakecommon.AdAppidConfig
	(*CharmTourConfig)(nil),                 // 123: snakecommon.CharmTourConfig
	(*GiftWallConfig)(nil),                  // 124: snakecommon.GiftWallConfig
	(*SuperShowConfig)(nil),                 // 125: snakecommon.SuperShowConfig
	(*MentorConfig)(nil),                    // 126: snakecommon.MentorConfig
	(*MentorPrivilegeInfo)(nil),             // 127: snakecommon.MentorPrivilegeInfo
	(*PrivilegeDetailInfo)(nil),             // 128: snakecommon.PrivilegeDetailInfo
	(*MentorshipBondConfig)(nil),            // 129: snakecommon.MentorshipBondConfig
	(*MentorFinishReward)(nil),              // 130: snakecommon.MentorFinishReward
	(*MasterPrenticeStrategy)(nil),          // 131: snakecommon.MasterPrenticeStrategy
	(*GiftIllustrationConfig)(nil),          // 132: snakecommon.GiftIllustrationConfig
	(*GiftTitleItemConfig)(nil),             // 133: snakecommon.GiftTitleItemConfig
	nil,                                     // 134: snakecommon.PingConfig.PingIpListEntry
	(*ExtraBuff_ExtraBuffInfo)(nil),         // 135: snakecommon.ExtraBuff.ExtraBuffInfo
	(*CharmTourConfig_LevelDetail)(nil),     // 136: snakecommon.CharmTourConfig.LevelDetail
	(*CharmTourConfig_LevelConfig)(nil),     // 137: snakecommon.CharmTourConfig.LevelConfig
	(*GiftWallConfig_NamePlate)(nil),        // 138: snakecommon.GiftWallConfig.NamePlate
	(*config.RewardConfig)(nil),             // 139: SnakeMain.Config.RewardConfig
	(*config.PriceInfo)(nil),                // 140: SnakeMain.Config.PriceInfo
	(*config.PackModel)(nil),                // 141: SnakeMain.Config.PackModel
}
var file_snakecommon_config_proto_depIdxs = []int32{
	2,   // 0: snakecommon.CRewardItem.convert:type_name -> snakecommon.CConvert
	5,   // 1: snakecommon.RecoderConfig.highlight_list:type_name -> snakecommon.HaighLight
	7,   // 2: snakecommon.EndLessBuffPropInfo.price_list:type_name -> snakecommon.RandomPriceInfo
	8,   // 3: snakecommon.EndLessBuffPropInfo.prop_list:type_name -> snakecommon.RandomPropInfo
	134, // 4: snakecommon.PingConfig.ping_ip_list:type_name -> snakecommon.PingConfig.PingIpListEntry
	11,  // 5: snakecommon.ChargeVipConfig.level_list:type_name -> snakecommon.VipLevel
	12,  // 6: snakecommon.VipLevel.privilege:type_name -> snakecommon.VipPrivilege
	139, // 7: snakecommon.VipLevel.reward_list:type_name -> SnakeMain.Config.RewardConfig
	139, // 8: snakecommon.VipLevel.week_reward:type_name -> SnakeMain.Config.RewardConfig
	14,  // 9: snakecommon.NetFrameGameConfig.qualifying_config:type_name -> snakecommon.QualifyingConfig
	87,  // 10: snakecommon.SocialConfig.charm_level:type_name -> snakecommon.CharmLevel
	86,  // 11: snakecommon.SocialConfig.charm_top_config:type_name -> snakecommon.CharmSocialConfig
	20,  // 12: snakecommon.ShareConfig.channel_config:type_name -> snakecommon.ChannelConfig
	21,  // 13: snakecommon.ShareConfig.game_invite:type_name -> snakecommon.GameInvite
	19,  // 14: snakecommon.ShareConfig.video_share_icon:type_name -> snakecommon.VideoShareIcon
	18,  // 15: snakecommon.ShareConfig.clipboard_check:type_name -> snakecommon.ClipBoardCheck
	17,  // 16: snakecommon.ShareConfig.share_tag:type_name -> snakecommon.ShareTag
	23,  // 17: snakecommon.CharmExpConfig.charm_exp_ranks:type_name -> snakecommon.CharmExpRank
	24,  // 18: snakecommon.CharmExpConfig.privilege_config:type_name -> snakecommon.CharmPrivilegeConfig
	26,  // 19: snakecommon.TextConfig.gift_like_text_list:type_name -> snakecommon.GiftLikeTextConfig
	27,  // 20: snakecommon.TextConfig.quick_phrase_text_list:type_name -> snakecommon.ShortCutConfig
	28,  // 21: snakecommon.TextConfig.report_behavior_list:type_name -> snakecommon.ReportBehavior
	55,  // 22: snakecommon.ActivityConfig.pass_check_v2:type_name -> snakecommon.PassCheckV2
	49,  // 23: snakecommon.ActivityConfig.new_meetup_v3:type_name -> snakecommon.MeetupConfig
	47,  // 24: snakecommon.ActivityConfig.hatch_egg:type_name -> snakecommon.HatchEgg
	45,  // 25: snakecommon.ActivityConfig.newbie_checkin:type_name -> snakecommon.NewbieConfig
	53,  // 26: snakecommon.ActivityConfig.endless_game_reward:type_name -> snakecommon.EndlessRewardConfig
	89,  // 27: snakecommon.ActivityConfig.turntable:type_name -> snakecommon.RouletteConfig
	98,  // 28: snakecommon.ActivityConfig.skin_ugc:type_name -> snakecommon.SkinUgcConfig
	108, // 29: snakecommon.ActivityConfig.skin_ugc_v2:type_name -> snakecommon.SkinUgcConfigV2
	30,  // 30: snakecommon.ActivityConfig.endless_floating_v2:type_name -> snakecommon.EndlessFloatingV2
	125, // 31: snakecommon.ActivityConfig.super_show:type_name -> snakecommon.SuperShowConfig
	44,  // 32: snakecommon.ActivityConfig.season_activity:type_name -> snakecommon.SeasonActivity
	32,  // 33: snakecommon.EndlessFloatingV2.floating_refresh_config_v2:type_name -> snakecommon.IllustrateFloatingRefreshConfig
	34,  // 34: snakecommon.EndlessFloatingV2.floating_config:type_name -> snakecommon.FloatingInfo
	35,  // 35: snakecommon.EndlessFloatingV2.treasure_house:type_name -> snakecommon.TreasureHouseThemeInfo
	36,  // 36: snakecommon.EndlessFloatingV2.boss:type_name -> snakecommon.BossTheme
	37,  // 37: snakecommon.EndlessFloatingV2.extra_buff:type_name -> snakecommon.ExtraBuff
	38,  // 38: snakecommon.EndlessFloatingV2.ai_skin:type_name -> snakecommon.FloatingAiSkin
	39,  // 39: snakecommon.EndlessFloatingV2.ai_skin_rate:type_name -> snakecommon.FloatingAiSkinRateInfo
	40,  // 40: snakecommon.EndlessFloatingV2.ai_killeffect:type_name -> snakecommon.FloatingAiKillEffect
	41,  // 41: snakecommon.EndlessFloatingV2.ai_killeffect_rate:type_name -> snakecommon.FloatingAiKillEffectRateInfo
	42,  // 42: snakecommon.EndlessFloatingV2.main_map_theme:type_name -> snakecommon.FloatingMainMapTheme
	31,  // 43: snakecommon.EndlessFloatingV2.illustrate_config:type_name -> snakecommon.IllustrateConfig
	33,  // 44: snakecommon.IllustrateFloatingRefreshConfig.floating_refresh_config:type_name -> snakecommon.FloatingRefreshConfig
	135, // 45: snakecommon.ExtraBuff.buff_list:type_name -> snakecommon.ExtraBuff.ExtraBuffInfo
	43,  // 46: snakecommon.SeasonActivity.caidan_list:type_name -> snakecommon.SeasonCaiDan
	46,  // 47: snakecommon.NewbieConfig.day_list:type_name -> snakecommon.NewbieSingleDayReward
	139, // 48: snakecommon.NewbieSingleDayReward.reward_list:type_name -> SnakeMain.Config.RewardConfig
	139, // 49: snakecommon.HatchEgg.reward_review_list:type_name -> SnakeMain.Config.RewardConfig
	48,  // 50: snakecommon.HatchEgg.egg_list:type_name -> snakecommon.EggLevelInfo
	139, // 51: snakecommon.EggLevelInfo.reward_list:type_name -> SnakeMain.Config.RewardConfig
	50,  // 52: snakecommon.MeetupConfig.list:type_name -> snakecommon.MeetupConfigItem
	51,  // 53: snakecommon.MeetupConfigItem.days_list:type_name -> snakecommon.SingleDayReward
	52,  // 54: snakecommon.SingleDayReward.length_list:type_name -> snakecommon.SingleRewardItem
	139, // 55: snakecommon.SingleRewardItem.reward_list:type_name -> SnakeMain.Config.RewardConfig
	54,  // 56: snakecommon.EndlessRewardConfig.list:type_name -> snakecommon.EndlessReward
	139, // 57: snakecommon.EndlessReward.reward:type_name -> SnakeMain.Config.RewardConfig
	56,  // 58: snakecommon.PassCheckV2.common:type_name -> snakecommon.PassCommonConfig
	57,  // 59: snakecommon.PassCheckV2.reward_config:type_name -> snakecommon.PassRewardConfig
	61,  // 60: snakecommon.PassCheckV2.task_config:type_name -> snakecommon.PassTaskConfig
	67,  // 61: snakecommon.PassCheckV2.store_config:type_name -> snakecommon.PassStoreConfig
	70,  // 62: snakecommon.PassCheckV2.total_reward:type_name -> snakecommon.BattleRankReward
	60,  // 63: snakecommon.PassRewardConfig.reward_list:type_name -> snakecommon.PassReward
	58,  // 64: snakecommon.PassRewardConfig.reward_preview:type_name -> snakecommon.PassRewardPreview
	139, // 65: snakecommon.PassRewardConfig.reward_sort:type_name -> SnakeMain.Config.RewardConfig
	139, // 66: snakecommon.PassRewardPreview.free_reward:type_name -> SnakeMain.Config.RewardConfig
	139, // 67: snakecommon.PassRewardPreview.high_reward:type_name -> SnakeMain.Config.RewardConfig
	59,  // 68: snakecommon.PassRewardPreview.window_reward:type_name -> snakecommon.WindowReward
	139, // 69: snakecommon.PassRewardPreview.honor_reward:type_name -> SnakeMain.Config.RewardConfig
	139, // 70: snakecommon.PassRewardPreview.luxury_reward:type_name -> SnakeMain.Config.RewardConfig
	139, // 71: snakecommon.WindowReward.convert:type_name -> SnakeMain.Config.RewardConfig
	139, // 72: snakecommon.PassReward.free_reward:type_name -> SnakeMain.Config.RewardConfig
	139, // 73: snakecommon.PassReward.high_reward:type_name -> SnakeMain.Config.RewardConfig
	64,  // 74: snakecommon.PassTaskConfig.season_task:type_name -> snakecommon.SeasonTask
	65,  // 75: snakecommon.PassTaskConfig.grade_task:type_name -> snakecommon.GradeTask
	63,  // 76: snakecommon.PassTaskConfig.weekly_task:type_name -> snakecommon.WeeklyTask
	62,  // 77: snakecommon.PassTaskConfig.daily_task:type_name -> snakecommon.DailyTask
	66,  // 78: snakecommon.WeeklyTask.task_list:type_name -> snakecommon.PassTaskModel
	66,  // 79: snakecommon.SeasonTask.task_list:type_name -> snakecommon.PassTaskModel
	66,  // 80: snakecommon.GradeTask.task_list:type_name -> snakecommon.PassTaskModel
	140, // 81: snakecommon.PassStoreConfig.rank_price:type_name -> SnakeMain.Config.PriceInfo
	68,  // 82: snakecommon.PassStoreConfig.exchange_store:type_name -> snakecommon.ExchangeStore
	141, // 83: snakecommon.PassStoreConfig.high_store:type_name -> SnakeMain.Config.PackModel
	69,  // 84: snakecommon.ExchangeStore.price:type_name -> snakecommon.ExchangePrice
	139, // 85: snakecommon.BattleRankReward.reward:type_name -> SnakeMain.Config.RewardConfig
	73,  // 86: snakecommon.RankConfig.level:type_name -> snakecommon.Level
	72,  // 87: snakecommon.RankConfig.rank_reward:type_name -> snakecommon.RankReward
	139, // 88: snakecommon.RankReward.reward_list:type_name -> SnakeMain.Config.RewardConfig
	79,  // 89: snakecommon.ClanConfig.level_config:type_name -> snakecommon.ClanLevelConfig
	78,  // 90: snakecommon.ClanConfig.reward_explain_config:type_name -> snakecommon.ClanRewardConfig
	78,  // 91: snakecommon.ClanConfig.reward_config:type_name -> snakecommon.ClanRewardConfig
	77,  // 92: snakecommon.ClanConfig.race_time_config:type_name -> snakecommon.RaceTimeConfig
	75,  // 93: snakecommon.ClanConfig.rule_desc:type_name -> snakecommon.RuleDesc
	76,  // 94: snakecommon.RuleDesc.active_point_addition:type_name -> snakecommon.ActivePointAddition
	139, // 95: snakecommon.ClanRewardConfig.reward:type_name -> SnakeMain.Config.RewardConfig
	82,  // 96: snakecommon.HomeUiConfigV3.endless_icon_v2:type_name -> snakecommon.IconConfig
	82,  // 97: snakecommon.HomeUiConfigV3.qualifying_icon_v2:type_name -> snakecommon.IconConfig
	82,  // 98: snakecommon.HomeUiConfigV3.left_corner:type_name -> snakecommon.IconConfig
	82,  // 99: snakecommon.HomeUiConfigV3.right_corner:type_name -> snakecommon.IconConfig
	83,  // 100: snakecommon.HomeUiConfigV3.more_game:type_name -> snakecommon.MoreGame
	85,  // 101: snakecommon.HomeUiConfigV3.newbie_condition:type_name -> snakecommon.NewbieCondition
	82,  // 102: snakecommon.HomeUiConfigV3.endless_huge_icon:type_name -> snakecommon.IconConfig
	81,  // 103: snakecommon.HomeUiConfigV3.game_slide_list:type_name -> snakecommon.SlideIconConfig
	84,  // 104: snakecommon.SlideIconConfig.bubble:type_name -> snakecommon.Bubble
	84,  // 105: snakecommon.IconConfig.bubble:type_name -> snakecommon.Bubble
	84,  // 106: snakecommon.MoreGame.bubble:type_name -> snakecommon.Bubble
	90,  // 107: snakecommon.RouletteConfig.reward_table:type_name -> snakecommon.RewardTableBean
	91,  // 108: snakecommon.RouletteConfig.config:type_name -> snakecommon.RouletteSubConfig
	93,  // 109: snakecommon.ShowAdConfig.snake_coin_ad_config:type_name -> snakecommon.AdRewardModel
	93,  // 110: snakecommon.ShowAdConfig.coupon_ad_config:type_name -> snakecommon.AdRewardModel
	94,  // 111: snakecommon.ShowAdConfig.android_ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	94,  // 112: snakecommon.ShowAdConfig.ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	97,  // 113: snakecommon.ShowAdConfig.endless_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	97,  // 114: snakecommon.ShowAdConfig.melee_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	95,  // 115: snakecommon.AdPopupsConfig.popup_position_config:type_name -> snakecommon.PopupPositionConfig
	96,  // 116: snakecommon.PopupPositionConfig.skin_trial:type_name -> snakecommon.PopupConfig
	96,  // 117: snakecommon.PopupPositionConfig.endless_buff:type_name -> snakecommon.PopupConfig
	96,  // 118: snakecommon.PopupPositionConfig.lottery:type_name -> snakecommon.PopupConfig
	100, // 119: snakecommon.OrderConfig.diamond_goods_list:type_name -> snakecommon.IAPPackGoods
	100, // 120: snakecommon.OrderConfig.pack_goods_list:type_name -> snakecommon.IAPPackGoods
	100, // 121: snakecommon.OrderConfig.red_pack_goods_list:type_name -> snakecommon.IAPPackGoods
	101, // 122: snakecommon.OrderConfig.random_double:type_name -> snakecommon.OrderRandomDouble
	102, // 123: snakecommon.ShowIllustrationConfig.title_list:type_name -> snakecommon.Title
	104, // 124: snakecommon.ShowIllustrationConfig.season_list:type_name -> snakecommon.ShowSeason
	139, // 125: snakecommon.ShowSeason.rewards:type_name -> SnakeMain.Config.RewardConfig
	105, // 126: snakecommon.ShowSeason.resources:type_name -> snakecommon.SeasonResource
	107, // 127: snakecommon.ShowBadgeConfig.title_list:type_name -> snakecommon.BadgeTitle
	139, // 128: snakecommon.BadgeTitle.rewards:type_name -> SnakeMain.Config.RewardConfig
	109, // 129: snakecommon.SkinUgcConfigV2.skin_topic_list:type_name -> snakecommon.UgcTopic
	109, // 130: snakecommon.SkinUgcConfigV2.ks_topic_list:type_name -> snakecommon.UgcTopic
	109, // 131: snakecommon.SkinUgcConfigV2.bg_topic_list:type_name -> snakecommon.UgcTopic
	109, // 132: snakecommon.SkinUgcConfigV2.suit_topic_list:type_name -> snakecommon.UgcTopic
	111, // 133: snakecommon.UgcWorks.normal:type_name -> snakecommon.UgcWorksLink
	111, // 134: snakecommon.UgcWorks.speed:type_name -> snakecommon.UgcWorksLink
	110, // 135: snakecommon.UgcWorks.skin_info:type_name -> snakecommon.UgcWorks
	110, // 136: snakecommon.UgcWorks.ks_info:type_name -> snakecommon.UgcWorks
	110, // 137: snakecommon.UgcWorks.bg_info:type_name -> snakecommon.UgcWorks
	113, // 138: snakecommon.MonthCardConfig.little_month_card:type_name -> snakecommon.CMonthCard
	113, // 139: snakecommon.MonthCardConfig.super_month_card:type_name -> snakecommon.CMonthCard
	139, // 140: snakecommon.CMonthCard.daily_reward:type_name -> SnakeMain.Config.RewardConfig
	114, // 141: snakecommon.CMonthCard.pack_list:type_name -> snakecommon.MonthCardPackItem
	117, // 142: snakecommon.SnakeSecretary.common:type_name -> snakecommon.SecretaryModel
	117, // 143: snakecommon.SnakeSecretary.account:type_name -> snakecommon.SecretaryModel
	117, // 144: snakecommon.SnakeSecretary.order:type_name -> snakecommon.SecretaryModel
	118, // 145: snakecommon.SecretaryModel.qa_list:type_name -> snakecommon.QAInfo
	120, // 146: snakecommon.AdConfig.ad_percent:type_name -> snakecommon.AdGrade
	120, // 147: snakecommon.AdConfig.interstitial_ad_percent:type_name -> snakecommon.AdGrade
	120, // 148: snakecommon.AdConfig.excessive_ad:type_name -> snakecommon.AdGrade
	100, // 149: snakecommon.AdConfig.goods_list:type_name -> snakecommon.IAPPackGoods
	121, // 150: snakecommon.AdConfig.switch_setting:type_name -> snakecommon.AdSwitch
	122, // 151: snakecommon.AdConfig.ad_appid_config:type_name -> snakecommon.AdAppidConfig
	136, // 152: snakecommon.CharmTourConfig.charm_title_list:type_name -> snakecommon.CharmTourConfig.LevelDetail
	137, // 153: snakecommon.CharmTourConfig.charm_level_list:type_name -> snakecommon.CharmTourConfig.LevelConfig
	138, // 154: snakecommon.GiftWallConfig.nameplate_list:type_name -> snakecommon.GiftWallConfig.NamePlate
	127, // 155: snakecommon.MentorConfig.master_privilege_config:type_name -> snakecommon.MentorPrivilegeInfo
	129, // 156: snakecommon.MentorConfig.bond_title_config:type_name -> snakecommon.MentorshipBondConfig
	130, // 157: snakecommon.MentorConfig.finish_reward:type_name -> snakecommon.MentorFinishReward
	131, // 158: snakecommon.MentorConfig.master_prentice_strategy:type_name -> snakecommon.MasterPrenticeStrategy
	128, // 159: snakecommon.MentorPrivilegeInfo.privilege_config:type_name -> snakecommon.PrivilegeDetailInfo
	139, // 160: snakecommon.MentorPrivilegeInfo.privilege_reward:type_name -> SnakeMain.Config.RewardConfig
	139, // 161: snakecommon.MentorFinishReward.master_reward:type_name -> SnakeMain.Config.RewardConfig
	139, // 162: snakecommon.MentorFinishReward.prentice_reward:type_name -> SnakeMain.Config.RewardConfig
	133, // 163: snakecommon.GiftIllustrationConfig.title_list:type_name -> snakecommon.GiftTitleItemConfig
	139, // 164: snakecommon.CharmTourConfig.LevelDetail.rewards:type_name -> SnakeMain.Config.RewardConfig
	165, // [165:165] is the sub-list for method output_type
	165, // [165:165] is the sub-list for method input_type
	165, // [165:165] is the sub-list for extension type_name
	165, // [165:165] is the sub-list for extension extendee
	0,   // [0:165] is the sub-list for field type_name
}

func init() { file_snakecommon_config_proto_init() }
func file_snakecommon_config_proto_init() {
	if File_snakecommon_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snakecommon_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CConvert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityQualifyingOpenConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HaighLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLessBuffPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeVipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetFrameGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClipBoardCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoShareIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmExpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmExpRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmPrivilegeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftLikeTextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessFloatingV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllustrateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllustrateFloatingRefreshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingRefreshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureHouseThemeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiSkinRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiKillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiKillEffectRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingMainMapTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonCaiDan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieSingleDayReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HatchEgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetupConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDayReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCommonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassRewardPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassTaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassTaskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassStoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleRankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePointAddition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceTimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanLevelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeUiConfigV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideIconConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IconConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmSocialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouletteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardTableBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouletteSubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdRewardModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdPopupsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopupPositionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessAdRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinUgcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAPPackGoods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRandomDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Title); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIllustrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowBadgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinUgcConfigV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcWorks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcWorksLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMonthCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardPackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopListConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeSecretary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretaryModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QAInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdAppidConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftWallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperShowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorPrivilegeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorshipBondConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorFinishReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterPrenticeStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftIllustrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftTitleItemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraBuff_ExtraBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourConfig_LevelDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourConfig_LevelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftWallConfig_NamePlate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snakecommon_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecommon_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   138,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakecommon_config_proto_goTypes,
		DependencyIndexes: file_snakecommon_config_proto_depIdxs,
		EnumInfos:         file_snakecommon_config_proto_enumTypes,
		MessageInfos:      file_snakecommon_config_proto_msgTypes,
	}.Build()
	File_snakecommon_config_proto = out.File
	file_snakecommon_config_proto_rawDesc = nil
	file_snakecommon_config_proto_goTypes = nil
	file_snakecommon_config_proto_depIdxs = nil
}
