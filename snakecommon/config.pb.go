// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakecommon/config.proto

package snakecommon

import (
	config "git.17zjh.com/snake/snake_proto/snakeapi/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                               // 奖励类型
	SkinId     int32       `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`             // 奖励 id
	Num        int64       `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`                                 // 奖励数量
	BigNum     *string     `protobuf:"bytes,4,opt,name=big_num,json=bigNum,proto3,oneof" json:"big_num,omitempty"`        // 奖励数量，大数
	Name       string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                // 奖励名称
	Imgurl     string      `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`                            // 奖励图片
	UseInfo    *string     `protobuf:"bytes,7,opt,name=use_info,json=useInfo,proto3,oneof" json:"use_info,omitempty"`     // 有效期，单位秒
	Index      *int32      `protobuf:"varint,8,opt,name=index,proto3,oneof" json:"index,omitempty"`                       // 奖励序号
	WorthLevel int32       `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"` // 稀有度
	MarkId     *int32      `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3,oneof" json:"mark_id,omitempty"`      // 来源标签id
	Convert    []*CConvert `protobuf:"bytes,11,rep,name=convert,proto3" json:"convert,omitempty"`                         // 奖励折算
}

func (x *CRewardItem) Reset() {
	*x = CRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRewardItem) ProtoMessage() {}

func (x *CRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRewardItem.ProtoReflect.Descriptor instead.
func (*CRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{0}
}

func (x *CRewardItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CRewardItem) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *CRewardItem) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CRewardItem) GetBigNum() string {
	if x != nil && x.BigNum != nil {
		return *x.BigNum
	}
	return ""
}

func (x *CRewardItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRewardItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *CRewardItem) GetUseInfo() string {
	if x != nil && x.UseInfo != nil {
		return *x.UseInfo
	}
	return ""
}

func (x *CRewardItem) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CRewardItem) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *CRewardItem) GetMarkId() int32 {
	if x != nil && x.MarkId != nil {
		return *x.MarkId
	}
	return 0
}

func (x *CRewardItem) GetConvert() []*CConvert {
	if x != nil {
		return x.Convert
	}
	return nil
}

// 奖励折算结构
type CConvert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                   // 类型
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                     // 数量
	SkinId int32 `protobuf:"varint,3,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` // id
}

func (x *CConvert) Reset() {
	*x = CConvert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CConvert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CConvert) ProtoMessage() {}

func (x *CConvert) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CConvert.ProtoReflect.Descriptor instead.
func (*CConvert) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{1}
}

func (x *CConvert) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CConvert) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CConvert) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

// 通用价格结构
type CPriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Num           int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"` //RMB 类型时候  这个字段 代表 goodsid
	Discount      int32 `protobuf:"varint,3,opt,name=discount,proto3" json:"discount,omitempty"`
	DiscountPrice int32 `protobuf:"varint,4,opt,name=discountPrice,proto3" json:"discountPrice,omitempty"`
}

func (x *CPriceInfo) Reset() {
	*x = CPriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPriceInfo) ProtoMessage() {}

func (x *CPriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPriceInfo.ProtoReflect.Descriptor instead.
func (*CPriceInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{2}
}

func (x *CPriceInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CPriceInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CPriceInfo) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *CPriceInfo) GetDiscountPrice() int32 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

type RMBPackGoodsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoolpadProductId int64  `protobuf:"varint,1,opt,name=coolpad_product_id,json=coolpadProductId,proto3" json:"coolpad_product_id,omitempty"`
	GoodsPrice       int32  `protobuf:"varint,2,opt,name=goods_price,json=goodsPrice,proto3" json:"goods_price,omitempty"`
	Diamond          int32  `protobuf:"varint,3,opt,name=diamond,proto3" json:"diamond,omitempty"`
	GoodsName        string `protobuf:"bytes,4,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	BaiduProductId   string `protobuf:"bytes,5,opt,name=baidu_product_id,json=baiduProductId,proto3" json:"baidu_product_id,omitempty"`
	GoodsId          int64  `protobuf:"varint,6,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	LenovoProductId  int64  `protobuf:"varint,7,opt,name=lenovo_product_id,json=lenovoProductId,proto3" json:"lenovo_product_id,omitempty"`
	XiaomiProductId  string `protobuf:"bytes,8,opt,name=xiaomi_product_id,json=xiaomiProductId,proto3" json:"xiaomi_product_id,omitempty"`
	AppleProductId   string `protobuf:"bytes,9,opt,name=apple_product_id,json=appleProductId,proto3" json:"apple_product_id,omitempty"`
	Subscribe        int32  `protobuf:"varint,10,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	Imgurl           string `protobuf:"bytes,11,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Tips             string `protobuf:"bytes,12,opt,name=tips,proto3" json:"tips,omitempty"`
}

func (x *RMBPackGoodsInfo) Reset() {
	*x = RMBPackGoodsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMBPackGoodsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMBPackGoodsInfo) ProtoMessage() {}

func (x *RMBPackGoodsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMBPackGoodsInfo.ProtoReflect.Descriptor instead.
func (*RMBPackGoodsInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{3}
}

func (x *RMBPackGoodsInfo) GetCoolpadProductId() int64 {
	if x != nil {
		return x.CoolpadProductId
	}
	return 0
}

func (x *RMBPackGoodsInfo) GetGoodsPrice() int32 {
	if x != nil {
		return x.GoodsPrice
	}
	return 0
}

func (x *RMBPackGoodsInfo) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *RMBPackGoodsInfo) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *RMBPackGoodsInfo) GetBaiduProductId() string {
	if x != nil {
		return x.BaiduProductId
	}
	return ""
}

func (x *RMBPackGoodsInfo) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *RMBPackGoodsInfo) GetLenovoProductId() int64 {
	if x != nil {
		return x.LenovoProductId
	}
	return 0
}

func (x *RMBPackGoodsInfo) GetXiaomiProductId() string {
	if x != nil {
		return x.XiaomiProductId
	}
	return ""
}

func (x *RMBPackGoodsInfo) GetAppleProductId() string {
	if x != nil {
		return x.AppleProductId
	}
	return ""
}

func (x *RMBPackGoodsInfo) GetSubscribe() int32 {
	if x != nil {
		return x.Subscribe
	}
	return 0
}

func (x *RMBPackGoodsInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RMBPackGoodsInfo) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

type ActivityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassCheckV2        *PassCheckV2         `protobuf:"bytes,1,opt,name=pass_check_v2,json=passCheckV2,proto3" json:"pass_check_v2,omitempty"`
	NewMeetupV3        *MeetupConfig        `protobuf:"bytes,2,opt,name=new_meetup_v3,json=newMeetupV3,proto3" json:"new_meetup_v3,omitempty"`
	HatchEgg           *HatchEgg            `protobuf:"bytes,3,opt,name=hatch_egg,json=hatchEgg,proto3" json:"hatch_egg,omitempty"`
	NewbieCheckin      *NewbieConfig        `protobuf:"bytes,4,opt,name=newbie_checkin,json=newbieCheckin,proto3" json:"newbie_checkin,omitempty"`
	EndlessGameReward  *EndlessRewardConfig `protobuf:"bytes,5,opt,name=endless_game_reward,json=endlessGameReward,proto3" json:"endless_game_reward,omitempty"`
	Turntable          *RouletteConfig      `protobuf:"bytes,6,opt,name=turntable,proto3" json:"turntable,omitempty"`
	SkinUgc            *SkinUgcConfig       `protobuf:"bytes,7,opt,name=skin_ugc,json=skinUgc,proto3" json:"skin_ugc,omitempty"`
	PassCheckPackActId string               `protobuf:"bytes,8,opt,name=pass_check_pack_act_id,json=passCheckPackActId,proto3" json:"pass_check_pack_act_id,omitempty"`
	SkinUgcV2          *SkinUgcConfigV2     `protobuf:"bytes,9,opt,name=skin_ugc_v2,json=skinUgcV2,proto3" json:"skin_ugc_v2,omitempty"`
	EndlessFloatingV2  *EndlessFloatingV2   `protobuf:"bytes,10,opt,name=endless_floating_v2,json=endlessFloatingV2,proto3" json:"endless_floating_v2,omitempty"`
	SuperShow          *SuperShowConfig     `protobuf:"bytes,11,opt,name=super_show,json=superShow,proto3" json:"super_show,omitempty"`
	SeasonActivity     *SeasonActivity      `protobuf:"bytes,12,opt,name=season_activity,json=seasonActivity,proto3" json:"season_activity,omitempty"`
}

func (x *ActivityConfig) Reset() {
	*x = ActivityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityConfig) ProtoMessage() {}

func (x *ActivityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityConfig.ProtoReflect.Descriptor instead.
func (*ActivityConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{4}
}

func (x *ActivityConfig) GetPassCheckV2() *PassCheckV2 {
	if x != nil {
		return x.PassCheckV2
	}
	return nil
}

func (x *ActivityConfig) GetNewMeetupV3() *MeetupConfig {
	if x != nil {
		return x.NewMeetupV3
	}
	return nil
}

func (x *ActivityConfig) GetHatchEgg() *HatchEgg {
	if x != nil {
		return x.HatchEgg
	}
	return nil
}

func (x *ActivityConfig) GetNewbieCheckin() *NewbieConfig {
	if x != nil {
		return x.NewbieCheckin
	}
	return nil
}

func (x *ActivityConfig) GetEndlessGameReward() *EndlessRewardConfig {
	if x != nil {
		return x.EndlessGameReward
	}
	return nil
}

func (x *ActivityConfig) GetTurntable() *RouletteConfig {
	if x != nil {
		return x.Turntable
	}
	return nil
}

func (x *ActivityConfig) GetSkinUgc() *SkinUgcConfig {
	if x != nil {
		return x.SkinUgc
	}
	return nil
}

func (x *ActivityConfig) GetPassCheckPackActId() string {
	if x != nil {
		return x.PassCheckPackActId
	}
	return ""
}

func (x *ActivityConfig) GetSkinUgcV2() *SkinUgcConfigV2 {
	if x != nil {
		return x.SkinUgcV2
	}
	return nil
}

func (x *ActivityConfig) GetEndlessFloatingV2() *EndlessFloatingV2 {
	if x != nil {
		return x.EndlessFloatingV2
	}
	return nil
}

func (x *ActivityConfig) GetSuperShow() *SuperShowConfig {
	if x != nil {
		return x.SuperShow
	}
	return nil
}

func (x *ActivityConfig) GetSeasonActivity() *SeasonActivity {
	if x != nil {
		return x.SeasonActivity
	}
	return nil
}

type EndlessFloatingV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId                   string                             `protobuf:"bytes,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	StartTime               int32                              `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                 int32                              `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FloatingRefreshConfigV2 []*IllustrateFloatingRefreshConfig `protobuf:"bytes,4,rep,name=floating_refresh_config_v2,json=floatingRefreshConfigV2,proto3" json:"floating_refresh_config_v2,omitempty"`
	FloatingConfig          []*FloatingInfo                    `protobuf:"bytes,5,rep,name=floating_config,json=floatingConfig,proto3" json:"floating_config,omitempty"`
	TreasureHouse           []*TreasureHouseThemeInfo          `protobuf:"bytes,6,rep,name=treasure_house,json=treasureHouse,proto3" json:"treasure_house,omitempty"`
	Boss                    []*BossTheme                       `protobuf:"bytes,7,rep,name=boss,proto3" json:"boss,omitempty"`
	ExtraBuff               *ExtraBuff                         `protobuf:"bytes,8,opt,name=extra_buff,json=extraBuff,proto3" json:"extra_buff,omitempty"`
	AiSkin                  []*FloatingAiSkin                  `protobuf:"bytes,9,rep,name=ai_skin,json=aiSkin,proto3" json:"ai_skin,omitempty"`
	AiSkinRate              []*FloatingAiSkinRateInfo          `protobuf:"bytes,10,rep,name=ai_skin_rate,json=aiSkinRate,proto3" json:"ai_skin_rate,omitempty"`
	AiKilleffect            []*FloatingAiKillEffect            `protobuf:"bytes,11,rep,name=ai_killeffect,json=aiKilleffect,proto3" json:"ai_killeffect,omitempty"`
	AiKilleffectRate        []*FloatingAiKillEffectRateInfo    `protobuf:"bytes,12,rep,name=ai_killeffect_rate,json=aiKilleffectRate,proto3" json:"ai_killeffect_rate,omitempty"`
	MainMapTheme            []*FloatingMainMapTheme            `protobuf:"bytes,13,rep,name=main_map_theme,json=mainMapTheme,proto3" json:"main_map_theme,omitempty"`
	IllustrateConfig        []*IllustrateConfig                `protobuf:"bytes,14,rep,name=illustrate_config,json=illustrateConfig,proto3" json:"illustrate_config,omitempty"`
	IconStartTime           int64                              `protobuf:"varint,15,opt,name=icon_start_time,json=iconStartTime,proto3" json:"icon_start_time,omitempty"`
	IconEndTime             int64                              `protobuf:"varint,16,opt,name=icon_end_time,json=iconEndTime,proto3" json:"icon_end_time,omitempty"`
	HomepageUrl             string                             `protobuf:"bytes,17,opt,name=homepage_url,json=homepageUrl,proto3" json:"homepage_url,omitempty"`
}

func (x *EndlessFloatingV2) Reset() {
	*x = EndlessFloatingV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessFloatingV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessFloatingV2) ProtoMessage() {}

func (x *EndlessFloatingV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessFloatingV2.ProtoReflect.Descriptor instead.
func (*EndlessFloatingV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{5}
}

func (x *EndlessFloatingV2) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *EndlessFloatingV2) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetFloatingRefreshConfigV2() []*IllustrateFloatingRefreshConfig {
	if x != nil {
		return x.FloatingRefreshConfigV2
	}
	return nil
}

func (x *EndlessFloatingV2) GetFloatingConfig() []*FloatingInfo {
	if x != nil {
		return x.FloatingConfig
	}
	return nil
}

func (x *EndlessFloatingV2) GetTreasureHouse() []*TreasureHouseThemeInfo {
	if x != nil {
		return x.TreasureHouse
	}
	return nil
}

func (x *EndlessFloatingV2) GetBoss() []*BossTheme {
	if x != nil {
		return x.Boss
	}
	return nil
}

func (x *EndlessFloatingV2) GetExtraBuff() *ExtraBuff {
	if x != nil {
		return x.ExtraBuff
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiSkin() []*FloatingAiSkin {
	if x != nil {
		return x.AiSkin
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiSkinRate() []*FloatingAiSkinRateInfo {
	if x != nil {
		return x.AiSkinRate
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiKilleffect() []*FloatingAiKillEffect {
	if x != nil {
		return x.AiKilleffect
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiKilleffectRate() []*FloatingAiKillEffectRateInfo {
	if x != nil {
		return x.AiKilleffectRate
	}
	return nil
}

func (x *EndlessFloatingV2) GetMainMapTheme() []*FloatingMainMapTheme {
	if x != nil {
		return x.MainMapTheme
	}
	return nil
}

func (x *EndlessFloatingV2) GetIllustrateConfig() []*IllustrateConfig {
	if x != nil {
		return x.IllustrateConfig
	}
	return nil
}

func (x *EndlessFloatingV2) GetIconStartTime() int64 {
	if x != nil {
		return x.IconStartTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetIconEndTime() int64 {
	if x != nil {
		return x.IconEndTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetHomepageUrl() string {
	if x != nil {
		return x.HomepageUrl
	}
	return ""
}

type IllustrateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *IllustrateConfig) Reset() {
	*x = IllustrateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllustrateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllustrateConfig) ProtoMessage() {}

func (x *IllustrateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllustrateConfig.ProtoReflect.Descriptor instead.
func (*IllustrateConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{6}
}

func (x *IllustrateConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IllustrateConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type IllustrateFloatingRefreshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                int32                  `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	StartTime             int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               int64                  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FloatingRefreshConfig *FloatingRefreshConfig `protobuf:"bytes,4,opt,name=floating_refresh_config,json=floatingRefreshConfig,proto3" json:"floating_refresh_config,omitempty"`
}

func (x *IllustrateFloatingRefreshConfig) Reset() {
	*x = IllustrateFloatingRefreshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllustrateFloatingRefreshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllustrateFloatingRefreshConfig) ProtoMessage() {}

func (x *IllustrateFloatingRefreshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllustrateFloatingRefreshConfig.ProtoReflect.Descriptor instead.
func (*IllustrateFloatingRefreshConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{7}
}

func (x *IllustrateFloatingRefreshConfig) GetPoolId() int32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetFloatingRefreshConfig() *FloatingRefreshConfig {
	if x != nil {
		return x.FloatingRefreshConfig
	}
	return nil
}

type FloatingRefreshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshInterval     []int32 `protobuf:"varint,1,rep,packed,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	FloatingKind        []int32 `protobuf:"varint,2,rep,packed,name=floating_kind,json=floatingKind,proto3" json:"floating_kind,omitempty"`
	FloatingNum         []int32 `protobuf:"varint,3,rep,packed,name=floating_num,json=floatingNum,proto3" json:"floating_num,omitempty"`
	FloatingRange       int32   `protobuf:"varint,4,opt,name=floating_range,json=floatingRange,proto3" json:"floating_range,omitempty"`
	FloatingMinDistance int32   `protobuf:"varint,5,opt,name=floating_min_distance,json=floatingMinDistance,proto3" json:"floating_min_distance,omitempty"`
	WallRate            int32   `protobuf:"varint,6,opt,name=wall_rate,json=wallRate,proto3" json:"wall_rate,omitempty"`
	WallDistance        []int32 `protobuf:"varint,7,rep,packed,name=wall_distance,json=wallDistance,proto3" json:"wall_distance,omitempty"`
	WallFloatingNum     int32   `protobuf:"varint,8,opt,name=wall_floating_num,json=wallFloatingNum,proto3" json:"wall_floating_num,omitempty"`
}

func (x *FloatingRefreshConfig) Reset() {
	*x = FloatingRefreshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingRefreshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingRefreshConfig) ProtoMessage() {}

func (x *FloatingRefreshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingRefreshConfig.ProtoReflect.Descriptor instead.
func (*FloatingRefreshConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{8}
}

func (x *FloatingRefreshConfig) GetRefreshInterval() []int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingKind() []int32 {
	if x != nil {
		return x.FloatingKind
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingNum() []int32 {
	if x != nil {
		return x.FloatingNum
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingRange() int32 {
	if x != nil {
		return x.FloatingRange
	}
	return 0
}

func (x *FloatingRefreshConfig) GetFloatingMinDistance() int32 {
	if x != nil {
		return x.FloatingMinDistance
	}
	return 0
}

func (x *FloatingRefreshConfig) GetWallRate() int32 {
	if x != nil {
		return x.WallRate
	}
	return 0
}

func (x *FloatingRefreshConfig) GetWallDistance() []int32 {
	if x != nil {
		return x.WallDistance
	}
	return nil
}

func (x *FloatingRefreshConfig) GetWallFloatingNum() int32 {
	if x != nil {
		return x.WallFloatingNum
	}
	return 0
}

type FloatingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                  string  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	LengthLimit           int32   `protobuf:"varint,4,opt,name=length_limit,json=lengthLimit,proto3" json:"length_limit,omitempty"`
	TimeLimit             int32   `protobuf:"varint,5,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	NotCollectAllRate     int32   `protobuf:"varint,6,opt,name=not_collect_all_rate,json=notCollectAllRate,proto3" json:"not_collect_all_rate,omitempty"`
	CollectAllRate        int32   `protobuf:"varint,7,opt,name=collect_all_rate,json=collectAllRate,proto3" json:"collect_all_rate,omitempty"`
	FirstAddScore         int32   `protobuf:"varint,8,opt,name=first_add_score,json=firstAddScore,proto3" json:"first_add_score,omitempty"`
	AddScore              int32   `protobuf:"varint,9,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	Imgurl                string  `protobuf:"bytes,10,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Area                  string  `protobuf:"bytes,11,opt,name=area,proto3" json:"area,omitempty"`
	NeedNum               int32   `protobuf:"varint,12,opt,name=need_num,json=needNum,proto3" json:"need_num,omitempty"`
	DiamondLimit          int32   `protobuf:"varint,13,opt,name=diamond_limit,json=diamondLimit,proto3" json:"diamond_limit,omitempty"`
	ReliveLimit           int32   `protobuf:"varint,14,opt,name=relive_limit,json=reliveLimit,proto3" json:"relive_limit,omitempty"`
	IsRare                int32   `protobuf:"varint,15,opt,name=is_rare,json=isRare,proto3" json:"is_rare,omitempty"`
	ImgScale              float32 `protobuf:"fixed32,16,opt,name=img_scale,json=imgScale,proto3" json:"img_scale,omitempty"`
	Maps                  []int32 `protobuf:"varint,17,rep,packed,name=maps,proto3" json:"maps,omitempty"`
	Period                string  `protobuf:"bytes,18,opt,name=period,proto3" json:"period,omitempty"`
	MiddleItemId          int32   `protobuf:"varint,19,opt,name=middle_item_id,json=middleItemId,proto3" json:"middle_item_id,omitempty"`
	UnlockDesc            string  `protobuf:"bytes,20,opt,name=unlock_desc,json=unlockDesc,proto3" json:"unlock_desc,omitempty"`
	TotalLimit            int32   `protobuf:"varint,21,opt,name=total_limit,json=totalLimit,proto3" json:"total_limit,omitempty"`
	WallNotCollectAllRate int32   `protobuf:"varint,22,opt,name=wall_not_collect_all_rate,json=wallNotCollectAllRate,proto3" json:"wall_not_collect_all_rate,omitempty"`
	WallCollectAllRate    int32   `protobuf:"varint,23,opt,name=wall_collect_all_rate,json=wallCollectAllRate,proto3" json:"wall_collect_all_rate,omitempty"`
	Type                  int32   `protobuf:"varint,24,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FloatingInfo) Reset() {
	*x = FloatingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingInfo) ProtoMessage() {}

func (x *FloatingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingInfo.ProtoReflect.Descriptor instead.
func (*FloatingInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{9}
}

func (x *FloatingInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FloatingInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FloatingInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FloatingInfo) GetLengthLimit() int32 {
	if x != nil {
		return x.LengthLimit
	}
	return 0
}

func (x *FloatingInfo) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *FloatingInfo) GetNotCollectAllRate() int32 {
	if x != nil {
		return x.NotCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetCollectAllRate() int32 {
	if x != nil {
		return x.CollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetFirstAddScore() int32 {
	if x != nil {
		return x.FirstAddScore
	}
	return 0
}

func (x *FloatingInfo) GetAddScore() int32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *FloatingInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *FloatingInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *FloatingInfo) GetNeedNum() int32 {
	if x != nil {
		return x.NeedNum
	}
	return 0
}

func (x *FloatingInfo) GetDiamondLimit() int32 {
	if x != nil {
		return x.DiamondLimit
	}
	return 0
}

func (x *FloatingInfo) GetReliveLimit() int32 {
	if x != nil {
		return x.ReliveLimit
	}
	return 0
}

func (x *FloatingInfo) GetIsRare() int32 {
	if x != nil {
		return x.IsRare
	}
	return 0
}

func (x *FloatingInfo) GetImgScale() float32 {
	if x != nil {
		return x.ImgScale
	}
	return 0
}

func (x *FloatingInfo) GetMaps() []int32 {
	if x != nil {
		return x.Maps
	}
	return nil
}

func (x *FloatingInfo) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *FloatingInfo) GetMiddleItemId() int32 {
	if x != nil {
		return x.MiddleItemId
	}
	return 0
}

func (x *FloatingInfo) GetUnlockDesc() string {
	if x != nil {
		return x.UnlockDesc
	}
	return ""
}

func (x *FloatingInfo) GetTotalLimit() int32 {
	if x != nil {
		return x.TotalLimit
	}
	return 0
}

func (x *FloatingInfo) GetWallNotCollectAllRate() int32 {
	if x != nil {
		return x.WallNotCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetWallCollectAllRate() int32 {
	if x != nil {
		return x.WallCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type TreasureHouseThemeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId               int32  `protobuf:"varint,1,opt,name=ThemeId,proto3" json:"ThemeId,omitempty"`
	MapAssetPath          string `protobuf:"bytes,2,opt,name=MapAssetPath,proto3" json:"MapAssetPath,omitempty"`
	CenterSpawnPrefabPath string `protobuf:"bytes,3,opt,name=CenterSpawnPrefabPath,proto3" json:"CenterSpawnPrefabPath,omitempty"`
	CandyElementId        int32  `protobuf:"varint,4,opt,name=CandyElementId,proto3" json:"CandyElementId,omitempty"`
	MushroomElementId     int32  `protobuf:"varint,5,opt,name=MushroomElementId,proto3" json:"MushroomElementId,omitempty"`
	SpawnScale            int32  `protobuf:"varint,6,opt,name=SpawnScale,proto3" json:"SpawnScale,omitempty"`
	MushRoomId            int32  `protobuf:"varint,7,opt,name=MushRoomId,proto3" json:"MushRoomId,omitempty"`
	BroadcastUrl          string `protobuf:"bytes,8,opt,name=broadcast_url,json=broadcastUrl,proto3" json:"broadcast_url,omitempty"`
	ProgressContent       string `protobuf:"bytes,9,opt,name=progress_content,json=progressContent,proto3" json:"progress_content,omitempty"`
	StartTime             int32  `protobuf:"varint,10,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime               int32  `protobuf:"varint,11,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *TreasureHouseThemeInfo) Reset() {
	*x = TreasureHouseThemeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureHouseThemeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureHouseThemeInfo) ProtoMessage() {}

func (x *TreasureHouseThemeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureHouseThemeInfo.ProtoReflect.Descriptor instead.
func (*TreasureHouseThemeInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{10}
}

func (x *TreasureHouseThemeInfo) GetThemeId() int32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMapAssetPath() string {
	if x != nil {
		return x.MapAssetPath
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetCenterSpawnPrefabPath() string {
	if x != nil {
		return x.CenterSpawnPrefabPath
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetCandyElementId() int32 {
	if x != nil {
		return x.CandyElementId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMushroomElementId() int32 {
	if x != nil {
		return x.MushroomElementId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetSpawnScale() int32 {
	if x != nil {
		return x.SpawnScale
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMushRoomId() int32 {
	if x != nil {
		return x.MushRoomId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetBroadcastUrl() string {
	if x != nil {
		return x.BroadcastUrl
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetProgressContent() string {
	if x != nil {
		return x.ProgressContent
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type BossTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId         int32   `protobuf:"varint,1,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	BossFirecracker []int32 `protobuf:"varint,2,rep,packed,name=boss_firecracker,json=bossFirecracker,proto3" json:"boss_firecracker,omitempty"`
	Blood           string  `protobuf:"bytes,3,opt,name=blood,proto3" json:"blood,omitempty"`
	Desc            string  `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	EntityId        int32   `protobuf:"varint,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	AddScore        int32   `protobuf:"varint,6,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	AddFloating     []int32 `protobuf:"varint,7,rep,packed,name=add_floating,json=addFloating,proto3" json:"add_floating,omitempty"`
	AddFloatingRate []int32 `protobuf:"varint,8,rep,packed,name=add_floating_rate,json=addFloatingRate,proto3" json:"add_floating_rate,omitempty"`
	PropId          int32   `protobuf:"varint,9,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	PropTime        int32   `protobuf:"varint,10,opt,name=prop_time,json=propTime,proto3" json:"prop_time,omitempty"`
	StartTime       int64   `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64   `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type            int32   `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BossTheme) Reset() {
	*x = BossTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossTheme) ProtoMessage() {}

func (x *BossTheme) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossTheme.ProtoReflect.Descriptor instead.
func (*BossTheme) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{11}
}

func (x *BossTheme) GetThemeId() int32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *BossTheme) GetBossFirecracker() []int32 {
	if x != nil {
		return x.BossFirecracker
	}
	return nil
}

func (x *BossTheme) GetBlood() string {
	if x != nil {
		return x.Blood
	}
	return ""
}

func (x *BossTheme) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BossTheme) GetEntityId() int32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *BossTheme) GetAddScore() int32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *BossTheme) GetAddFloating() []int32 {
	if x != nil {
		return x.AddFloating
	}
	return nil
}

func (x *BossTheme) GetAddFloatingRate() []int32 {
	if x != nil {
		return x.AddFloatingRate
	}
	return nil
}

func (x *BossTheme) GetPropId() int32 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *BossTheme) GetPropTime() int32 {
	if x != nil {
		return x.PropTime
	}
	return 0
}

func (x *BossTheme) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BossTheme) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BossTheme) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ExtraBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColdSecond int32                      `protobuf:"varint,1,opt,name=cold_second,json=coldSecond,proto3" json:"cold_second,omitempty"`
	Interval   int32                      `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	DailyLimit int32                      `protobuf:"varint,3,opt,name=daily_limit,json=dailyLimit,proto3" json:"daily_limit,omitempty"`
	BuffList   []*ExtraBuff_ExtraBuffInfo `protobuf:"bytes,4,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
}

func (x *ExtraBuff) Reset() {
	*x = ExtraBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraBuff) ProtoMessage() {}

func (x *ExtraBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraBuff.ProtoReflect.Descriptor instead.
func (*ExtraBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{12}
}

func (x *ExtraBuff) GetColdSecond() int32 {
	if x != nil {
		return x.ColdSecond
	}
	return 0
}

func (x *ExtraBuff) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ExtraBuff) GetDailyLimit() int32 {
	if x != nil {
		return x.DailyLimit
	}
	return 0
}

func (x *ExtraBuff) GetBuffList() []*ExtraBuff_ExtraBuffInfo {
	if x != nil {
		return x.BuffList
	}
	return nil
}

type FloatingAiSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinId       int32 `protobuf:"varint,1,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	RandomWeight int32 `protobuf:"varint,2,opt,name=random_weight,json=randomWeight,proto3" json:"random_weight,omitempty"`
	StartTime    int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IllustrateId int32 `protobuf:"varint,5,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
}

func (x *FloatingAiSkin) Reset() {
	*x = FloatingAiSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiSkin) ProtoMessage() {}

func (x *FloatingAiSkin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiSkin.ProtoReflect.Descriptor instead.
func (*FloatingAiSkin) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{13}
}

func (x *FloatingAiSkin) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *FloatingAiSkin) GetRandomWeight() int32 {
	if x != nil {
		return x.RandomWeight
	}
	return 0
}

func (x *FloatingAiSkin) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FloatingAiSkin) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FloatingAiSkin) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

type FloatingAiSkinRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId    int32 `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	SpecialSkinRate int32 `protobuf:"varint,2,opt,name=special_skin_rate,json=specialSkinRate,proto3" json:"special_skin_rate,omitempty"`
}

func (x *FloatingAiSkinRateInfo) Reset() {
	*x = FloatingAiSkinRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiSkinRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiSkinRateInfo) ProtoMessage() {}

func (x *FloatingAiSkinRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiSkinRateInfo.ProtoReflect.Descriptor instead.
func (*FloatingAiSkinRateInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{14}
}

func (x *FloatingAiSkinRateInfo) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingAiSkinRateInfo) GetSpecialSkinRate() int32 {
	if x != nil {
		return x.SpecialSkinRate
	}
	return 0
}

type FloatingAiKillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillEffectId int32 `protobuf:"varint,1,opt,name=kill_effect_id,json=killEffectId,proto3" json:"kill_effect_id,omitempty"`
	RandomWeight int32 `protobuf:"varint,2,opt,name=random_weight,json=randomWeight,proto3" json:"random_weight,omitempty"`
	StartTime    int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IllustrateId int32 `protobuf:"varint,5,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
}

func (x *FloatingAiKillEffect) Reset() {
	*x = FloatingAiKillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiKillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiKillEffect) ProtoMessage() {}

func (x *FloatingAiKillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiKillEffect.ProtoReflect.Descriptor instead.
func (*FloatingAiKillEffect) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{15}
}

func (x *FloatingAiKillEffect) GetKillEffectId() int32 {
	if x != nil {
		return x.KillEffectId
	}
	return 0
}

func (x *FloatingAiKillEffect) GetRandomWeight() int32 {
	if x != nil {
		return x.RandomWeight
	}
	return 0
}

func (x *FloatingAiKillEffect) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FloatingAiKillEffect) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FloatingAiKillEffect) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

type FloatingAiKillEffectRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId          int32 `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	SpecialKillEffectRate int32 `protobuf:"varint,2,opt,name=special_kill_effect_rate,json=specialKillEffectRate,proto3" json:"special_kill_effect_rate,omitempty"`
}

func (x *FloatingAiKillEffectRateInfo) Reset() {
	*x = FloatingAiKillEffectRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiKillEffectRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiKillEffectRateInfo) ProtoMessage() {}

func (x *FloatingAiKillEffectRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiKillEffectRateInfo.ProtoReflect.Descriptor instead.
func (*FloatingAiKillEffectRateInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{16}
}

func (x *FloatingAiKillEffectRateInfo) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingAiKillEffectRateInfo) GetSpecialKillEffectRate() int32 {
	if x != nil {
		return x.SpecialKillEffectRate
	}
	return 0
}

type FloatingMainMapTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId int32  `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	MapAssetPath string `protobuf:"bytes,2,opt,name=map_asset_path,json=mapAssetPath,proto3" json:"map_asset_path,omitempty"`
}

func (x *FloatingMainMapTheme) Reset() {
	*x = FloatingMainMapTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingMainMapTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingMainMapTheme) ProtoMessage() {}

func (x *FloatingMainMapTheme) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingMainMapTheme.ProtoReflect.Descriptor instead.
func (*FloatingMainMapTheme) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{17}
}

func (x *FloatingMainMapTheme) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingMainMapTheme) GetMapAssetPath() string {
	if x != nil {
		return x.MapAssetPath
	}
	return ""
}

type SeasonCaiDan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc   string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Imgurl string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *SeasonCaiDan) Reset() {
	*x = SeasonCaiDan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonCaiDan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonCaiDan) ProtoMessage() {}

func (x *SeasonCaiDan) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonCaiDan.ProtoReflect.Descriptor instead.
func (*SeasonCaiDan) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{18}
}

func (x *SeasonCaiDan) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeasonCaiDan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeasonCaiDan) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SeasonCaiDan) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

type SeasonActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId           int32           `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	StartTime          int64           `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64           `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CaidanList         []*SeasonCaiDan `protobuf:"bytes,4,rep,name=caidan_list,json=caidanList,proto3" json:"caidan_list,omitempty"`
	SeasonHomepageUrl  string          `protobuf:"bytes,5,opt,name=season_homepage_url,json=seasonHomepageUrl,proto3" json:"season_homepage_url,omitempty"`
	PassportUrl        string          `protobuf:"bytes,6,opt,name=passport_url,json=passportUrl,proto3" json:"passport_url,omitempty"`
	TreasureHuntingUrl string          `protobuf:"bytes,7,opt,name=treasure_hunting_url,json=treasureHuntingUrl,proto3" json:"treasure_hunting_url,omitempty"`
	ChaseSeaUrl        string          `protobuf:"bytes,8,opt,name=chase_sea_url,json=chaseSeaUrl,proto3" json:"chase_sea_url,omitempty"`
	TrueLoveUrl        string          `protobuf:"bytes,9,opt,name=true_love_url,json=trueLoveUrl,proto3" json:"true_love_url,omitempty"`
}

func (x *SeasonActivity) Reset() {
	*x = SeasonActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonActivity) ProtoMessage() {}

func (x *SeasonActivity) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonActivity.ProtoReflect.Descriptor instead.
func (*SeasonActivity) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{19}
}

func (x *SeasonActivity) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeasonActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SeasonActivity) GetCaidanList() []*SeasonCaiDan {
	if x != nil {
		return x.CaidanList
	}
	return nil
}

func (x *SeasonActivity) GetSeasonHomepageUrl() string {
	if x != nil {
		return x.SeasonHomepageUrl
	}
	return ""
}

func (x *SeasonActivity) GetPassportUrl() string {
	if x != nil {
		return x.PassportUrl
	}
	return ""
}

func (x *SeasonActivity) GetTreasureHuntingUrl() string {
	if x != nil {
		return x.TreasureHuntingUrl
	}
	return ""
}

func (x *SeasonActivity) GetChaseSeaUrl() string {
	if x != nil {
		return x.ChaseSeaUrl
	}
	return ""
}

func (x *SeasonActivity) GetTrueLoveUrl() string {
	if x != nil {
		return x.TrueLoveUrl
	}
	return ""
}

type NewbieConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndlessShowCount int32                    `protobuf:"varint,1,opt,name=endless_show_count,json=endlessShowCount,proto3" json:"endless_show_count,omitempty"` // 新手无尽玩几局强制弹出引导
	DayList          []*NewbieSingleDayReward `protobuf:"bytes,2,rep,name=day_list,json=dayList,proto3" json:"day_list,omitempty"`
}

func (x *NewbieConfig) Reset() {
	*x = NewbieConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieConfig) ProtoMessage() {}

func (x *NewbieConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieConfig.ProtoReflect.Descriptor instead.
func (*NewbieConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{20}
}

func (x *NewbieConfig) GetEndlessShowCount() int32 {
	if x != nil {
		return x.EndlessShowCount
	}
	return 0
}

func (x *NewbieConfig) GetDayList() []*NewbieSingleDayReward {
	if x != nil {
		return x.DayList
	}
	return nil
}

type NewbieSingleDayReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl     string                 `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	AnimUrl    string                 `protobuf:"bytes,2,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	RewardList []*config.RewardConfig `protobuf:"bytes,3,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *NewbieSingleDayReward) Reset() {
	*x = NewbieSingleDayReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieSingleDayReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieSingleDayReward) ProtoMessage() {}

func (x *NewbieSingleDayReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieSingleDayReward.ProtoReflect.Descriptor instead.
func (*NewbieSingleDayReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{21}
}

func (x *NewbieSingleDayReward) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *NewbieSingleDayReward) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *NewbieSingleDayReward) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type HatchEgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        int64                  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime       int64                  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	DisappearTime    int64                  `protobuf:"varint,3,opt,name=disappear_time,json=disappearTime,proto3" json:"disappear_time,omitempty"`
	Disappear        int32                  `protobuf:"varint,4,opt,name=disappear,proto3" json:"disappear,omitempty"`
	Intro            string                 `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	RewardReviewUrl  string                 `protobuf:"bytes,6,opt,name=reward_review_url,json=rewardReviewUrl,proto3" json:"reward_review_url,omitempty"`
	RewardReviewList []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward_review_list,json=rewardReviewList,proto3" json:"reward_review_list,omitempty"`
	AdReduceSecond   int32                  `protobuf:"varint,8,opt,name=ad_reduce_second,json=adReduceSecond,proto3" json:"ad_reduce_second,omitempty"`
	EggList          []*EggLevelInfo        `protobuf:"bytes,9,rep,name=egg_list,json=eggList,proto3" json:"egg_list,omitempty"`
	TitleDesc        string                 `protobuf:"bytes,10,opt,name=title_desc,json=titleDesc,proto3" json:"title_desc,omitempty"`
	TitleUrl         string                 `protobuf:"bytes,11,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	BgUrl            string                 `protobuf:"bytes,12,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`
}

func (x *HatchEgg) Reset() {
	*x = HatchEgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HatchEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HatchEgg) ProtoMessage() {}

func (x *HatchEgg) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HatchEgg.ProtoReflect.Descriptor instead.
func (*HatchEgg) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{22}
}

func (x *HatchEgg) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HatchEgg) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *HatchEgg) GetDisappearTime() int64 {
	if x != nil {
		return x.DisappearTime
	}
	return 0
}

func (x *HatchEgg) GetDisappear() int32 {
	if x != nil {
		return x.Disappear
	}
	return 0
}

func (x *HatchEgg) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *HatchEgg) GetRewardReviewUrl() string {
	if x != nil {
		return x.RewardReviewUrl
	}
	return ""
}

func (x *HatchEgg) GetRewardReviewList() []*config.RewardConfig {
	if x != nil {
		return x.RewardReviewList
	}
	return nil
}

func (x *HatchEgg) GetAdReduceSecond() int32 {
	if x != nil {
		return x.AdReduceSecond
	}
	return 0
}

func (x *HatchEgg) GetEggList() []*EggLevelInfo {
	if x != nil {
		return x.EggList
	}
	return nil
}

func (x *HatchEgg) GetTitleDesc() string {
	if x != nil {
		return x.TitleDesc
	}
	return ""
}

func (x *HatchEgg) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

func (x *HatchEgg) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

type EggLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardList   []*config.RewardConfig `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`        // 奖励配置
	Level        int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                   // 等级 1 普通；2 中级；3高级
	NeedCollect  int32                  `protobuf:"varint,3,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"`    // 每个蛋需要收集数量
	HatchTime    int64                  `protobuf:"varint,4,opt,name=hatch_time,json=hatchTime,proto3" json:"hatch_time,omitempty"`          // 孵化时间
	DiamondValue int32                  `protobuf:"varint,5,opt,name=diamond_value,json=diamondValue,proto3" json:"diamond_value,omitempty"` // 彩蛋价值
}

func (x *EggLevelInfo) Reset() {
	*x = EggLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggLevelInfo) ProtoMessage() {}

func (x *EggLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggLevelInfo.ProtoReflect.Descriptor instead.
func (*EggLevelInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{23}
}

func (x *EggLevelInfo) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *EggLevelInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EggLevelInfo) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *EggLevelInfo) GetHatchTime() int64 {
	if x != nil {
		return x.HatchTime
	}
	return 0
}

func (x *EggLevelInfo) GetDiamondValue() int32 {
	if x != nil {
		return x.DiamondValue
	}
	return 0
}

type MeetupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define fields for MeetupConfig
	HomepageIcon      string              `protobuf:"bytes,1,opt,name=homepage_icon,json=homepageIcon,proto3" json:"homepage_icon,omitempty"`
	HomepageIconLink  string              `protobuf:"bytes,2,opt,name=homepage_icon_link,json=homepageIconLink,proto3" json:"homepage_icon_link,omitempty"`
	HomepageIconStart int64               `protobuf:"varint,3,opt,name=homepage_icon_start,json=homepageIconStart,proto3" json:"homepage_icon_start,omitempty"`
	HomepageIconEnd   int64               `protobuf:"varint,4,opt,name=homepage_icon_end,json=homepageIconEnd,proto3" json:"homepage_icon_end,omitempty"`
	List              []*MeetupConfigItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MeetupConfig) Reset() {
	*x = MeetupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetupConfig) ProtoMessage() {}

func (x *MeetupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetupConfig.ProtoReflect.Descriptor instead.
func (*MeetupConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{24}
}

func (x *MeetupConfig) GetHomepageIcon() string {
	if x != nil {
		return x.HomepageIcon
	}
	return ""
}

func (x *MeetupConfig) GetHomepageIconLink() string {
	if x != nil {
		return x.HomepageIconLink
	}
	return ""
}

func (x *MeetupConfig) GetHomepageIconStart() int64 {
	if x != nil {
		return x.HomepageIconStart
	}
	return 0
}

func (x *MeetupConfig) GetHomepageIconEnd() int64 {
	if x != nil {
		return x.HomepageIconEnd
	}
	return 0
}

func (x *MeetupConfig) GetList() []*MeetupConfigItem {
	if x != nil {
		return x.List
	}
	return nil
}

type MeetupConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define fields for MeetupConfigItem
	ActId      int32              `protobuf:"varint,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	FinishTime int64              `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Intro      string             `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro,omitempty"`
	DaysList   []*SingleDayReward `protobuf:"bytes,4,rep,name=days_list,json=daysList,proto3" json:"days_list,omitempty"`
}

func (x *MeetupConfigItem) Reset() {
	*x = MeetupConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetupConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetupConfigItem) ProtoMessage() {}

func (x *MeetupConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetupConfigItem.ProtoReflect.Descriptor instead.
func (*MeetupConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{25}
}

func (x *MeetupConfigItem) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *MeetupConfigItem) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *MeetupConfigItem) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *MeetupConfigItem) GetDaysList() []*SingleDayReward {
	if x != nil {
		return x.DaysList
	}
	return nil
}

type SingleDayReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthList []*SingleRewardItem `protobuf:"bytes,1,rep,name=length_list,json=lengthList,proto3" json:"length_list,omitempty"`
}

func (x *SingleDayReward) Reset() {
	*x = SingleDayReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDayReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDayReward) ProtoMessage() {}

func (x *SingleDayReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDayReward.ProtoReflect.Descriptor instead.
func (*SingleDayReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{26}
}

func (x *SingleDayReward) GetLengthList() []*SingleRewardItem {
	if x != nil {
		return x.LengthList
	}
	return nil
}

type SingleRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UnlockDays   int32                  `protobuf:"varint,2,opt,name=unlock_days,json=unlockDays,proto3" json:"unlock_days,omitempty"`
	UnlockLength int32                  `protobuf:"varint,3,opt,name=unlock_length,json=unlockLength,proto3" json:"unlock_length,omitempty"`
	Price        int32                  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Diamond      int32                  `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Desc         string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	PopupCount   int32                  `protobuf:"varint,7,opt,name=popup_count,json=popupCount,proto3" json:"popup_count,omitempty"` //弹窗次数
	Important    int32                  `protobuf:"varint,8,opt,name=important,proto3" json:"important,omitempty"`                     //是否重点奖励，0否，1是
	WatchAd      int32                  `protobuf:"varint,9,opt,name=watch_ad,json=watchAd,proto3" json:"watch_ad,omitempty"`
	RewardList   []*config.RewardConfig `protobuf:"bytes,10,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	RmbPrice     int32                  `protobuf:"varint,11,opt,name=rmb_price,json=rmbPrice,proto3" json:"rmb_price,omitempty"` // rmb购买价格
	PackId       int32                  `protobuf:"varint,12,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`       // rmb购买礼包id
	GoodsId      int32                  `protobuf:"varint,13,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`    // 礼包档位id
}

func (x *SingleRewardItem) Reset() {
	*x = SingleRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRewardItem) ProtoMessage() {}

func (x *SingleRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRewardItem.ProtoReflect.Descriptor instead.
func (*SingleRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{27}
}

func (x *SingleRewardItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SingleRewardItem) GetUnlockDays() int32 {
	if x != nil {
		return x.UnlockDays
	}
	return 0
}

func (x *SingleRewardItem) GetUnlockLength() int32 {
	if x != nil {
		return x.UnlockLength
	}
	return 0
}

func (x *SingleRewardItem) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SingleRewardItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *SingleRewardItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SingleRewardItem) GetPopupCount() int32 {
	if x != nil {
		return x.PopupCount
	}
	return 0
}

func (x *SingleRewardItem) GetImportant() int32 {
	if x != nil {
		return x.Important
	}
	return 0
}

func (x *SingleRewardItem) GetWatchAd() int32 {
	if x != nil {
		return x.WatchAd
	}
	return 0
}

func (x *SingleRewardItem) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *SingleRewardItem) GetRmbPrice() int32 {
	if x != nil {
		return x.RmbPrice
	}
	return 0
}

func (x *SingleRewardItem) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *SingleRewardItem) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type EndlessRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleImg string           `protobuf:"bytes,1,opt,name=title_img,json=titleImg,proto3" json:"title_img,omitempty"`
	Intro    string           `protobuf:"bytes,2,opt,name=intro,proto3" json:"intro,omitempty"`
	ActId    int32            `protobuf:"varint,3,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	Period   string           `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	List     []*EndlessReward `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EndlessRewardConfig) Reset() {
	*x = EndlessRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessRewardConfig) ProtoMessage() {}

func (x *EndlessRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessRewardConfig.ProtoReflect.Descriptor instead.
func (*EndlessRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{28}
}

func (x *EndlessRewardConfig) GetTitleImg() string {
	if x != nil {
		return x.TitleImg
	}
	return ""
}

func (x *EndlessRewardConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *EndlessRewardConfig) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *EndlessRewardConfig) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *EndlessRewardConfig) GetList() []*EndlessReward {
	if x != nil {
		return x.List
	}
	return nil
}

type EndlessReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc         string               `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Important    int32                `protobuf:"varint,3,opt,name=important,proto3" json:"important,omitempty"`                           //是否重点奖励，0否，1是
	PopupCount   int32                `protobuf:"varint,4,opt,name=popup_count,json=popupCount,proto3" json:"popup_count,omitempty"`       //弹窗次数
	DiamondPrice int32                `protobuf:"varint,5,opt,name=diamond_price,json=diamondPrice,proto3" json:"diamond_price,omitempty"` // 增加苹果购买配置，0表示不可用苹果购买，>0表示苹果价格
	UnlockLength int32                `protobuf:"varint,6,opt,name=unlock_length,json=unlockLength,proto3" json:"unlock_length,omitempty"`
	UnlockTime   int64                `protobuf:"varint,7,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"` // 默认0，没有时间限制
	UnlockTip    string               `protobuf:"bytes,8,opt,name=unlock_tip,json=unlockTip,proto3" json:"unlock_tip,omitempty"`     // 某日活动开启后才可领取
	Diamond      int32                `protobuf:"varint,9,opt,name=diamond,proto3" json:"diamond,omitempty"`                         // 苹果购买价格
	WatchAd      int32                `protobuf:"varint,10,opt,name=watch_ad,json=watchAd,proto3" json:"watch_ad,omitempty"`         //需要看广告次数
	RmbPrice     int32                `protobuf:"varint,11,opt,name=rmb_price,json=rmbPrice,proto3" json:"rmb_price,omitempty"`      // rmb购买价格
	PackId       int32                `protobuf:"varint,12,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`            // rmb购买礼包id
	GoodsId      int32                `protobuf:"varint,13,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`         // 礼包档位id
	Reward       *config.RewardConfig `protobuf:"bytes,14,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *EndlessReward) Reset() {
	*x = EndlessReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessReward) ProtoMessage() {}

func (x *EndlessReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessReward.ProtoReflect.Descriptor instead.
func (*EndlessReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{29}
}

func (x *EndlessReward) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EndlessReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *EndlessReward) GetImportant() int32 {
	if x != nil {
		return x.Important
	}
	return 0
}

func (x *EndlessReward) GetPopupCount() int32 {
	if x != nil {
		return x.PopupCount
	}
	return 0
}

func (x *EndlessReward) GetDiamondPrice() int32 {
	if x != nil {
		return x.DiamondPrice
	}
	return 0
}

func (x *EndlessReward) GetUnlockLength() int32 {
	if x != nil {
		return x.UnlockLength
	}
	return 0
}

func (x *EndlessReward) GetUnlockTime() int64 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

func (x *EndlessReward) GetUnlockTip() string {
	if x != nil {
		return x.UnlockTip
	}
	return ""
}

func (x *EndlessReward) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *EndlessReward) GetWatchAd() int32 {
	if x != nil {
		return x.WatchAd
	}
	return 0
}

func (x *EndlessReward) GetRmbPrice() int32 {
	if x != nil {
		return x.RmbPrice
	}
	return 0
}

func (x *EndlessReward) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *EndlessReward) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *EndlessReward) GetReward() *config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

type PassCheckV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int32               `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Common        *PassCommonConfig   `protobuf:"bytes,2,opt,name=common,proto3" json:"common,omitempty"`
	RewardConfig  *PassRewardConfig   `protobuf:"bytes,3,opt,name=reward_config,json=rewardConfig,proto3" json:"reward_config,omitempty"`
	TaskConfig    *PassTaskConfig     `protobuf:"bytes,4,opt,name=task_config,json=taskConfig,proto3" json:"task_config,omitempty"`
	StoreConfig   *PassStoreConfig    `protobuf:"bytes,5,opt,name=store_config,json=storeConfig,proto3" json:"store_config,omitempty"`
	MaxBreakLevel int32               `protobuf:"varint,6,opt,name=max_break_level,json=maxBreakLevel,proto3" json:"max_break_level,omitempty"` // 最大突破礼等级
	TotalReward   []*BattleRankReward `protobuf:"bytes,7,rep,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`          //榜单奖励
}

func (x *PassCheckV2) Reset() {
	*x = PassCheckV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckV2) ProtoMessage() {}

func (x *PassCheckV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckV2.ProtoReflect.Descriptor instead.
func (*PassCheckV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{30}
}

func (x *PassCheckV2) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PassCheckV2) GetCommon() *PassCommonConfig {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *PassCheckV2) GetRewardConfig() *PassRewardConfig {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

func (x *PassCheckV2) GetTaskConfig() *PassTaskConfig {
	if x != nil {
		return x.TaskConfig
	}
	return nil
}

func (x *PassCheckV2) GetStoreConfig() *PassStoreConfig {
	if x != nil {
		return x.StoreConfig
	}
	return nil
}

func (x *PassCheckV2) GetMaxBreakLevel() int32 {
	if x != nil {
		return x.MaxBreakLevel
	}
	return 0
}

func (x *PassCheckV2) GetTotalReward() []*BattleRankReward {
	if x != nil {
		return x.TotalReward
	}
	return nil
}

type PassCommonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	StartTime       int64   `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime      int64   `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	ShowFinish      string  `protobuf:"bytes,4,opt,name=show_finish,json=showFinish,proto3" json:"show_finish,omitempty"`
	Season          int32   `protobuf:"varint,5,opt,name=season,proto3" json:"season,omitempty"`
	RuleDesc        string  `protobuf:"bytes,6,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"`                         //玩法说明
	ExpDesc         string  `protobuf:"bytes,7,opt,name=exp_desc,json=expDesc,proto3" json:"exp_desc,omitempty"`                            //积分(经验)说明
	TaskDesc        string  `protobuf:"bytes,8,opt,name=task_desc,json=taskDesc,proto3" json:"task_desc,omitempty"`                         //任务说明
	TopDesc         string  `protobuf:"bytes,9,opt,name=top_desc,json=topDesc,proto3" json:"top_desc,omitempty"`                            //排行榜说明
	TopRewardImgurl string  `protobuf:"bytes,10,opt,name=top_reward_imgurl,json=topRewardImgurl,proto3" json:"top_reward_imgurl,omitempty"` //排行榜奖励说明图
	UpgradeImgurl   string  `protobuf:"bytes,11,opt,name=upgrade_imgurl,json=upgradeImgurl,proto3" json:"upgrade_imgurl,omitempty"`         //进阶说明图
	GuideImgurl     string  `protobuf:"bytes,12,opt,name=guide_imgurl,json=guideImgurl,proto3" json:"guide_imgurl,omitempty"`
	HasExpMode      []int32 `protobuf:"varint,13,rep,packed,name=has_exp_mode,json=hasExpMode,proto3" json:"has_exp_mode,omitempty"` //能获得且要展示经验的游戏模式
	PerRankExp      int32   `protobuf:"varint,14,opt,name=per_rank_exp,json=perRankExp,proto3" json:"per_rank_exp,omitempty"`        //每个等级需要的经验
	// 首页
	BgUrl               string `protobuf:"bytes,15,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`                                             // 背景url
	BgAnimType          int32  `protobuf:"varint,16,opt,name=bg_anim_type,json=bgAnimType,proto3" json:"bg_anim_type,omitempty"`                           // 主页背景动效类型
	MainRewardUrl       string `protobuf:"bytes,17,opt,name=main_reward_url,json=mainRewardUrl,proto3" json:"main_reward_url,omitempty"`                   // 主奖励展示动效svga
	MainRewardAnimType  int32  `protobuf:"varint,18,opt,name=main_reward_anim_type,json=mainRewardAnimType,proto3" json:"main_reward_anim_type,omitempty"` // 主奖励动效类型
	MainRewardBottom    string `protobuf:"bytes,19,opt,name=main_reward_bottom,json=mainRewardBottom,proto3" json:"main_reward_bottom,omitempty"`          // 主奖励底图
	MainRewardCondition string `protobuf:"bytes,20,opt,name=main_reward_condition,json=mainRewardCondition,proto3" json:"main_reward_condition,omitempty"` // 主奖励获取条件文案
	// 通行证进阶
	AdvanceBgUrl      string `protobuf:"bytes,21,opt,name=advance_bg_url,json=advanceBgUrl,proto3" json:"advance_bg_url,omitempty"`                   // 进阶通行证背景url
	AdvanceBgAnimType int32  `protobuf:"varint,22,opt,name=advance_bg_anim_type,json=advanceBgAnimType,proto3" json:"advance_bg_anim_type,omitempty"` // 进阶通行证背景动效类型
	AdvanceHonorUrl   string `protobuf:"bytes,23,opt,name=advance_honor_url,json=advanceHonorUrl,proto3" json:"advance_honor_url,omitempty"`          // 荣耀通行证卡片
	AdvanceLuxuryUrl  string `protobuf:"bytes,24,opt,name=advance_luxury_url,json=advanceLuxuryUrl,proto3" json:"advance_luxury_url,omitempty"`       // 豪华通行证卡片
}

func (x *PassCommonConfig) Reset() {
	*x = PassCommonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCommonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCommonConfig) ProtoMessage() {}

func (x *PassCommonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCommonConfig.ProtoReflect.Descriptor instead.
func (*PassCommonConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{31}
}

func (x *PassCommonConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PassCommonConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PassCommonConfig) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *PassCommonConfig) GetShowFinish() string {
	if x != nil {
		return x.ShowFinish
	}
	return ""
}

func (x *PassCommonConfig) GetSeason() int32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *PassCommonConfig) GetRuleDesc() string {
	if x != nil {
		return x.RuleDesc
	}
	return ""
}

func (x *PassCommonConfig) GetExpDesc() string {
	if x != nil {
		return x.ExpDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTopDesc() string {
	if x != nil {
		return x.TopDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTopRewardImgurl() string {
	if x != nil {
		return x.TopRewardImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetUpgradeImgurl() string {
	if x != nil {
		return x.UpgradeImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetGuideImgurl() string {
	if x != nil {
		return x.GuideImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetHasExpMode() []int32 {
	if x != nil {
		return x.HasExpMode
	}
	return nil
}

func (x *PassCommonConfig) GetPerRankExp() int32 {
	if x != nil {
		return x.PerRankExp
	}
	return 0
}

func (x *PassCommonConfig) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *PassCommonConfig) GetBgAnimType() int32 {
	if x != nil {
		return x.BgAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetMainRewardUrl() string {
	if x != nil {
		return x.MainRewardUrl
	}
	return ""
}

func (x *PassCommonConfig) GetMainRewardAnimType() int32 {
	if x != nil {
		return x.MainRewardAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetMainRewardBottom() string {
	if x != nil {
		return x.MainRewardBottom
	}
	return ""
}

func (x *PassCommonConfig) GetMainRewardCondition() string {
	if x != nil {
		return x.MainRewardCondition
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceBgUrl() string {
	if x != nil {
		return x.AdvanceBgUrl
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceBgAnimType() int32 {
	if x != nil {
		return x.AdvanceBgAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetAdvanceHonorUrl() string {
	if x != nil {
		return x.AdvanceHonorUrl
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceLuxuryUrl() string {
	if x != nil {
		return x.AdvanceLuxuryUrl
	}
	return ""
}

type PassRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfinityRankImgurl string                 `protobuf:"bytes,1,opt,name=infinity_rank_imgurl,json=infinityRankImgurl,proto3" json:"infinity_rank_imgurl,omitempty"`
	NormalRank         int32                  `protobuf:"varint,2,opt,name=normal_rank,json=normalRank,proto3" json:"normal_rank,omitempty"` // 奖励list里超过此数的关卡循环展示
	RewardList         []*PassReward          `protobuf:"bytes,3,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	RewardPreview      *PassRewardPreview     `protobuf:"bytes,4,opt,name=reward_preview,json=rewardPreview,proto3" json:"reward_preview,omitempty"`
	RewardSort         []*config.RewardConfig `protobuf:"bytes,5,rep,name=reward_sort,json=rewardSort,proto3" json:"reward_sort,omitempty"`
}

func (x *PassRewardConfig) Reset() {
	*x = PassRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassRewardConfig) ProtoMessage() {}

func (x *PassRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassRewardConfig.ProtoReflect.Descriptor instead.
func (*PassRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{32}
}

func (x *PassRewardConfig) GetInfinityRankImgurl() string {
	if x != nil {
		return x.InfinityRankImgurl
	}
	return ""
}

func (x *PassRewardConfig) GetNormalRank() int32 {
	if x != nil {
		return x.NormalRank
	}
	return 0
}

func (x *PassRewardConfig) GetRewardList() []*PassReward {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *PassRewardConfig) GetRewardPreview() *PassRewardPreview {
	if x != nil {
		return x.RewardPreview
	}
	return nil
}

func (x *PassRewardConfig) GetRewardSort() []*config.RewardConfig {
	if x != nil {
		return x.RewardSort
	}
	return nil
}

type PassRewardPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeReward []*config.RewardConfig `protobuf:"bytes,1,rep,name=free_reward,json=freeReward,proto3" json:"free_reward,omitempty"`
	HighReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=high_reward,json=highReward,proto3" json:"high_reward,omitempty"`
	// 奖励橱窗
	WindowReward []*WindowReward        `protobuf:"bytes,3,rep,name=window_reward,json=windowReward,proto3" json:"window_reward,omitempty"`
	HonorReward  []*config.RewardConfig `protobuf:"bytes,4,rep,name=honor_reward,json=honorReward,proto3" json:"honor_reward,omitempty"`
	LuxuryReward []*config.RewardConfig `protobuf:"bytes,5,rep,name=luxury_reward,json=luxuryReward,proto3" json:"luxury_reward,omitempty"`
}

func (x *PassRewardPreview) Reset() {
	*x = PassRewardPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassRewardPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassRewardPreview) ProtoMessage() {}

func (x *PassRewardPreview) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassRewardPreview.ProtoReflect.Descriptor instead.
func (*PassRewardPreview) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{33}
}

func (x *PassRewardPreview) GetFreeReward() []*config.RewardConfig {
	if x != nil {
		return x.FreeReward
	}
	return nil
}

func (x *PassRewardPreview) GetHighReward() []*config.RewardConfig {
	if x != nil {
		return x.HighReward
	}
	return nil
}

func (x *PassRewardPreview) GetWindowReward() []*WindowReward {
	if x != nil {
		return x.WindowReward
	}
	return nil
}

func (x *PassRewardPreview) GetHonorReward() []*config.RewardConfig {
	if x != nil {
		return x.HonorReward
	}
	return nil
}

func (x *PassRewardPreview) GetLuxuryReward() []*config.RewardConfig {
	if x != nil {
		return x.LuxuryReward
	}
	return nil
}

type WindowReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId      int32                  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` //物品id
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl      string                 `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Num         int32                  `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	BigNum      string                 `protobuf:"bytes,6,opt,name=big_num,json=bigNum,proto3" json:"big_num,omitempty"`              // 大数展示，为空展示num字段
	UserInfo    string                 `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`        //限时外观和头像框使用
	IsValuable  int32                  `protobuf:"varint,8,opt,name=is_valuable,json=isValuable,proto3" json:"is_valuable,omitempty"` //是否有高价值弹框，默认没有
	WorthLevel  int32                  `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"` //稀有度等级，从 1 开始。0 的话默认为 C 等级
	MarkId      int32                  `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`            //0: 忽略 1: 豪华版通行证加成 2: 回归加成 3: 师徒加成
	Convert     []*config.RewardConfig `protobuf:"bytes,11,rep,name=convert,proto3" json:"convert,omitempty"`                         //奖励折算，没有折算则为空
	Probability int32                  `protobuf:"varint,12,opt,name=probability,proto3" json:"probability,omitempty"`
	UseInfo     string                 `protobuf:"bytes,13,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	Desc        string                 `protobuf:"bytes,14,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *WindowReward) Reset() {
	*x = WindowReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowReward) ProtoMessage() {}

func (x *WindowReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowReward.ProtoReflect.Descriptor instead.
func (*WindowReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{34}
}

func (x *WindowReward) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WindowReward) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *WindowReward) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowReward) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *WindowReward) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WindowReward) GetBigNum() string {
	if x != nil {
		return x.BigNum
	}
	return ""
}

func (x *WindowReward) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

func (x *WindowReward) GetIsValuable() int32 {
	if x != nil {
		return x.IsValuable
	}
	return 0
}

func (x *WindowReward) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *WindowReward) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *WindowReward) GetConvert() []*config.RewardConfig {
	if x != nil {
		return x.Convert
	}
	return nil
}

func (x *WindowReward) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *WindowReward) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *WindowReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type PassReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	FreeReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=free_reward,json=freeReward,proto3" json:"free_reward,omitempty"`
	HighReward []*config.RewardConfig `protobuf:"bytes,3,rep,name=high_reward,json=highReward,proto3" json:"high_reward,omitempty"`
}

func (x *PassReward) Reset() {
	*x = PassReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassReward) ProtoMessage() {}

func (x *PassReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassReward.ProtoReflect.Descriptor instead.
func (*PassReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{35}
}

func (x *PassReward) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PassReward) GetFreeReward() []*config.RewardConfig {
	if x != nil {
		return x.FreeReward
	}
	return nil
}

func (x *PassReward) GetHighReward() []*config.RewardConfig {
	if x != nil {
		return x.HighReward
	}
	return nil
}

type PassTaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonTask   *SeasonTask   `protobuf:"bytes,1,opt,name=season_task,json=seasonTask,proto3" json:"season_task,omitempty"`
	GradeTask    *GradeTask    `protobuf:"bytes,2,opt,name=grade_task,json=gradeTask,proto3" json:"grade_task,omitempty"`
	WeeklyTask   []*WeeklyTask `protobuf:"bytes,3,rep,name=weekly_task,json=weeklyTask,proto3" json:"weekly_task,omitempty"`
	DailyTask    []*DailyTask  `protobuf:"bytes,4,rep,name=daily_task,json=dailyTask,proto3" json:"daily_task,omitempty"`
	WeekExpLimit int64         `protobuf:"varint,5,opt,name=week_exp_limit,json=weekExpLimit,proto3" json:"week_exp_limit,omitempty"`
	DayExpLimit  int64         `protobuf:"varint,6,opt,name=day_exp_limit,json=dayExpLimit,proto3" json:"day_exp_limit,omitempty"`
}

func (x *PassTaskConfig) Reset() {
	*x = PassTaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassTaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTaskConfig) ProtoMessage() {}

func (x *PassTaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTaskConfig.ProtoReflect.Descriptor instead.
func (*PassTaskConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{36}
}

func (x *PassTaskConfig) GetSeasonTask() *SeasonTask {
	if x != nil {
		return x.SeasonTask
	}
	return nil
}

func (x *PassTaskConfig) GetGradeTask() *GradeTask {
	if x != nil {
		return x.GradeTask
	}
	return nil
}

func (x *PassTaskConfig) GetWeeklyTask() []*WeeklyTask {
	if x != nil {
		return x.WeeklyTask
	}
	return nil
}

func (x *PassTaskConfig) GetDailyTask() []*DailyTask {
	if x != nil {
		return x.DailyTask
	}
	return nil
}

func (x *PassTaskConfig) GetWeekExpLimit() int64 {
	if x != nil {
		return x.WeekExpLimit
	}
	return 0
}

func (x *PassTaskConfig) GetDayExpLimit() int64 {
	if x != nil {
		return x.DayExpLimit
	}
	return 0
}

type DailyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc       string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	BtnType    int32  `protobuf:"varint,3,opt,name=btn_type,json=btnType,proto3" json:"btn_type,omitempty"`
	BtnLink    string `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	BtnLinkDev string `protobuf:"bytes,5,opt,name=btn_link_dev,json=btnLinkDev,proto3" json:"btn_link_dev,omitempty"`
}

func (x *DailyTask) Reset() {
	*x = DailyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTask) ProtoMessage() {}

func (x *DailyTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTask.ProtoReflect.Descriptor instead.
func (*DailyTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{37}
}

func (x *DailyTask) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DailyTask) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DailyTask) GetBtnType() int32 {
	if x != nil {
		return x.BtnType
	}
	return 0
}

func (x *DailyTask) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *DailyTask) GetBtnLinkDev() string {
	if x != nil {
		return x.BtnLinkDev
	}
	return ""
}

type WeeklyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64            `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64            `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	TaskList   []*PassTaskModel `protobuf:"bytes,3,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *WeeklyTask) Reset() {
	*x = WeeklyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyTask) ProtoMessage() {}

func (x *WeeklyTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyTask.ProtoReflect.Descriptor instead.
func (*WeeklyTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{38}
}

func (x *WeeklyTask) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WeeklyTask) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *WeeklyTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type SeasonTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*PassTaskModel `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *SeasonTask) Reset() {
	*x = SeasonTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonTask) ProtoMessage() {}

func (x *SeasonTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonTask.ProtoReflect.Descriptor instead.
func (*SeasonTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{39}
}

func (x *SeasonTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type GradeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*PassTaskModel `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *GradeTask) Reset() {
	*x = GradeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeTask) ProtoMessage() {}

func (x *GradeTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeTask.ProtoReflect.Descriptor instead.
func (*GradeTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{40}
}

func (x *GradeTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type PassTaskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          int32  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Desc            string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	BtnLink         string `protobuf:"bytes,3,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	Param           int32  `protobuf:"varint,4,opt,name=param,proto3" json:"param,omitempty"`
	RewardExp       int32  `protobuf:"varint,5,opt,name=reward_exp,json=rewardExp,proto3" json:"reward_exp,omitempty"`
	NeedTaskCardNum int32  `protobuf:"varint,6,opt,name=need_task_card_num,json=needTaskCardNum,proto3" json:"need_task_card_num,omitempty"` // 完成周任务需要的任务卡数量
	Title           string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`                                                 // 日常任务才有
}

func (x *PassTaskModel) Reset() {
	*x = PassTaskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassTaskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTaskModel) ProtoMessage() {}

func (x *PassTaskModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTaskModel.ProtoReflect.Descriptor instead.
func (*PassTaskModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{41}
}

func (x *PassTaskModel) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *PassTaskModel) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PassTaskModel) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *PassTaskModel) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *PassTaskModel) GetRewardExp() int32 {
	if x != nil {
		return x.RewardExp
	}
	return 0
}

func (x *PassTaskModel) GetNeedTaskCardNum() int32 {
	if x != nil {
		return x.NeedTaskCardNum
	}
	return 0
}

func (x *PassTaskModel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type PassStoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankPrice       *config.PriceInfo   `protobuf:"bytes,1,opt,name=rank_price,json=rankPrice,proto3" json:"rank_price,omitempty"`
	ExchangeStore   []*ExchangeStore    `protobuf:"bytes,2,rep,name=exchange_store,json=exchangeStore,proto3" json:"exchange_store,omitempty"`
	HighStoreImgurl string              `protobuf:"bytes,3,opt,name=high_store_imgurl,json=highStoreImgurl,proto3" json:"high_store_imgurl,omitempty"`
	HighStoreAnim   string              `protobuf:"bytes,4,opt,name=high_store_anim,json=highStoreAnim,proto3" json:"high_store_anim,omitempty"`
	HighStore       []*config.PackModel `protobuf:"bytes,5,rep,name=high_store,json=highStore,proto3" json:"high_store,omitempty"`
}

func (x *PassStoreConfig) Reset() {
	*x = PassStoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassStoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassStoreConfig) ProtoMessage() {}

func (x *PassStoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassStoreConfig.ProtoReflect.Descriptor instead.
func (*PassStoreConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{42}
}

func (x *PassStoreConfig) GetRankPrice() *config.PriceInfo {
	if x != nil {
		return x.RankPrice
	}
	return nil
}

func (x *PassStoreConfig) GetExchangeStore() []*ExchangeStore {
	if x != nil {
		return x.ExchangeStore
	}
	return nil
}

func (x *PassStoreConfig) GetHighStoreImgurl() string {
	if x != nil {
		return x.HighStoreImgurl
	}
	return ""
}

func (x *PassStoreConfig) GetHighStoreAnim() string {
	if x != nil {
		return x.HighStoreAnim
	}
	return ""
}

func (x *PassStoreConfig) GetHighStore() []*config.PackModel {
	if x != nil {
		return x.HighStore
	}
	return nil
}

type ExchangeStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          int32          `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId        int32          `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Id            int32          `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"` // 请求兑换接口时传入的id
	Num           int32          `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Name          string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl        string         `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	UseInfo       string         `protobuf:"bytes,7,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	TimeUnit      int64          `protobuf:"varint,8,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Desc          string         `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	BuyLimit      int32          `protobuf:"varint,10,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"` // 次数限制
	Price         *ExchangePrice `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	RankLimit     int32          `protobuf:"varint,12,opt,name=rank_limit,json=rankLimit,proto3" json:"rank_limit,omitempty"`              // 通行证等级
	NeedVip       int32          `protobuf:"varint,13,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`                    // 通行证版本 0免费 1 荣耀 2 豪华
	NabobAddition float32        `protobuf:"fixed32,14,opt,name=nabob_addition,json=nabobAddition,proto3" json:"nabob_addition,omitempty"` // 限购加成百分比，豪华版才有
}

func (x *ExchangeStore) Reset() {
	*x = ExchangeStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeStore) ProtoMessage() {}

func (x *ExchangeStore) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeStore.ProtoReflect.Descriptor instead.
func (*ExchangeStore) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{43}
}

func (x *ExchangeStore) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangeStore) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *ExchangeStore) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeStore) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ExchangeStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeStore) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *ExchangeStore) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *ExchangeStore) GetTimeUnit() int64 {
	if x != nil {
		return x.TimeUnit
	}
	return 0
}

func (x *ExchangeStore) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ExchangeStore) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *ExchangeStore) GetPrice() *ExchangePrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeStore) GetRankLimit() int32 {
	if x != nil {
		return x.RankLimit
	}
	return 0
}

func (x *ExchangeStore) GetNeedVip() int32 {
	if x != nil {
		return x.NeedVip
	}
	return 0
}

func (x *ExchangeStore) GetNabobAddition() float32 {
	if x != nil {
		return x.NabobAddition
	}
	return 0
}

type ExchangePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`         // 类型中间道具11，写死
	Num      int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`           // 兑换需要的通行币数量
	Discount int32 `protobuf:"varint,3,opt,name=discount,proto3" json:"discount,omitempty"` // 如果配置了就用这个作为价格，否则就用 num
}

func (x *ExchangePrice) Reset() {
	*x = ExchangePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangePrice) ProtoMessage() {}

func (x *ExchangePrice) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangePrice.ProtoReflect.Descriptor instead.
func (*ExchangePrice) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{44}
}

func (x *ExchangePrice) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangePrice) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ExchangePrice) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type BattleRankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank     int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	RankDesc string                 `protobuf:"bytes,2,opt,name=rank_desc,json=rankDesc,proto3" json:"rank_desc,omitempty"`
	Mail     string                 `protobuf:"bytes,3,opt,name=mail,proto3" json:"mail,omitempty"`
	Reward   []*config.RewardConfig `protobuf:"bytes,4,rep,name=reward,proto3" json:"reward,omitempty"`
}

func (x *BattleRankReward) Reset() {
	*x = BattleRankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRankReward) ProtoMessage() {}

func (x *BattleRankReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRankReward.ProtoReflect.Descriptor instead.
func (*BattleRankReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{45}
}

func (x *BattleRankReward) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *BattleRankReward) GetRankDesc() string {
	if x != nil {
		return x.RankDesc
	}
	return ""
}

func (x *BattleRankReward) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *BattleRankReward) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

type RouletteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopupInterval int32              `protobuf:"varint,1,opt,name=popup_interval,json=popupInterval,proto3" json:"popup_interval,omitempty"`
	RewardTable   []*RewardTableBean `protobuf:"bytes,2,rep,name=reward_table,json=rewardTable,proto3" json:"reward_table,omitempty"`
	Config        *RouletteSubConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *RouletteConfig) Reset() {
	*x = RouletteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouletteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouletteConfig) ProtoMessage() {}

func (x *RouletteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouletteConfig.ProtoReflect.Descriptor instead.
func (*RouletteConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{46}
}

func (x *RouletteConfig) GetPopupInterval() int32 {
	if x != nil {
		return x.PopupInterval
	}
	return 0
}

func (x *RouletteConfig) GetRewardTable() []*RewardTableBean {
	if x != nil {
		return x.RewardTable
	}
	return nil
}

func (x *RouletteConfig) GetConfig() *RouletteSubConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type RewardTableBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Mode   int32  `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *RewardTableBean) Reset() {
	*x = RewardTableBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardTableBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardTableBean) ProtoMessage() {}

func (x *RewardTableBean) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardTableBean.ProtoReflect.Descriptor instead.
func (*RewardTableBean) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{47}
}

func (x *RewardTableBean) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RewardTableBean) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RewardTableBean) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type RouletteSubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotteryLink     string `protobuf:"bytes,1,opt,name=lottery_link,json=lotteryLink,proto3" json:"lottery_link,omitempty"`
	LotteryLinkIos  string `protobuf:"bytes,2,opt,name=lottery_link_ios,json=lotteryLinkIos,proto3" json:"lottery_link_ios,omitempty"`
	EndlessIconUrl  string `protobuf:"bytes,3,opt,name=endless_icon_url,json=endlessIconUrl,proto3" json:"endless_icon_url,omitempty"`
	GoldCoinIconUrl string `protobuf:"bytes,4,opt,name=gold_coin_icon_url,json=goldCoinIconUrl,proto3" json:"gold_coin_icon_url,omitempty"`
	EndlessEndtime  int64  `protobuf:"varint,5,opt,name=endless_endtime,json=endlessEndtime,proto3" json:"endless_endtime,omitempty"` // 单机轮盘结束时间，以s计算
}

func (x *RouletteSubConfig) Reset() {
	*x = RouletteSubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouletteSubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouletteSubConfig) ProtoMessage() {}

func (x *RouletteSubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouletteSubConfig.ProtoReflect.Descriptor instead.
func (*RouletteSubConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{48}
}

func (x *RouletteSubConfig) GetLotteryLink() string {
	if x != nil {
		return x.LotteryLink
	}
	return ""
}

func (x *RouletteSubConfig) GetLotteryLinkIos() string {
	if x != nil {
		return x.LotteryLinkIos
	}
	return ""
}

func (x *RouletteSubConfig) GetEndlessIconUrl() string {
	if x != nil {
		return x.EndlessIconUrl
	}
	return ""
}

func (x *RouletteSubConfig) GetGoldCoinIconUrl() string {
	if x != nil {
		return x.GoldCoinIconUrl
	}
	return ""
}

func (x *RouletteSubConfig) GetEndlessEndtime() int64 {
	if x != nil {
		return x.EndlessEndtime
	}
	return 0
}

type SkinUgcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IconImgurl string `protobuf:"bytes,3,opt,name=icon_imgurl,json=iconImgurl,proto3" json:"icon_imgurl,omitempty"`
	BtnLink    string `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
}

func (x *SkinUgcConfig) Reset() {
	*x = SkinUgcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinUgcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinUgcConfig) ProtoMessage() {}

func (x *SkinUgcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinUgcConfig.ProtoReflect.Descriptor instead.
func (*SkinUgcConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{49}
}

func (x *SkinUgcConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SkinUgcConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SkinUgcConfig) GetIconImgurl() string {
	if x != nil {
		return x.IconImgurl
	}
	return ""
}

func (x *SkinUgcConfig) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

type SkinUgcConfigV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     int64       `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64       `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IconImgurl    string      `protobuf:"bytes,3,opt,name=icon_imgurl,json=iconImgurl,proto3" json:"icon_imgurl,omitempty"`
	BtnLink       string      `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	SkinTopicList []*UgcTopic `protobuf:"bytes,5,rep,name=skin_topic_list,json=skinTopicList,proto3" json:"skin_topic_list,omitempty"`
	KsTopicList   []*UgcTopic `protobuf:"bytes,6,rep,name=ks_topic_list,json=ksTopicList,proto3" json:"ks_topic_list,omitempty"`
	BgTopicList   []*UgcTopic `protobuf:"bytes,7,rep,name=bg_topic_list,json=bgTopicList,proto3" json:"bg_topic_list,omitempty"`
	SuitTopicList []*UgcTopic `protobuf:"bytes,8,rep,name=suit_topic_list,json=suitTopicList,proto3" json:"suit_topic_list,omitempty"`
	VipCost       int64       `protobuf:"varint,9,opt,name=vip_cost,json=vipCost,proto3" json:"vip_cost,omitempty"`
	TitleUrl      string      `protobuf:"bytes,10,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
}

func (x *SkinUgcConfigV2) Reset() {
	*x = SkinUgcConfigV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinUgcConfigV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinUgcConfigV2) ProtoMessage() {}

func (x *SkinUgcConfigV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinUgcConfigV2.ProtoReflect.Descriptor instead.
func (*SkinUgcConfigV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{50}
}

func (x *SkinUgcConfigV2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SkinUgcConfigV2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SkinUgcConfigV2) GetIconImgurl() string {
	if x != nil {
		return x.IconImgurl
	}
	return ""
}

func (x *SkinUgcConfigV2) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *SkinUgcConfigV2) GetSkinTopicList() []*UgcTopic {
	if x != nil {
		return x.SkinTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetKsTopicList() []*UgcTopic {
	if x != nil {
		return x.KsTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetBgTopicList() []*UgcTopic {
	if x != nil {
		return x.BgTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetSuitTopicList() []*UgcTopic {
	if x != nil {
		return x.SuitTopicList
	}
	return nil
}

func (x *SkinUgcConfigV2) GetVipCost() int64 {
	if x != nil {
		return x.VipCost
	}
	return 0
}

func (x *SkinUgcConfigV2) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

type UgcTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bg            string `protobuf:"bytes,3,opt,name=bg,proto3" json:"bg,omitempty"`
	BgSmall       string `protobuf:"bytes,4,opt,name=bg_small,json=bgSmall,proto3" json:"bg_small,omitempty"`
	IsTopicCreate bool   `protobuf:"varint,5,opt,name=is_topic_create,json=isTopicCreate,proto3" json:"is_topic_create,omitempty"`
}

func (x *UgcTopic) Reset() {
	*x = UgcTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcTopic) ProtoMessage() {}

func (x *UgcTopic) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcTopic.ProtoReflect.Descriptor instead.
func (*UgcTopic) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{51}
}

func (x *UgcTopic) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UgcTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UgcTopic) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *UgcTopic) GetBgSmall() string {
	if x != nil {
		return x.BgSmall
	}
	return ""
}

func (x *UgcTopic) GetIsTopicCreate() bool {
	if x != nil {
		return x.IsTopicCreate
	}
	return false
}

type UgcWorks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Like     int32         `protobuf:"varint,3,opt,name=like,proto3" json:"like,omitempty"`                         // 点赞数
	Support  int32         `protobuf:"varint,4,opt,name=support,proto3" json:"support,omitempty"`                   // 应援数
	Uid      string        `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                            // 作者uid
	Nickname string        `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`                  // 作者名字
	Type     int32         `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                         // 1:皮肤，2:击杀效果，3:背景，4.套装
	SkinType int32         `protobuf:"varint,8,opt,name=skin_type,json=skinType,proto3" json:"skin_type,omitempty"` // 作品为皮肤时有效，1节点型，2丝带行，3拉伸型
	TopicId  int32         `protobuf:"varint,9,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	UploadTs int32         `protobuf:"varint,10,opt,name=upload_ts,json=uploadTs,proto3" json:"upload_ts,omitempty"`
	State    int32         `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`                      // 状态：0:审核中，1:已过审
	Normal   *UgcWorksLink `protobuf:"bytes,12,opt,name=normal,proto3" json:"normal,omitempty"`                     //作品为皮肤时有效，静态皮肤
	Speed    *UgcWorksLink `protobuf:"bytes,13,opt,name=speed,proto3" json:"speed,omitempty"`                       //作品为皮肤时有效，加速皮肤
	GameInfo string        `protobuf:"bytes,14,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"` // 作品图集信息
	SkinId   int32         `protobuf:"varint,15,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`      // 套装的皮肤id
	KsId     int32         `protobuf:"varint,16,opt,name=ks_id,json=ksId,proto3" json:"ks_id,omitempty"`            // 套装的击杀id
	BgId     int32         `protobuf:"varint,17,opt,name=bg_id,json=bgId,proto3" json:"bg_id,omitempty"`            // 套装的背景id
	SkinInfo *UgcWorks     `protobuf:"bytes,18,opt,name=skin_info,json=skinInfo,proto3" json:"skin_info,omitempty"` // 套装的皮肤信息
	KsInfo   *UgcWorks     `protobuf:"bytes,19,opt,name=ks_info,json=ksInfo,proto3" json:"ks_info,omitempty"`       // 套装的皮肤信息
	BgInfo   *UgcWorks     `protobuf:"bytes,20,opt,name=bg_info,json=bgInfo,proto3" json:"bg_info,omitempty"`       // 套装的皮肤信息
}

func (x *UgcWorks) Reset() {
	*x = UgcWorks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcWorks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcWorks) ProtoMessage() {}

func (x *UgcWorks) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcWorks.ProtoReflect.Descriptor instead.
func (*UgcWorks) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{52}
}

func (x *UgcWorks) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UgcWorks) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UgcWorks) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *UgcWorks) GetSupport() int32 {
	if x != nil {
		return x.Support
	}
	return 0
}

func (x *UgcWorks) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UgcWorks) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UgcWorks) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UgcWorks) GetSkinType() int32 {
	if x != nil {
		return x.SkinType
	}
	return 0
}

func (x *UgcWorks) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *UgcWorks) GetUploadTs() int32 {
	if x != nil {
		return x.UploadTs
	}
	return 0
}

func (x *UgcWorks) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UgcWorks) GetNormal() *UgcWorksLink {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *UgcWorks) GetSpeed() *UgcWorksLink {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *UgcWorks) GetGameInfo() string {
	if x != nil {
		return x.GameInfo
	}
	return ""
}

func (x *UgcWorks) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *UgcWorks) GetKsId() int32 {
	if x != nil {
		return x.KsId
	}
	return 0
}

func (x *UgcWorks) GetBgId() int32 {
	if x != nil {
		return x.BgId
	}
	return 0
}

func (x *UgcWorks) GetSkinInfo() *UgcWorks {
	if x != nil {
		return x.SkinInfo
	}
	return nil
}

func (x *UgcWorks) GetKsInfo() *UgcWorks {
	if x != nil {
		return x.KsInfo
	}
	return nil
}

func (x *UgcWorks) GetBgInfo() *UgcWorks {
	if x != nil {
		return x.BgInfo
	}
	return nil
}

type UgcWorksLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadImgurl string   `protobuf:"bytes,1,opt,name=head_imgurl,json=headImgurl,proto3" json:"head_imgurl,omitempty"`
	BodyImgurl []string `protobuf:"bytes,2,rep,name=body_imgurl,json=bodyImgurl,proto3" json:"body_imgurl,omitempty"`
	TailImgurl string   `protobuf:"bytes,3,opt,name=tail_imgurl,json=tailImgurl,proto3" json:"tail_imgurl,omitempty"`
}

func (x *UgcWorksLink) Reset() {
	*x = UgcWorksLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcWorksLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcWorksLink) ProtoMessage() {}

func (x *UgcWorksLink) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcWorksLink.ProtoReflect.Descriptor instead.
func (*UgcWorksLink) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{53}
}

func (x *UgcWorksLink) GetHeadImgurl() string {
	if x != nil {
		return x.HeadImgurl
	}
	return ""
}

func (x *UgcWorksLink) GetBodyImgurl() []string {
	if x != nil {
		return x.BodyImgurl
	}
	return nil
}

func (x *UgcWorksLink) GetTailImgurl() string {
	if x != nil {
		return x.TailImgurl
	}
	return ""
}

// 小秘书相关配置 Start
type SnakeSecretary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *SecretaryModel `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`   // 常见问题
	Account *SecretaryModel `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"` // 账户问题
	Order   *SecretaryModel `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`     // 充值问题
}

func (x *SnakeSecretary) Reset() {
	*x = SnakeSecretary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeSecretary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeSecretary) ProtoMessage() {}

func (x *SnakeSecretary) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeSecretary.ProtoReflect.Descriptor instead.
func (*SnakeSecretary) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{54}
}

func (x *SnakeSecretary) GetCommon() *SecretaryModel {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SnakeSecretary) GetAccount() *SecretaryModel {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *SnakeSecretary) GetOrder() *SecretaryModel {
	if x != nil {
		return x.Order
	}
	return nil
}

type SecretaryModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	QaList []*QAInfo `protobuf:"bytes,2,rep,name=qa_list,json=qaList,proto3" json:"qa_list,omitempty"`
}

func (x *SecretaryModel) Reset() {
	*x = SecretaryModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretaryModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretaryModel) ProtoMessage() {}

func (x *SecretaryModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretaryModel.ProtoReflect.Descriptor instead.
func (*SecretaryModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{55}
}

func (x *SecretaryModel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SecretaryModel) GetQaList() []*QAInfo {
	if x != nil {
		return x.QaList
	}
	return nil
}

type QAInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	A string `protobuf:"bytes,2,opt,name=a,proto3" json:"a,omitempty"`
}

func (x *QAInfo) Reset() {
	*x = QAInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QAInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QAInfo) ProtoMessage() {}

func (x *QAInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QAInfo.ProtoReflect.Descriptor instead.
func (*QAInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{56}
}

func (x *QAInfo) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *QAInfo) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

// 广告相关配置 Start
type AdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times                 int32               `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`                                //插页弹出局数间隔
	FirstTimes            int32               `protobuf:"varint,2,opt,name=first_times,json=firstTimes,proto3" json:"first_times,omitempty"`    //插页首弹局数
	TimesLimit            int32               `protobuf:"varint,3,opt,name=times_limit,json=timesLimit,proto3" json:"times_limit,omitempty"`    //插页每日弹出上限
	MinInterval           int32               `protobuf:"varint,4,opt,name=min_interval,json=minInterval,proto3" json:"min_interval,omitempty"` //最小时间间隔
	DelayLoad             int32               `protobuf:"varint,5,opt,name=delay_load,json=delayLoad,proto3" json:"delay_load,omitempty"`
	FirstTimeInterval     int32               `protobuf:"varint,6,opt,name=first_time_interval,json=firstTimeInterval,proto3" json:"first_time_interval,omitempty"`
	TimeInterval          int32               `protobuf:"varint,7,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	AdPercent             []*AdGrade          `protobuf:"bytes,8,rep,name=ad_percent,json=adPercent,proto3" json:"ad_percent,omitempty"`
	InterstitialAdPercent []*AdGrade          `protobuf:"bytes,9,rep,name=interstitial_ad_percent,json=interstitialAdPercent,proto3" json:"interstitial_ad_percent,omitempty"`
	ExcessiveAd           []*AdGrade          `protobuf:"bytes,10,rep,name=excessive_ad,json=excessiveAd,proto3" json:"excessive_ad,omitempty"`
	GoodsList             []*RMBPackGoodsInfo `protobuf:"bytes,11,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	SwitchSetting         []*AdSwitch         `protobuf:"bytes,12,rep,name=switch_setting,json=switchSetting,proto3" json:"switch_setting,omitempty"`
	AdAppidConfig         []*AdAppidConfig    `protobuf:"bytes,13,rep,name=ad_appid_config,json=adAppidConfig,proto3" json:"ad_appid_config,omitempty"`
	ExcessiveAdCount      int32               `protobuf:"varint,14,opt,name=excessive_ad_count,json=excessiveAdCount,proto3" json:"excessive_ad_count,omitempty"` //原生自定义广告展示局数
	AdDiamondState        int32               `protobuf:"varint,15,opt,name=ad_diamond_state,json=adDiamondState,proto3" json:"ad_diamond_state,omitempty"`
	AdReliveState         int32               `protobuf:"varint,16,opt,name=ad_relive_state,json=adReliveState,proto3" json:"ad_relive_state,omitempty"`
	ReviewState           int32               `protobuf:"varint,17,opt,name=review_state,json=reviewState,proto3" json:"review_state,omitempty"`                       //审核开关，0：不在审核，1：审核中，此参数优先级高于switch_setting
	IsAdBefore            int32               `protobuf:"varint,18,opt,name=is_ad_before,json=isAdBefore,proto3" json:"is_ad_before,omitempty"`                        //1是广告先播，2是结束页先播
	AdChestReduceTime     int32               `protobuf:"varint,19,opt,name=ad_chest_reduce_time,json=adChestReduceTime,proto3" json:"ad_chest_reduce_time,omitempty"` //宝箱看广告减cd
}

func (x *AdConfig) Reset() {
	*x = AdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdConfig) ProtoMessage() {}

func (x *AdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdConfig.ProtoReflect.Descriptor instead.
func (*AdConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{57}
}

func (x *AdConfig) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *AdConfig) GetFirstTimes() int32 {
	if x != nil {
		return x.FirstTimes
	}
	return 0
}

func (x *AdConfig) GetTimesLimit() int32 {
	if x != nil {
		return x.TimesLimit
	}
	return 0
}

func (x *AdConfig) GetMinInterval() int32 {
	if x != nil {
		return x.MinInterval
	}
	return 0
}

func (x *AdConfig) GetDelayLoad() int32 {
	if x != nil {
		return x.DelayLoad
	}
	return 0
}

func (x *AdConfig) GetFirstTimeInterval() int32 {
	if x != nil {
		return x.FirstTimeInterval
	}
	return 0
}

func (x *AdConfig) GetTimeInterval() int32 {
	if x != nil {
		return x.TimeInterval
	}
	return 0
}

func (x *AdConfig) GetAdPercent() []*AdGrade {
	if x != nil {
		return x.AdPercent
	}
	return nil
}

func (x *AdConfig) GetInterstitialAdPercent() []*AdGrade {
	if x != nil {
		return x.InterstitialAdPercent
	}
	return nil
}

func (x *AdConfig) GetExcessiveAd() []*AdGrade {
	if x != nil {
		return x.ExcessiveAd
	}
	return nil
}

func (x *AdConfig) GetGoodsList() []*RMBPackGoodsInfo {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *AdConfig) GetSwitchSetting() []*AdSwitch {
	if x != nil {
		return x.SwitchSetting
	}
	return nil
}

func (x *AdConfig) GetAdAppidConfig() []*AdAppidConfig {
	if x != nil {
		return x.AdAppidConfig
	}
	return nil
}

func (x *AdConfig) GetExcessiveAdCount() int32 {
	if x != nil {
		return x.ExcessiveAdCount
	}
	return 0
}

func (x *AdConfig) GetAdDiamondState() int32 {
	if x != nil {
		return x.AdDiamondState
	}
	return 0
}

func (x *AdConfig) GetAdReliveState() int32 {
	if x != nil {
		return x.AdReliveState
	}
	return 0
}

func (x *AdConfig) GetReviewState() int32 {
	if x != nil {
		return x.ReviewState
	}
	return 0
}

func (x *AdConfig) GetIsAdBefore() int32 {
	if x != nil {
		return x.IsAdBefore
	}
	return 0
}

func (x *AdConfig) GetAdChestReduceTime() int32 {
	if x != nil {
		return x.AdChestReduceTime
	}
	return 0
}

type AdGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Grade int32  `protobuf:"varint,2,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *AdGrade) Reset() {
	*x = AdGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdGrade) ProtoMessage() {}

func (x *AdGrade) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdGrade.ProtoReflect.Descriptor instead.
func (*AdGrade) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{58}
}

func (x *AdGrade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdGrade) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

type AdSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AdSwitch) Reset() {
	*x = AdSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdSwitch) ProtoMessage() {}

func (x *AdSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdSwitch.ProtoReflect.Descriptor instead.
func (*AdSwitch) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{59}
}

func (x *AdSwitch) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdSwitch) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AdAppidConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	AdKey string `protobuf:"bytes,2,opt,name=ad_key,json=adKey,proto3" json:"ad_key,omitempty"`
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AdId  string `protobuf:"bytes,4,opt,name=ad_id,json=adId,proto3" json:"ad_id,omitempty"`
}

func (x *AdAppidConfig) Reset() {
	*x = AdAppidConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdAppidConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAppidConfig) ProtoMessage() {}

func (x *AdAppidConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAppidConfig.ProtoReflect.Descriptor instead.
func (*AdAppidConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{60}
}

func (x *AdAppidConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdAppidConfig) GetAdKey() string {
	if x != nil {
		return x.AdKey
	}
	return ""
}

func (x *AdAppidConfig) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AdAppidConfig) GetAdId() string {
	if x != nil {
		return x.AdId
	}
	return ""
}

type SuperShowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SkinId    int32 `protobuf:"varint,3,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` // 超级秀皮肤id
}

func (x *SuperShowConfig) Reset() {
	*x = SuperShowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperShowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperShowConfig) ProtoMessage() {}

func (x *SuperShowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperShowConfig.ProtoReflect.Descriptor instead.
func (*SuperShowConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{61}
}

func (x *SuperShowConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SuperShowConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SuperShowConfig) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

// show_illustration start
type ShowIllustrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescUrl    string                    `protobuf:"bytes,1,opt,name=desc_url,json=descUrl,proto3" json:"desc_url,omitempty"` // 说明文案
	TitleList  []*ShowIllustrationTitle  `protobuf:"bytes,2,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
	SeasonList []*ShowIllustrationSeason `protobuf:"bytes,4,rep,name=season_list,json=seasonList,proto3" json:"season_list,omitempty"`
}

func (x *ShowIllustrationConfig) Reset() {
	*x = ShowIllustrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIllustrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIllustrationConfig) ProtoMessage() {}

func (x *ShowIllustrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIllustrationConfig.ProtoReflect.Descriptor instead.
func (*ShowIllustrationConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{62}
}

func (x *ShowIllustrationConfig) GetDescUrl() string {
	if x != nil {
		return x.DescUrl
	}
	return ""
}

func (x *ShowIllustrationConfig) GetTitleList() []*ShowIllustrationTitle {
	if x != nil {
		return x.TitleList
	}
	return nil
}

func (x *ShowIllustrationConfig) GetSeasonList() []*ShowIllustrationSeason {
	if x != nil {
		return x.SeasonList
	}
	return nil
}

type ShowIllustrationTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img       string `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`                               // 背景
	StartTime int32  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始和结束时间不为0的为活动主题
	EndTime   int32  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ShowIllustrationTitle) Reset() {
	*x = ShowIllustrationTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIllustrationTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIllustrationTitle) ProtoMessage() {}

func (x *ShowIllustrationTitle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIllustrationTitle.ProtoReflect.Descriptor instead.
func (*ShowIllustrationTitle) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{63}
}

func (x *ShowIllustrationTitle) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowIllustrationTitle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowIllustrationTitle) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *ShowIllustrationTitle) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ShowIllustrationTitle) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ShowIllustrationSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img       string            `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`
	StartTime int64             `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64             `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BgImgurl  string            `protobuf:"bytes,6,opt,name=bg_imgurl,json=bgImgurl,proto3" json:"bg_imgurl,omitempty"`
	Rewards   []*CRewardItem    `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Resources []*SeasonResource `protobuf:"bytes,8,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ShowIllustrationSeason) Reset() {
	*x = ShowIllustrationSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIllustrationSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIllustrationSeason) ProtoMessage() {}

func (x *ShowIllustrationSeason) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIllustrationSeason.ProtoReflect.Descriptor instead.
func (*ShowIllustrationSeason) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{64}
}

func (x *ShowIllustrationSeason) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowIllustrationSeason) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowIllustrationSeason) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *ShowIllustrationSeason) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ShowIllustrationSeason) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ShowIllustrationSeason) GetBgImgurl() string {
	if x != nil {
		return x.BgImgurl
	}
	return ""
}

func (x *ShowIllustrationSeason) GetRewards() []*CRewardItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *ShowIllustrationSeason) GetResources() []*SeasonResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SeasonResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId     int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Imgurl     string `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	GrayImgurl string `protobuf:"bytes,4,opt,name=gray_imgurl,json=grayImgurl,proto3" json:"gray_imgurl,omitempty"`
	X          uint32 `protobuf:"varint,5,opt,name=x,proto3" json:"x,omitempty"`
	Y          uint32 `protobuf:"varint,6,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *SeasonResource) Reset() {
	*x = SeasonResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonResource) ProtoMessage() {}

func (x *SeasonResource) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonResource.ProtoReflect.Descriptor instead.
func (*SeasonResource) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{65}
}

func (x *SeasonResource) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SeasonResource) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *SeasonResource) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *SeasonResource) GetGrayImgurl() string {
	if x != nil {
		return x.GrayImgurl
	}
	return ""
}

func (x *SeasonResource) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SeasonResource) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// 礼物图鉴 Start
type GiftIllustrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescUrl   string                 `protobuf:"bytes,1,opt,name=desc_url,json=descUrl,proto3" json:"desc_url,omitempty"`
	GuideUrl  string                 `protobuf:"bytes,2,opt,name=guide_url,json=guideUrl,proto3" json:"guide_url,omitempty"`
	TitleList []*GiftTitleItemConfig `protobuf:"bytes,3,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
}

func (x *GiftIllustrationConfig) Reset() {
	*x = GiftIllustrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftIllustrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftIllustrationConfig) ProtoMessage() {}

func (x *GiftIllustrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftIllustrationConfig.ProtoReflect.Descriptor instead.
func (*GiftIllustrationConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{66}
}

func (x *GiftIllustrationConfig) GetDescUrl() string {
	if x != nil {
		return x.DescUrl
	}
	return ""
}

func (x *GiftIllustrationConfig) GetGuideUrl() string {
	if x != nil {
		return x.GuideUrl
	}
	return ""
}

func (x *GiftIllustrationConfig) GetTitleList() []*GiftTitleItemConfig {
	if x != nil {
		return x.TitleList
	}
	return nil
}

type GiftTitleItemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img  string `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *GiftTitleItemConfig) Reset() {
	*x = GiftTitleItemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTitleItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTitleItemConfig) ProtoMessage() {}

func (x *GiftTitleItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTitleItemConfig.ProtoReflect.Descriptor instead.
func (*GiftTitleItemConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{67}
}

func (x *GiftTitleItemConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftTitleItemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GiftTitleItemConfig) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

type ExtraBuff_ExtraBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Rate  int32  `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Tips  string `protobuf:"bytes,5,opt,name=tips,proto3" json:"tips,omitempty"`
}

func (x *ExtraBuff_ExtraBuffInfo) Reset() {
	*x = ExtraBuff_ExtraBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_config_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraBuff_ExtraBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraBuff_ExtraBuffInfo) ProtoMessage() {}

func (x *ExtraBuff_ExtraBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_config_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraBuff_ExtraBuffInfo.ProtoReflect.Descriptor instead.
func (*ExtraBuff_ExtraBuffInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_config_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ExtraBuff_ExtraBuffInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtraBuff_ExtraBuffInfo) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

var File_snakecommon_config_proto protoreflect.FileDescriptor

var file_snakecommon_config_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1d, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x53, 0x4b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x43, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62,
	0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x08, 0x43, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0a, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x10, 0x52,
	0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6f,
	0x6c, 0x70, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x69, 0x64, 0x75,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x65, 0x6e, 0x6f, 0x76, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x65, 0x6e, 0x6f, 0x76, 0x6f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x78, 0x69, 0x61, 0x6f,
	0x6d, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x78, 0x69, 0x61, 0x6f, 0x6d, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x22, 0x8c, 0x06, 0x0a, 0x0e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x32, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x61,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x3d, 0x0a, 0x0d, 0x6e, 0x65, 0x77,
	0x5f, 0x6d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x76, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x56, 0x33, 0x12, 0x32, 0x0a, 0x09, 0x68, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x65, 0x67, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x67, 0x67, 0x52, 0x08, 0x68, 0x61, 0x74, 0x63, 0x68, 0x45, 0x67, 0x67, 0x12, 0x40, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x50,
	0x0a, 0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x39, 0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x75, 0x67, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6e,
	0x55, 0x67, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x55,
	0x67, 0x63, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x75,
	0x67, 0x63, 0x5f, 0x76, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x67,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x55,
	0x67, 0x63, 0x56, 0x32, 0x12, 0x4e, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56,
	0x32, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x32, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x77, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xe4, 0x07, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x69,
	0x0a, 0x1a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x17, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a,
	0x0e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x04, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66,
	0x66, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x07,
	0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x06, 0x61, 0x69, 0x53, 0x6b,
	0x69, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61,
	0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x69, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x57, 0x0a, 0x12, 0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x69, 0x4b, 0x69, 0x6c, 0x6c,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x69,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x36,
	0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1f, 0x49, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a,
	0x17, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd3, 0x02, 0x0a, 0x15, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x77, 0x61, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x22,
	0x82, 0x06, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x72, 0x61, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x52, 0x61,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6d,
	0x61, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x77, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x16, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x70,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4d, 0x61, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a,
	0x15, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x61, 0x6e,
	0x64, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4d,
	0x75, 0x73, 0x68, 0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4d, 0x75, 0x73, 0x68, 0x72, 0x6f, 0x6f, 0x6d,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x61,
	0x77, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x75, 0x73,
	0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d,
	0x75, 0x73, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x88, 0x03, 0x0a, 0x09, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x02, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42,
	0x75, 0x66, 0x66, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x71, 0x0a, 0x0d, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x22, 0xad,
	0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x69,
	0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1c,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x14, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5e, 0x0a,
	0x0c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x69, 0x44, 0x61, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xf0, 0x02,
	0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x61, 0x69, 0x64, 0x61,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x61, 0x69, 0x44, 0x61, 0x6e, 0x52, 0x0a, 0x63, 0x61, 0x69, 0x64, 0x61, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x72, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x65, 0x4c, 0x6f, 0x76, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x7b, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x08, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x01,
	0x0a, 0x15, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x03, 0x0a, 0x08,
	0x48, 0x61, 0x74, 0x63, 0x68, 0x45, 0x67, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12,
	0x4c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x67, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x67, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x67, 0x55, 0x72, 0x6c,
	0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x45, 0x67, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xf0, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x65, 0x74,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x51, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x98, 0x03, 0x0a, 0x10, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x12, 0x3f, 0x0a, 0x0b,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6d, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x6d, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x22, 0xa7,
	0x01, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xba, 0x03, 0x0a, 0x0d, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6d, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x6d, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x8a, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0xf2, 0x06, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6f, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x75, 0x69, 0x64, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x70,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x67, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62,
	0x67, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x75,
	0x78, 0x75, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x38, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72,
	0x74, 0x22, 0xdd, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x66, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68,
	0x69, 0x67, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x6f, 0x6e,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0d,
	0x6c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x6c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0x95, 0x03, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x0b,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a,
	0x0b, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xbc,
	0x02, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x65,
	0x6b, 0x45, 0x78, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x79,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x61, 0x79, 0x45, 0x78, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8d, 0x01,
	0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x62,
	0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x22, 0x85, 0x01,
	0x0a, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x09,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x65, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x69,
	0x67, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x62,
	0x6f, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x6e, 0x61, 0x62, 0x6f, 0x62, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x51, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x70, 0x75,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x61, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xe0, 0x01,
	0x0a, 0x11, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6f, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x85, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x67, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xb3, 0x03, 0x0a, 0x0f, 0x53, 0x6b, 0x69,
	0x6e, 0x55, 0x67, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x63, 0x6f,
	0x6e, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0d, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x0b, 0x6b, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d,
	0x62, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x62, 0x67, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x75, 0x69, 0x74, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x70, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x81,
	0x01, 0x0a, 0x08, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x62, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x67, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x22, 0xe1, 0x04, 0x0a, 0x08, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x73, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x62, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x67,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x06,
	0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x06,
	0x62, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x0c, 0x55, 0x67, 0x63, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f,
	0x64, 0x79, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x0e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x71, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x51, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x71, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x24, 0x0a, 0x06, 0x51, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x22, 0xeb, 0x06, 0x0a, 0x08, 0x41, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x09, 0x61,
	0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x41, 0x64, 0x12,
	0x3c, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0d, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0f, 0x61,
	0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x61, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x41, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x5f, 0x72, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x64, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x07, 0x41, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x41, 0x64, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x0d,
	0x41, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c,
	0x12, 0x41, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x53, 0x68,
	0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x67, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x39, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x79, 0x49, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22,
	0x91, 0x01, 0x0a, 0x16, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65,
	0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakecommon_config_proto_rawDescOnce sync.Once
	file_snakecommon_config_proto_rawDescData = file_snakecommon_config_proto_rawDesc
)

func file_snakecommon_config_proto_rawDescGZIP() []byte {
	file_snakecommon_config_proto_rawDescOnce.Do(func() {
		file_snakecommon_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecommon_config_proto_rawDescData)
	})
	return file_snakecommon_config_proto_rawDescData
}

var file_snakecommon_config_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_snakecommon_config_proto_goTypes = []interface{}{
	(*CRewardItem)(nil),                     // 0: snakecommon.CRewardItem
	(*CConvert)(nil),                        // 1: snakecommon.CConvert
	(*CPriceInfo)(nil),                      // 2: snakecommon.CPriceInfo
	(*RMBPackGoodsInfo)(nil),                // 3: snakecommon.RMBPackGoodsInfo
	(*ActivityConfig)(nil),                  // 4: snakecommon.ActivityConfig
	(*EndlessFloatingV2)(nil),               // 5: snakecommon.EndlessFloatingV2
	(*IllustrateConfig)(nil),                // 6: snakecommon.IllustrateConfig
	(*IllustrateFloatingRefreshConfig)(nil), // 7: snakecommon.IllustrateFloatingRefreshConfig
	(*FloatingRefreshConfig)(nil),           // 8: snakecommon.FloatingRefreshConfig
	(*FloatingInfo)(nil),                    // 9: snakecommon.FloatingInfo
	(*TreasureHouseThemeInfo)(nil),          // 10: snakecommon.TreasureHouseThemeInfo
	(*BossTheme)(nil),                       // 11: snakecommon.BossTheme
	(*ExtraBuff)(nil),                       // 12: snakecommon.ExtraBuff
	(*FloatingAiSkin)(nil),                  // 13: snakecommon.FloatingAiSkin
	(*FloatingAiSkinRateInfo)(nil),          // 14: snakecommon.FloatingAiSkinRateInfo
	(*FloatingAiKillEffect)(nil),            // 15: snakecommon.FloatingAiKillEffect
	(*FloatingAiKillEffectRateInfo)(nil),    // 16: snakecommon.FloatingAiKillEffectRateInfo
	(*FloatingMainMapTheme)(nil),            // 17: snakecommon.FloatingMainMapTheme
	(*SeasonCaiDan)(nil),                    // 18: snakecommon.SeasonCaiDan
	(*SeasonActivity)(nil),                  // 19: snakecommon.SeasonActivity
	(*NewbieConfig)(nil),                    // 20: snakecommon.NewbieConfig
	(*NewbieSingleDayReward)(nil),           // 21: snakecommon.NewbieSingleDayReward
	(*HatchEgg)(nil),                        // 22: snakecommon.HatchEgg
	(*EggLevelInfo)(nil),                    // 23: snakecommon.EggLevelInfo
	(*MeetupConfig)(nil),                    // 24: snakecommon.MeetupConfig
	(*MeetupConfigItem)(nil),                // 25: snakecommon.MeetupConfigItem
	(*SingleDayReward)(nil),                 // 26: snakecommon.SingleDayReward
	(*SingleRewardItem)(nil),                // 27: snakecommon.SingleRewardItem
	(*EndlessRewardConfig)(nil),             // 28: snakecommon.EndlessRewardConfig
	(*EndlessReward)(nil),                   // 29: snakecommon.EndlessReward
	(*PassCheckV2)(nil),                     // 30: snakecommon.PassCheckV2
	(*PassCommonConfig)(nil),                // 31: snakecommon.PassCommonConfig
	(*PassRewardConfig)(nil),                // 32: snakecommon.PassRewardConfig
	(*PassRewardPreview)(nil),               // 33: snakecommon.PassRewardPreview
	(*WindowReward)(nil),                    // 34: snakecommon.WindowReward
	(*PassReward)(nil),                      // 35: snakecommon.PassReward
	(*PassTaskConfig)(nil),                  // 36: snakecommon.PassTaskConfig
	(*DailyTask)(nil),                       // 37: snakecommon.DailyTask
	(*WeeklyTask)(nil),                      // 38: snakecommon.WeeklyTask
	(*SeasonTask)(nil),                      // 39: snakecommon.SeasonTask
	(*GradeTask)(nil),                       // 40: snakecommon.GradeTask
	(*PassTaskModel)(nil),                   // 41: snakecommon.PassTaskModel
	(*PassStoreConfig)(nil),                 // 42: snakecommon.PassStoreConfig
	(*ExchangeStore)(nil),                   // 43: snakecommon.ExchangeStore
	(*ExchangePrice)(nil),                   // 44: snakecommon.ExchangePrice
	(*BattleRankReward)(nil),                // 45: snakecommon.BattleRankReward
	(*RouletteConfig)(nil),                  // 46: snakecommon.RouletteConfig
	(*RewardTableBean)(nil),                 // 47: snakecommon.RewardTableBean
	(*RouletteSubConfig)(nil),               // 48: snakecommon.RouletteSubConfig
	(*SkinUgcConfig)(nil),                   // 49: snakecommon.SkinUgcConfig
	(*SkinUgcConfigV2)(nil),                 // 50: snakecommon.SkinUgcConfigV2
	(*UgcTopic)(nil),                        // 51: snakecommon.UgcTopic
	(*UgcWorks)(nil),                        // 52: snakecommon.UgcWorks
	(*UgcWorksLink)(nil),                    // 53: snakecommon.UgcWorksLink
	(*SnakeSecretary)(nil),                  // 54: snakecommon.SnakeSecretary
	(*SecretaryModel)(nil),                  // 55: snakecommon.SecretaryModel
	(*QAInfo)(nil),                          // 56: snakecommon.QAInfo
	(*AdConfig)(nil),                        // 57: snakecommon.AdConfig
	(*AdGrade)(nil),                         // 58: snakecommon.AdGrade
	(*AdSwitch)(nil),                        // 59: snakecommon.AdSwitch
	(*AdAppidConfig)(nil),                   // 60: snakecommon.AdAppidConfig
	(*SuperShowConfig)(nil),                 // 61: snakecommon.SuperShowConfig
	(*ShowIllustrationConfig)(nil),          // 62: snakecommon.ShowIllustrationConfig
	(*ShowIllustrationTitle)(nil),           // 63: snakecommon.ShowIllustrationTitle
	(*ShowIllustrationSeason)(nil),          // 64: snakecommon.ShowIllustrationSeason
	(*SeasonResource)(nil),                  // 65: snakecommon.SeasonResource
	(*GiftIllustrationConfig)(nil),          // 66: snakecommon.GiftIllustrationConfig
	(*GiftTitleItemConfig)(nil),             // 67: snakecommon.GiftTitleItemConfig
	(*ExtraBuff_ExtraBuffInfo)(nil),         // 68: snakecommon.ExtraBuff.ExtraBuffInfo
	(*config.RewardConfig)(nil),             // 69: SnakeMain.Config.RewardConfig
	(*config.PriceInfo)(nil),                // 70: SnakeMain.Config.PriceInfo
	(*config.PackModel)(nil),                // 71: SnakeMain.Config.PackModel
}
var file_snakecommon_config_proto_depIdxs = []int32{
	1,  // 0: snakecommon.CRewardItem.convert:type_name -> snakecommon.CConvert
	30, // 1: snakecommon.ActivityConfig.pass_check_v2:type_name -> snakecommon.PassCheckV2
	24, // 2: snakecommon.ActivityConfig.new_meetup_v3:type_name -> snakecommon.MeetupConfig
	22, // 3: snakecommon.ActivityConfig.hatch_egg:type_name -> snakecommon.HatchEgg
	20, // 4: snakecommon.ActivityConfig.newbie_checkin:type_name -> snakecommon.NewbieConfig
	28, // 5: snakecommon.ActivityConfig.endless_game_reward:type_name -> snakecommon.EndlessRewardConfig
	46, // 6: snakecommon.ActivityConfig.turntable:type_name -> snakecommon.RouletteConfig
	49, // 7: snakecommon.ActivityConfig.skin_ugc:type_name -> snakecommon.SkinUgcConfig
	50, // 8: snakecommon.ActivityConfig.skin_ugc_v2:type_name -> snakecommon.SkinUgcConfigV2
	5,  // 9: snakecommon.ActivityConfig.endless_floating_v2:type_name -> snakecommon.EndlessFloatingV2
	61, // 10: snakecommon.ActivityConfig.super_show:type_name -> snakecommon.SuperShowConfig
	19, // 11: snakecommon.ActivityConfig.season_activity:type_name -> snakecommon.SeasonActivity
	7,  // 12: snakecommon.EndlessFloatingV2.floating_refresh_config_v2:type_name -> snakecommon.IllustrateFloatingRefreshConfig
	9,  // 13: snakecommon.EndlessFloatingV2.floating_config:type_name -> snakecommon.FloatingInfo
	10, // 14: snakecommon.EndlessFloatingV2.treasure_house:type_name -> snakecommon.TreasureHouseThemeInfo
	11, // 15: snakecommon.EndlessFloatingV2.boss:type_name -> snakecommon.BossTheme
	12, // 16: snakecommon.EndlessFloatingV2.extra_buff:type_name -> snakecommon.ExtraBuff
	13, // 17: snakecommon.EndlessFloatingV2.ai_skin:type_name -> snakecommon.FloatingAiSkin
	14, // 18: snakecommon.EndlessFloatingV2.ai_skin_rate:type_name -> snakecommon.FloatingAiSkinRateInfo
	15, // 19: snakecommon.EndlessFloatingV2.ai_killeffect:type_name -> snakecommon.FloatingAiKillEffect
	16, // 20: snakecommon.EndlessFloatingV2.ai_killeffect_rate:type_name -> snakecommon.FloatingAiKillEffectRateInfo
	17, // 21: snakecommon.EndlessFloatingV2.main_map_theme:type_name -> snakecommon.FloatingMainMapTheme
	6,  // 22: snakecommon.EndlessFloatingV2.illustrate_config:type_name -> snakecommon.IllustrateConfig
	8,  // 23: snakecommon.IllustrateFloatingRefreshConfig.floating_refresh_config:type_name -> snakecommon.FloatingRefreshConfig
	68, // 24: snakecommon.ExtraBuff.buff_list:type_name -> snakecommon.ExtraBuff.ExtraBuffInfo
	18, // 25: snakecommon.SeasonActivity.caidan_list:type_name -> snakecommon.SeasonCaiDan
	21, // 26: snakecommon.NewbieConfig.day_list:type_name -> snakecommon.NewbieSingleDayReward
	69, // 27: snakecommon.NewbieSingleDayReward.reward_list:type_name -> SnakeMain.Config.RewardConfig
	69, // 28: snakecommon.HatchEgg.reward_review_list:type_name -> SnakeMain.Config.RewardConfig
	23, // 29: snakecommon.HatchEgg.egg_list:type_name -> snakecommon.EggLevelInfo
	69, // 30: snakecommon.EggLevelInfo.reward_list:type_name -> SnakeMain.Config.RewardConfig
	25, // 31: snakecommon.MeetupConfig.list:type_name -> snakecommon.MeetupConfigItem
	26, // 32: snakecommon.MeetupConfigItem.days_list:type_name -> snakecommon.SingleDayReward
	27, // 33: snakecommon.SingleDayReward.length_list:type_name -> snakecommon.SingleRewardItem
	69, // 34: snakecommon.SingleRewardItem.reward_list:type_name -> SnakeMain.Config.RewardConfig
	29, // 35: snakecommon.EndlessRewardConfig.list:type_name -> snakecommon.EndlessReward
	69, // 36: snakecommon.EndlessReward.reward:type_name -> SnakeMain.Config.RewardConfig
	31, // 37: snakecommon.PassCheckV2.common:type_name -> snakecommon.PassCommonConfig
	32, // 38: snakecommon.PassCheckV2.reward_config:type_name -> snakecommon.PassRewardConfig
	36, // 39: snakecommon.PassCheckV2.task_config:type_name -> snakecommon.PassTaskConfig
	42, // 40: snakecommon.PassCheckV2.store_config:type_name -> snakecommon.PassStoreConfig
	45, // 41: snakecommon.PassCheckV2.total_reward:type_name -> snakecommon.BattleRankReward
	35, // 42: snakecommon.PassRewardConfig.reward_list:type_name -> snakecommon.PassReward
	33, // 43: snakecommon.PassRewardConfig.reward_preview:type_name -> snakecommon.PassRewardPreview
	69, // 44: snakecommon.PassRewardConfig.reward_sort:type_name -> SnakeMain.Config.RewardConfig
	69, // 45: snakecommon.PassRewardPreview.free_reward:type_name -> SnakeMain.Config.RewardConfig
	69, // 46: snakecommon.PassRewardPreview.high_reward:type_name -> SnakeMain.Config.RewardConfig
	34, // 47: snakecommon.PassRewardPreview.window_reward:type_name -> snakecommon.WindowReward
	69, // 48: snakecommon.PassRewardPreview.honor_reward:type_name -> SnakeMain.Config.RewardConfig
	69, // 49: snakecommon.PassRewardPreview.luxury_reward:type_name -> SnakeMain.Config.RewardConfig
	69, // 50: snakecommon.WindowReward.convert:type_name -> SnakeMain.Config.RewardConfig
	69, // 51: snakecommon.PassReward.free_reward:type_name -> SnakeMain.Config.RewardConfig
	69, // 52: snakecommon.PassReward.high_reward:type_name -> SnakeMain.Config.RewardConfig
	39, // 53: snakecommon.PassTaskConfig.season_task:type_name -> snakecommon.SeasonTask
	40, // 54: snakecommon.PassTaskConfig.grade_task:type_name -> snakecommon.GradeTask
	38, // 55: snakecommon.PassTaskConfig.weekly_task:type_name -> snakecommon.WeeklyTask
	37, // 56: snakecommon.PassTaskConfig.daily_task:type_name -> snakecommon.DailyTask
	41, // 57: snakecommon.WeeklyTask.task_list:type_name -> snakecommon.PassTaskModel
	41, // 58: snakecommon.SeasonTask.task_list:type_name -> snakecommon.PassTaskModel
	41, // 59: snakecommon.GradeTask.task_list:type_name -> snakecommon.PassTaskModel
	70, // 60: snakecommon.PassStoreConfig.rank_price:type_name -> SnakeMain.Config.PriceInfo
	43, // 61: snakecommon.PassStoreConfig.exchange_store:type_name -> snakecommon.ExchangeStore
	71, // 62: snakecommon.PassStoreConfig.high_store:type_name -> SnakeMain.Config.PackModel
	44, // 63: snakecommon.ExchangeStore.price:type_name -> snakecommon.ExchangePrice
	69, // 64: snakecommon.BattleRankReward.reward:type_name -> SnakeMain.Config.RewardConfig
	47, // 65: snakecommon.RouletteConfig.reward_table:type_name -> snakecommon.RewardTableBean
	48, // 66: snakecommon.RouletteConfig.config:type_name -> snakecommon.RouletteSubConfig
	51, // 67: snakecommon.SkinUgcConfigV2.skin_topic_list:type_name -> snakecommon.UgcTopic
	51, // 68: snakecommon.SkinUgcConfigV2.ks_topic_list:type_name -> snakecommon.UgcTopic
	51, // 69: snakecommon.SkinUgcConfigV2.bg_topic_list:type_name -> snakecommon.UgcTopic
	51, // 70: snakecommon.SkinUgcConfigV2.suit_topic_list:type_name -> snakecommon.UgcTopic
	53, // 71: snakecommon.UgcWorks.normal:type_name -> snakecommon.UgcWorksLink
	53, // 72: snakecommon.UgcWorks.speed:type_name -> snakecommon.UgcWorksLink
	52, // 73: snakecommon.UgcWorks.skin_info:type_name -> snakecommon.UgcWorks
	52, // 74: snakecommon.UgcWorks.ks_info:type_name -> snakecommon.UgcWorks
	52, // 75: snakecommon.UgcWorks.bg_info:type_name -> snakecommon.UgcWorks
	55, // 76: snakecommon.SnakeSecretary.common:type_name -> snakecommon.SecretaryModel
	55, // 77: snakecommon.SnakeSecretary.account:type_name -> snakecommon.SecretaryModel
	55, // 78: snakecommon.SnakeSecretary.order:type_name -> snakecommon.SecretaryModel
	56, // 79: snakecommon.SecretaryModel.qa_list:type_name -> snakecommon.QAInfo
	58, // 80: snakecommon.AdConfig.ad_percent:type_name -> snakecommon.AdGrade
	58, // 81: snakecommon.AdConfig.interstitial_ad_percent:type_name -> snakecommon.AdGrade
	58, // 82: snakecommon.AdConfig.excessive_ad:type_name -> snakecommon.AdGrade
	3,  // 83: snakecommon.AdConfig.goods_list:type_name -> snakecommon.RMBPackGoodsInfo
	59, // 84: snakecommon.AdConfig.switch_setting:type_name -> snakecommon.AdSwitch
	60, // 85: snakecommon.AdConfig.ad_appid_config:type_name -> snakecommon.AdAppidConfig
	63, // 86: snakecommon.ShowIllustrationConfig.title_list:type_name -> snakecommon.ShowIllustrationTitle
	64, // 87: snakecommon.ShowIllustrationConfig.season_list:type_name -> snakecommon.ShowIllustrationSeason
	0,  // 88: snakecommon.ShowIllustrationSeason.rewards:type_name -> snakecommon.CRewardItem
	65, // 89: snakecommon.ShowIllustrationSeason.resources:type_name -> snakecommon.SeasonResource
	67, // 90: snakecommon.GiftIllustrationConfig.title_list:type_name -> snakecommon.GiftTitleItemConfig
	91, // [91:91] is the sub-list for method output_type
	91, // [91:91] is the sub-list for method input_type
	91, // [91:91] is the sub-list for extension type_name
	91, // [91:91] is the sub-list for extension extendee
	0,  // [0:91] is the sub-list for field type_name
}

func init() { file_snakecommon_config_proto_init() }
func file_snakecommon_config_proto_init() {
	if File_snakecommon_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snakecommon_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CConvert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMBPackGoodsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessFloatingV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllustrateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllustrateFloatingRefreshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingRefreshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureHouseThemeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiSkinRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiKillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiKillEffectRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingMainMapTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonCaiDan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieSingleDayReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HatchEgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetupConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDayReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCommonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassRewardPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassTaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassTaskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassStoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleRankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouletteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardTableBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouletteSubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinUgcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinUgcConfigV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcWorks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcWorksLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeSecretary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretaryModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QAInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdAppidConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperShowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIllustrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIllustrationTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIllustrationSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftIllustrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftTitleItemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_config_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraBuff_ExtraBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snakecommon_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecommon_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakecommon_config_proto_goTypes,
		DependencyIndexes: file_snakecommon_config_proto_depIdxs,
		MessageInfos:      file_snakecommon_config_proto_msgTypes,
	}.Build()
	File_snakecommon_config_proto = out.File
	file_snakecommon_config_proto_rawDesc = nil
	file_snakecommon_config_proto_goTypes = nil
	file_snakecommon_config_proto_depIdxs = nil
}
