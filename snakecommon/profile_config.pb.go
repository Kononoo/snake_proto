// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakecommon/profile_config.proto

package snakecommon

import (
	config "git.17zjh.com/snake/snake_proto/snakeapi/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ======== charge_vip_config start ====================================================
type ChargeVipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelList    []*VipLevel `protobuf:"bytes,1,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
	IntroUrl     string      `protobuf:"bytes,2,opt,name=intro_url,json=introUrl,proto3" json:"intro_url,omitempty"`
	StartTimeStr string      `protobuf:"bytes,3,opt,name=start_time_str,json=startTimeStr,proto3" json:"start_time_str,omitempty"`
}

func (x *ChargeVipConfig) Reset() {
	*x = ChargeVipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeVipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeVipConfig) ProtoMessage() {}

func (x *ChargeVipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeVipConfig.ProtoReflect.Descriptor instead.
func (*ChargeVipConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{0}
}

func (x *ChargeVipConfig) GetLevelList() []*VipLevel {
	if x != nil {
		return x.LevelList
	}
	return nil
}

func (x *ChargeVipConfig) GetIntroUrl() string {
	if x != nil {
		return x.IntroUrl
	}
	return ""
}

func (x *ChargeVipConfig) GetStartTimeStr() string {
	if x != nil {
		return x.StartTimeStr
	}
	return ""
}

type VipLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        int32                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	ChargeExp    int32                  `protobuf:"varint,2,opt,name=charge_exp,json=chargeExp,proto3" json:"charge_exp,omitempty"`   // 需要的积分，是人民币的10倍
	Privilege    []*VipPrivilege        `protobuf:"bytes,3,rep,name=privilege,proto3" json:"privilege,omitempty"`                     // 特权展示
	RewardList   []*config.RewardConfig `protobuf:"bytes,4,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"` // 特权奖励
	AnimUrl      string                 `protobuf:"bytes,5,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`          // 大icon动效
	AnimType     int32                  `protobuf:"varint,6,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	IconUrl      string                 `protobuf:"bytes,7,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"` // 小icon动效
	IconAnimType int32                  `protobuf:"varint,8,opt,name=icon_anim_type,json=iconAnimType,proto3" json:"icon_anim_type,omitempty"`
	WeekReward   []*config.RewardConfig `protobuf:"bytes,9,rep,name=week_reward,json=weekReward,proto3" json:"week_reward,omitempty"` // 每周好礼奖励
}

func (x *VipLevel) Reset() {
	*x = VipLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevel) ProtoMessage() {}

func (x *VipLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevel.ProtoReflect.Descriptor instead.
func (*VipLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{1}
}

func (x *VipLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *VipLevel) GetChargeExp() int32 {
	if x != nil {
		return x.ChargeExp
	}
	return 0
}

func (x *VipLevel) GetPrivilege() []*VipPrivilege {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *VipLevel) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *VipLevel) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *VipLevel) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *VipLevel) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *VipLevel) GetIconAnimType() int32 {
	if x != nil {
		return x.IconAnimType
	}
	return 0
}

func (x *VipLevel) GetWeekReward() []*config.RewardConfig {
	if x != nil {
		return x.WeekReward
	}
	return nil
}

type VipPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl   string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Desc     string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` // 特权类型，1:照片数量加上限
	PhotoNum int32  `protobuf:"varint,4,opt,name=photo_num,json=photoNum,proto3" json:"photo_num,omitempty"`
}

func (x *VipPrivilege) Reset() {
	*x = VipPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPrivilege) ProtoMessage() {}

func (x *VipPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPrivilege.ProtoReflect.Descriptor instead.
func (*VipPrivilege) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{2}
}

func (x *VipPrivilege) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *VipPrivilege) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *VipPrivilege) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VipPrivilege) GetPhotoNum() int32 {
	if x != nil {
		return x.PhotoNum
	}
	return 0
}

// ======== month_card start ====================================================
type MonthCardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardDesc        string         `protobuf:"bytes,1,opt,name=card_desc,json=cardDesc,proto3" json:"card_desc,omitempty"` // 底部叠加获得奖励及特权点击打开后弹窗的文案
	StartTime       int64          `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64          `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LittleMonthCard *MonthCardInfo `protobuf:"bytes,4,opt,name=little_month_card,json=littleMonthCard,proto3" json:"little_month_card,omitempty"` // 超值月卡
	SuperMonthCard  *MonthCardInfo `protobuf:"bytes,5,opt,name=super_month_card,json=superMonthCard,proto3" json:"super_month_card,omitempty"`    // 至尊月卡
	Source          string         `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	MailTitle       string         `protobuf:"bytes,7,opt,name=mail_title,json=mailTitle,proto3" json:"mail_title,omitempty"`
	MailContent     string         `protobuf:"bytes,8,opt,name=mail_content,json=mailContent,proto3" json:"mail_content,omitempty"`
	Duration        int32          `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	MaxTime         int64          `protobuf:"varint,10,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
}

func (x *MonthCardConfig) Reset() {
	*x = MonthCardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardConfig) ProtoMessage() {}

func (x *MonthCardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardConfig.ProtoReflect.Descriptor instead.
func (*MonthCardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{3}
}

func (x *MonthCardConfig) GetCardDesc() string {
	if x != nil {
		return x.CardDesc
	}
	return ""
}

func (x *MonthCardConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MonthCardConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MonthCardConfig) GetLittleMonthCard() *MonthCardInfo {
	if x != nil {
		return x.LittleMonthCard
	}
	return nil
}

func (x *MonthCardConfig) GetSuperMonthCard() *MonthCardInfo {
	if x != nil {
		return x.SuperMonthCard
	}
	return nil
}

func (x *MonthCardConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MonthCardConfig) GetMailTitle() string {
	if x != nil {
		return x.MailTitle
	}
	return ""
}

func (x *MonthCardConfig) GetMailContent() string {
	if x != nil {
		return x.MailContent
	}
	return ""
}

func (x *MonthCardConfig) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MonthCardConfig) GetMaxTime() int64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

type MonthCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //背景图
	DailyReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=daily_reward,json=dailyReward,proto3" json:"daily_reward,omitempty"`
	Title       string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"` //特权标题
	Desc        string                 `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`   //特权描述
	TotalReward int32                  `protobuf:"varint,5,opt,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`
	FreePack    int32                  `protobuf:"varint,6,opt,name=free_pack,json=freePack,proto3" json:"free_pack,omitempty"` //免费礼包id
	PackId      int32                  `protobuf:"varint,7,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`       //月卡id，也是礼包id
	PackList    []*MonthCardPackItem   `protobuf:"bytes,8,rep,name=pack_list,json=packList,proto3" json:"pack_list,omitempty"`  //礼包列表
}

func (x *MonthCardInfo) Reset() {
	*x = MonthCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardInfo) ProtoMessage() {}

func (x *MonthCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardInfo.ProtoReflect.Descriptor instead.
func (*MonthCardInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{4}
}

func (x *MonthCardInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MonthCardInfo) GetDailyReward() []*config.RewardConfig {
	if x != nil {
		return x.DailyReward
	}
	return nil
}

func (x *MonthCardInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MonthCardInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *MonthCardInfo) GetTotalReward() int32 {
	if x != nil {
		return x.TotalReward
	}
	return 0
}

func (x *MonthCardInfo) GetFreePack() int32 {
	if x != nil {
		return x.FreePack
	}
	return 0
}

func (x *MonthCardInfo) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *MonthCardInfo) GetPackList() []*MonthCardPackItem {
	if x != nil {
		return x.PackList
	}
	return nil
}

type MonthCardPackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalPrice int32 `protobuf:"varint,1,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"` //原价
	PackId        int32 `protobuf:"varint,2,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`                      //礼包id
}

func (x *MonthCardPackItem) Reset() {
	*x = MonthCardPackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardPackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardPackItem) ProtoMessage() {}

func (x *MonthCardPackItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardPackItem.ProtoReflect.Descriptor instead.
func (*MonthCardPackItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{5}
}

func (x *MonthCardPackItem) GetOriginalPrice() int32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *MonthCardPackItem) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

// ======== show_badge start ====================================================
type ShowBadgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intro                   string        `protobuf:"bytes,1,opt,name=intro,proto3" json:"intro,omitempty"`
	TitleList               []*BadgeTitle `protobuf:"bytes,2,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
	ShowIllustrationDescUrl string        `protobuf:"bytes,3,opt,name=show_illustration_desc_url,json=showIllustrationDescUrl,proto3" json:"show_illustration_desc_url,omitempty"`
	ActivityId              string        `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ShowPackPopCdSec        int64         `protobuf:"varint,5,opt,name=show_pack_pop_cd_sec,json=showPackPopCdSec,proto3" json:"show_pack_pop_cd_sec,omitempty"`
}

func (x *ShowBadgeConfig) Reset() {
	*x = ShowBadgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowBadgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBadgeConfig) ProtoMessage() {}

func (x *ShowBadgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBadgeConfig.ProtoReflect.Descriptor instead.
func (*ShowBadgeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{6}
}

func (x *ShowBadgeConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *ShowBadgeConfig) GetTitleList() []*BadgeTitle {
	if x != nil {
		return x.TitleList
	}
	return nil
}

func (x *ShowBadgeConfig) GetShowIllustrationDescUrl() string {
	if x != nil {
		return x.ShowIllustrationDescUrl
	}
	return ""
}

func (x *ShowBadgeConfig) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ShowBadgeConfig) GetShowPackPopCdSec() int64 {
	if x != nil {
		return x.ShowPackPopCdSec
	}
	return 0
}

type BadgeTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rewards        []*config.RewardConfig `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
	NeedCollect    int32                  `protobuf:"varint,3,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"`
	StartShowLevel int32                  `protobuf:"varint,4,opt,name=start_show_level,json=startShowLevel,proto3" json:"start_show_level,omitempty"`
	EndShowLevel   int32                  `protobuf:"varint,5,opt,name=end_show_level,json=endShowLevel,proto3" json:"end_show_level,omitempty"`
	Desc           string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Name           string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	PackId         int64                  `protobuf:"varint,8,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`
	EffectSec      int64                  `protobuf:"varint,9,opt,name=effect_sec,json=effectSec,proto3" json:"effect_sec,omitempty"`
}

func (x *BadgeTitle) Reset() {
	*x = BadgeTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeTitle) ProtoMessage() {}

func (x *BadgeTitle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeTitle.ProtoReflect.Descriptor instead.
func (*BadgeTitle) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{7}
}

func (x *BadgeTitle) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BadgeTitle) GetRewards() []*config.RewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *BadgeTitle) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *BadgeTitle) GetStartShowLevel() int32 {
	if x != nil {
		return x.StartShowLevel
	}
	return 0
}

func (x *BadgeTitle) GetEndShowLevel() int32 {
	if x != nil {
		return x.EndShowLevel
	}
	return 0
}

func (x *BadgeTitle) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BadgeTitle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BadgeTitle) GetPackId() int64 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *BadgeTitle) GetEffectSec() int64 {
	if x != nil {
		return x.EffectSec
	}
	return 0
}

// ======== charm_tours start ====================================================
type CharmTourConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intro              string                `protobuf:"bytes,1,opt,name=intro,proto3" json:"intro,omitempty"`
	CharmTitleList     []*CharmTourTitleItem `protobuf:"bytes,2,rep,name=charm_title_list,json=charmTitleList,proto3" json:"charm_title_list,omitempty"`
	CharmLevelList     []*CharmTourLevelItem `protobuf:"bytes,3,rep,name=charm_level_list,json=charmLevelList,proto3" json:"charm_level_list,omitempty"`
	WishGiftDescUrl    string                `protobuf:"bytes,4,opt,name=wish_gift_desc_url,json=wishGiftDescUrl,proto3" json:"wish_gift_desc_url,omitempty"`
	AllTagShowTime     int64                 `protobuf:"varint,5,opt,name=all_tag_show_time,json=allTagShowTime,proto3" json:"all_tag_show_time,omitempty"`
	StartTime          string                `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	WhiteList          []string              `protobuf:"bytes,7,rep,name=white_list,json=whiteList,proto3" json:"white_list,omitempty"`
	IllustrationDesc   string                `protobuf:"bytes,8,opt,name=illustration_desc,json=illustrationDesc,proto3" json:"illustration_desc,omitempty"`
	GuideUrl           string                `protobuf:"bytes,9,opt,name=guide_url,json=guideUrl,proto3" json:"guide_url,omitempty"`
	NameplateList      []*NameplateItem      `protobuf:"bytes,10,rep,name=nameplate_list,json=nameplateList,proto3" json:"nameplate_list,omitempty"`
	GiftWallOnlineDate int64                 `protobuf:"varint,11,opt,name=gift_wall_online_date,json=giftWallOnlineDate,proto3" json:"gift_wall_online_date,omitempty"`
}

func (x *CharmTourConfig) Reset() {
	*x = CharmTourConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourConfig) ProtoMessage() {}

func (x *CharmTourConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourConfig.ProtoReflect.Descriptor instead.
func (*CharmTourConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{8}
}

func (x *CharmTourConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *CharmTourConfig) GetCharmTitleList() []*CharmTourTitleItem {
	if x != nil {
		return x.CharmTitleList
	}
	return nil
}

func (x *CharmTourConfig) GetCharmLevelList() []*CharmTourLevelItem {
	if x != nil {
		return x.CharmLevelList
	}
	return nil
}

func (x *CharmTourConfig) GetWishGiftDescUrl() string {
	if x != nil {
		return x.WishGiftDescUrl
	}
	return ""
}

func (x *CharmTourConfig) GetAllTagShowTime() int64 {
	if x != nil {
		return x.AllTagShowTime
	}
	return 0
}

func (x *CharmTourConfig) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CharmTourConfig) GetWhiteList() []string {
	if x != nil {
		return x.WhiteList
	}
	return nil
}

func (x *CharmTourConfig) GetIllustrationDesc() string {
	if x != nil {
		return x.IllustrationDesc
	}
	return ""
}

func (x *CharmTourConfig) GetGuideUrl() string {
	if x != nil {
		return x.GuideUrl
	}
	return ""
}

func (x *CharmTourConfig) GetNameplateList() []*NameplateItem {
	if x != nil {
		return x.NameplateList
	}
	return nil
}

func (x *CharmTourConfig) GetGiftWallOnlineDate() int64 {
	if x != nil {
		return x.GiftWallOnlineDate
	}
	return 0
}

type CharmTourTitleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameUrl         string                 `protobuf:"bytes,2,opt,name=name_url,json=nameUrl,proto3" json:"name_url,omitempty"` // 标题艺术字图片
	Title           string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                    // 标题文字
	IconUrl         string                 `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	AnimUrl         string                 `protobuf:"bytes,5,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType        int32                  `protobuf:"varint,6,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Rewards         []*config.RewardConfig `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	NeedCollect     int32                  `protobuf:"varint,8,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"` // 达到该等级需要解锁的礼物个数
	StartCharmLevel int32                  `protobuf:"varint,9,opt,name=start_charm_level,json=startCharmLevel,proto3" json:"start_charm_level,omitempty"`
	EndCharmLevel   int32                  `protobuf:"varint,10,opt,name=end_charm_level,json=endCharmLevel,proto3" json:"end_charm_level,omitempty"`
}

func (x *CharmTourTitleItem) Reset() {
	*x = CharmTourTitleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourTitleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourTitleItem) ProtoMessage() {}

func (x *CharmTourTitleItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourTitleItem.ProtoReflect.Descriptor instead.
func (*CharmTourTitleItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{9}
}

func (x *CharmTourTitleItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharmTourTitleItem) GetNameUrl() string {
	if x != nil {
		return x.NameUrl
	}
	return ""
}

func (x *CharmTourTitleItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CharmTourTitleItem) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CharmTourTitleItem) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *CharmTourTitleItem) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *CharmTourTitleItem) GetRewards() []*config.RewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *CharmTourTitleItem) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *CharmTourTitleItem) GetStartCharmLevel() int32 {
	if x != nil {
		return x.StartCharmLevel
	}
	return 0
}

func (x *CharmTourTitleItem) GetEndCharmLevel() int32 {
	if x != nil {
		return x.EndCharmLevel
	}
	return 0
}

type CharmTourLevelItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Charm int64 `protobuf:"varint,2,opt,name=charm,proto3" json:"charm,omitempty"`
}

func (x *CharmTourLevelItem) Reset() {
	*x = CharmTourLevelItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourLevelItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourLevelItem) ProtoMessage() {}

func (x *CharmTourLevelItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourLevelItem.ProtoReflect.Descriptor instead.
func (*CharmTourLevelItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{10}
}

func (x *CharmTourLevelItem) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharmTourLevelItem) GetCharm() int64 {
	if x != nil {
		return x.Charm
	}
	return 0
}

type NameplateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameplateType int32  `protobuf:"varint,2,opt,name=nameplate_type,json=nameplateType,proto3" json:"nameplate_type,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NeedStar      int32  `protobuf:"varint,4,opt,name=need_star,json=needStar,proto3" json:"need_star,omitempty"`
	NeedGift      int32  `protobuf:"varint,5,opt,name=need_gift,json=needGift,proto3" json:"need_gift,omitempty"`
	Imgurl        string `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *NameplateItem) Reset() {
	*x = NameplateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameplateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameplateItem) ProtoMessage() {}

func (x *NameplateItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameplateItem.ProtoReflect.Descriptor instead.
func (*NameplateItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{11}
}

func (x *NameplateItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NameplateItem) GetNameplateType() int32 {
	if x != nil {
		return x.NameplateType
	}
	return 0
}

func (x *NameplateItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameplateItem) GetNeedStar() int32 {
	if x != nil {
		return x.NeedStar
	}
	return 0
}

func (x *NameplateItem) GetNeedGift() int32 {
	if x != nil {
		return x.NeedGift
	}
	return 0
}

func (x *NameplateItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

// ======== gift_wall start ====================================================
type GiftWallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftWallDesc  string                      `protobuf:"bytes,1,opt,name=gift_wall_desc,json=giftWallDesc,proto3" json:"gift_wall_desc,omitempty"`
	NameplateList []*GiftWallConfig_NamePlate `protobuf:"bytes,2,rep,name=nameplate_list,json=nameplateList,proto3" json:"nameplate_list,omitempty"`
}

func (x *GiftWallConfig) Reset() {
	*x = GiftWallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftWallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftWallConfig) ProtoMessage() {}

func (x *GiftWallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftWallConfig.ProtoReflect.Descriptor instead.
func (*GiftWallConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{12}
}

func (x *GiftWallConfig) GetGiftWallDesc() string {
	if x != nil {
		return x.GiftWallDesc
	}
	return ""
}

func (x *GiftWallConfig) GetNameplateList() []*GiftWallConfig_NamePlate {
	if x != nil {
		return x.NameplateList
	}
	return nil
}

//======== hatch_egg start
type HatchEgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime         int64                  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime        int64                  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	DisappearTime     int64                  `protobuf:"varint,3,opt,name=disappear_time,json=disappearTime,proto3" json:"disappear_time,omitempty"`
	Disappear         int32                  `protobuf:"varint,4,opt,name=disappear,proto3" json:"disappear,omitempty"`
	Intro             string                 `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	RewardReviewUrl   string                 `protobuf:"bytes,6,opt,name=reward_review_url,json=rewardReviewUrl,proto3" json:"reward_review_url,omitempty"`
	RewardReviewList  []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward_review_list,json=rewardReviewList,proto3" json:"reward_review_list,omitempty"`
	AdReduceSecond    int32                  `protobuf:"varint,8,opt,name=ad_reduce_second,json=adReduceSecond,proto3" json:"ad_reduce_second,omitempty"`
	EggList           []*EggLevelInfo        `protobuf:"bytes,9,rep,name=egg_list,json=eggList,proto3" json:"egg_list,omitempty"`
	TitleDesc         string                 `protobuf:"bytes,10,opt,name=title_desc,json=titleDesc,proto3" json:"title_desc,omitempty"`
	TitleUrl          string                 `protobuf:"bytes,11,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	BgUrl             string                 `protobuf:"bytes,12,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`
	Id                int64                  `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
	RewardReviewId    int64                  `protobuf:"varint,14,opt,name=reward_review_id,json=rewardReviewId,proto3" json:"reward_review_id,omitempty"`
	RewardReviewTitle string                 `protobuf:"bytes,15,opt,name=reward_review_title,json=rewardReviewTitle,proto3" json:"reward_review_title,omitempty"`
	AdminTitle        string                 `protobuf:"bytes,16,opt,name=admin_title,json=adminTitle,proto3" json:"admin_title,omitempty"`
	Title             string                 `protobuf:"bytes,17,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *HatchEgg) Reset() {
	*x = HatchEgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HatchEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HatchEgg) ProtoMessage() {}

func (x *HatchEgg) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HatchEgg.ProtoReflect.Descriptor instead.
func (*HatchEgg) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{13}
}

func (x *HatchEgg) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HatchEgg) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *HatchEgg) GetDisappearTime() int64 {
	if x != nil {
		return x.DisappearTime
	}
	return 0
}

func (x *HatchEgg) GetDisappear() int32 {
	if x != nil {
		return x.Disappear
	}
	return 0
}

func (x *HatchEgg) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *HatchEgg) GetRewardReviewUrl() string {
	if x != nil {
		return x.RewardReviewUrl
	}
	return ""
}

func (x *HatchEgg) GetRewardReviewList() []*config.RewardConfig {
	if x != nil {
		return x.RewardReviewList
	}
	return nil
}

func (x *HatchEgg) GetAdReduceSecond() int32 {
	if x != nil {
		return x.AdReduceSecond
	}
	return 0
}

func (x *HatchEgg) GetEggList() []*EggLevelInfo {
	if x != nil {
		return x.EggList
	}
	return nil
}

func (x *HatchEgg) GetTitleDesc() string {
	if x != nil {
		return x.TitleDesc
	}
	return ""
}

func (x *HatchEgg) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

func (x *HatchEgg) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *HatchEgg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HatchEgg) GetRewardReviewId() int64 {
	if x != nil {
		return x.RewardReviewId
	}
	return 0
}

func (x *HatchEgg) GetRewardReviewTitle() string {
	if x != nil {
		return x.RewardReviewTitle
	}
	return ""
}

func (x *HatchEgg) GetAdminTitle() string {
	if x != nil {
		return x.AdminTitle
	}
	return ""
}

func (x *HatchEgg) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type EggLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardList   []*config.RewardConfig `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`        // 奖励配置
	Level        int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                   // 等级 1 普通；2 中级；3高级
	NeedCollect  int32                  `protobuf:"varint,3,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"`    // 每个蛋需要收集数量
	HatchTime    int64                  `protobuf:"varint,4,opt,name=hatch_time,json=hatchTime,proto3" json:"hatch_time,omitempty"`          // 孵化时间
	DiamondValue int32                  `protobuf:"varint,5,opt,name=diamond_value,json=diamondValue,proto3" json:"diamond_value,omitempty"` // 彩蛋价值
}

func (x *EggLevelInfo) Reset() {
	*x = EggLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggLevelInfo) ProtoMessage() {}

func (x *EggLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggLevelInfo.ProtoReflect.Descriptor instead.
func (*EggLevelInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{14}
}

func (x *EggLevelInfo) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *EggLevelInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EggLevelInfo) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *EggLevelInfo) GetHatchTime() int64 {
	if x != nil {
		return x.HatchTime
	}
	return 0
}

func (x *EggLevelInfo) GetDiamondValue() int32 {
	if x != nil {
		return x.DiamondValue
	}
	return 0
}

//======== new_meetup_v3 start
type NewMeetupV3Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define fields for MeetupConfig
	HomepageIcon      string                    `protobuf:"bytes,1,opt,name=homepage_icon,json=homepageIcon,proto3" json:"homepage_icon,omitempty"`
	HomepageIconLink  string                    `protobuf:"bytes,2,opt,name=homepage_icon_link,json=homepageIconLink,proto3" json:"homepage_icon_link,omitempty"`
	HomepageIconStart int64                     `protobuf:"varint,3,opt,name=homepage_icon_start,json=homepageIconStart,proto3" json:"homepage_icon_start,omitempty"`
	HomepageIconEnd   int64                     `protobuf:"varint,4,opt,name=homepage_icon_end,json=homepageIconEnd,proto3" json:"homepage_icon_end,omitempty"`
	List              []*MeetupConfigItem       `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	ShowConfig        map[int64]*MeetupShowItem `protobuf:"bytes,6,rep,name=show_config,json=showConfig,proto3" json:"show_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NewMeetupV3Config) Reset() {
	*x = NewMeetupV3Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMeetupV3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMeetupV3Config) ProtoMessage() {}

func (x *NewMeetupV3Config) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMeetupV3Config.ProtoReflect.Descriptor instead.
func (*NewMeetupV3Config) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{15}
}

func (x *NewMeetupV3Config) GetHomepageIcon() string {
	if x != nil {
		return x.HomepageIcon
	}
	return ""
}

func (x *NewMeetupV3Config) GetHomepageIconLink() string {
	if x != nil {
		return x.HomepageIconLink
	}
	return ""
}

func (x *NewMeetupV3Config) GetHomepageIconStart() int64 {
	if x != nil {
		return x.HomepageIconStart
	}
	return 0
}

func (x *NewMeetupV3Config) GetHomepageIconEnd() int64 {
	if x != nil {
		return x.HomepageIconEnd
	}
	return 0
}

func (x *NewMeetupV3Config) GetList() []*MeetupConfigItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NewMeetupV3Config) GetShowConfig() map[int64]*MeetupShowItem {
	if x != nil {
		return x.ShowConfig
	}
	return nil
}

type MeetupShowItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show         int64 `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	WorthDiamond int64 `protobuf:"varint,2,opt,name=worth_diamond,json=worthDiamond,proto3" json:"worth_diamond,omitempty"`
}

func (x *MeetupShowItem) Reset() {
	*x = MeetupShowItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetupShowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetupShowItem) ProtoMessage() {}

func (x *MeetupShowItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetupShowItem.ProtoReflect.Descriptor instead.
func (*MeetupShowItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{16}
}

func (x *MeetupShowItem) GetShow() int64 {
	if x != nil {
		return x.Show
	}
	return 0
}

func (x *MeetupShowItem) GetWorthDiamond() int64 {
	if x != nil {
		return x.WorthDiamond
	}
	return 0
}

type MeetupConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define fields for MeetupConfigItem
	ActId       int32              `protobuf:"varint,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	StartTime   int64              `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime  int64              `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	OfflineTime int64              `protobuf:"varint,4,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"` // buff下线时间
	FinishDate  string             `protobuf:"bytes,5,opt,name=finish_date,json=finishDate,proto3" json:"finish_date,omitempty"`
	Intro       string             `protobuf:"bytes,6,opt,name=intro,proto3" json:"intro,omitempty"`
	DaysList    []*SingleDayReward `protobuf:"bytes,7,rep,name=days_list,json=daysList,proto3" json:"days_list,omitempty"`
	BuffDesc    string             `protobuf:"bytes,8,opt,name=buff_desc,json=buffDesc,proto3" json:"buff_desc,omitempty"`
	Buff        []*MeetupBuffItem  `protobuf:"bytes,9,rep,name=buff,proto3" json:"buff,omitempty"`
	TitleUrl    string             `protobuf:"bytes,10,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	ButtonMsg   string             `protobuf:"bytes,11,opt,name=button_msg,json=buttonMsg,proto3" json:"button_msg,omitempty"`
}

func (x *MeetupConfigItem) Reset() {
	*x = MeetupConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetupConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetupConfigItem) ProtoMessage() {}

func (x *MeetupConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetupConfigItem.ProtoReflect.Descriptor instead.
func (*MeetupConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{17}
}

func (x *MeetupConfigItem) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *MeetupConfigItem) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MeetupConfigItem) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *MeetupConfigItem) GetOfflineTime() int64 {
	if x != nil {
		return x.OfflineTime
	}
	return 0
}

func (x *MeetupConfigItem) GetFinishDate() string {
	if x != nil {
		return x.FinishDate
	}
	return ""
}

func (x *MeetupConfigItem) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *MeetupConfigItem) GetDaysList() []*SingleDayReward {
	if x != nil {
		return x.DaysList
	}
	return nil
}

func (x *MeetupConfigItem) GetBuffDesc() string {
	if x != nil {
		return x.BuffDesc
	}
	return ""
}

func (x *MeetupConfigItem) GetBuff() []*MeetupBuffItem {
	if x != nil {
		return x.Buff
	}
	return nil
}

func (x *MeetupConfigItem) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

func (x *MeetupConfigItem) GetButtonMsg() string {
	if x != nil {
		return x.ButtonMsg
	}
	return ""
}

type SingleDayReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthList []*SingleRewardItem `protobuf:"bytes,1,rep,name=length_list,json=lengthList,proto3" json:"length_list,omitempty"`
}

func (x *SingleDayReward) Reset() {
	*x = SingleDayReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDayReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDayReward) ProtoMessage() {}

func (x *SingleDayReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDayReward.ProtoReflect.Descriptor instead.
func (*SingleDayReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{18}
}

func (x *SingleDayReward) GetLengthList() []*SingleRewardItem {
	if x != nil {
		return x.LengthList
	}
	return nil
}

type SingleRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UnlockDays   int32                  `protobuf:"varint,2,opt,name=unlock_days,json=unlockDays,proto3" json:"unlock_days,omitempty"`
	UnlockLength int32                  `protobuf:"varint,3,opt,name=unlock_length,json=unlockLength,proto3" json:"unlock_length,omitempty"`
	Price        int32                  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Diamond      int32                  `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Desc         string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	PopupCount   int32                  `protobuf:"varint,7,opt,name=popup_count,json=popupCount,proto3" json:"popup_count,omitempty"` //弹窗次数
	Important    int32                  `protobuf:"varint,8,opt,name=important,proto3" json:"important,omitempty"`                     //是否重点奖励，0否，1是
	WatchAd      int32                  `protobuf:"varint,9,opt,name=watch_ad,json=watchAd,proto3" json:"watch_ad,omitempty"`
	RewardList   []*config.RewardConfig `protobuf:"bytes,10,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	RmbPrice     int32                  `protobuf:"varint,11,opt,name=rmb_price,json=rmbPrice,proto3" json:"rmb_price,omitempty"` // rmb购买价格
	PackId       int32                  `protobuf:"varint,12,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`       // rmb购买礼包id
	GoodsId      int32                  `protobuf:"varint,13,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`    // 礼包档位id
	ExtraReward  *config.RewardConfig   `protobuf:"bytes,14,opt,name=extra_reward,json=extraReward,proto3" json:"extra_reward,omitempty"`
}

func (x *SingleRewardItem) Reset() {
	*x = SingleRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRewardItem) ProtoMessage() {}

func (x *SingleRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRewardItem.ProtoReflect.Descriptor instead.
func (*SingleRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{19}
}

func (x *SingleRewardItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SingleRewardItem) GetUnlockDays() int32 {
	if x != nil {
		return x.UnlockDays
	}
	return 0
}

func (x *SingleRewardItem) GetUnlockLength() int32 {
	if x != nil {
		return x.UnlockLength
	}
	return 0
}

func (x *SingleRewardItem) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SingleRewardItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *SingleRewardItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SingleRewardItem) GetPopupCount() int32 {
	if x != nil {
		return x.PopupCount
	}
	return 0
}

func (x *SingleRewardItem) GetImportant() int32 {
	if x != nil {
		return x.Important
	}
	return 0
}

func (x *SingleRewardItem) GetWatchAd() int32 {
	if x != nil {
		return x.WatchAd
	}
	return 0
}

func (x *SingleRewardItem) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *SingleRewardItem) GetRmbPrice() int32 {
	if x != nil {
		return x.RmbPrice
	}
	return 0
}

func (x *SingleRewardItem) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *SingleRewardItem) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *SingleRewardItem) GetExtraReward() *config.RewardConfig {
	if x != nil {
		return x.ExtraReward
	}
	return nil
}

type MeetupBuffItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Need       int32                  `protobuf:"varint,2,opt,name=need,proto3" json:"need,omitempty"`
	RewardList []*config.RewardConfig `protobuf:"bytes,3,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *MeetupBuffItem) Reset() {
	*x = MeetupBuffItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetupBuffItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetupBuffItem) ProtoMessage() {}

func (x *MeetupBuffItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetupBuffItem.ProtoReflect.Descriptor instead.
func (*MeetupBuffItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{20}
}

func (x *MeetupBuffItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeetupBuffItem) GetNeed() int32 {
	if x != nil {
		return x.Need
	}
	return 0
}

func (x *MeetupBuffItem) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

//======== endless_game_reward start
type EndlessGameRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleImg   string                   `protobuf:"bytes,1,opt,name=title_img,json=titleImg,proto3" json:"title_img,omitempty"`
	Intro      string                   `protobuf:"bytes,2,opt,name=intro,proto3" json:"intro,omitempty"`
	ActId      int32                    `protobuf:"varint,3,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	Period     string                   `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	List       []*EndlessGameRewardItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	StartTime  int64                    `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64                    `protobuf:"varint,7,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
}

func (x *EndlessGameRewardConfig) Reset() {
	*x = EndlessGameRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessGameRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessGameRewardConfig) ProtoMessage() {}

func (x *EndlessGameRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessGameRewardConfig.ProtoReflect.Descriptor instead.
func (*EndlessGameRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{21}
}

func (x *EndlessGameRewardConfig) GetTitleImg() string {
	if x != nil {
		return x.TitleImg
	}
	return ""
}

func (x *EndlessGameRewardConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *EndlessGameRewardConfig) GetActId() int32 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *EndlessGameRewardConfig) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *EndlessGameRewardConfig) GetList() []*EndlessGameRewardItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *EndlessGameRewardConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessGameRewardConfig) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

type EndlessGameRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc         string               `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Important    int32                `protobuf:"varint,3,opt,name=important,proto3" json:"important,omitempty"`                           //是否重点奖励，0否，1是
	PopupCount   int32                `protobuf:"varint,4,opt,name=popup_count,json=popupCount,proto3" json:"popup_count,omitempty"`       //弹窗次数
	DiamondPrice int32                `protobuf:"varint,5,opt,name=diamond_price,json=diamondPrice,proto3" json:"diamond_price,omitempty"` // 增加苹果购买配置，0表示不可用苹果购买，>0表示苹果价格
	UnlockLength int32                `protobuf:"varint,6,opt,name=unlock_length,json=unlockLength,proto3" json:"unlock_length,omitempty"`
	UnlockTime   int64                `protobuf:"varint,7,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"` // 默认0，没有时间限制
	UnlockTip    string               `protobuf:"bytes,8,opt,name=unlock_tip,json=unlockTip,proto3" json:"unlock_tip,omitempty"`     // 某日活动开启后才可领取
	Diamond      int32                `protobuf:"varint,9,opt,name=diamond,proto3" json:"diamond,omitempty"`                         // 苹果购买价格
	WatchAd      int32                `protobuf:"varint,10,opt,name=watch_ad,json=watchAd,proto3" json:"watch_ad,omitempty"`         //需要看广告次数
	RmbPrice     int32                `protobuf:"varint,11,opt,name=rmb_price,json=rmbPrice,proto3" json:"rmb_price,omitempty"`      // rmb购买价格
	PackId       int32                `protobuf:"varint,12,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`            // rmb购买礼包id
	GoodsId      int32                `protobuf:"varint,13,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`         // 礼包档位id
	Reward       *config.RewardConfig `protobuf:"bytes,14,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *EndlessGameRewardItem) Reset() {
	*x = EndlessGameRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessGameRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessGameRewardItem) ProtoMessage() {}

func (x *EndlessGameRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessGameRewardItem.ProtoReflect.Descriptor instead.
func (*EndlessGameRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{22}
}

func (x *EndlessGameRewardItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EndlessGameRewardItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *EndlessGameRewardItem) GetImportant() int32 {
	if x != nil {
		return x.Important
	}
	return 0
}

func (x *EndlessGameRewardItem) GetPopupCount() int32 {
	if x != nil {
		return x.PopupCount
	}
	return 0
}

func (x *EndlessGameRewardItem) GetDiamondPrice() int32 {
	if x != nil {
		return x.DiamondPrice
	}
	return 0
}

func (x *EndlessGameRewardItem) GetUnlockLength() int32 {
	if x != nil {
		return x.UnlockLength
	}
	return 0
}

func (x *EndlessGameRewardItem) GetUnlockTime() int64 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

func (x *EndlessGameRewardItem) GetUnlockTip() string {
	if x != nil {
		return x.UnlockTip
	}
	return ""
}

func (x *EndlessGameRewardItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *EndlessGameRewardItem) GetWatchAd() int32 {
	if x != nil {
		return x.WatchAd
	}
	return 0
}

func (x *EndlessGameRewardItem) GetRmbPrice() int32 {
	if x != nil {
		return x.RmbPrice
	}
	return 0
}

func (x *EndlessGameRewardItem) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *EndlessGameRewardItem) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *EndlessGameRewardItem) GetReward() *config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

// ======pass check start ======
type PassCheckV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId             int32                    `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Common             *PassCommonConfig        `protobuf:"bytes,2,opt,name=common,proto3" json:"common,omitempty"`
	RewardConfig       *PassRewardConfig        `protobuf:"bytes,3,opt,name=reward_config,json=rewardConfig,proto3" json:"reward_config,omitempty"`
	TaskConfig         *PassTaskConfig          `protobuf:"bytes,4,opt,name=task_config,json=taskConfig,proto3" json:"task_config,omitempty"`
	StoreConfig        *PassStoreConfig         `protobuf:"bytes,5,opt,name=store_config,json=storeConfig,proto3" json:"store_config,omitempty"`
	MaxBreakLevel      int32                    `protobuf:"varint,6,opt,name=max_break_level,json=maxBreakLevel,proto3" json:"max_break_level,omitempty"` // 最大突破礼等级
	TotalReward        []*PassTotalRankReward   `protobuf:"bytes,7,rep,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`          //榜单奖励
	SeasonNotify       *PassSeasonNotifyConfig  `protobuf:"bytes,8,opt,name=season_notify,json=seasonNotify,proto3" json:"season_notify,omitempty"`
	DailyWelfare       []*PassCheckDailyWelfare `protobuf:"bytes,9,rep,name=daily_welfare,json=dailyWelfare,proto3" json:"daily_welfare,omitempty"`
	BreakReward        []*PassCheckBreakReward  `protobuf:"bytes,10,rep,name=break_reward,json=breakReward,proto3" json:"break_reward,omitempty"`
	OutLoopLevel       int64                    `protobuf:"varint,11,opt,name=out_loop_level,json=outLoopLevel,proto3" json:"out_loop_level,omitempty"`
	PassCheckPackActId string                   `protobuf:"bytes,12,opt,name=pass_check_pack_act_id,json=passCheckPackActId,proto3" json:"pass_check_pack_act_id,omitempty"`
}

func (x *PassCheckV2) Reset() {
	*x = PassCheckV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckV2) ProtoMessage() {}

func (x *PassCheckV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckV2.ProtoReflect.Descriptor instead.
func (*PassCheckV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{23}
}

func (x *PassCheckV2) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PassCheckV2) GetCommon() *PassCommonConfig {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *PassCheckV2) GetRewardConfig() *PassRewardConfig {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

func (x *PassCheckV2) GetTaskConfig() *PassTaskConfig {
	if x != nil {
		return x.TaskConfig
	}
	return nil
}

func (x *PassCheckV2) GetStoreConfig() *PassStoreConfig {
	if x != nil {
		return x.StoreConfig
	}
	return nil
}

func (x *PassCheckV2) GetMaxBreakLevel() int32 {
	if x != nil {
		return x.MaxBreakLevel
	}
	return 0
}

func (x *PassCheckV2) GetTotalReward() []*PassTotalRankReward {
	if x != nil {
		return x.TotalReward
	}
	return nil
}

func (x *PassCheckV2) GetSeasonNotify() *PassSeasonNotifyConfig {
	if x != nil {
		return x.SeasonNotify
	}
	return nil
}

func (x *PassCheckV2) GetDailyWelfare() []*PassCheckDailyWelfare {
	if x != nil {
		return x.DailyWelfare
	}
	return nil
}

func (x *PassCheckV2) GetBreakReward() []*PassCheckBreakReward {
	if x != nil {
		return x.BreakReward
	}
	return nil
}

func (x *PassCheckV2) GetOutLoopLevel() int64 {
	if x != nil {
		return x.OutLoopLevel
	}
	return 0
}

func (x *PassCheckV2) GetPassCheckPackActId() string {
	if x != nil {
		return x.PassCheckPackActId
	}
	return ""
}

type PassCheckDailyWelfare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *config.RewardConfig `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	Weight int64                `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *PassCheckDailyWelfare) Reset() {
	*x = PassCheckDailyWelfare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckDailyWelfare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckDailyWelfare) ProtoMessage() {}

func (x *PassCheckDailyWelfare) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckDailyWelfare.ProtoReflect.Descriptor instead.
func (*PassCheckDailyWelfare) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{24}
}

func (x *PassCheckDailyWelfare) GetReward() *config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *PassCheckDailyWelfare) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type PassCheckBreakReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *config.RewardConfig `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	Level  int64                `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *PassCheckBreakReward) Reset() {
	*x = PassCheckBreakReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckBreakReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckBreakReward) ProtoMessage() {}

func (x *PassCheckBreakReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckBreakReward.ProtoReflect.Descriptor instead.
func (*PassCheckBreakReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{25}
}

func (x *PassCheckBreakReward) GetReward() *config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *PassCheckBreakReward) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type PassSeasonNotifyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bottom  string   `protobuf:"bytes,1,opt,name=bottom,proto3" json:"bottom,omitempty"`
	Top     []string `protobuf:"bytes,2,rep,name=top,proto3" json:"top,omitempty"`
	Jumpurl string   `protobuf:"bytes,3,opt,name=jumpurl,proto3" json:"jumpurl,omitempty"`
}

func (x *PassSeasonNotifyConfig) Reset() {
	*x = PassSeasonNotifyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassSeasonNotifyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassSeasonNotifyConfig) ProtoMessage() {}

func (x *PassSeasonNotifyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassSeasonNotifyConfig.ProtoReflect.Descriptor instead.
func (*PassSeasonNotifyConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{26}
}

func (x *PassSeasonNotifyConfig) GetBottom() string {
	if x != nil {
		return x.Bottom
	}
	return ""
}

func (x *PassSeasonNotifyConfig) GetTop() []string {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *PassSeasonNotifyConfig) GetJumpurl() string {
	if x != nil {
		return x.Jumpurl
	}
	return ""
}

type PassCommonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	StartTime       int64   `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime      int64   `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	ShowFinish      string  `protobuf:"bytes,4,opt,name=show_finish,json=showFinish,proto3" json:"show_finish,omitempty"`
	Season          int32   `protobuf:"varint,5,opt,name=season,proto3" json:"season,omitempty"`
	RuleDesc        string  `protobuf:"bytes,6,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"`                         //玩法说明
	ExpDesc         string  `protobuf:"bytes,7,opt,name=exp_desc,json=expDesc,proto3" json:"exp_desc,omitempty"`                            //积分(经验)说明
	TaskDesc        string  `protobuf:"bytes,8,opt,name=task_desc,json=taskDesc,proto3" json:"task_desc,omitempty"`                         //任务说明
	TopDesc         string  `protobuf:"bytes,9,opt,name=top_desc,json=topDesc,proto3" json:"top_desc,omitempty"`                            //排行榜说明
	TopRewardImgurl string  `protobuf:"bytes,10,opt,name=top_reward_imgurl,json=topRewardImgurl,proto3" json:"top_reward_imgurl,omitempty"` //排行榜奖励说明图
	UpgradeImgurl   string  `protobuf:"bytes,11,opt,name=upgrade_imgurl,json=upgradeImgurl,proto3" json:"upgrade_imgurl,omitempty"`         //进阶说明图
	GuideImgurl     string  `protobuf:"bytes,12,opt,name=guide_imgurl,json=guideImgurl,proto3" json:"guide_imgurl,omitempty"`
	HasExpMode      []int32 `protobuf:"varint,13,rep,packed,name=has_exp_mode,json=hasExpMode,proto3" json:"has_exp_mode,omitempty"` //能获得且要展示经验的游戏模式
	PerRankExp      int32   `protobuf:"varint,14,opt,name=per_rank_exp,json=perRankExp,proto3" json:"per_rank_exp,omitempty"`        //每个等级需要的经验
	// 首页
	BgUrl               string `protobuf:"bytes,15,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`                                             // 背景url
	BgAnimType          int32  `protobuf:"varint,16,opt,name=bg_anim_type,json=bgAnimType,proto3" json:"bg_anim_type,omitempty"`                           // 主页背景动效类型
	MainRewardUrl       string `protobuf:"bytes,17,opt,name=main_reward_url,json=mainRewardUrl,proto3" json:"main_reward_url,omitempty"`                   // 主奖励展示动效svga
	MainRewardAnimType  int32  `protobuf:"varint,18,opt,name=main_reward_anim_type,json=mainRewardAnimType,proto3" json:"main_reward_anim_type,omitempty"` // 主奖励动效类型
	MainRewardBottom    string `protobuf:"bytes,19,opt,name=main_reward_bottom,json=mainRewardBottom,proto3" json:"main_reward_bottom,omitempty"`          // 主奖励底图
	MainRewardCondition string `protobuf:"bytes,20,opt,name=main_reward_condition,json=mainRewardCondition,proto3" json:"main_reward_condition,omitempty"` // 主奖励获取条件文案
	// 通行证进阶
	AdvanceBgUrl      string `protobuf:"bytes,21,opt,name=advance_bg_url,json=advanceBgUrl,proto3" json:"advance_bg_url,omitempty"`                   // 进阶通行证背景url
	AdvanceBgAnimType int32  `protobuf:"varint,22,opt,name=advance_bg_anim_type,json=advanceBgAnimType,proto3" json:"advance_bg_anim_type,omitempty"` // 进阶通行证背景动效类型
	AdvanceHonorUrl   string `protobuf:"bytes,23,opt,name=advance_honor_url,json=advanceHonorUrl,proto3" json:"advance_honor_url,omitempty"`          // 荣耀通行证卡片
	AdvanceLuxuryUrl  string `protobuf:"bytes,24,opt,name=advance_luxury_url,json=advanceLuxuryUrl,proto3" json:"advance_luxury_url,omitempty"`       // 豪华通行证卡片
	//
	RuleDescTmpl string `protobuf:"bytes,25,opt,name=rule_desc_tmpl,json=ruleDescTmpl,proto3" json:"rule_desc_tmpl,omitempty"`
	Desc         string `protobuf:"bytes,26,opt,name=desc,proto3" json:"desc,omitempty"`
	TaskCardId   int32  `protobuf:"varint,27,opt,name=task_card_id,json=taskCardId,proto3" json:"task_card_id,omitempty"` // 任务卡id
}

func (x *PassCommonConfig) Reset() {
	*x = PassCommonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCommonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCommonConfig) ProtoMessage() {}

func (x *PassCommonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCommonConfig.ProtoReflect.Descriptor instead.
func (*PassCommonConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{27}
}

func (x *PassCommonConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PassCommonConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PassCommonConfig) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *PassCommonConfig) GetShowFinish() string {
	if x != nil {
		return x.ShowFinish
	}
	return ""
}

func (x *PassCommonConfig) GetSeason() int32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *PassCommonConfig) GetRuleDesc() string {
	if x != nil {
		return x.RuleDesc
	}
	return ""
}

func (x *PassCommonConfig) GetExpDesc() string {
	if x != nil {
		return x.ExpDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTopDesc() string {
	if x != nil {
		return x.TopDesc
	}
	return ""
}

func (x *PassCommonConfig) GetTopRewardImgurl() string {
	if x != nil {
		return x.TopRewardImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetUpgradeImgurl() string {
	if x != nil {
		return x.UpgradeImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetGuideImgurl() string {
	if x != nil {
		return x.GuideImgurl
	}
	return ""
}

func (x *PassCommonConfig) GetHasExpMode() []int32 {
	if x != nil {
		return x.HasExpMode
	}
	return nil
}

func (x *PassCommonConfig) GetPerRankExp() int32 {
	if x != nil {
		return x.PerRankExp
	}
	return 0
}

func (x *PassCommonConfig) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *PassCommonConfig) GetBgAnimType() int32 {
	if x != nil {
		return x.BgAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetMainRewardUrl() string {
	if x != nil {
		return x.MainRewardUrl
	}
	return ""
}

func (x *PassCommonConfig) GetMainRewardAnimType() int32 {
	if x != nil {
		return x.MainRewardAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetMainRewardBottom() string {
	if x != nil {
		return x.MainRewardBottom
	}
	return ""
}

func (x *PassCommonConfig) GetMainRewardCondition() string {
	if x != nil {
		return x.MainRewardCondition
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceBgUrl() string {
	if x != nil {
		return x.AdvanceBgUrl
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceBgAnimType() int32 {
	if x != nil {
		return x.AdvanceBgAnimType
	}
	return 0
}

func (x *PassCommonConfig) GetAdvanceHonorUrl() string {
	if x != nil {
		return x.AdvanceHonorUrl
	}
	return ""
}

func (x *PassCommonConfig) GetAdvanceLuxuryUrl() string {
	if x != nil {
		return x.AdvanceLuxuryUrl
	}
	return ""
}

func (x *PassCommonConfig) GetRuleDescTmpl() string {
	if x != nil {
		return x.RuleDescTmpl
	}
	return ""
}

func (x *PassCommonConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PassCommonConfig) GetTaskCardId() int32 {
	if x != nil {
		return x.TaskCardId
	}
	return 0
}

type PassRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfinityRankImgurl string                  `protobuf:"bytes,1,opt,name=infinity_rank_imgurl,json=infinityRankImgurl,proto3" json:"infinity_rank_imgurl,omitempty"`
	NormalRank         int32                   `protobuf:"varint,2,opt,name=normal_rank,json=normalRank,proto3" json:"normal_rank,omitempty"` // 奖励list里超过此数的关卡循环展示
	RewardList         []*PassCheckRankItem    `protobuf:"bytes,3,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	RewardPreview      *PassCheckRewardPreview `protobuf:"bytes,4,opt,name=reward_preview,json=rewardPreview,proto3" json:"reward_preview,omitempty"`
	RewardSort         []*config.RewardConfig  `protobuf:"bytes,5,rep,name=reward_sort,json=rewardSort,proto3" json:"reward_sort,omitempty"`
	IconOpen           int32                   `protobuf:"varint,6,opt,name=icon_open,json=iconOpen,proto3" json:"icon_open,omitempty"`
	IconList           []*PassCheckIcon        `protobuf:"bytes,7,rep,name=icon_list,json=iconList,proto3" json:"icon_list,omitempty"`
}

func (x *PassRewardConfig) Reset() {
	*x = PassRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassRewardConfig) ProtoMessage() {}

func (x *PassRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassRewardConfig.ProtoReflect.Descriptor instead.
func (*PassRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{28}
}

func (x *PassRewardConfig) GetInfinityRankImgurl() string {
	if x != nil {
		return x.InfinityRankImgurl
	}
	return ""
}

func (x *PassRewardConfig) GetNormalRank() int32 {
	if x != nil {
		return x.NormalRank
	}
	return 0
}

func (x *PassRewardConfig) GetRewardList() []*PassCheckRankItem {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *PassRewardConfig) GetRewardPreview() *PassCheckRewardPreview {
	if x != nil {
		return x.RewardPreview
	}
	return nil
}

func (x *PassRewardConfig) GetRewardSort() []*config.RewardConfig {
	if x != nil {
		return x.RewardSort
	}
	return nil
}

func (x *PassRewardConfig) GetIconOpen() int32 {
	if x != nil {
		return x.IconOpen
	}
	return 0
}

func (x *PassRewardConfig) GetIconList() []*PassCheckIcon {
	if x != nil {
		return x.IconList
	}
	return nil
}

type PassCheckIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Icon      string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	IconStart int32  `protobuf:"varint,3,opt,name=icon_start,json=iconStart,proto3" json:"icon_start,omitempty"`
	IconEnd   int32  `protobuf:"varint,4,opt,name=icon_end,json=iconEnd,proto3" json:"icon_end,omitempty"`
	Tips      string `protobuf:"bytes,5,opt,name=tips,proto3" json:"tips,omitempty"`
	LinkType  string `protobuf:"bytes,6,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	Link      string `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
	LinkDev   string `protobuf:"bytes,8,opt,name=link_dev,json=linkDev,proto3" json:"link_dev,omitempty"`
}

func (x *PassCheckIcon) Reset() {
	*x = PassCheckIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckIcon) ProtoMessage() {}

func (x *PassCheckIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckIcon.ProtoReflect.Descriptor instead.
func (*PassCheckIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{29}
}

func (x *PassCheckIcon) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PassCheckIcon) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PassCheckIcon) GetIconStart() int32 {
	if x != nil {
		return x.IconStart
	}
	return 0
}

func (x *PassCheckIcon) GetIconEnd() int32 {
	if x != nil {
		return x.IconEnd
	}
	return 0
}

func (x *PassCheckIcon) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

func (x *PassCheckIcon) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *PassCheckIcon) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *PassCheckIcon) GetLinkDev() string {
	if x != nil {
		return x.LinkDev
	}
	return ""
}

type PassCheckRankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	FreeReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=free_reward,json=freeReward,proto3" json:"free_reward,omitempty"`
	HighReward []*config.RewardConfig `protobuf:"bytes,3,rep,name=high_reward,json=highReward,proto3" json:"high_reward,omitempty"`
	TotalExp   int64                  `protobuf:"varint,4,opt,name=total_exp,json=totalExp,proto3" json:"total_exp,omitempty"`
}

func (x *PassCheckRankItem) Reset() {
	*x = PassCheckRankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckRankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckRankItem) ProtoMessage() {}

func (x *PassCheckRankItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckRankItem.ProtoReflect.Descriptor instead.
func (*PassCheckRankItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{30}
}

func (x *PassCheckRankItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PassCheckRankItem) GetFreeReward() []*config.RewardConfig {
	if x != nil {
		return x.FreeReward
	}
	return nil
}

func (x *PassCheckRankItem) GetHighReward() []*config.RewardConfig {
	if x != nil {
		return x.HighReward
	}
	return nil
}

func (x *PassCheckRankItem) GetTotalExp() int64 {
	if x != nil {
		return x.TotalExp
	}
	return 0
}

type PassCheckRewardPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeReward []*config.RewardConfig `protobuf:"bytes,1,rep,name=free_reward,json=freeReward,proto3" json:"free_reward,omitempty"`
	HighReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=high_reward,json=highReward,proto3" json:"high_reward,omitempty"`
	// 奖励橱窗
	WindowReward []*PassCheckWindowReward `protobuf:"bytes,3,rep,name=window_reward,json=windowReward,proto3" json:"window_reward,omitempty"`
	HonorReward  []*config.RewardConfig   `protobuf:"bytes,4,rep,name=honor_reward,json=honorReward,proto3" json:"honor_reward,omitempty"`
	LuxuryReward []*config.RewardConfig   `protobuf:"bytes,5,rep,name=luxury_reward,json=luxuryReward,proto3" json:"luxury_reward,omitempty"`
}

func (x *PassCheckRewardPreview) Reset() {
	*x = PassCheckRewardPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckRewardPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckRewardPreview) ProtoMessage() {}

func (x *PassCheckRewardPreview) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckRewardPreview.ProtoReflect.Descriptor instead.
func (*PassCheckRewardPreview) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{31}
}

func (x *PassCheckRewardPreview) GetFreeReward() []*config.RewardConfig {
	if x != nil {
		return x.FreeReward
	}
	return nil
}

func (x *PassCheckRewardPreview) GetHighReward() []*config.RewardConfig {
	if x != nil {
		return x.HighReward
	}
	return nil
}

func (x *PassCheckRewardPreview) GetWindowReward() []*PassCheckWindowReward {
	if x != nil {
		return x.WindowReward
	}
	return nil
}

func (x *PassCheckRewardPreview) GetHonorReward() []*config.RewardConfig {
	if x != nil {
		return x.HonorReward
	}
	return nil
}

func (x *PassCheckRewardPreview) GetLuxuryReward() []*config.RewardConfig {
	if x != nil {
		return x.LuxuryReward
	}
	return nil
}

type PassCheckWindowReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                // 奖励类型
	SkinId     int32       `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`              // 奖励 id
	Num        int64       `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`                                  // 奖励数量
	BigNum     *string     `protobuf:"bytes,4,opt,name=big_num,json=bigNum,proto3,oneof" json:"big_num,omitempty"`         // 奖励数量，大数
	Name       string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                 // 奖励名称
	Imgurl     string      `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`                             // 奖励图片
	UseInfo    *string     `protobuf:"bytes,7,opt,name=use_info,json=useInfo,proto3,oneof" json:"use_info,omitempty"`      // 有效期，单位秒
	Index      *int32      `protobuf:"varint,8,opt,name=index,proto3,oneof" json:"index,omitempty"`                        // 奖励序号
	WorthLevel int32       `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`  // 稀有度
	MarkId     *int32      `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3,oneof" json:"mark_id,omitempty"`       // 来源标签id，0: 忽略 1: 豪华版通行证加成 2: 回归加成 3: 师徒加成
	Convert    []*CConvert `protobuf:"bytes,11,rep,name=convert,proto3" json:"convert,omitempty"`                          // 奖励折算
	IsValuable int32       `protobuf:"varint,12,opt,name=is_valuable,json=isValuable,proto3" json:"is_valuable,omitempty"` //是否有高价值弹框，默认没有
	Desc       string      `protobuf:"bytes,13,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PassCheckWindowReward) Reset() {
	*x = PassCheckWindowReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckWindowReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckWindowReward) ProtoMessage() {}

func (x *PassCheckWindowReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckWindowReward.ProtoReflect.Descriptor instead.
func (*PassCheckWindowReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{32}
}

func (x *PassCheckWindowReward) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PassCheckWindowReward) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *PassCheckWindowReward) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *PassCheckWindowReward) GetBigNum() string {
	if x != nil && x.BigNum != nil {
		return *x.BigNum
	}
	return ""
}

func (x *PassCheckWindowReward) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassCheckWindowReward) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *PassCheckWindowReward) GetUseInfo() string {
	if x != nil && x.UseInfo != nil {
		return *x.UseInfo
	}
	return ""
}

func (x *PassCheckWindowReward) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PassCheckWindowReward) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *PassCheckWindowReward) GetMarkId() int32 {
	if x != nil && x.MarkId != nil {
		return *x.MarkId
	}
	return 0
}

func (x *PassCheckWindowReward) GetConvert() []*CConvert {
	if x != nil {
		return x.Convert
	}
	return nil
}

func (x *PassCheckWindowReward) GetIsValuable() int32 {
	if x != nil {
		return x.IsValuable
	}
	return 0
}

func (x *PassCheckWindowReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type PassTaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonTask   *SeasonTask   `protobuf:"bytes,1,opt,name=season_task,json=seasonTask,proto3" json:"season_task,omitempty"`
	GradeTask    *GradeTask    `protobuf:"bytes,2,opt,name=grade_task,json=gradeTask,proto3" json:"grade_task,omitempty"`
	WeeklyTask   []*WeeklyTask `protobuf:"bytes,3,rep,name=weekly_task,json=weeklyTask,proto3" json:"weekly_task,omitempty"`
	DailyTask    []*DailyTask  `protobuf:"bytes,4,rep,name=daily_task,json=dailyTask,proto3" json:"daily_task,omitempty"`
	WeekExpLimit int64         `protobuf:"varint,5,opt,name=week_exp_limit,json=weekExpLimit,proto3" json:"week_exp_limit,omitempty"`
	DayExpLimit  int64         `protobuf:"varint,6,opt,name=day_exp_limit,json=dayExpLimit,proto3" json:"day_exp_limit,omitempty"`
}

func (x *PassTaskConfig) Reset() {
	*x = PassTaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassTaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTaskConfig) ProtoMessage() {}

func (x *PassTaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTaskConfig.ProtoReflect.Descriptor instead.
func (*PassTaskConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{33}
}

func (x *PassTaskConfig) GetSeasonTask() *SeasonTask {
	if x != nil {
		return x.SeasonTask
	}
	return nil
}

func (x *PassTaskConfig) GetGradeTask() *GradeTask {
	if x != nil {
		return x.GradeTask
	}
	return nil
}

func (x *PassTaskConfig) GetWeeklyTask() []*WeeklyTask {
	if x != nil {
		return x.WeeklyTask
	}
	return nil
}

func (x *PassTaskConfig) GetDailyTask() []*DailyTask {
	if x != nil {
		return x.DailyTask
	}
	return nil
}

func (x *PassTaskConfig) GetWeekExpLimit() int64 {
	if x != nil {
		return x.WeekExpLimit
	}
	return 0
}

func (x *PassTaskConfig) GetDayExpLimit() int64 {
	if x != nil {
		return x.DayExpLimit
	}
	return 0
}

type DailyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc       string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	BtnType    int32  `protobuf:"varint,3,opt,name=btn_type,json=btnType,proto3" json:"btn_type,omitempty"`
	BtnLink    string `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	BtnLinkDev string `protobuf:"bytes,5,opt,name=btn_link_dev,json=btnLinkDev,proto3" json:"btn_link_dev,omitempty"`
}

func (x *DailyTask) Reset() {
	*x = DailyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTask) ProtoMessage() {}

func (x *DailyTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTask.ProtoReflect.Descriptor instead.
func (*DailyTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{34}
}

func (x *DailyTask) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DailyTask) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DailyTask) GetBtnType() int32 {
	if x != nil {
		return x.BtnType
	}
	return 0
}

func (x *DailyTask) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *DailyTask) GetBtnLinkDev() string {
	if x != nil {
		return x.BtnLinkDev
	}
	return ""
}

type WeeklyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64            `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64            `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	TaskList   []*PassTaskModel `protobuf:"bytes,3,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *WeeklyTask) Reset() {
	*x = WeeklyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyTask) ProtoMessage() {}

func (x *WeeklyTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyTask.ProtoReflect.Descriptor instead.
func (*WeeklyTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{35}
}

func (x *WeeklyTask) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WeeklyTask) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *WeeklyTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type SeasonTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*PassTaskModel `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *SeasonTask) Reset() {
	*x = SeasonTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonTask) ProtoMessage() {}

func (x *SeasonTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonTask.ProtoReflect.Descriptor instead.
func (*SeasonTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{36}
}

func (x *SeasonTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type GradeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*PassTaskModel `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *GradeTask) Reset() {
	*x = GradeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeTask) ProtoMessage() {}

func (x *GradeTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeTask.ProtoReflect.Descriptor instead.
func (*GradeTask) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{37}
}

func (x *GradeTask) GetTaskList() []*PassTaskModel {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type PassTaskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          int32  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Desc            string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	BtnLink         string `protobuf:"bytes,3,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	Param           int32  `protobuf:"varint,4,opt,name=param,proto3" json:"param,omitempty"`
	RewardExp       int32  `protobuf:"varint,5,opt,name=reward_exp,json=rewardExp,proto3" json:"reward_exp,omitempty"`
	NeedTaskCardNum int32  `protobuf:"varint,6,opt,name=need_task_card_num,json=needTaskCardNum,proto3" json:"need_task_card_num,omitempty"` // 完成周任务需要的任务卡数量
	Title           string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`                                                 // 日常任务才有
	BtnType         int32  `protobuf:"varint,8,opt,name=btn_type,json=btnType,proto3" json:"btn_type,omitempty"`
	BtnLinkDev      string `protobuf:"bytes,9,opt,name=btn_link_dev,json=btnLinkDev,proto3" json:"btn_link_dev,omitempty"`
}

func (x *PassTaskModel) Reset() {
	*x = PassTaskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassTaskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTaskModel) ProtoMessage() {}

func (x *PassTaskModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTaskModel.ProtoReflect.Descriptor instead.
func (*PassTaskModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{38}
}

func (x *PassTaskModel) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *PassTaskModel) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PassTaskModel) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *PassTaskModel) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *PassTaskModel) GetRewardExp() int32 {
	if x != nil {
		return x.RewardExp
	}
	return 0
}

func (x *PassTaskModel) GetNeedTaskCardNum() int32 {
	if x != nil {
		return x.NeedTaskCardNum
	}
	return 0
}

func (x *PassTaskModel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PassTaskModel) GetBtnType() int32 {
	if x != nil {
		return x.BtnType
	}
	return 0
}

func (x *PassTaskModel) GetBtnLinkDev() string {
	if x != nil {
		return x.BtnLinkDev
	}
	return ""
}

type PassStoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankPrice       *CPriceInfo         `protobuf:"bytes,1,opt,name=rank_price,json=rankPrice,proto3" json:"rank_price,omitempty"`
	ExchangeStore   []*ExchangeStore    `protobuf:"bytes,2,rep,name=exchange_store,json=exchangeStore,proto3" json:"exchange_store,omitempty"`
	HighStoreImgurl string              `protobuf:"bytes,3,opt,name=high_store_imgurl,json=highStoreImgurl,proto3" json:"high_store_imgurl,omitempty"`
	HighStoreAnim   string              `protobuf:"bytes,4,opt,name=high_store_anim,json=highStoreAnim,proto3" json:"high_store_anim,omitempty"`
	HighStore       []*config.PackModel `protobuf:"bytes,5,rep,name=high_store,json=highStore,proto3" json:"high_store,omitempty"`
	MaxExchangeId   int64               `protobuf:"varint,6,opt,name=max_exchange_id,json=maxExchangeId,proto3" json:"max_exchange_id,omitempty"`
}

func (x *PassStoreConfig) Reset() {
	*x = PassStoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassStoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassStoreConfig) ProtoMessage() {}

func (x *PassStoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassStoreConfig.ProtoReflect.Descriptor instead.
func (*PassStoreConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{39}
}

func (x *PassStoreConfig) GetRankPrice() *CPriceInfo {
	if x != nil {
		return x.RankPrice
	}
	return nil
}

func (x *PassStoreConfig) GetExchangeStore() []*ExchangeStore {
	if x != nil {
		return x.ExchangeStore
	}
	return nil
}

func (x *PassStoreConfig) GetHighStoreImgurl() string {
	if x != nil {
		return x.HighStoreImgurl
	}
	return ""
}

func (x *PassStoreConfig) GetHighStoreAnim() string {
	if x != nil {
		return x.HighStoreAnim
	}
	return ""
}

func (x *PassStoreConfig) GetHighStore() []*config.PackModel {
	if x != nil {
		return x.HighStore
	}
	return nil
}

func (x *PassStoreConfig) GetMaxExchangeId() int64 {
	if x != nil {
		return x.MaxExchangeId
	}
	return 0
}

type ExchangeStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          int32       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId        int32       `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Id            int32       `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"` // 请求兑换接口时传入的id
	Num           int32       `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Name          string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl        string      `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	UseInfo       string      `protobuf:"bytes,7,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	TimeUnit      int64       `protobuf:"varint,8,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Desc          string      `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	BuyLimit      int32       `protobuf:"varint,10,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"` // 次数限制
	Price         *CPriceInfo `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	RankLimit     int32       `protobuf:"varint,12,opt,name=rank_limit,json=rankLimit,proto3" json:"rank_limit,omitempty"`              // 通行证等级
	NeedVip       int32       `protobuf:"varint,13,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`                    // 通行证版本 0免费 1 荣耀 2 豪华
	NabobAddition float64     `protobuf:"fixed64,14,opt,name=nabob_addition,json=nabobAddition,proto3" json:"nabob_addition,omitempty"` // 限购加成百分比，豪华版才有
	BuyLimitation int32       `protobuf:"varint,15,opt,name=buy_limitation,json=buyLimitation,proto3" json:"buy_limitation,omitempty"`  // 限购类型
}

func (x *ExchangeStore) Reset() {
	*x = ExchangeStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeStore) ProtoMessage() {}

func (x *ExchangeStore) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeStore.ProtoReflect.Descriptor instead.
func (*ExchangeStore) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{40}
}

func (x *ExchangeStore) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangeStore) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *ExchangeStore) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeStore) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ExchangeStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeStore) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *ExchangeStore) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *ExchangeStore) GetTimeUnit() int64 {
	if x != nil {
		return x.TimeUnit
	}
	return 0
}

func (x *ExchangeStore) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ExchangeStore) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *ExchangeStore) GetPrice() *CPriceInfo {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeStore) GetRankLimit() int32 {
	if x != nil {
		return x.RankLimit
	}
	return 0
}

func (x *ExchangeStore) GetNeedVip() int32 {
	if x != nil {
		return x.NeedVip
	}
	return 0
}

func (x *ExchangeStore) GetNabobAddition() float64 {
	if x != nil {
		return x.NabobAddition
	}
	return 0
}

func (x *ExchangeStore) GetBuyLimitation() int32 {
	if x != nil {
		return x.BuyLimitation
	}
	return 0
}

type PassTotalRankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank     int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	RankDesc string                 `protobuf:"bytes,2,opt,name=rank_desc,json=rankDesc,proto3" json:"rank_desc,omitempty"`
	Mail     string                 `protobuf:"bytes,3,opt,name=mail,proto3" json:"mail,omitempty"`
	Reward   []*config.RewardConfig `protobuf:"bytes,4,rep,name=reward,proto3" json:"reward,omitempty"`
}

func (x *PassTotalRankReward) Reset() {
	*x = PassTotalRankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassTotalRankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTotalRankReward) ProtoMessage() {}

func (x *PassTotalRankReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTotalRankReward.ProtoReflect.Descriptor instead.
func (*PassTotalRankReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{41}
}

func (x *PassTotalRankReward) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PassTotalRankReward) GetRankDesc() string {
	if x != nil {
		return x.RankDesc
	}
	return ""
}

func (x *PassTotalRankReward) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *PassTotalRankReward) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

// turntable_config start
type TurntableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopupInterval int32                   `protobuf:"varint,1,opt,name=popup_interval,json=popupInterval,proto3" json:"popup_interval,omitempty"`
	RewardTable   []*TurntableRewardTable `protobuf:"bytes,2,rep,name=reward_table,json=rewardTable,proto3" json:"reward_table,omitempty"`
	Config        *TurntableSubConfig     `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	AdTimes       int64                   `protobuf:"varint,4,opt,name=ad_times,json=adTimes,proto3" json:"ad_times,omitempty"`
}

func (x *TurntableConfig) Reset() {
	*x = TurntableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurntableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurntableConfig) ProtoMessage() {}

func (x *TurntableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurntableConfig.ProtoReflect.Descriptor instead.
func (*TurntableConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{42}
}

func (x *TurntableConfig) GetPopupInterval() int32 {
	if x != nil {
		return x.PopupInterval
	}
	return 0
}

func (x *TurntableConfig) GetRewardTable() []*TurntableRewardTable {
	if x != nil {
		return x.RewardTable
	}
	return nil
}

func (x *TurntableConfig) GetConfig() *TurntableSubConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TurntableConfig) GetAdTimes() int64 {
	if x != nil {
		return x.AdTimes
	}
	return 0
}

type TurntableRewardTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Mode   int32  `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *TurntableRewardTable) Reset() {
	*x = TurntableRewardTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurntableRewardTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurntableRewardTable) ProtoMessage() {}

func (x *TurntableRewardTable) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurntableRewardTable.ProtoReflect.Descriptor instead.
func (*TurntableRewardTable) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{43}
}

func (x *TurntableRewardTable) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *TurntableRewardTable) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TurntableRewardTable) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type TurntableSubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotteryLink     string `protobuf:"bytes,1,opt,name=lottery_link,json=lotteryLink,proto3" json:"lottery_link,omitempty"`
	LotteryLinkIos  string `protobuf:"bytes,2,opt,name=lottery_link_ios,json=lotteryLinkIos,proto3" json:"lottery_link_ios,omitempty"`
	EndlessIconUrl  string `protobuf:"bytes,3,opt,name=endless_icon_url,json=endlessIconUrl,proto3" json:"endless_icon_url,omitempty"`
	GoldCoinIconUrl string `protobuf:"bytes,4,opt,name=gold_coin_icon_url,json=goldCoinIconUrl,proto3" json:"gold_coin_icon_url,omitempty"`
	EndlessEndtime  int64  `protobuf:"varint,5,opt,name=endless_endtime,json=endlessEndtime,proto3" json:"endless_endtime,omitempty"` // 单机轮盘结束时间，以s计算
}

func (x *TurntableSubConfig) Reset() {
	*x = TurntableSubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurntableSubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurntableSubConfig) ProtoMessage() {}

func (x *TurntableSubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurntableSubConfig.ProtoReflect.Descriptor instead.
func (*TurntableSubConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{44}
}

func (x *TurntableSubConfig) GetLotteryLink() string {
	if x != nil {
		return x.LotteryLink
	}
	return ""
}

func (x *TurntableSubConfig) GetLotteryLinkIos() string {
	if x != nil {
		return x.LotteryLinkIos
	}
	return ""
}

func (x *TurntableSubConfig) GetEndlessIconUrl() string {
	if x != nil {
		return x.EndlessIconUrl
	}
	return ""
}

func (x *TurntableSubConfig) GetGoldCoinIconUrl() string {
	if x != nil {
		return x.GoldCoinIconUrl
	}
	return ""
}

func (x *TurntableSubConfig) GetEndlessEndtime() int64 {
	if x != nil {
		return x.EndlessEndtime
	}
	return 0
}

// ugc_v2_config start
type SkinUgcV2Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime      int64       `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64       `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IconImgurl     string      `protobuf:"bytes,3,opt,name=icon_imgurl,json=iconImgurl,proto3" json:"icon_imgurl,omitempty"`
	BtnLink        string      `protobuf:"bytes,4,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	SkinTopicList  []*UgcTopic `protobuf:"bytes,5,rep,name=skin_topic_list,json=skinTopicList,proto3" json:"skin_topic_list,omitempty"`
	KsTopicList    []*UgcTopic `protobuf:"bytes,6,rep,name=ks_topic_list,json=ksTopicList,proto3" json:"ks_topic_list,omitempty"`
	BgTopicList    []*UgcTopic `protobuf:"bytes,7,rep,name=bg_topic_list,json=bgTopicList,proto3" json:"bg_topic_list,omitempty"`
	SuitTopicList  []*UgcTopic `protobuf:"bytes,8,rep,name=suit_topic_list,json=suitTopicList,proto3" json:"suit_topic_list,omitempty"`
	VipCost        int64       `protobuf:"varint,9,opt,name=vip_cost,json=vipCost,proto3" json:"vip_cost,omitempty"`
	TitleUrl       string      `protobuf:"bytes,10,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	ShowOnHomepage bool        `protobuf:"varint,11,opt,name=show_on_homepage,json=showOnHomepage,proto3" json:"show_on_homepage,omitempty"`
}

func (x *SkinUgcV2Config) Reset() {
	*x = SkinUgcV2Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinUgcV2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinUgcV2Config) ProtoMessage() {}

func (x *SkinUgcV2Config) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinUgcV2Config.ProtoReflect.Descriptor instead.
func (*SkinUgcV2Config) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{45}
}

func (x *SkinUgcV2Config) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SkinUgcV2Config) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SkinUgcV2Config) GetIconImgurl() string {
	if x != nil {
		return x.IconImgurl
	}
	return ""
}

func (x *SkinUgcV2Config) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *SkinUgcV2Config) GetSkinTopicList() []*UgcTopic {
	if x != nil {
		return x.SkinTopicList
	}
	return nil
}

func (x *SkinUgcV2Config) GetKsTopicList() []*UgcTopic {
	if x != nil {
		return x.KsTopicList
	}
	return nil
}

func (x *SkinUgcV2Config) GetBgTopicList() []*UgcTopic {
	if x != nil {
		return x.BgTopicList
	}
	return nil
}

func (x *SkinUgcV2Config) GetSuitTopicList() []*UgcTopic {
	if x != nil {
		return x.SuitTopicList
	}
	return nil
}

func (x *SkinUgcV2Config) GetVipCost() int64 {
	if x != nil {
		return x.VipCost
	}
	return 0
}

func (x *SkinUgcV2Config) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

func (x *SkinUgcV2Config) GetShowOnHomepage() bool {
	if x != nil {
		return x.ShowOnHomepage
	}
	return false
}

type UgcTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bg            string `protobuf:"bytes,3,opt,name=bg,proto3" json:"bg,omitempty"`
	BgSmall       string `protobuf:"bytes,4,opt,name=bg_small,json=bgSmall,proto3" json:"bg_small,omitempty"`
	IsTopicCreate bool   `protobuf:"varint,5,opt,name=is_topic_create,json=isTopicCreate,proto3" json:"is_topic_create,omitempty"`
}

func (x *UgcTopic) Reset() {
	*x = UgcTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcTopic) ProtoMessage() {}

func (x *UgcTopic) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcTopic.ProtoReflect.Descriptor instead.
func (*UgcTopic) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{46}
}

func (x *UgcTopic) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UgcTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UgcTopic) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *UgcTopic) GetBgSmall() string {
	if x != nil {
		return x.BgSmall
	}
	return ""
}

func (x *UgcTopic) GetIsTopicCreate() bool {
	if x != nil {
		return x.IsTopicCreate
	}
	return false
}

// show_illustration start
type ShowIllustrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescUrl    string                    `protobuf:"bytes,1,opt,name=desc_url,json=descUrl,proto3" json:"desc_url,omitempty"` // 说明文案
	TitleList  []*ShowIllustrationTitle  `protobuf:"bytes,2,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
	SeasonList []*ShowIllustrationSeason `protobuf:"bytes,4,rep,name=season_list,json=seasonList,proto3" json:"season_list,omitempty"`
}

func (x *ShowIllustrationConfig) Reset() {
	*x = ShowIllustrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIllustrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIllustrationConfig) ProtoMessage() {}

func (x *ShowIllustrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIllustrationConfig.ProtoReflect.Descriptor instead.
func (*ShowIllustrationConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{47}
}

func (x *ShowIllustrationConfig) GetDescUrl() string {
	if x != nil {
		return x.DescUrl
	}
	return ""
}

func (x *ShowIllustrationConfig) GetTitleList() []*ShowIllustrationTitle {
	if x != nil {
		return x.TitleList
	}
	return nil
}

func (x *ShowIllustrationConfig) GetSeasonList() []*ShowIllustrationSeason {
	if x != nil {
		return x.SeasonList
	}
	return nil
}

type ShowIllustrationTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img       string `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`                               // 背景
	StartTime int64  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始和结束时间不为0的为活动主题
	EndTime   int64  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ShowIllustrationTitle) Reset() {
	*x = ShowIllustrationTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIllustrationTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIllustrationTitle) ProtoMessage() {}

func (x *ShowIllustrationTitle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIllustrationTitle.ProtoReflect.Descriptor instead.
func (*ShowIllustrationTitle) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{48}
}

func (x *ShowIllustrationTitle) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowIllustrationTitle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowIllustrationTitle) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *ShowIllustrationTitle) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ShowIllustrationTitle) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ShowIllustrationSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img       string                 `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`
	StartTime int64                  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BgImgurl  string                 `protobuf:"bytes,6,opt,name=bg_imgurl,json=bgImgurl,proto3" json:"bg_imgurl,omitempty"`
	Rewards   []*config.RewardConfig `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Resources []*SeasonResource      `protobuf:"bytes,8,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ShowIllustrationSeason) Reset() {
	*x = ShowIllustrationSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIllustrationSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIllustrationSeason) ProtoMessage() {}

func (x *ShowIllustrationSeason) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIllustrationSeason.ProtoReflect.Descriptor instead.
func (*ShowIllustrationSeason) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{49}
}

func (x *ShowIllustrationSeason) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowIllustrationSeason) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowIllustrationSeason) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *ShowIllustrationSeason) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ShowIllustrationSeason) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ShowIllustrationSeason) GetBgImgurl() string {
	if x != nil {
		return x.BgImgurl
	}
	return ""
}

func (x *ShowIllustrationSeason) GetRewards() []*config.RewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *ShowIllustrationSeason) GetResources() []*SeasonResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SeasonResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId     int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Imgurl     string `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	GrayImgurl string `protobuf:"bytes,4,opt,name=gray_imgurl,json=grayImgurl,proto3" json:"gray_imgurl,omitempty"`
	X          uint32 `protobuf:"varint,5,opt,name=x,proto3" json:"x,omitempty"`
	Y          uint32 `protobuf:"varint,6,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *SeasonResource) Reset() {
	*x = SeasonResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonResource) ProtoMessage() {}

func (x *SeasonResource) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonResource.ProtoReflect.Descriptor instead.
func (*SeasonResource) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{50}
}

func (x *SeasonResource) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SeasonResource) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *SeasonResource) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *SeasonResource) GetGrayImgurl() string {
	if x != nil {
		return x.GrayImgurl
	}
	return ""
}

func (x *SeasonResource) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SeasonResource) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// gift_illustration Start
type GiftIllustrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescUrl   string                 `protobuf:"bytes,1,opt,name=desc_url,json=descUrl,proto3" json:"desc_url,omitempty"`
	GuideUrl  string                 `protobuf:"bytes,2,opt,name=guide_url,json=guideUrl,proto3" json:"guide_url,omitempty"`
	TitleList []*GiftTitleItemConfig `protobuf:"bytes,3,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
}

func (x *GiftIllustrationConfig) Reset() {
	*x = GiftIllustrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftIllustrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftIllustrationConfig) ProtoMessage() {}

func (x *GiftIllustrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftIllustrationConfig.ProtoReflect.Descriptor instead.
func (*GiftIllustrationConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{51}
}

func (x *GiftIllustrationConfig) GetDescUrl() string {
	if x != nil {
		return x.DescUrl
	}
	return ""
}

func (x *GiftIllustrationConfig) GetGuideUrl() string {
	if x != nil {
		return x.GuideUrl
	}
	return ""
}

func (x *GiftIllustrationConfig) GetTitleList() []*GiftTitleItemConfig {
	if x != nil {
		return x.TitleList
	}
	return nil
}

type GiftTitleItemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Img  string `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *GiftTitleItemConfig) Reset() {
	*x = GiftTitleItemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTitleItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTitleItemConfig) ProtoMessage() {}

func (x *GiftTitleItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTitleItemConfig.ProtoReflect.Descriptor instead.
func (*GiftTitleItemConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{52}
}

func (x *GiftTitleItemConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftTitleItemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GiftTitleItemConfig) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

type EndlessFloatingV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId                   string                             `protobuf:"bytes,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	StartTime               int64                              `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                 int64                              `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FloatingRefreshConfigV2 []*IllustrateFloatingRefreshConfig `protobuf:"bytes,4,rep,name=floating_refresh_config_v2,json=floatingRefreshConfigV2,proto3" json:"floating_refresh_config_v2,omitempty"`
	FloatingConfig          []*FloatingInfo                    `protobuf:"bytes,5,rep,name=floating_config,json=floatingConfig,proto3" json:"floating_config,omitempty"`
	TreasureHouse           []*TreasureHouseThemeInfo          `protobuf:"bytes,6,rep,name=treasure_house,json=treasureHouse,proto3" json:"treasure_house,omitempty"`
	Boss                    []*BossTheme                       `protobuf:"bytes,7,rep,name=boss,proto3" json:"boss,omitempty"`
	ExtraBuff               *ExtraBuff                         `protobuf:"bytes,8,opt,name=extra_buff,json=extraBuff,proto3" json:"extra_buff,omitempty"`
	AiSkin                  []*FloatingAiSkin                  `protobuf:"bytes,9,rep,name=ai_skin,json=aiSkin,proto3" json:"ai_skin,omitempty"`
	AiSkinRate              []*FloatingAiSkinRateInfo          `protobuf:"bytes,10,rep,name=ai_skin_rate,json=aiSkinRate,proto3" json:"ai_skin_rate,omitempty"`
	AiKilleffect            []*FloatingAiKillEffect            `protobuf:"bytes,11,rep,name=ai_killeffect,json=aiKilleffect,proto3" json:"ai_killeffect,omitempty"`
	AiKilleffectRate        []*FloatingAiKillEffectRateInfo    `protobuf:"bytes,12,rep,name=ai_killeffect_rate,json=aiKilleffectRate,proto3" json:"ai_killeffect_rate,omitempty"`
	MainMapTheme            []*FloatingMainMapTheme            `protobuf:"bytes,13,rep,name=main_map_theme,json=mainMapTheme,proto3" json:"main_map_theme,omitempty"`
	IllustrateConfig        []*IllustrateConfig                `protobuf:"bytes,14,rep,name=illustrate_config,json=illustrateConfig,proto3" json:"illustrate_config,omitempty"`
	IconStartTime           int64                              `protobuf:"varint,15,opt,name=icon_start_time,json=iconStartTime,proto3" json:"icon_start_time,omitempty"`
	IconEndTime             int64                              `protobuf:"varint,16,opt,name=icon_end_time,json=iconEndTime,proto3" json:"icon_end_time,omitempty"`
	HomepageUrl             string                             `protobuf:"bytes,17,opt,name=homepage_url,json=homepageUrl,proto3" json:"homepage_url,omitempty"`
}

func (x *EndlessFloatingV2) Reset() {
	*x = EndlessFloatingV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessFloatingV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessFloatingV2) ProtoMessage() {}

func (x *EndlessFloatingV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessFloatingV2.ProtoReflect.Descriptor instead.
func (*EndlessFloatingV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{53}
}

func (x *EndlessFloatingV2) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *EndlessFloatingV2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetFloatingRefreshConfigV2() []*IllustrateFloatingRefreshConfig {
	if x != nil {
		return x.FloatingRefreshConfigV2
	}
	return nil
}

func (x *EndlessFloatingV2) GetFloatingConfig() []*FloatingInfo {
	if x != nil {
		return x.FloatingConfig
	}
	return nil
}

func (x *EndlessFloatingV2) GetTreasureHouse() []*TreasureHouseThemeInfo {
	if x != nil {
		return x.TreasureHouse
	}
	return nil
}

func (x *EndlessFloatingV2) GetBoss() []*BossTheme {
	if x != nil {
		return x.Boss
	}
	return nil
}

func (x *EndlessFloatingV2) GetExtraBuff() *ExtraBuff {
	if x != nil {
		return x.ExtraBuff
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiSkin() []*FloatingAiSkin {
	if x != nil {
		return x.AiSkin
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiSkinRate() []*FloatingAiSkinRateInfo {
	if x != nil {
		return x.AiSkinRate
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiKilleffect() []*FloatingAiKillEffect {
	if x != nil {
		return x.AiKilleffect
	}
	return nil
}

func (x *EndlessFloatingV2) GetAiKilleffectRate() []*FloatingAiKillEffectRateInfo {
	if x != nil {
		return x.AiKilleffectRate
	}
	return nil
}

func (x *EndlessFloatingV2) GetMainMapTheme() []*FloatingMainMapTheme {
	if x != nil {
		return x.MainMapTheme
	}
	return nil
}

func (x *EndlessFloatingV2) GetIllustrateConfig() []*IllustrateConfig {
	if x != nil {
		return x.IllustrateConfig
	}
	return nil
}

func (x *EndlessFloatingV2) GetIconStartTime() int64 {
	if x != nil {
		return x.IconStartTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetIconEndTime() int64 {
	if x != nil {
		return x.IconEndTime
	}
	return 0
}

func (x *EndlessFloatingV2) GetHomepageUrl() string {
	if x != nil {
		return x.HomepageUrl
	}
	return ""
}

type IllustrateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *IllustrateConfig) Reset() {
	*x = IllustrateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllustrateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllustrateConfig) ProtoMessage() {}

func (x *IllustrateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllustrateConfig.ProtoReflect.Descriptor instead.
func (*IllustrateConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{54}
}

func (x *IllustrateConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IllustrateConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type IllustrateFloatingRefreshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                int32                  `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	StartTime             int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               int64                  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FloatingRefreshConfig *FloatingRefreshConfig `protobuf:"bytes,4,opt,name=floating_refresh_config,json=floatingRefreshConfig,proto3" json:"floating_refresh_config,omitempty"`
}

func (x *IllustrateFloatingRefreshConfig) Reset() {
	*x = IllustrateFloatingRefreshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllustrateFloatingRefreshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllustrateFloatingRefreshConfig) ProtoMessage() {}

func (x *IllustrateFloatingRefreshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllustrateFloatingRefreshConfig.ProtoReflect.Descriptor instead.
func (*IllustrateFloatingRefreshConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{55}
}

func (x *IllustrateFloatingRefreshConfig) GetPoolId() int32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *IllustrateFloatingRefreshConfig) GetFloatingRefreshConfig() *FloatingRefreshConfig {
	if x != nil {
		return x.FloatingRefreshConfig
	}
	return nil
}

type FloatingRefreshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshInterval     []int32 `protobuf:"varint,1,rep,packed,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	FloatingKind        []int32 `protobuf:"varint,2,rep,packed,name=floating_kind,json=floatingKind,proto3" json:"floating_kind,omitempty"`
	FloatingNum         []int32 `protobuf:"varint,3,rep,packed,name=floating_num,json=floatingNum,proto3" json:"floating_num,omitempty"`
	FloatingRange       int32   `protobuf:"varint,4,opt,name=floating_range,json=floatingRange,proto3" json:"floating_range,omitempty"`
	FloatingMinDistance int32   `protobuf:"varint,5,opt,name=floating_min_distance,json=floatingMinDistance,proto3" json:"floating_min_distance,omitempty"`
	WallRate            int32   `protobuf:"varint,6,opt,name=wall_rate,json=wallRate,proto3" json:"wall_rate,omitempty"`
	WallDistance        []int32 `protobuf:"varint,7,rep,packed,name=wall_distance,json=wallDistance,proto3" json:"wall_distance,omitempty"`
	WallFloatingNum     int32   `protobuf:"varint,8,opt,name=wall_floating_num,json=wallFloatingNum,proto3" json:"wall_floating_num,omitempty"`
}

func (x *FloatingRefreshConfig) Reset() {
	*x = FloatingRefreshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingRefreshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingRefreshConfig) ProtoMessage() {}

func (x *FloatingRefreshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingRefreshConfig.ProtoReflect.Descriptor instead.
func (*FloatingRefreshConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{56}
}

func (x *FloatingRefreshConfig) GetRefreshInterval() []int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingKind() []int32 {
	if x != nil {
		return x.FloatingKind
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingNum() []int32 {
	if x != nil {
		return x.FloatingNum
	}
	return nil
}

func (x *FloatingRefreshConfig) GetFloatingRange() int32 {
	if x != nil {
		return x.FloatingRange
	}
	return 0
}

func (x *FloatingRefreshConfig) GetFloatingMinDistance() int32 {
	if x != nil {
		return x.FloatingMinDistance
	}
	return 0
}

func (x *FloatingRefreshConfig) GetWallRate() int32 {
	if x != nil {
		return x.WallRate
	}
	return 0
}

func (x *FloatingRefreshConfig) GetWallDistance() []int32 {
	if x != nil {
		return x.WallDistance
	}
	return nil
}

func (x *FloatingRefreshConfig) GetWallFloatingNum() int32 {
	if x != nil {
		return x.WallFloatingNum
	}
	return 0
}

type FloatingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                  string  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	LengthLimit           int32   `protobuf:"varint,4,opt,name=length_limit,json=lengthLimit,proto3" json:"length_limit,omitempty"`
	TimeLimit             int32   `protobuf:"varint,5,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	NotCollectAllRate     int32   `protobuf:"varint,6,opt,name=not_collect_all_rate,json=notCollectAllRate,proto3" json:"not_collect_all_rate,omitempty"`
	CollectAllRate        int32   `protobuf:"varint,7,opt,name=collect_all_rate,json=collectAllRate,proto3" json:"collect_all_rate,omitempty"`
	FirstAddScore         int32   `protobuf:"varint,8,opt,name=first_add_score,json=firstAddScore,proto3" json:"first_add_score,omitempty"`
	AddScore              int32   `protobuf:"varint,9,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	Imgurl                string  `protobuf:"bytes,10,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Area                  string  `protobuf:"bytes,11,opt,name=area,proto3" json:"area,omitempty"`
	NeedNum               int32   `protobuf:"varint,12,opt,name=need_num,json=needNum,proto3" json:"need_num,omitempty"`
	DiamondLimit          int32   `protobuf:"varint,13,opt,name=diamond_limit,json=diamondLimit,proto3" json:"diamond_limit,omitempty"`
	ReliveLimit           int32   `protobuf:"varint,14,opt,name=relive_limit,json=reliveLimit,proto3" json:"relive_limit,omitempty"`
	IsRare                int32   `protobuf:"varint,15,opt,name=is_rare,json=isRare,proto3" json:"is_rare,omitempty"`
	ImgScale              float64 `protobuf:"fixed64,16,opt,name=img_scale,json=imgScale,proto3" json:"img_scale,omitempty"`
	Maps                  []int32 `protobuf:"varint,17,rep,packed,name=maps,proto3" json:"maps,omitempty"`
	Period                string  `protobuf:"bytes,18,opt,name=period,proto3" json:"period,omitempty"`
	MiddleItemId          int32   `protobuf:"varint,19,opt,name=middle_item_id,json=middleItemId,proto3" json:"middle_item_id,omitempty"`
	UnlockDesc            string  `protobuf:"bytes,20,opt,name=unlock_desc,json=unlockDesc,proto3" json:"unlock_desc,omitempty"`
	TotalLimit            int32   `protobuf:"varint,21,opt,name=total_limit,json=totalLimit,proto3" json:"total_limit,omitempty"`
	WallNotCollectAllRate int32   `protobuf:"varint,22,opt,name=wall_not_collect_all_rate,json=wallNotCollectAllRate,proto3" json:"wall_not_collect_all_rate,omitempty"`
	WallCollectAllRate    int32   `protobuf:"varint,23,opt,name=wall_collect_all_rate,json=wallCollectAllRate,proto3" json:"wall_collect_all_rate,omitempty"`
	Type                  int32   `protobuf:"varint,24,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FloatingInfo) Reset() {
	*x = FloatingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingInfo) ProtoMessage() {}

func (x *FloatingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingInfo.ProtoReflect.Descriptor instead.
func (*FloatingInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{57}
}

func (x *FloatingInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FloatingInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FloatingInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FloatingInfo) GetLengthLimit() int32 {
	if x != nil {
		return x.LengthLimit
	}
	return 0
}

func (x *FloatingInfo) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *FloatingInfo) GetNotCollectAllRate() int32 {
	if x != nil {
		return x.NotCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetCollectAllRate() int32 {
	if x != nil {
		return x.CollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetFirstAddScore() int32 {
	if x != nil {
		return x.FirstAddScore
	}
	return 0
}

func (x *FloatingInfo) GetAddScore() int32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *FloatingInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *FloatingInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *FloatingInfo) GetNeedNum() int32 {
	if x != nil {
		return x.NeedNum
	}
	return 0
}

func (x *FloatingInfo) GetDiamondLimit() int32 {
	if x != nil {
		return x.DiamondLimit
	}
	return 0
}

func (x *FloatingInfo) GetReliveLimit() int32 {
	if x != nil {
		return x.ReliveLimit
	}
	return 0
}

func (x *FloatingInfo) GetIsRare() int32 {
	if x != nil {
		return x.IsRare
	}
	return 0
}

func (x *FloatingInfo) GetImgScale() float64 {
	if x != nil {
		return x.ImgScale
	}
	return 0
}

func (x *FloatingInfo) GetMaps() []int32 {
	if x != nil {
		return x.Maps
	}
	return nil
}

func (x *FloatingInfo) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *FloatingInfo) GetMiddleItemId() int32 {
	if x != nil {
		return x.MiddleItemId
	}
	return 0
}

func (x *FloatingInfo) GetUnlockDesc() string {
	if x != nil {
		return x.UnlockDesc
	}
	return ""
}

func (x *FloatingInfo) GetTotalLimit() int32 {
	if x != nil {
		return x.TotalLimit
	}
	return 0
}

func (x *FloatingInfo) GetWallNotCollectAllRate() int32 {
	if x != nil {
		return x.WallNotCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetWallCollectAllRate() int32 {
	if x != nil {
		return x.WallCollectAllRate
	}
	return 0
}

func (x *FloatingInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type TreasureHouseThemeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId               int32  `protobuf:"varint,1,opt,name=ThemeId,proto3" json:"ThemeId,omitempty"`
	MapAssetPath          string `protobuf:"bytes,2,opt,name=MapAssetPath,proto3" json:"MapAssetPath,omitempty"`
	CenterSpawnPrefabPath string `protobuf:"bytes,3,opt,name=CenterSpawnPrefabPath,proto3" json:"CenterSpawnPrefabPath,omitempty"`
	CandyElementId        int32  `protobuf:"varint,4,opt,name=CandyElementId,proto3" json:"CandyElementId,omitempty"`
	MushroomElementId     int32  `protobuf:"varint,5,opt,name=MushroomElementId,proto3" json:"MushroomElementId,omitempty"`
	SpawnScale            int32  `protobuf:"varint,6,opt,name=SpawnScale,proto3" json:"SpawnScale,omitempty"`
	MushRoomId            int32  `protobuf:"varint,7,opt,name=MushRoomId,proto3" json:"MushRoomId,omitempty"`
	BroadcastUrl          string `protobuf:"bytes,8,opt,name=broadcast_url,json=broadcastUrl,proto3" json:"broadcast_url,omitempty"`
	ProgressContent       string `protobuf:"bytes,9,opt,name=progress_content,json=progressContent,proto3" json:"progress_content,omitempty"`
	StartTime             int32  `protobuf:"varint,10,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime               int32  `protobuf:"varint,11,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *TreasureHouseThemeInfo) Reset() {
	*x = TreasureHouseThemeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureHouseThemeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureHouseThemeInfo) ProtoMessage() {}

func (x *TreasureHouseThemeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureHouseThemeInfo.ProtoReflect.Descriptor instead.
func (*TreasureHouseThemeInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{58}
}

func (x *TreasureHouseThemeInfo) GetThemeId() int32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMapAssetPath() string {
	if x != nil {
		return x.MapAssetPath
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetCenterSpawnPrefabPath() string {
	if x != nil {
		return x.CenterSpawnPrefabPath
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetCandyElementId() int32 {
	if x != nil {
		return x.CandyElementId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMushroomElementId() int32 {
	if x != nil {
		return x.MushroomElementId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetSpawnScale() int32 {
	if x != nil {
		return x.SpawnScale
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetMushRoomId() int32 {
	if x != nil {
		return x.MushRoomId
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetBroadcastUrl() string {
	if x != nil {
		return x.BroadcastUrl
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetProgressContent() string {
	if x != nil {
		return x.ProgressContent
	}
	return ""
}

func (x *TreasureHouseThemeInfo) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TreasureHouseThemeInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type BossTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId         int32   `protobuf:"varint,1,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	BossFirecracker []int32 `protobuf:"varint,2,rep,packed,name=boss_firecracker,json=bossFirecracker,proto3" json:"boss_firecracker,omitempty"`
	Blood           string  `protobuf:"bytes,3,opt,name=blood,proto3" json:"blood,omitempty"`
	Desc            string  `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	EntityId        int32   `protobuf:"varint,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	AddScore        int32   `protobuf:"varint,6,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
	AddFloating     []int32 `protobuf:"varint,7,rep,packed,name=add_floating,json=addFloating,proto3" json:"add_floating,omitempty"`
	AddFloatingRate []int32 `protobuf:"varint,8,rep,packed,name=add_floating_rate,json=addFloatingRate,proto3" json:"add_floating_rate,omitempty"`
	PropId          int32   `protobuf:"varint,9,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	PropTime        int64   `protobuf:"varint,10,opt,name=prop_time,json=propTime,proto3" json:"prop_time,omitempty"`
	StartTime       int64   `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64   `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type            int32   `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BossTheme) Reset() {
	*x = BossTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossTheme) ProtoMessage() {}

func (x *BossTheme) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossTheme.ProtoReflect.Descriptor instead.
func (*BossTheme) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{59}
}

func (x *BossTheme) GetThemeId() int32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *BossTheme) GetBossFirecracker() []int32 {
	if x != nil {
		return x.BossFirecracker
	}
	return nil
}

func (x *BossTheme) GetBlood() string {
	if x != nil {
		return x.Blood
	}
	return ""
}

func (x *BossTheme) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BossTheme) GetEntityId() int32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *BossTheme) GetAddScore() int32 {
	if x != nil {
		return x.AddScore
	}
	return 0
}

func (x *BossTheme) GetAddFloating() []int32 {
	if x != nil {
		return x.AddFloating
	}
	return nil
}

func (x *BossTheme) GetAddFloatingRate() []int32 {
	if x != nil {
		return x.AddFloatingRate
	}
	return nil
}

func (x *BossTheme) GetPropId() int32 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *BossTheme) GetPropTime() int64 {
	if x != nil {
		return x.PropTime
	}
	return 0
}

func (x *BossTheme) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BossTheme) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BossTheme) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ExtraBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColdSecond int32                      `protobuf:"varint,1,opt,name=cold_second,json=coldSecond,proto3" json:"cold_second,omitempty"`
	Interval   int32                      `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	DailyLimit int32                      `protobuf:"varint,3,opt,name=daily_limit,json=dailyLimit,proto3" json:"daily_limit,omitempty"`
	BuffList   []*ExtraBuff_ExtraBuffInfo `protobuf:"bytes,4,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
}

func (x *ExtraBuff) Reset() {
	*x = ExtraBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraBuff) ProtoMessage() {}

func (x *ExtraBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraBuff.ProtoReflect.Descriptor instead.
func (*ExtraBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{60}
}

func (x *ExtraBuff) GetColdSecond() int32 {
	if x != nil {
		return x.ColdSecond
	}
	return 0
}

func (x *ExtraBuff) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ExtraBuff) GetDailyLimit() int32 {
	if x != nil {
		return x.DailyLimit
	}
	return 0
}

func (x *ExtraBuff) GetBuffList() []*ExtraBuff_ExtraBuffInfo {
	if x != nil {
		return x.BuffList
	}
	return nil
}

type FloatingAiSkinRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId    int32 `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	SpecialSkinRate int32 `protobuf:"varint,2,opt,name=special_skin_rate,json=specialSkinRate,proto3" json:"special_skin_rate,omitempty"`
}

func (x *FloatingAiSkinRateInfo) Reset() {
	*x = FloatingAiSkinRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiSkinRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiSkinRateInfo) ProtoMessage() {}

func (x *FloatingAiSkinRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiSkinRateInfo.ProtoReflect.Descriptor instead.
func (*FloatingAiSkinRateInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{61}
}

func (x *FloatingAiSkinRateInfo) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingAiSkinRateInfo) GetSpecialSkinRate() int32 {
	if x != nil {
		return x.SpecialSkinRate
	}
	return 0
}

type FloatingAiKillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillEffectId int32 `protobuf:"varint,1,opt,name=kill_effect_id,json=killEffectId,proto3" json:"kill_effect_id,omitempty"`
	RandomWeight int32 `protobuf:"varint,2,opt,name=random_weight,json=randomWeight,proto3" json:"random_weight,omitempty"`
	StartTime    int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IllustrateId int32 `protobuf:"varint,5,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
}

func (x *FloatingAiKillEffect) Reset() {
	*x = FloatingAiKillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiKillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiKillEffect) ProtoMessage() {}

func (x *FloatingAiKillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiKillEffect.ProtoReflect.Descriptor instead.
func (*FloatingAiKillEffect) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{62}
}

func (x *FloatingAiKillEffect) GetKillEffectId() int32 {
	if x != nil {
		return x.KillEffectId
	}
	return 0
}

func (x *FloatingAiKillEffect) GetRandomWeight() int32 {
	if x != nil {
		return x.RandomWeight
	}
	return 0
}

func (x *FloatingAiKillEffect) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FloatingAiKillEffect) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FloatingAiKillEffect) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

type FloatingAiKillEffectRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId          int32 `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	SpecialKillEffectRate int32 `protobuf:"varint,2,opt,name=special_kill_effect_rate,json=specialKillEffectRate,proto3" json:"special_kill_effect_rate,omitempty"`
}

func (x *FloatingAiKillEffectRateInfo) Reset() {
	*x = FloatingAiKillEffectRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiKillEffectRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiKillEffectRateInfo) ProtoMessage() {}

func (x *FloatingAiKillEffectRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiKillEffectRateInfo.ProtoReflect.Descriptor instead.
func (*FloatingAiKillEffectRateInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{63}
}

func (x *FloatingAiKillEffectRateInfo) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingAiKillEffectRateInfo) GetSpecialKillEffectRate() int32 {
	if x != nil {
		return x.SpecialKillEffectRate
	}
	return 0
}

type FloatingMainMapTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IllustrateId int32  `protobuf:"varint,1,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
	MapAssetPath string `protobuf:"bytes,2,opt,name=map_asset_path,json=mapAssetPath,proto3" json:"map_asset_path,omitempty"`
}

func (x *FloatingMainMapTheme) Reset() {
	*x = FloatingMainMapTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingMainMapTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingMainMapTheme) ProtoMessage() {}

func (x *FloatingMainMapTheme) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingMainMapTheme.ProtoReflect.Descriptor instead.
func (*FloatingMainMapTheme) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{64}
}

func (x *FloatingMainMapTheme) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

func (x *FloatingMainMapTheme) GetMapAssetPath() string {
	if x != nil {
		return x.MapAssetPath
	}
	return ""
}

type FloatingAiSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinId       int32 `protobuf:"varint,1,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	RandomWeight int32 `protobuf:"varint,2,opt,name=random_weight,json=randomWeight,proto3" json:"random_weight,omitempty"`
	StartTime    int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IllustrateId int32 `protobuf:"varint,5,opt,name=illustrate_id,json=illustrateId,proto3" json:"illustrate_id,omitempty"`
}

func (x *FloatingAiSkin) Reset() {
	*x = FloatingAiSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingAiSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingAiSkin) ProtoMessage() {}

func (x *FloatingAiSkin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingAiSkin.ProtoReflect.Descriptor instead.
func (*FloatingAiSkin) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{65}
}

func (x *FloatingAiSkin) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *FloatingAiSkin) GetRandomWeight() int32 {
	if x != nil {
		return x.RandomWeight
	}
	return 0
}

func (x *FloatingAiSkin) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FloatingAiSkin) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FloatingAiSkin) GetIllustrateId() int32 {
	if x != nil {
		return x.IllustrateId
	}
	return 0
}

//season activity start
type SeasonCaiDan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc   string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Imgurl string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *SeasonCaiDan) Reset() {
	*x = SeasonCaiDan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonCaiDan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonCaiDan) ProtoMessage() {}

func (x *SeasonCaiDan) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonCaiDan.ProtoReflect.Descriptor instead.
func (*SeasonCaiDan) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{66}
}

func (x *SeasonCaiDan) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeasonCaiDan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeasonCaiDan) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SeasonCaiDan) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

type SeasonActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId              int32             `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	StartTime             int64             `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               int64             `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CaidanList            []*SeasonCaiDan   `protobuf:"bytes,4,rep,name=caidan_list,json=caidanList,proto3" json:"caidan_list,omitempty"`
	SeasonHomepageUrl     string            `protobuf:"bytes,5,opt,name=season_homepage_url,json=seasonHomepageUrl,proto3" json:"season_homepage_url,omitempty"`
	PassportUrl           string            `protobuf:"bytes,6,opt,name=passport_url,json=passportUrl,proto3" json:"passport_url,omitempty"`
	TreasureHuntingUrl    string            `protobuf:"bytes,7,opt,name=treasure_hunting_url,json=treasureHuntingUrl,proto3" json:"treasure_hunting_url,omitempty"`
	ChaseSeaUrl           string            `protobuf:"bytes,8,opt,name=chase_sea_url,json=chaseSeaUrl,proto3" json:"chase_sea_url,omitempty"`
	TrueLoveUrl           string            `protobuf:"bytes,9,opt,name=true_love_url,json=trueLoveUrl,proto3" json:"true_love_url,omitempty"`
	GameUrl               string            `protobuf:"bytes,10,opt,name=game_url,json=gameUrl,proto3" json:"game_url,omitempty"`
	MeetupUrl             string            `protobuf:"bytes,11,opt,name=meetup_url,json=meetupUrl,proto3" json:"meetup_url,omitempty"`
	SeasonIllustrationUrl string            `protobuf:"bytes,12,opt,name=season_illustration_url,json=seasonIllustrationUrl,proto3" json:"season_illustration_url,omitempty"`
	RollSkin              []*SeasonRollSkin `protobuf:"bytes,13,rep,name=roll_skin,json=rollSkin,proto3" json:"roll_skin,omitempty"`
	CurrentPvUrl          string            `protobuf:"bytes,14,opt,name=current_pv_url,json=currentPvUrl,proto3" json:"current_pv_url,omitempty"`
	ReviewPvUrl           string            `protobuf:"bytes,15,opt,name=review_pv_url,json=reviewPvUrl,proto3" json:"review_pv_url,omitempty"`
}

func (x *SeasonActivity) Reset() {
	*x = SeasonActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonActivity) ProtoMessage() {}

func (x *SeasonActivity) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonActivity.ProtoReflect.Descriptor instead.
func (*SeasonActivity) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{67}
}

func (x *SeasonActivity) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeasonActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SeasonActivity) GetCaidanList() []*SeasonCaiDan {
	if x != nil {
		return x.CaidanList
	}
	return nil
}

func (x *SeasonActivity) GetSeasonHomepageUrl() string {
	if x != nil {
		return x.SeasonHomepageUrl
	}
	return ""
}

func (x *SeasonActivity) GetPassportUrl() string {
	if x != nil {
		return x.PassportUrl
	}
	return ""
}

func (x *SeasonActivity) GetTreasureHuntingUrl() string {
	if x != nil {
		return x.TreasureHuntingUrl
	}
	return ""
}

func (x *SeasonActivity) GetChaseSeaUrl() string {
	if x != nil {
		return x.ChaseSeaUrl
	}
	return ""
}

func (x *SeasonActivity) GetTrueLoveUrl() string {
	if x != nil {
		return x.TrueLoveUrl
	}
	return ""
}

func (x *SeasonActivity) GetGameUrl() string {
	if x != nil {
		return x.GameUrl
	}
	return ""
}

func (x *SeasonActivity) GetMeetupUrl() string {
	if x != nil {
		return x.MeetupUrl
	}
	return ""
}

func (x *SeasonActivity) GetSeasonIllustrationUrl() string {
	if x != nil {
		return x.SeasonIllustrationUrl
	}
	return ""
}

func (x *SeasonActivity) GetRollSkin() []*SeasonRollSkin {
	if x != nil {
		return x.RollSkin
	}
	return nil
}

func (x *SeasonActivity) GetCurrentPvUrl() string {
	if x != nil {
		return x.CurrentPvUrl
	}
	return ""
}

func (x *SeasonActivity) GetReviewPvUrl() string {
	if x != nil {
		return x.ReviewPvUrl
	}
	return ""
}

type SeasonRollSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinId     int32 `protobuf:"varint,1,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	UnlockTime int64 `protobuf:"varint,2,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (x *SeasonRollSkin) Reset() {
	*x = SeasonRollSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonRollSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonRollSkin) ProtoMessage() {}

func (x *SeasonRollSkin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonRollSkin.ProtoReflect.Descriptor instead.
func (*SeasonRollSkin) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{68}
}

func (x *SeasonRollSkin) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *SeasonRollSkin) GetUnlockTime() int64 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

// 照片墙 Start
type PhotoWallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity      *PhotoWallActivityConfig `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
	PhotoWallText string                   `protobuf:"bytes,2,opt,name=photo_wall_text,json=photoWallText,proto3" json:"photo_wall_text,omitempty"`
}

func (x *PhotoWallConfig) Reset() {
	*x = PhotoWallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWallConfig) ProtoMessage() {}

func (x *PhotoWallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWallConfig.ProtoReflect.Descriptor instead.
func (*PhotoWallConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{69}
}

func (x *PhotoWallConfig) GetActivity() *PhotoWallActivityConfig {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *PhotoWallConfig) GetPhotoWallText() string {
	if x != nil {
		return x.PhotoWallText
	}
	return ""
}

type PhotoWallActivityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ActivityText    string                 `protobuf:"bytes,3,opt,name=activity_text,json=activityText,proto3" json:"activity_text,omitempty"`
	MediaUrl        string                 `protobuf:"bytes,4,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	UpgradeText     string                 `protobuf:"bytes,5,opt,name=upgrade_text,json=upgradeText,proto3" json:"upgrade_text,omitempty"`
	ResetText       string                 `protobuf:"bytes,6,opt,name=reset_text,json=resetText,proto3" json:"reset_text,omitempty"`
	TitleUrl        string                 `protobuf:"bytes,7,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	StartTime       int64                  `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64                  `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LastestEndTime  int64                  `protobuf:"varint,10,opt,name=lastest_end_time,json=lastestEndTime,proto3" json:"lastest_end_time,omitempty"`
	GiftId          int32                  `protobuf:"varint,11,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	ExpName         string                 `protobuf:"bytes,12,opt,name=exp_name,json=expName,proto3" json:"exp_name,omitempty"`
	LikeRewardLimit int32                  `protobuf:"varint,13,opt,name=like_reward_limit,json=likeRewardLimit,proto3" json:"like_reward_limit,omitempty"`
	IconConfig      []*PhotoWallIconConfig `protobuf:"bytes,14,rep,name=icon_config,json=iconConfig,proto3" json:"icon_config,omitempty"`
	Levels          []*PhotoWallLevelsItem `protobuf:"bytes,15,rep,name=levels,proto3" json:"levels,omitempty"`
	Guardian        *PhotoWallGuardian     `protobuf:"bytes,16,opt,name=guardian,proto3" json:"guardian,omitempty"`
}

func (x *PhotoWallActivityConfig) Reset() {
	*x = PhotoWallActivityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWallActivityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWallActivityConfig) ProtoMessage() {}

func (x *PhotoWallActivityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWallActivityConfig.ProtoReflect.Descriptor instead.
func (*PhotoWallActivityConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{70}
}

func (x *PhotoWallActivityConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhotoWallActivityConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhotoWallActivityConfig) GetActivityText() string {
	if x != nil {
		return x.ActivityText
	}
	return ""
}

func (x *PhotoWallActivityConfig) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *PhotoWallActivityConfig) GetUpgradeText() string {
	if x != nil {
		return x.UpgradeText
	}
	return ""
}

func (x *PhotoWallActivityConfig) GetResetText() string {
	if x != nil {
		return x.ResetText
	}
	return ""
}

func (x *PhotoWallActivityConfig) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

func (x *PhotoWallActivityConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PhotoWallActivityConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PhotoWallActivityConfig) GetLastestEndTime() int64 {
	if x != nil {
		return x.LastestEndTime
	}
	return 0
}

func (x *PhotoWallActivityConfig) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *PhotoWallActivityConfig) GetExpName() string {
	if x != nil {
		return x.ExpName
	}
	return ""
}

func (x *PhotoWallActivityConfig) GetLikeRewardLimit() int32 {
	if x != nil {
		return x.LikeRewardLimit
	}
	return 0
}

func (x *PhotoWallActivityConfig) GetIconConfig() []*PhotoWallIconConfig {
	if x != nil {
		return x.IconConfig
	}
	return nil
}

func (x *PhotoWallActivityConfig) GetLevels() []*PhotoWallLevelsItem {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *PhotoWallActivityConfig) GetGuardian() *PhotoWallGuardian {
	if x != nil {
		return x.Guardian
	}
	return nil
}

type PhotoWallIconConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BtnUrl    string `protobuf:"bytes,3,opt,name=btn_url,json=btnUrl,proto3" json:"btn_url,omitempty"`
	ImgUrl    string `protobuf:"bytes,4,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
}

func (x *PhotoWallIconConfig) Reset() {
	*x = PhotoWallIconConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWallIconConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWallIconConfig) ProtoMessage() {}

func (x *PhotoWallIconConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWallIconConfig.ProtoReflect.Descriptor instead.
func (*PhotoWallIconConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{71}
}

func (x *PhotoWallIconConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PhotoWallIconConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PhotoWallIconConfig) GetBtnUrl() string {
	if x != nil {
		return x.BtnUrl
	}
	return ""
}

func (x *PhotoWallIconConfig) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

type PhotoWallLevelsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	ImgUrl         string `protobuf:"bytes,2,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
	LikeRewardName string `protobuf:"bytes,3,opt,name=like_reward_name,json=likeRewardName,proto3" json:"like_reward_name,omitempty"`
	AnimType       int32  `protobuf:"varint,4,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl        string `protobuf:"bytes,5,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	ChestId        int32  `protobuf:"varint,6,opt,name=chest_id,json=chestId,proto3" json:"chest_id,omitempty"`
	Exp            int32  `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (x *PhotoWallLevelsItem) Reset() {
	*x = PhotoWallLevelsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWallLevelsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWallLevelsItem) ProtoMessage() {}

func (x *PhotoWallLevelsItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWallLevelsItem.ProtoReflect.Descriptor instead.
func (*PhotoWallLevelsItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{72}
}

func (x *PhotoWallLevelsItem) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PhotoWallLevelsItem) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *PhotoWallLevelsItem) GetLikeRewardName() string {
	if x != nil {
		return x.LikeRewardName
	}
	return ""
}

func (x *PhotoWallLevelsItem) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *PhotoWallLevelsItem) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *PhotoWallLevelsItem) GetChestId() int32 {
	if x != nil {
		return x.ChestId
	}
	return 0
}

func (x *PhotoWallLevelsItem) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

type PhotoWallGuardian struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinueSec  int32  `protobuf:"varint,1,opt,name=continue_sec,json=continueSec,proto3" json:"continue_sec,omitempty"`
	StartTime    int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ContinueImg  string `protobuf:"bytes,3,opt,name=continue_img,json=continueImg,proto3" json:"continue_img,omitempty"`
	AnimType     int32  `protobuf:"varint,4,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl      string `protobuf:"bytes,5,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	MiddleItemId int32  `protobuf:"varint,6,opt,name=middle_item_id,json=middleItemId,proto3" json:"middle_item_id,omitempty"`
}

func (x *PhotoWallGuardian) Reset() {
	*x = PhotoWallGuardian{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWallGuardian) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWallGuardian) ProtoMessage() {}

func (x *PhotoWallGuardian) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWallGuardian.ProtoReflect.Descriptor instead.
func (*PhotoWallGuardian) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{73}
}

func (x *PhotoWallGuardian) GetContinueSec() int32 {
	if x != nil {
		return x.ContinueSec
	}
	return 0
}

func (x *PhotoWallGuardian) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PhotoWallGuardian) GetContinueImg() string {
	if x != nil {
		return x.ContinueImg
	}
	return ""
}

func (x *PhotoWallGuardian) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *PhotoWallGuardian) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *PhotoWallGuardian) GetMiddleItemId() int32 {
	if x != nil {
		return x.MiddleItemId
	}
	return 0
}

type GoatEndlessChest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GoatEndlessChest) Reset() {
	*x = GoatEndlessChest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoatEndlessChest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoatEndlessChest) ProtoMessage() {}

func (x *GoatEndlessChest) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoatEndlessChest.ProtoReflect.Descriptor instead.
func (*GoatEndlessChest) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{74}
}

func (x *GoatEndlessChest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GoatEndlessChest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type EndlessThroughWall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64    `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64    `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	WhiteList []string `protobuf:"bytes,3,rep,name=white_list,json=whiteList,proto3" json:"white_list,omitempty"`
}

func (x *EndlessThroughWall) Reset() {
	*x = EndlessThroughWall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessThroughWall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessThroughWall) ProtoMessage() {}

func (x *EndlessThroughWall) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessThroughWall.ProtoReflect.Descriptor instead.
func (*EndlessThroughWall) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{75}
}

func (x *EndlessThroughWall) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessThroughWall) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EndlessThroughWall) GetWhiteList() []string {
	if x != nil {
		return x.WhiteList
	}
	return nil
}

// super_show start
type SuperShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStr string `protobuf:"bytes,1,opt,name=start_time_str,json=startTimeStr,proto3" json:"start_time_str,omitempty"`
	EndTimeStr   string `protobuf:"bytes,2,opt,name=end_time_str,json=endTimeStr,proto3" json:"end_time_str,omitempty"`
	StartTime    int64  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SkinId       int64  `protobuf:"varint,5,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	AnimType     int64  `protobuf:"varint,6,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl      string `protobuf:"bytes,7,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
}

func (x *SuperShow) Reset() {
	*x = SuperShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperShow) ProtoMessage() {}

func (x *SuperShow) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperShow.ProtoReflect.Descriptor instead.
func (*SuperShow) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{76}
}

func (x *SuperShow) GetStartTimeStr() string {
	if x != nil {
		return x.StartTimeStr
	}
	return ""
}

func (x *SuperShow) GetEndTimeStr() string {
	if x != nil {
		return x.EndTimeStr
	}
	return ""
}

func (x *SuperShow) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SuperShow) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SuperShow) GetSkinId() int64 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *SuperShow) GetAnimType() int64 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *SuperShow) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

// 贪吃蛇首充 Start
type FirstChargeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId          string                         `protobuf:"bytes,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	StartTime      int64                          `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64                          `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SupportVersion string                         `protobuf:"bytes,4,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"`
	UnlockMoney    int32                          `protobuf:"varint,5,opt,name=unlock_money,json=unlockMoney,proto3" json:"unlock_money,omitempty"`
	UnlockMoneyUrl string                         `protobuf:"bytes,6,opt,name=unlock_money_url,json=unlockMoneyUrl,proto3" json:"unlock_money_url,omitempty"`
	SkinList       []*FirstChargeSkinRewardInfo   `protobuf:"bytes,7,rep,name=skin_list,json=skinList,proto3" json:"skin_list,omitempty"`
	UnlockRewards  []*FirstChargeUnlockRewardInfo `protobuf:"bytes,8,rep,name=unlock_rewards,json=unlockRewards,proto3" json:"unlock_rewards,omitempty"`
}

func (x *FirstChargeConfig) Reset() {
	*x = FirstChargeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstChargeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstChargeConfig) ProtoMessage() {}

func (x *FirstChargeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstChargeConfig.ProtoReflect.Descriptor instead.
func (*FirstChargeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{77}
}

func (x *FirstChargeConfig) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *FirstChargeConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FirstChargeConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FirstChargeConfig) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

func (x *FirstChargeConfig) GetUnlockMoney() int32 {
	if x != nil {
		return x.UnlockMoney
	}
	return 0
}

func (x *FirstChargeConfig) GetUnlockMoneyUrl() string {
	if x != nil {
		return x.UnlockMoneyUrl
	}
	return ""
}

func (x *FirstChargeConfig) GetSkinList() []*FirstChargeSkinRewardInfo {
	if x != nil {
		return x.SkinList
	}
	return nil
}

func (x *FirstChargeConfig) GetUnlockRewards() []*FirstChargeUnlockRewardInfo {
	if x != nil {
		return x.UnlockRewards
	}
	return nil
}

type FirstChargeSkinRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int32  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Imgurl string `protobuf:"bytes,2,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FirstChargeSkinRewardInfo) Reset() {
	*x = FirstChargeSkinRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstChargeSkinRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstChargeSkinRewardInfo) ProtoMessage() {}

func (x *FirstChargeSkinRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstChargeSkinRewardInfo.ProtoReflect.Descriptor instead.
func (*FirstChargeSkinRewardInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{78}
}

func (x *FirstChargeSkinRewardInfo) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *FirstChargeSkinRewardInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *FirstChargeSkinRewardInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FirstChargeUnlockRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day     int32          `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Rewards []*CRewardItem `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *FirstChargeUnlockRewardInfo) Reset() {
	*x = FirstChargeUnlockRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstChargeUnlockRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstChargeUnlockRewardInfo) ProtoMessage() {}

func (x *FirstChargeUnlockRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstChargeUnlockRewardInfo.ProtoReflect.Descriptor instead.
func (*FirstChargeUnlockRewardInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{79}
}

func (x *FirstChargeUnlockRewardInfo) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *FirstChargeUnlockRewardInfo) GetRewards() []*CRewardItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GiftWallConfig_NamePlate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Imgurl        string `protobuf:"bytes,2,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	NameplateType int32  `protobuf:"varint,3,opt,name=nameplate_type,json=nameplateType,proto3" json:"nameplate_type,omitempty"` // 1-集星周铭牌；2-累计集星铭牌；3-点亮铭牌
	NeedStar      int32  `protobuf:"varint,4,opt,name=need_star,json=needStar,proto3" json:"need_star,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GiftWallConfig_NamePlate) Reset() {
	*x = GiftWallConfig_NamePlate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftWallConfig_NamePlate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftWallConfig_NamePlate) ProtoMessage() {}

func (x *GiftWallConfig_NamePlate) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftWallConfig_NamePlate.ProtoReflect.Descriptor instead.
func (*GiftWallConfig_NamePlate) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GiftWallConfig_NamePlate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *GiftWallConfig_NamePlate) GetNameplateType() int32 {
	if x != nil {
		return x.NameplateType
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetNeedStar() int32 {
	if x != nil {
		return x.NeedStar
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExtraBuff_ExtraBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Rate  int32  `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Tips  string `protobuf:"bytes,5,opt,name=tips,proto3" json:"tips,omitempty"`
}

func (x *ExtraBuff_ExtraBuffInfo) Reset() {
	*x = ExtraBuff_ExtraBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraBuff_ExtraBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraBuff_ExtraBuffInfo) ProtoMessage() {}

func (x *ExtraBuff_ExtraBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraBuff_ExtraBuffInfo.ProtoReflect.Descriptor instead.
func (*ExtraBuff_ExtraBuffInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{60, 0}
}

func (x *ExtraBuff_ExtraBuffInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtraBuff_ExtraBuffInfo) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *ExtraBuff_ExtraBuffInfo) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

var File_snakecommon_profile_config_proto protoreflect.FileDescriptor

var file_snakecommon_profile_config_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a,
	0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x53, 0x4b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x56, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0a,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x22, 0xf3, 0x02, 0x0a, 0x08, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x45, 0x78, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x63,
	0x6f, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x65,
	0x65, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x77, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x6b, 0x0a, 0x0c, 0x56,
	0x69, 0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x22, 0x87, 0x03, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x11, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0xed,
	0x01, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x5f,
	0x63, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x70, 0x43, 0x64, 0x53, 0x65, 0x63, 0x22, 0xa9,
	0x02, 0x0a, 0x0a, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x22, 0x93, 0x04, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x69,
	0x73, 0x68, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x67, 0x69,
	0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xd9, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x40, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x22, 0xac,
	0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0x92, 0x02,
	0x0a, 0x0e, 0x47, 0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x4c, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x8b, 0x01, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xf3, 0x04, 0x0a, 0x08, 0x48, 0x61, 0x74, 0x63, 0x68, 0x45, 0x67, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x61, 0x64, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x34,
	0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x67, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x67, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x45, 0x67, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x65, 0x74, 0x75, 0x70, 0x56, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x2e, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x56, 0x33, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x5a, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0e,
	0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x68,
	0x6f, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x74, 0x68,
	0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x22, 0x88, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x65, 0x74,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x39, 0x0a,
	0x09, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x08,
	0x64, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x66,
	0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x42, 0x75, 0x66, 0x66, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x62, 0x75, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d,
	0x73, 0x67, 0x22, 0x51, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x03, 0x0a, 0x10, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x12, 0x3f,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6d, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x6d, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x42, 0x75, 0x66,
	0x66, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x17, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xc2, 0x03, 0x0a, 0x15, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6d, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x6d, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xc0, 0x05, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x43, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x47, 0x0a, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x64, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x5c, 0x0a, 0x16, 0x50, 0x61, 0x73, 0x73, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6a,
	0x75, 0x6d, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75,
	0x6d, 0x70, 0x75, 0x72, 0x6c, 0x22, 0xce, 0x07, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x64, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x65, 0x78,
	0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x45, 0x78, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x67,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x2f, 0x0a, 0x14, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x6e, 0x6f,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x74, 0x6d, 0x70, 0x6c, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x54, 0x6d, 0x70, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x3f,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0d, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x63,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x64, 0x65, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x44,
	0x65, 0x76, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x0b,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a,
	0x0b, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x22, 0xeb, 0x02, 0x0a, 0x16,
	0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x66, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x69,
	0x67, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x75, 0x78, 0x75, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6c, 0x75, 0x78,
	0x75, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xaf, 0x03, 0x0a, 0x15, 0x50, 0x61,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0e,
	0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38,
	0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x38, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x45, 0x78,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x61, 0x79, 0x45, 0x78, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x74, 0x6e, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x45, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x09, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x8c, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x12, 0x2b,
	0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x22, 0xc4,
	0x02, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xaa, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65,
	0x64, 0x56, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x62, 0x6f, 0x62, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x61,
	0x62, 0x6f, 0x62, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x54, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x14,
	0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x54, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x69, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x49, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x0f, 0x53,
	0x6b, 0x69, 0x6e, 0x55, 0x67, 0x63, 0x56, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x0b, 0x6b, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0d, 0x62, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x62, 0x67,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x75, 0x69,
	0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x55, 0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x70, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77,
	0x4f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x55,
	0x67, 0x63, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x67, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x67, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0xbc,
	0x01, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73,
	0x63, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01,
	0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77,
	0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x67, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x38, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x79, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x69,
	0x66, 0x74, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0a,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x69, 0x66, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a,
	0x13, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0xe4, 0x07, 0x0a, 0x11, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x32,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x69, 0x0a, 0x1a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x32, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x12, 0x42, 0x0a, 0x0f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x62, 0x6f, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x42, 0x75, 0x66, 0x66, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x12,
	0x34, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x06, 0x61,
	0x69, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x61, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d,
	0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x69, 0x4b,
	0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e,
	0x4d, 0x61, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61,
	0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x22, 0x36, 0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1f, 0x49, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x5a, 0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd3, 0x02, 0x0a,
	0x15, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x22, 0x82, 0x06, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x73, 0x52, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x4e,
	0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x77, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x16, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x4d, 0x61, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x34, 0x0a, 0x15, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x43, 0x61, 0x6e, 0x64, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x75, 0x73, 0x68, 0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4d, 0x75, 0x73, 0x68, 0x72,
	0x6f, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x70, 0x61, 0x77, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x75, 0x73, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4d, 0x75, 0x73, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x09, 0x42, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x72,
	0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x9f, 0x02, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x71,
	0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70,
	0x73, 0x22, 0x69, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53,
	0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x14, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22,
	0x7c, 0x0a, 0x1c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a,
	0x14, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x70, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xad, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x53,
	0x6b, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x69, 0x44, 0x61, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x22, 0xe6, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x61,
	0x69, 0x64, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x69, 0x44, 0x61, 0x6e, 0x52, 0x0a, 0x63, 0x61, 0x69, 0x64,
	0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x55, 0x72, 0x6c, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x65, 0x4c, 0x6f, 0x76, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x76, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x76, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x70, 0x76, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x76, 0x55, 0x72, 0x6c, 0x22, 0x4a, 0x0a, 0x0e, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x0f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x65,
	0x78, 0x74, 0x22, 0xdb, 0x04, 0x0a, 0x17, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x57, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x47, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x08, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x22, 0x81, 0x01, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x49, 0x63,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x74, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x74, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x22, 0xd3, 0x01, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x53, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x69,
	0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x10, 0x47, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x6d, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xde, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72,
	0x6c, 0x22, 0xf0, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x43,
	0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x22, 0x60, 0x0a, 0x19, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x1b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_snakecommon_profile_config_proto_rawDescOnce sync.Once
	file_snakecommon_profile_config_proto_rawDescData = file_snakecommon_profile_config_proto_rawDesc
)

func file_snakecommon_profile_config_proto_rawDescGZIP() []byte {
	file_snakecommon_profile_config_proto_rawDescOnce.Do(func() {
		file_snakecommon_profile_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecommon_profile_config_proto_rawDescData)
	})
	return file_snakecommon_profile_config_proto_rawDescData
}

var file_snakecommon_profile_config_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_snakecommon_profile_config_proto_goTypes = []interface{}{
	(*ChargeVipConfig)(nil),                 // 0: snakecommon.ChargeVipConfig
	(*VipLevel)(nil),                        // 1: snakecommon.VipLevel
	(*VipPrivilege)(nil),                    // 2: snakecommon.VipPrivilege
	(*MonthCardConfig)(nil),                 // 3: snakecommon.MonthCardConfig
	(*MonthCardInfo)(nil),                   // 4: snakecommon.MonthCardInfo
	(*MonthCardPackItem)(nil),               // 5: snakecommon.MonthCardPackItem
	(*ShowBadgeConfig)(nil),                 // 6: snakecommon.ShowBadgeConfig
	(*BadgeTitle)(nil),                      // 7: snakecommon.BadgeTitle
	(*CharmTourConfig)(nil),                 // 8: snakecommon.CharmTourConfig
	(*CharmTourTitleItem)(nil),              // 9: snakecommon.CharmTourTitleItem
	(*CharmTourLevelItem)(nil),              // 10: snakecommon.CharmTourLevelItem
	(*NameplateItem)(nil),                   // 11: snakecommon.NameplateItem
	(*GiftWallConfig)(nil),                  // 12: snakecommon.GiftWallConfig
	(*HatchEgg)(nil),                        // 13: snakecommon.HatchEgg
	(*EggLevelInfo)(nil),                    // 14: snakecommon.EggLevelInfo
	(*NewMeetupV3Config)(nil),               // 15: snakecommon.NewMeetupV3Config
	(*MeetupShowItem)(nil),                  // 16: snakecommon.MeetupShowItem
	(*MeetupConfigItem)(nil),                // 17: snakecommon.MeetupConfigItem
	(*SingleDayReward)(nil),                 // 18: snakecommon.SingleDayReward
	(*SingleRewardItem)(nil),                // 19: snakecommon.SingleRewardItem
	(*MeetupBuffItem)(nil),                  // 20: snakecommon.MeetupBuffItem
	(*EndlessGameRewardConfig)(nil),         // 21: snakecommon.EndlessGameRewardConfig
	(*EndlessGameRewardItem)(nil),           // 22: snakecommon.EndlessGameRewardItem
	(*PassCheckV2)(nil),                     // 23: snakecommon.PassCheckV2
	(*PassCheckDailyWelfare)(nil),           // 24: snakecommon.PassCheckDailyWelfare
	(*PassCheckBreakReward)(nil),            // 25: snakecommon.PassCheckBreakReward
	(*PassSeasonNotifyConfig)(nil),          // 26: snakecommon.PassSeasonNotifyConfig
	(*PassCommonConfig)(nil),                // 27: snakecommon.PassCommonConfig
	(*PassRewardConfig)(nil),                // 28: snakecommon.PassRewardConfig
	(*PassCheckIcon)(nil),                   // 29: snakecommon.PassCheckIcon
	(*PassCheckRankItem)(nil),               // 30: snakecommon.PassCheckRankItem
	(*PassCheckRewardPreview)(nil),          // 31: snakecommon.PassCheckRewardPreview
	(*PassCheckWindowReward)(nil),           // 32: snakecommon.PassCheckWindowReward
	(*PassTaskConfig)(nil),                  // 33: snakecommon.PassTaskConfig
	(*DailyTask)(nil),                       // 34: snakecommon.DailyTask
	(*WeeklyTask)(nil),                      // 35: snakecommon.WeeklyTask
	(*SeasonTask)(nil),                      // 36: snakecommon.SeasonTask
	(*GradeTask)(nil),                       // 37: snakecommon.GradeTask
	(*PassTaskModel)(nil),                   // 38: snakecommon.PassTaskModel
	(*PassStoreConfig)(nil),                 // 39: snakecommon.PassStoreConfig
	(*ExchangeStore)(nil),                   // 40: snakecommon.ExchangeStore
	(*PassTotalRankReward)(nil),             // 41: snakecommon.PassTotalRankReward
	(*TurntableConfig)(nil),                 // 42: snakecommon.TurntableConfig
	(*TurntableRewardTable)(nil),            // 43: snakecommon.TurntableRewardTable
	(*TurntableSubConfig)(nil),              // 44: snakecommon.TurntableSubConfig
	(*SkinUgcV2Config)(nil),                 // 45: snakecommon.SkinUgcV2Config
	(*UgcTopic)(nil),                        // 46: snakecommon.UgcTopic
	(*ShowIllustrationConfig)(nil),          // 47: snakecommon.ShowIllustrationConfig
	(*ShowIllustrationTitle)(nil),           // 48: snakecommon.ShowIllustrationTitle
	(*ShowIllustrationSeason)(nil),          // 49: snakecommon.ShowIllustrationSeason
	(*SeasonResource)(nil),                  // 50: snakecommon.SeasonResource
	(*GiftIllustrationConfig)(nil),          // 51: snakecommon.GiftIllustrationConfig
	(*GiftTitleItemConfig)(nil),             // 52: snakecommon.GiftTitleItemConfig
	(*EndlessFloatingV2)(nil),               // 53: snakecommon.EndlessFloatingV2
	(*IllustrateConfig)(nil),                // 54: snakecommon.IllustrateConfig
	(*IllustrateFloatingRefreshConfig)(nil), // 55: snakecommon.IllustrateFloatingRefreshConfig
	(*FloatingRefreshConfig)(nil),           // 56: snakecommon.FloatingRefreshConfig
	(*FloatingInfo)(nil),                    // 57: snakecommon.FloatingInfo
	(*TreasureHouseThemeInfo)(nil),          // 58: snakecommon.TreasureHouseThemeInfo
	(*BossTheme)(nil),                       // 59: snakecommon.BossTheme
	(*ExtraBuff)(nil),                       // 60: snakecommon.ExtraBuff
	(*FloatingAiSkinRateInfo)(nil),          // 61: snakecommon.FloatingAiSkinRateInfo
	(*FloatingAiKillEffect)(nil),            // 62: snakecommon.FloatingAiKillEffect
	(*FloatingAiKillEffectRateInfo)(nil),    // 63: snakecommon.FloatingAiKillEffectRateInfo
	(*FloatingMainMapTheme)(nil),            // 64: snakecommon.FloatingMainMapTheme
	(*FloatingAiSkin)(nil),                  // 65: snakecommon.FloatingAiSkin
	(*SeasonCaiDan)(nil),                    // 66: snakecommon.SeasonCaiDan
	(*SeasonActivity)(nil),                  // 67: snakecommon.SeasonActivity
	(*SeasonRollSkin)(nil),                  // 68: snakecommon.SeasonRollSkin
	(*PhotoWallConfig)(nil),                 // 69: snakecommon.PhotoWallConfig
	(*PhotoWallActivityConfig)(nil),         // 70: snakecommon.PhotoWallActivityConfig
	(*PhotoWallIconConfig)(nil),             // 71: snakecommon.PhotoWallIconConfig
	(*PhotoWallLevelsItem)(nil),             // 72: snakecommon.PhotoWallLevelsItem
	(*PhotoWallGuardian)(nil),               // 73: snakecommon.PhotoWallGuardian
	(*GoatEndlessChest)(nil),                // 74: snakecommon.GoatEndlessChest
	(*EndlessThroughWall)(nil),              // 75: snakecommon.EndlessThroughWall
	(*SuperShow)(nil),                       // 76: snakecommon.SuperShow
	(*FirstChargeConfig)(nil),               // 77: snakecommon.FirstChargeConfig
	(*FirstChargeSkinRewardInfo)(nil),       // 78: snakecommon.FirstChargeSkinRewardInfo
	(*FirstChargeUnlockRewardInfo)(nil),     // 79: snakecommon.FirstChargeUnlockRewardInfo
	(*GiftWallConfig_NamePlate)(nil),        // 80: snakecommon.GiftWallConfig.NamePlate
	nil,                                     // 81: snakecommon.NewMeetupV3Config.ShowConfigEntry
	(*ExtraBuff_ExtraBuffInfo)(nil),         // 82: snakecommon.ExtraBuff.ExtraBuffInfo
	(*config.RewardConfig)(nil),             // 83: SnakeMain.Config.RewardConfig
	(*CConvert)(nil),                        // 84: snakecommon.CConvert
	(*CPriceInfo)(nil),                      // 85: snakecommon.CPriceInfo
	(*config.PackModel)(nil),                // 86: SnakeMain.Config.PackModel
	(*CRewardItem)(nil),                     // 87: snakecommon.CRewardItem
}
var file_snakecommon_profile_config_proto_depIdxs = []int32{
	1,  // 0: snakecommon.ChargeVipConfig.level_list:type_name -> snakecommon.VipLevel
	2,  // 1: snakecommon.VipLevel.privilege:type_name -> snakecommon.VipPrivilege
	83, // 2: snakecommon.VipLevel.reward_list:type_name -> SnakeMain.Config.RewardConfig
	83, // 3: snakecommon.VipLevel.week_reward:type_name -> SnakeMain.Config.RewardConfig
	4,  // 4: snakecommon.MonthCardConfig.little_month_card:type_name -> snakecommon.MonthCardInfo
	4,  // 5: snakecommon.MonthCardConfig.super_month_card:type_name -> snakecommon.MonthCardInfo
	83, // 6: snakecommon.MonthCardInfo.daily_reward:type_name -> SnakeMain.Config.RewardConfig
	5,  // 7: snakecommon.MonthCardInfo.pack_list:type_name -> snakecommon.MonthCardPackItem
	7,  // 8: snakecommon.ShowBadgeConfig.title_list:type_name -> snakecommon.BadgeTitle
	83, // 9: snakecommon.BadgeTitle.rewards:type_name -> SnakeMain.Config.RewardConfig
	9,  // 10: snakecommon.CharmTourConfig.charm_title_list:type_name -> snakecommon.CharmTourTitleItem
	10, // 11: snakecommon.CharmTourConfig.charm_level_list:type_name -> snakecommon.CharmTourLevelItem
	11, // 12: snakecommon.CharmTourConfig.nameplate_list:type_name -> snakecommon.NameplateItem
	83, // 13: snakecommon.CharmTourTitleItem.rewards:type_name -> SnakeMain.Config.RewardConfig
	80, // 14: snakecommon.GiftWallConfig.nameplate_list:type_name -> snakecommon.GiftWallConfig.NamePlate
	83, // 15: snakecommon.HatchEgg.reward_review_list:type_name -> SnakeMain.Config.RewardConfig
	14, // 16: snakecommon.HatchEgg.egg_list:type_name -> snakecommon.EggLevelInfo
	83, // 17: snakecommon.EggLevelInfo.reward_list:type_name -> SnakeMain.Config.RewardConfig
	17, // 18: snakecommon.NewMeetupV3Config.list:type_name -> snakecommon.MeetupConfigItem
	81, // 19: snakecommon.NewMeetupV3Config.show_config:type_name -> snakecommon.NewMeetupV3Config.ShowConfigEntry
	18, // 20: snakecommon.MeetupConfigItem.days_list:type_name -> snakecommon.SingleDayReward
	20, // 21: snakecommon.MeetupConfigItem.buff:type_name -> snakecommon.MeetupBuffItem
	19, // 22: snakecommon.SingleDayReward.length_list:type_name -> snakecommon.SingleRewardItem
	83, // 23: snakecommon.SingleRewardItem.reward_list:type_name -> SnakeMain.Config.RewardConfig
	83, // 24: snakecommon.SingleRewardItem.extra_reward:type_name -> SnakeMain.Config.RewardConfig
	83, // 25: snakecommon.MeetupBuffItem.reward_list:type_name -> SnakeMain.Config.RewardConfig
	22, // 26: snakecommon.EndlessGameRewardConfig.list:type_name -> snakecommon.EndlessGameRewardItem
	83, // 27: snakecommon.EndlessGameRewardItem.reward:type_name -> SnakeMain.Config.RewardConfig
	27, // 28: snakecommon.PassCheckV2.common:type_name -> snakecommon.PassCommonConfig
	28, // 29: snakecommon.PassCheckV2.reward_config:type_name -> snakecommon.PassRewardConfig
	33, // 30: snakecommon.PassCheckV2.task_config:type_name -> snakecommon.PassTaskConfig
	39, // 31: snakecommon.PassCheckV2.store_config:type_name -> snakecommon.PassStoreConfig
	41, // 32: snakecommon.PassCheckV2.total_reward:type_name -> snakecommon.PassTotalRankReward
	26, // 33: snakecommon.PassCheckV2.season_notify:type_name -> snakecommon.PassSeasonNotifyConfig
	24, // 34: snakecommon.PassCheckV2.daily_welfare:type_name -> snakecommon.PassCheckDailyWelfare
	25, // 35: snakecommon.PassCheckV2.break_reward:type_name -> snakecommon.PassCheckBreakReward
	83, // 36: snakecommon.PassCheckDailyWelfare.reward:type_name -> SnakeMain.Config.RewardConfig
	83, // 37: snakecommon.PassCheckBreakReward.reward:type_name -> SnakeMain.Config.RewardConfig
	30, // 38: snakecommon.PassRewardConfig.reward_list:type_name -> snakecommon.PassCheckRankItem
	31, // 39: snakecommon.PassRewardConfig.reward_preview:type_name -> snakecommon.PassCheckRewardPreview
	83, // 40: snakecommon.PassRewardConfig.reward_sort:type_name -> SnakeMain.Config.RewardConfig
	29, // 41: snakecommon.PassRewardConfig.icon_list:type_name -> snakecommon.PassCheckIcon
	83, // 42: snakecommon.PassCheckRankItem.free_reward:type_name -> SnakeMain.Config.RewardConfig
	83, // 43: snakecommon.PassCheckRankItem.high_reward:type_name -> SnakeMain.Config.RewardConfig
	83, // 44: snakecommon.PassCheckRewardPreview.free_reward:type_name -> SnakeMain.Config.RewardConfig
	83, // 45: snakecommon.PassCheckRewardPreview.high_reward:type_name -> SnakeMain.Config.RewardConfig
	32, // 46: snakecommon.PassCheckRewardPreview.window_reward:type_name -> snakecommon.PassCheckWindowReward
	83, // 47: snakecommon.PassCheckRewardPreview.honor_reward:type_name -> SnakeMain.Config.RewardConfig
	83, // 48: snakecommon.PassCheckRewardPreview.luxury_reward:type_name -> SnakeMain.Config.RewardConfig
	84, // 49: snakecommon.PassCheckWindowReward.convert:type_name -> snakecommon.CConvert
	36, // 50: snakecommon.PassTaskConfig.season_task:type_name -> snakecommon.SeasonTask
	37, // 51: snakecommon.PassTaskConfig.grade_task:type_name -> snakecommon.GradeTask
	35, // 52: snakecommon.PassTaskConfig.weekly_task:type_name -> snakecommon.WeeklyTask
	34, // 53: snakecommon.PassTaskConfig.daily_task:type_name -> snakecommon.DailyTask
	38, // 54: snakecommon.WeeklyTask.task_list:type_name -> snakecommon.PassTaskModel
	38, // 55: snakecommon.SeasonTask.task_list:type_name -> snakecommon.PassTaskModel
	38, // 56: snakecommon.GradeTask.task_list:type_name -> snakecommon.PassTaskModel
	85, // 57: snakecommon.PassStoreConfig.rank_price:type_name -> snakecommon.CPriceInfo
	40, // 58: snakecommon.PassStoreConfig.exchange_store:type_name -> snakecommon.ExchangeStore
	86, // 59: snakecommon.PassStoreConfig.high_store:type_name -> SnakeMain.Config.PackModel
	85, // 60: snakecommon.ExchangeStore.price:type_name -> snakecommon.CPriceInfo
	83, // 61: snakecommon.PassTotalRankReward.reward:type_name -> SnakeMain.Config.RewardConfig
	43, // 62: snakecommon.TurntableConfig.reward_table:type_name -> snakecommon.TurntableRewardTable
	44, // 63: snakecommon.TurntableConfig.config:type_name -> snakecommon.TurntableSubConfig
	46, // 64: snakecommon.SkinUgcV2Config.skin_topic_list:type_name -> snakecommon.UgcTopic
	46, // 65: snakecommon.SkinUgcV2Config.ks_topic_list:type_name -> snakecommon.UgcTopic
	46, // 66: snakecommon.SkinUgcV2Config.bg_topic_list:type_name -> snakecommon.UgcTopic
	46, // 67: snakecommon.SkinUgcV2Config.suit_topic_list:type_name -> snakecommon.UgcTopic
	48, // 68: snakecommon.ShowIllustrationConfig.title_list:type_name -> snakecommon.ShowIllustrationTitle
	49, // 69: snakecommon.ShowIllustrationConfig.season_list:type_name -> snakecommon.ShowIllustrationSeason
	83, // 70: snakecommon.ShowIllustrationSeason.rewards:type_name -> SnakeMain.Config.RewardConfig
	50, // 71: snakecommon.ShowIllustrationSeason.resources:type_name -> snakecommon.SeasonResource
	52, // 72: snakecommon.GiftIllustrationConfig.title_list:type_name -> snakecommon.GiftTitleItemConfig
	55, // 73: snakecommon.EndlessFloatingV2.floating_refresh_config_v2:type_name -> snakecommon.IllustrateFloatingRefreshConfig
	57, // 74: snakecommon.EndlessFloatingV2.floating_config:type_name -> snakecommon.FloatingInfo
	58, // 75: snakecommon.EndlessFloatingV2.treasure_house:type_name -> snakecommon.TreasureHouseThemeInfo
	59, // 76: snakecommon.EndlessFloatingV2.boss:type_name -> snakecommon.BossTheme
	60, // 77: snakecommon.EndlessFloatingV2.extra_buff:type_name -> snakecommon.ExtraBuff
	65, // 78: snakecommon.EndlessFloatingV2.ai_skin:type_name -> snakecommon.FloatingAiSkin
	61, // 79: snakecommon.EndlessFloatingV2.ai_skin_rate:type_name -> snakecommon.FloatingAiSkinRateInfo
	62, // 80: snakecommon.EndlessFloatingV2.ai_killeffect:type_name -> snakecommon.FloatingAiKillEffect
	63, // 81: snakecommon.EndlessFloatingV2.ai_killeffect_rate:type_name -> snakecommon.FloatingAiKillEffectRateInfo
	64, // 82: snakecommon.EndlessFloatingV2.main_map_theme:type_name -> snakecommon.FloatingMainMapTheme
	54, // 83: snakecommon.EndlessFloatingV2.illustrate_config:type_name -> snakecommon.IllustrateConfig
	56, // 84: snakecommon.IllustrateFloatingRefreshConfig.floating_refresh_config:type_name -> snakecommon.FloatingRefreshConfig
	82, // 85: snakecommon.ExtraBuff.buff_list:type_name -> snakecommon.ExtraBuff.ExtraBuffInfo
	66, // 86: snakecommon.SeasonActivity.caidan_list:type_name -> snakecommon.SeasonCaiDan
	68, // 87: snakecommon.SeasonActivity.roll_skin:type_name -> snakecommon.SeasonRollSkin
	70, // 88: snakecommon.PhotoWallConfig.activity:type_name -> snakecommon.PhotoWallActivityConfig
	71, // 89: snakecommon.PhotoWallActivityConfig.icon_config:type_name -> snakecommon.PhotoWallIconConfig
	72, // 90: snakecommon.PhotoWallActivityConfig.levels:type_name -> snakecommon.PhotoWallLevelsItem
	73, // 91: snakecommon.PhotoWallActivityConfig.guardian:type_name -> snakecommon.PhotoWallGuardian
	78, // 92: snakecommon.FirstChargeConfig.skin_list:type_name -> snakecommon.FirstChargeSkinRewardInfo
	79, // 93: snakecommon.FirstChargeConfig.unlock_rewards:type_name -> snakecommon.FirstChargeUnlockRewardInfo
	87, // 94: snakecommon.FirstChargeUnlockRewardInfo.rewards:type_name -> snakecommon.CRewardItem
	16, // 95: snakecommon.NewMeetupV3Config.ShowConfigEntry.value:type_name -> snakecommon.MeetupShowItem
	96, // [96:96] is the sub-list for method output_type
	96, // [96:96] is the sub-list for method input_type
	96, // [96:96] is the sub-list for extension type_name
	96, // [96:96] is the sub-list for extension extendee
	0,  // [0:96] is the sub-list for field type_name
}

func init() { file_snakecommon_profile_config_proto_init() }
func file_snakecommon_profile_config_proto_init() {
	if File_snakecommon_profile_config_proto != nil {
		return
	}
	file_snakecommon_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snakecommon_profile_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeVipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardPackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowBadgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourTitleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourLevelItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameplateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftWallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HatchEgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMeetupV3Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetupShowItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetupConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDayReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetupBuffItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessGameRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessGameRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckDailyWelfare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckBreakReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassSeasonNotifyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCommonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckRankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckRewardPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckWindowReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassTaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassTaskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassStoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassTotalRankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurntableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurntableRewardTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurntableSubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinUgcV2Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIllustrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIllustrationTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIllustrationSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftIllustrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftTitleItemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessFloatingV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllustrateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllustrateFloatingRefreshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingRefreshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureHouseThemeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiSkinRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiKillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiKillEffectRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingMainMapTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingAiSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonCaiDan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonRollSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWallActivityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWallIconConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWallLevelsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWallGuardian); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoatEndlessChest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessThroughWall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstChargeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstChargeSkinRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstChargeUnlockRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftWallConfig_NamePlate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraBuff_ExtraBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snakecommon_profile_config_proto_msgTypes[32].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecommon_profile_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakecommon_profile_config_proto_goTypes,
		DependencyIndexes: file_snakecommon_profile_config_proto_depIdxs,
		MessageInfos:      file_snakecommon_profile_config_proto_msgTypes,
	}.Build()
	File_snakecommon_profile_config_proto = out.File
	file_snakecommon_profile_config_proto_rawDesc = nil
	file_snakecommon_profile_config_proto_goTypes = nil
	file_snakecommon_profile_config_proto_depIdxs = nil
}
