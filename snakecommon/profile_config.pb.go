// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakecommon/profile_config.proto

package snakecommon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ======== charge_vip_config start ====================================================
type ChargeVipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelList    []*VipLevel `protobuf:"bytes,1,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
	IntroUrl     string      `protobuf:"bytes,2,opt,name=intro_url,json=introUrl,proto3" json:"intro_url,omitempty"`
	StartTimeStr string      `protobuf:"bytes,3,opt,name=start_time_str,json=startTimeStr,proto3" json:"start_time_str,omitempty"`
}

func (x *ChargeVipConfig) Reset() {
	*x = ChargeVipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeVipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeVipConfig) ProtoMessage() {}

func (x *ChargeVipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeVipConfig.ProtoReflect.Descriptor instead.
func (*ChargeVipConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{0}
}

func (x *ChargeVipConfig) GetLevelList() []*VipLevel {
	if x != nil {
		return x.LevelList
	}
	return nil
}

func (x *ChargeVipConfig) GetIntroUrl() string {
	if x != nil {
		return x.IntroUrl
	}
	return ""
}

func (x *ChargeVipConfig) GetStartTimeStr() string {
	if x != nil {
		return x.StartTimeStr
	}
	return ""
}

type VipLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        int32           `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	ChargeExp    int32           `protobuf:"varint,2,opt,name=charge_exp,json=chargeExp,proto3" json:"charge_exp,omitempty"`   // 需要的积分，是人民币的10倍
	Privilege    []*VipPrivilege `protobuf:"bytes,3,rep,name=privilege,proto3" json:"privilege,omitempty"`                     // 特权展示
	RewardList   []*CRewardItem  `protobuf:"bytes,4,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"` // 特权奖励
	AnimUrl      string          `protobuf:"bytes,5,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`          // 大icon动效
	AnimType     int32           `protobuf:"varint,6,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	IconUrl      string          `protobuf:"bytes,7,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"` // 小icon动效
	IconAnimType int32           `protobuf:"varint,8,opt,name=icon_anim_type,json=iconAnimType,proto3" json:"icon_anim_type,omitempty"`
	WeekReward   []*CRewardItem  `protobuf:"bytes,9,rep,name=week_reward,json=weekReward,proto3" json:"week_reward,omitempty"` // 每周好礼奖励
}

func (x *VipLevel) Reset() {
	*x = VipLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevel) ProtoMessage() {}

func (x *VipLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevel.ProtoReflect.Descriptor instead.
func (*VipLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{1}
}

func (x *VipLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *VipLevel) GetChargeExp() int32 {
	if x != nil {
		return x.ChargeExp
	}
	return 0
}

func (x *VipLevel) GetPrivilege() []*VipPrivilege {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *VipLevel) GetRewardList() []*CRewardItem {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *VipLevel) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *VipLevel) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *VipLevel) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *VipLevel) GetIconAnimType() int32 {
	if x != nil {
		return x.IconAnimType
	}
	return 0
}

func (x *VipLevel) GetWeekReward() []*CRewardItem {
	if x != nil {
		return x.WeekReward
	}
	return nil
}

type VipPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl   string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Desc     string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` // 特权类型，1:照片数量加上限
	PhotoNum int32  `protobuf:"varint,4,opt,name=photo_num,json=photoNum,proto3" json:"photo_num,omitempty"`
}

func (x *VipPrivilege) Reset() {
	*x = VipPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPrivilege) ProtoMessage() {}

func (x *VipPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPrivilege.ProtoReflect.Descriptor instead.
func (*VipPrivilege) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{2}
}

func (x *VipPrivilege) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *VipPrivilege) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *VipPrivilege) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VipPrivilege) GetPhotoNum() int32 {
	if x != nil {
		return x.PhotoNum
	}
	return 0
}

// ======== month_card start ====================================================
type MonthCardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardDesc        string         `protobuf:"bytes,1,opt,name=card_desc,json=cardDesc,proto3" json:"card_desc,omitempty"` // 底部叠加获得奖励及特权点击打开后弹窗的文案
	StartTime       int32          `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int32          `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LittleMonthCard *MonthCardInfo `protobuf:"bytes,4,opt,name=little_month_card,json=littleMonthCard,proto3" json:"little_month_card,omitempty"` // 超值月卡
	SuperMonthCard  *MonthCardInfo `protobuf:"bytes,5,opt,name=super_month_card,json=superMonthCard,proto3" json:"super_month_card,omitempty"`    // 至尊月卡
	Source          string         `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	MailTitle       string         `protobuf:"bytes,7,opt,name=mail_title,json=mailTitle,proto3" json:"mail_title,omitempty"`
	MailContent     string         `protobuf:"bytes,8,opt,name=mail_content,json=mailContent,proto3" json:"mail_content,omitempty"`
	Duration        int32          `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	MaxTime         int32          `protobuf:"varint,10,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
}

func (x *MonthCardConfig) Reset() {
	*x = MonthCardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardConfig) ProtoMessage() {}

func (x *MonthCardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardConfig.ProtoReflect.Descriptor instead.
func (*MonthCardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{3}
}

func (x *MonthCardConfig) GetCardDesc() string {
	if x != nil {
		return x.CardDesc
	}
	return ""
}

func (x *MonthCardConfig) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MonthCardConfig) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MonthCardConfig) GetLittleMonthCard() *MonthCardInfo {
	if x != nil {
		return x.LittleMonthCard
	}
	return nil
}

func (x *MonthCardConfig) GetSuperMonthCard() *MonthCardInfo {
	if x != nil {
		return x.SuperMonthCard
	}
	return nil
}

func (x *MonthCardConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MonthCardConfig) GetMailTitle() string {
	if x != nil {
		return x.MailTitle
	}
	return ""
}

func (x *MonthCardConfig) GetMailContent() string {
	if x != nil {
		return x.MailContent
	}
	return ""
}

func (x *MonthCardConfig) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MonthCardConfig) GetMaxTime() int32 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

type MonthCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string               `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //背景图
	DailyReward []*CRewardItem       `protobuf:"bytes,2,rep,name=daily_reward,json=dailyReward,proto3" json:"daily_reward,omitempty"`
	Title       string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"` //特权标题
	Desc        string               `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`   //特权描述
	TotalReward int32                `protobuf:"varint,5,opt,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`
	FreePack    int32                `protobuf:"varint,6,opt,name=free_pack,json=freePack,proto3" json:"free_pack,omitempty"` //免费礼包id
	PackId      int32                `protobuf:"varint,7,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`       //月卡id，也是礼包id
	PackList    []*MonthCardPackItem `protobuf:"bytes,8,rep,name=pack_list,json=packList,proto3" json:"pack_list,omitempty"`  //礼包列表
}

func (x *MonthCardInfo) Reset() {
	*x = MonthCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardInfo) ProtoMessage() {}

func (x *MonthCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardInfo.ProtoReflect.Descriptor instead.
func (*MonthCardInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{4}
}

func (x *MonthCardInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MonthCardInfo) GetDailyReward() []*CRewardItem {
	if x != nil {
		return x.DailyReward
	}
	return nil
}

func (x *MonthCardInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MonthCardInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *MonthCardInfo) GetTotalReward() int32 {
	if x != nil {
		return x.TotalReward
	}
	return 0
}

func (x *MonthCardInfo) GetFreePack() int32 {
	if x != nil {
		return x.FreePack
	}
	return 0
}

func (x *MonthCardInfo) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *MonthCardInfo) GetPackList() []*MonthCardPackItem {
	if x != nil {
		return x.PackList
	}
	return nil
}

type MonthCardPackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalPrice int32 `protobuf:"varint,1,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"` //原价
	PackId        int32 `protobuf:"varint,2,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`                      //礼包id
}

func (x *MonthCardPackItem) Reset() {
	*x = MonthCardPackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthCardPackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardPackItem) ProtoMessage() {}

func (x *MonthCardPackItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardPackItem.ProtoReflect.Descriptor instead.
func (*MonthCardPackItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{5}
}

func (x *MonthCardPackItem) GetOriginalPrice() int32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *MonthCardPackItem) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

// ======== show_badge start ====================================================
type ShowBadgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intro                   string        `protobuf:"bytes,1,opt,name=intro,proto3" json:"intro,omitempty"`
	TitleList               []*BadgeTitle `protobuf:"bytes,2,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
	ShowIllustrationDescUrl string        `protobuf:"bytes,3,opt,name=show_illustration_desc_url,json=showIllustrationDescUrl,proto3" json:"show_illustration_desc_url,omitempty"`
	ActivityId              string        `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ShowBadgeConfig) Reset() {
	*x = ShowBadgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowBadgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBadgeConfig) ProtoMessage() {}

func (x *ShowBadgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBadgeConfig.ProtoReflect.Descriptor instead.
func (*ShowBadgeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{6}
}

func (x *ShowBadgeConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *ShowBadgeConfig) GetTitleList() []*BadgeTitle {
	if x != nil {
		return x.TitleList
	}
	return nil
}

func (x *ShowBadgeConfig) GetShowIllustrationDescUrl() string {
	if x != nil {
		return x.ShowIllustrationDescUrl
	}
	return ""
}

func (x *ShowBadgeConfig) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type BadgeTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rewards        []*CRewardItem `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
	NeedCollect    int32          `protobuf:"varint,3,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"`
	StartShowLevel int32          `protobuf:"varint,4,opt,name=start_show_level,json=startShowLevel,proto3" json:"start_show_level,omitempty"`
	EndShowLevel   int32          `protobuf:"varint,5,opt,name=end_show_level,json=endShowLevel,proto3" json:"end_show_level,omitempty"`
	Desc           string         `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Name           string         `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BadgeTitle) Reset() {
	*x = BadgeTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeTitle) ProtoMessage() {}

func (x *BadgeTitle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeTitle.ProtoReflect.Descriptor instead.
func (*BadgeTitle) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{7}
}

func (x *BadgeTitle) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BadgeTitle) GetRewards() []*CRewardItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *BadgeTitle) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *BadgeTitle) GetStartShowLevel() int32 {
	if x != nil {
		return x.StartShowLevel
	}
	return 0
}

func (x *BadgeTitle) GetEndShowLevel() int32 {
	if x != nil {
		return x.EndShowLevel
	}
	return 0
}

func (x *BadgeTitle) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BadgeTitle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ======== charm_tours start ====================================================
type CharmTourConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intro              string                `protobuf:"bytes,1,opt,name=intro,proto3" json:"intro,omitempty"`
	CharmTitleList     []*CharmTourTitleItem `protobuf:"bytes,2,rep,name=charm_title_list,json=charmTitleList,proto3" json:"charm_title_list,omitempty"`
	CharmLevelList     []*CharmTourLevelItem `protobuf:"bytes,3,rep,name=charm_level_list,json=charmLevelList,proto3" json:"charm_level_list,omitempty"`
	WishGiftDescUrl    string                `protobuf:"bytes,4,opt,name=wish_gift_desc_url,json=wishGiftDescUrl,proto3" json:"wish_gift_desc_url,omitempty"`
	AllTagShowTime     int64                 `protobuf:"varint,5,opt,name=all_tag_show_time,json=allTagShowTime,proto3" json:"all_tag_show_time,omitempty"`
	StartTime          string                `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	WhiteList          []string              `protobuf:"bytes,7,rep,name=white_list,json=whiteList,proto3" json:"white_list,omitempty"`
	IllustrationDesc   string                `protobuf:"bytes,8,opt,name=illustration_desc,json=illustrationDesc,proto3" json:"illustration_desc,omitempty"`
	GuideUrl           string                `protobuf:"bytes,9,opt,name=guide_url,json=guideUrl,proto3" json:"guide_url,omitempty"`
	NameplateList      []*NameplateItem      `protobuf:"bytes,10,rep,name=nameplate_list,json=nameplateList,proto3" json:"nameplate_list,omitempty"`
	GiftWallOnlineDate int64                 `protobuf:"varint,11,opt,name=gift_wall_online_date,json=giftWallOnlineDate,proto3" json:"gift_wall_online_date,omitempty"`
}

func (x *CharmTourConfig) Reset() {
	*x = CharmTourConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourConfig) ProtoMessage() {}

func (x *CharmTourConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourConfig.ProtoReflect.Descriptor instead.
func (*CharmTourConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{8}
}

func (x *CharmTourConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *CharmTourConfig) GetCharmTitleList() []*CharmTourTitleItem {
	if x != nil {
		return x.CharmTitleList
	}
	return nil
}

func (x *CharmTourConfig) GetCharmLevelList() []*CharmTourLevelItem {
	if x != nil {
		return x.CharmLevelList
	}
	return nil
}

func (x *CharmTourConfig) GetWishGiftDescUrl() string {
	if x != nil {
		return x.WishGiftDescUrl
	}
	return ""
}

func (x *CharmTourConfig) GetAllTagShowTime() int64 {
	if x != nil {
		return x.AllTagShowTime
	}
	return 0
}

func (x *CharmTourConfig) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CharmTourConfig) GetWhiteList() []string {
	if x != nil {
		return x.WhiteList
	}
	return nil
}

func (x *CharmTourConfig) GetIllustrationDesc() string {
	if x != nil {
		return x.IllustrationDesc
	}
	return ""
}

func (x *CharmTourConfig) GetGuideUrl() string {
	if x != nil {
		return x.GuideUrl
	}
	return ""
}

func (x *CharmTourConfig) GetNameplateList() []*NameplateItem {
	if x != nil {
		return x.NameplateList
	}
	return nil
}

func (x *CharmTourConfig) GetGiftWallOnlineDate() int64 {
	if x != nil {
		return x.GiftWallOnlineDate
	}
	return 0
}

type CharmTourTitleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameUrl         string         `protobuf:"bytes,2,opt,name=name_url,json=nameUrl,proto3" json:"name_url,omitempty"` // 标题艺术字图片
	Title           string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                    // 标题文字
	IconUrl         string         `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	AnimUrl         string         `protobuf:"bytes,5,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType        int32          `protobuf:"varint,6,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Rewards         []*CRewardItem `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	NeedCollect     int32          `protobuf:"varint,8,opt,name=need_collect,json=needCollect,proto3" json:"need_collect,omitempty"` // 达到该等级需要解锁的礼物个数
	StartCharmLevel int32          `protobuf:"varint,9,opt,name=start_charm_level,json=startCharmLevel,proto3" json:"start_charm_level,omitempty"`
	EndCharmLevel   int32          `protobuf:"varint,10,opt,name=end_charm_level,json=endCharmLevel,proto3" json:"end_charm_level,omitempty"`
}

func (x *CharmTourTitleItem) Reset() {
	*x = CharmTourTitleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourTitleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourTitleItem) ProtoMessage() {}

func (x *CharmTourTitleItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourTitleItem.ProtoReflect.Descriptor instead.
func (*CharmTourTitleItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{9}
}

func (x *CharmTourTitleItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharmTourTitleItem) GetNameUrl() string {
	if x != nil {
		return x.NameUrl
	}
	return ""
}

func (x *CharmTourTitleItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CharmTourTitleItem) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CharmTourTitleItem) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *CharmTourTitleItem) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *CharmTourTitleItem) GetRewards() []*CRewardItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *CharmTourTitleItem) GetNeedCollect() int32 {
	if x != nil {
		return x.NeedCollect
	}
	return 0
}

func (x *CharmTourTitleItem) GetStartCharmLevel() int32 {
	if x != nil {
		return x.StartCharmLevel
	}
	return 0
}

func (x *CharmTourTitleItem) GetEndCharmLevel() int32 {
	if x != nil {
		return x.EndCharmLevel
	}
	return 0
}

type CharmTourLevelItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Charm int64 `protobuf:"varint,2,opt,name=charm,proto3" json:"charm,omitempty"`
}

func (x *CharmTourLevelItem) Reset() {
	*x = CharmTourLevelItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTourLevelItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTourLevelItem) ProtoMessage() {}

func (x *CharmTourLevelItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTourLevelItem.ProtoReflect.Descriptor instead.
func (*CharmTourLevelItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{10}
}

func (x *CharmTourLevelItem) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharmTourLevelItem) GetCharm() int64 {
	if x != nil {
		return x.Charm
	}
	return 0
}

type NameplateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameplateType int32  `protobuf:"varint,2,opt,name=nameplate_type,json=nameplateType,proto3" json:"nameplate_type,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NeedStar      int32  `protobuf:"varint,4,opt,name=need_star,json=needStar,proto3" json:"need_star,omitempty"`
	NeedGift      int32  `protobuf:"varint,5,opt,name=need_gift,json=needGift,proto3" json:"need_gift,omitempty"`
	Imgurl        string `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *NameplateItem) Reset() {
	*x = NameplateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameplateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameplateItem) ProtoMessage() {}

func (x *NameplateItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameplateItem.ProtoReflect.Descriptor instead.
func (*NameplateItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{11}
}

func (x *NameplateItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NameplateItem) GetNameplateType() int32 {
	if x != nil {
		return x.NameplateType
	}
	return 0
}

func (x *NameplateItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameplateItem) GetNeedStar() int32 {
	if x != nil {
		return x.NeedStar
	}
	return 0
}

func (x *NameplateItem) GetNeedGift() int32 {
	if x != nil {
		return x.NeedGift
	}
	return 0
}

func (x *NameplateItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

// ======== gift_wall start ====================================================
type GiftWallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftWallDesc  string                      `protobuf:"bytes,1,opt,name=gift_wall_desc,json=giftWallDesc,proto3" json:"gift_wall_desc,omitempty"`
	NameplateList []*GiftWallConfig_NamePlate `protobuf:"bytes,2,rep,name=nameplate_list,json=nameplateList,proto3" json:"nameplate_list,omitempty"`
}

func (x *GiftWallConfig) Reset() {
	*x = GiftWallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftWallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftWallConfig) ProtoMessage() {}

func (x *GiftWallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftWallConfig.ProtoReflect.Descriptor instead.
func (*GiftWallConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{12}
}

func (x *GiftWallConfig) GetGiftWallDesc() string {
	if x != nil {
		return x.GiftWallDesc
	}
	return ""
}

func (x *GiftWallConfig) GetNameplateList() []*GiftWallConfig_NamePlate {
	if x != nil {
		return x.NameplateList
	}
	return nil
}

type GiftWallConfig_NamePlate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Imgurl        string `protobuf:"bytes,2,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	NameplateType int32  `protobuf:"varint,3,opt,name=nameplate_type,json=nameplateType,proto3" json:"nameplate_type,omitempty"` // 1-集星周铭牌；2-累计集星铭牌；3-点亮铭牌
	NeedStar      int32  `protobuf:"varint,4,opt,name=need_star,json=needStar,proto3" json:"need_star,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GiftWallConfig_NamePlate) Reset() {
	*x = GiftWallConfig_NamePlate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_profile_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftWallConfig_NamePlate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftWallConfig_NamePlate) ProtoMessage() {}

func (x *GiftWallConfig_NamePlate) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_profile_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftWallConfig_NamePlate.ProtoReflect.Descriptor instead.
func (*GiftWallConfig_NamePlate) Descriptor() ([]byte, []int) {
	return file_snakecommon_profile_config_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GiftWallConfig_NamePlate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *GiftWallConfig_NamePlate) GetNameplateType() int32 {
	if x != nil {
		return x.NameplateType
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetNeedStar() int32 {
	if x != nil {
		return x.NeedStar
	}
	return 0
}

func (x *GiftWallConfig_NamePlate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_snakecommon_profile_config_proto protoreflect.FileDescriptor

var file_snakecommon_profile_config_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a,
	0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x56, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x22, 0xe7, 0x02, 0x0a, 0x08, 0x56, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x78, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x41, 0x6e, 0x69,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x22, 0x6b, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x22, 0x87, 0x03,
	0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x44, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x70, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0xbd, 0x01,
	0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xeb, 0x01,
	0x0a, 0x0a, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x04, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f,
	0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x77,
	0x69, 0x73, 0x68, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x67,
	0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xd3, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x40, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x6d,
	0x54, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x4e, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x47, 0x69, 0x66,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x4c, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x8b, 0x01, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakecommon_profile_config_proto_rawDescOnce sync.Once
	file_snakecommon_profile_config_proto_rawDescData = file_snakecommon_profile_config_proto_rawDesc
)

func file_snakecommon_profile_config_proto_rawDescGZIP() []byte {
	file_snakecommon_profile_config_proto_rawDescOnce.Do(func() {
		file_snakecommon_profile_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecommon_profile_config_proto_rawDescData)
	})
	return file_snakecommon_profile_config_proto_rawDescData
}

var file_snakecommon_profile_config_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_snakecommon_profile_config_proto_goTypes = []interface{}{
	(*ChargeVipConfig)(nil),          // 0: snakecommon.ChargeVipConfig
	(*VipLevel)(nil),                 // 1: snakecommon.VipLevel
	(*VipPrivilege)(nil),             // 2: snakecommon.VipPrivilege
	(*MonthCardConfig)(nil),          // 3: snakecommon.MonthCardConfig
	(*MonthCardInfo)(nil),            // 4: snakecommon.MonthCardInfo
	(*MonthCardPackItem)(nil),        // 5: snakecommon.MonthCardPackItem
	(*ShowBadgeConfig)(nil),          // 6: snakecommon.ShowBadgeConfig
	(*BadgeTitle)(nil),               // 7: snakecommon.BadgeTitle
	(*CharmTourConfig)(nil),          // 8: snakecommon.CharmTourConfig
	(*CharmTourTitleItem)(nil),       // 9: snakecommon.CharmTourTitleItem
	(*CharmTourLevelItem)(nil),       // 10: snakecommon.CharmTourLevelItem
	(*NameplateItem)(nil),            // 11: snakecommon.NameplateItem
	(*GiftWallConfig)(nil),           // 12: snakecommon.GiftWallConfig
	(*GiftWallConfig_NamePlate)(nil), // 13: snakecommon.GiftWallConfig.NamePlate
	(*CRewardItem)(nil),              // 14: snakecommon.CRewardItem
}
var file_snakecommon_profile_config_proto_depIdxs = []int32{
	1,  // 0: snakecommon.ChargeVipConfig.level_list:type_name -> snakecommon.VipLevel
	2,  // 1: snakecommon.VipLevel.privilege:type_name -> snakecommon.VipPrivilege
	14, // 2: snakecommon.VipLevel.reward_list:type_name -> snakecommon.CRewardItem
	14, // 3: snakecommon.VipLevel.week_reward:type_name -> snakecommon.CRewardItem
	4,  // 4: snakecommon.MonthCardConfig.little_month_card:type_name -> snakecommon.MonthCardInfo
	4,  // 5: snakecommon.MonthCardConfig.super_month_card:type_name -> snakecommon.MonthCardInfo
	14, // 6: snakecommon.MonthCardInfo.daily_reward:type_name -> snakecommon.CRewardItem
	5,  // 7: snakecommon.MonthCardInfo.pack_list:type_name -> snakecommon.MonthCardPackItem
	7,  // 8: snakecommon.ShowBadgeConfig.title_list:type_name -> snakecommon.BadgeTitle
	14, // 9: snakecommon.BadgeTitle.rewards:type_name -> snakecommon.CRewardItem
	9,  // 10: snakecommon.CharmTourConfig.charm_title_list:type_name -> snakecommon.CharmTourTitleItem
	10, // 11: snakecommon.CharmTourConfig.charm_level_list:type_name -> snakecommon.CharmTourLevelItem
	11, // 12: snakecommon.CharmTourConfig.nameplate_list:type_name -> snakecommon.NameplateItem
	14, // 13: snakecommon.CharmTourTitleItem.rewards:type_name -> snakecommon.CRewardItem
	13, // 14: snakecommon.GiftWallConfig.nameplate_list:type_name -> snakecommon.GiftWallConfig.NamePlate
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_snakecommon_profile_config_proto_init() }
func file_snakecommon_profile_config_proto_init() {
	if File_snakecommon_profile_config_proto != nil {
		return
	}
	file_snakecommon_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snakecommon_profile_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeVipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthCardPackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowBadgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourTitleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTourLevelItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameplateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftWallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_profile_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftWallConfig_NamePlate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecommon_profile_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakecommon_profile_config_proto_goTypes,
		DependencyIndexes: file_snakecommon_profile_config_proto_depIdxs,
		MessageInfos:      file_snakecommon_profile_config_proto_msgTypes,
	}.Build()
	File_snakecommon_profile_config_proto = out.File
	file_snakecommon_profile_config_proto_rawDesc = nil
	file_snakecommon_profile_config_proto_goTypes = nil
	file_snakecommon_profile_config_proto_depIdxs = nil
}
