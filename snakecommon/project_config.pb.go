// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakecommon/project_config.proto

package snakecommon

import (
	config "git.17zjh.com/snake/snake_proto/snakeapi/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags map[string]string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigVersionInfo) Reset() {
	*x = ConfigVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigVersionInfo) ProtoMessage() {}

func (x *ConfigVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigVersionInfo.ProtoReflect.Descriptor instead.
func (*ConfigVersionInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigVersionInfo) GetFlags() map[string]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

// === endless_buff_prop begin ======================================
type EndLessBuffPropConfigV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*EndLessBuffPropInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EndLessBuffPropConfigV2) Reset() {
	*x = EndLessBuffPropConfigV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLessBuffPropConfigV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLessBuffPropConfigV2) ProtoMessage() {}

func (x *EndLessBuffPropConfigV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLessBuffPropConfigV2.ProtoReflect.Descriptor instead.
func (*EndLessBuffPropConfigV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{1}
}

func (x *EndLessBuffPropConfigV2) GetList() []*EndLessBuffPropInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type EndLessBuffPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffType  int32             `protobuf:"varint,1,opt,name=buff_type,json=buffType,proto3" json:"buff_type,omitempty"`
	FreeTimes int32             `protobuf:"varint,2,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	PriceList []*CPriceInfo     `protobuf:"bytes,3,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PropList  []*RandomPropInfo `protobuf:"bytes,4,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
}

func (x *EndLessBuffPropInfo) Reset() {
	*x = EndLessBuffPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLessBuffPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLessBuffPropInfo) ProtoMessage() {}

func (x *EndLessBuffPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLessBuffPropInfo.ProtoReflect.Descriptor instead.
func (*EndLessBuffPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{2}
}

func (x *EndLessBuffPropInfo) GetBuffType() int32 {
	if x != nil {
		return x.BuffType
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetPriceList() []*CPriceInfo {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *EndLessBuffPropInfo) GetPropList() []*RandomPropInfo {
	if x != nil {
		return x.PropList
	}
	return nil
}

type RandomPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Num    int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl string `protobuf:"bytes,5,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *RandomPropInfo) Reset() {
	*x = RandomPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPropInfo) ProtoMessage() {}

func (x *RandomPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPropInfo.ProtoReflect.Descriptor instead.
func (*RandomPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{3}
}

func (x *RandomPropInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RandomPropInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RandomPropInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RandomPropInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RandomPropInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

// === huawei_highlight begin ======================================
type HuaweiHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighlightList   []*HighLightInfo `protobuf:"bytes,1,rep,name=highlight_list,json=highlightList,proto3" json:"highlight_list,omitempty"`
	Open            int32            `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	TemplateIdThree string           `protobuf:"bytes,3,opt,name=template_id_three,json=templateIdThree,proto3" json:"template_id_three,omitempty"`
	TemplateIdFour  string           `protobuf:"bytes,4,opt,name=template_id_four,json=templateIdFour,proto3" json:"template_id_four,omitempty"`
}

func (x *HuaweiHighlight) Reset() {
	*x = HuaweiHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiHighlight) ProtoMessage() {}

func (x *HuaweiHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiHighlight.ProtoReflect.Descriptor instead.
func (*HuaweiHighlight) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{4}
}

func (x *HuaweiHighlight) GetHighlightList() []*HighLightInfo {
	if x != nil {
		return x.HighlightList
	}
	return nil
}

func (x *HuaweiHighlight) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *HuaweiHighlight) GetTemplateIdThree() string {
	if x != nil {
		return x.TemplateIdThree
	}
	return ""
}

func (x *HuaweiHighlight) GetTemplateIdFour() string {
	if x != nil {
		return x.TemplateIdFour
	}
	return ""
}

type HighLightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Obj       int32 `protobuf:"varint,2,opt,name=obj,proto3" json:"obj,omitempty"`
	Time      int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	DelayTime int32 `protobuf:"varint,4,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	Level     int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *HighLightInfo) Reset() {
	*x = HighLightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighLightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighLightInfo) ProtoMessage() {}

func (x *HighLightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighLightInfo.ProtoReflect.Descriptor instead.
func (*HighLightInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{5}
}

func (x *HighLightInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HighLightInfo) GetObj() int32 {
	if x != nil {
		return x.Obj
	}
	return 0
}

func (x *HighLightInfo) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HighLightInfo) GetDelayTime() int32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *HighLightInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// === ol_game_config start ======================================
type OlGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamBossSkinId               int32             `protobuf:"varint,1,opt,name=team_boss_skin_id,json=teamBossSkinId,proto3" json:"team_boss_skin_id,omitempty"`
	GameStatusTrack              *GameStatusTrack  `protobuf:"bytes,2,opt,name=game_status_track,json=gameStatusTrack,proto3" json:"game_status_track,omitempty"`
	TeamSuitTextConfig           string            `protobuf:"bytes,3,opt,name=team_suit_text_config,json=teamSuitTextConfig,proto3" json:"team_suit_text_config,omitempty"` // 团战队服说明文案
	GrassConfig                  *GrassConfig      `protobuf:"bytes,4,opt,name=grass_config,json=grassConfig,proto3" json:"grass_config,omitempty"`                          // 草场配置，应该已废弃
	ShowFriendGameWillEndTimeGap int32             `protobuf:"varint,5,opt,name=show_friend_game_will_end_time_gap,json=showFriendGameWillEndTimeGap,proto3" json:"show_friend_game_will_end_time_gap,omitempty"`
	HcMatchCancelTime            []int32           `protobuf:"varint,6,rep,packed,name=hc_match_cancel_time,json=hcMatchCancelTime,proto3" json:"hc_match_cancel_time,omitempty"`
	NoTeamSkinIdList             []int32           `protobuf:"varint,7,rep,packed,name=no_team_skin_id_list,json=noTeamSkinIdList,proto3" json:"no_team_skin_id_list,omitempty"`
	OlUpActionDouble             int32             `protobuf:"varint,8,opt,name=ol_up_action_double,json=olUpActionDouble,proto3" json:"ol_up_action_double,omitempty"`
	TeamModeWinLength            int32             `protobuf:"varint,9,opt,name=team_mode_win_length,json=teamModeWinLength,proto3" json:"team_mode_win_length,omitempty"`
	OlGameOfflineTipTime         int32             `protobuf:"varint,10,opt,name=ol_game_offline_tip_time,json=olGameOfflineTipTime,proto3" json:"ol_game_offline_tip_time,omitempty"`
	NoTeamSecondHeadPointSkins   []int32           `protobuf:"varint,11,rep,packed,name=no_team_second_head_point_skins,json=noTeamSecondHeadPointSkins,proto3" json:"no_team_second_head_point_skins,omitempty"`
	OlGameStableTurnCount        float64           `protobuf:"fixed64,12,opt,name=ol_game_stable_turn_count,json=olGameStableTurnCount,proto3" json:"ol_game_stable_turn_count,omitempty"`
	TeamNeckUrls                 []string          `protobuf:"bytes,13,rep,name=team_neck_urls,json=teamNeckUrls,proto3" json:"team_neck_urls,omitempty"`
	FlyFoodUrl                   string            `protobuf:"bytes,14,opt,name=fly_food_url,json=flyFoodUrl,proto3" json:"fly_food_url,omitempty"`
	OlGamePredictDataCount       int32             `protobuf:"varint,15,opt,name=ol_game_predict_data_count,json=olGamePredictDataCount,proto3" json:"ol_game_predict_data_count,omitempty"`
	TeamSuit                     *TeamSuit         `protobuf:"bytes,16,opt,name=team_suit,json=teamSuit,proto3" json:"team_suit,omitempty"`
	TeamKillConfig               *TeamKillConfig   `protobuf:"bytes,17,opt,name=team_kill_config,json=teamKillConfig,proto3" json:"team_kill_config,omitempty"`
	TeamMeleeConfig              *TeamMeleeConfig  `protobuf:"bytes,18,opt,name=team_melee_config,json=teamMeleeConfig,proto3" json:"team_melee_config,omitempty"`
	QualifyingConfig             *QualifyingConfig `protobuf:"bytes,19,opt,name=qualifying_config,json=qualifyingConfig,proto3" json:"qualifying_config,omitempty"`
	RaceNormalConfig             *RaceNormalConfig `protobuf:"bytes,20,opt,name=race_normal_config,json=raceNormalConfig,proto3" json:"race_normal_config,omitempty"`
	TeamKillProp                 *TeamKillProp     `protobuf:"bytes,21,opt,name=team_kill_prop,json=teamKillProp,proto3" json:"team_kill_prop,omitempty"`
	ExitButtonPlan               int32             `protobuf:"varint,22,opt,name=exit_button_plan,json=exitButtonPlan,proto3" json:"exit_button_plan,omitempty"`  // 4.3.28新增,中途退出按钮状态方案
	QualifyingGuide              int32             `protobuf:"varint,23,opt,name=qualifying_guide,json=qualifyingGuide,proto3" json:"qualifying_guide,omitempty"` //1:强引导，2：弱引导
	OlGamePredictDataCountNew    int32             `protobuf:"varint,24,opt,name=ol_game_predict_data_count_new,json=olGamePredictDataCountNew,proto3" json:"ol_game_predict_data_count_new,omitempty"`
}

func (x *OlGameConfig) Reset() {
	*x = OlGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OlGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OlGameConfig) ProtoMessage() {}

func (x *OlGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OlGameConfig.ProtoReflect.Descriptor instead.
func (*OlGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{6}
}

func (x *OlGameConfig) GetTeamBossSkinId() int32 {
	if x != nil {
		return x.TeamBossSkinId
	}
	return 0
}

func (x *OlGameConfig) GetGameStatusTrack() *GameStatusTrack {
	if x != nil {
		return x.GameStatusTrack
	}
	return nil
}

func (x *OlGameConfig) GetTeamSuitTextConfig() string {
	if x != nil {
		return x.TeamSuitTextConfig
	}
	return ""
}

func (x *OlGameConfig) GetGrassConfig() *GrassConfig {
	if x != nil {
		return x.GrassConfig
	}
	return nil
}

func (x *OlGameConfig) GetShowFriendGameWillEndTimeGap() int32 {
	if x != nil {
		return x.ShowFriendGameWillEndTimeGap
	}
	return 0
}

func (x *OlGameConfig) GetHcMatchCancelTime() []int32 {
	if x != nil {
		return x.HcMatchCancelTime
	}
	return nil
}

func (x *OlGameConfig) GetNoTeamSkinIdList() []int32 {
	if x != nil {
		return x.NoTeamSkinIdList
	}
	return nil
}

func (x *OlGameConfig) GetOlUpActionDouble() int32 {
	if x != nil {
		return x.OlUpActionDouble
	}
	return 0
}

func (x *OlGameConfig) GetTeamModeWinLength() int32 {
	if x != nil {
		return x.TeamModeWinLength
	}
	return 0
}

func (x *OlGameConfig) GetOlGameOfflineTipTime() int32 {
	if x != nil {
		return x.OlGameOfflineTipTime
	}
	return 0
}

func (x *OlGameConfig) GetNoTeamSecondHeadPointSkins() []int32 {
	if x != nil {
		return x.NoTeamSecondHeadPointSkins
	}
	return nil
}

func (x *OlGameConfig) GetOlGameStableTurnCount() float64 {
	if x != nil {
		return x.OlGameStableTurnCount
	}
	return 0
}

func (x *OlGameConfig) GetTeamNeckUrls() []string {
	if x != nil {
		return x.TeamNeckUrls
	}
	return nil
}

func (x *OlGameConfig) GetFlyFoodUrl() string {
	if x != nil {
		return x.FlyFoodUrl
	}
	return ""
}

func (x *OlGameConfig) GetOlGamePredictDataCount() int32 {
	if x != nil {
		return x.OlGamePredictDataCount
	}
	return 0
}

func (x *OlGameConfig) GetTeamSuit() *TeamSuit {
	if x != nil {
		return x.TeamSuit
	}
	return nil
}

func (x *OlGameConfig) GetTeamKillConfig() *TeamKillConfig {
	if x != nil {
		return x.TeamKillConfig
	}
	return nil
}

func (x *OlGameConfig) GetTeamMeleeConfig() *TeamMeleeConfig {
	if x != nil {
		return x.TeamMeleeConfig
	}
	return nil
}

func (x *OlGameConfig) GetQualifyingConfig() *QualifyingConfig {
	if x != nil {
		return x.QualifyingConfig
	}
	return nil
}

func (x *OlGameConfig) GetRaceNormalConfig() *RaceNormalConfig {
	if x != nil {
		return x.RaceNormalConfig
	}
	return nil
}

func (x *OlGameConfig) GetTeamKillProp() *TeamKillProp {
	if x != nil {
		return x.TeamKillProp
	}
	return nil
}

func (x *OlGameConfig) GetExitButtonPlan() int32 {
	if x != nil {
		return x.ExitButtonPlan
	}
	return 0
}

func (x *OlGameConfig) GetQualifyingGuide() int32 {
	if x != nil {
		return x.QualifyingGuide
	}
	return 0
}

func (x *OlGameConfig) GetOlGamePredictDataCountNew() int32 {
	if x != nil {
		return x.OlGamePredictDataCountNew
	}
	return 0
}

type GameStatusTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameMinDelay int32 `protobuf:"varint,1,opt,name=frame_min_delay,json=frameMinDelay,proto3" json:"frame_min_delay,omitempty"`
	PingInterval  int32 `protobuf:"varint,2,opt,name=ping_interval,json=pingInterval,proto3" json:"ping_interval,omitempty"`
}

func (x *GameStatusTrack) Reset() {
	*x = GameStatusTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatusTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatusTrack) ProtoMessage() {}

func (x *GameStatusTrack) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatusTrack.ProtoReflect.Descriptor instead.
func (*GameStatusTrack) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{7}
}

func (x *GameStatusTrack) GetFrameMinDelay() int32 {
	if x != nil {
		return x.FrameMinDelay
	}
	return 0
}

func (x *GameStatusTrack) GetPingInterval() int32 {
	if x != nil {
		return x.PingInterval
	}
	return 0
}

type GrassConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grass     []*GrassInfo `protobuf:"bytes,1,rep,name=grass,proto3" json:"grass,omitempty"`
	GridCount int32        `protobuf:"varint,2,opt,name=grid_count,json=gridCount,proto3" json:"grid_count,omitempty"`
}

func (x *GrassConfig) Reset() {
	*x = GrassConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrassConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrassConfig) ProtoMessage() {}

func (x *GrassConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrassConfig.ProtoReflect.Descriptor instead.
func (*GrassConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{8}
}

func (x *GrassConfig) GetGrass() []*GrassInfo {
	if x != nil {
		return x.Grass
	}
	return nil
}

func (x *GrassConfig) GetGridCount() int32 {
	if x != nil {
		return x.GridCount
	}
	return 0
}

type GrassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position []int32 `protobuf:"varint,1,rep,packed,name=position,proto3" json:"position,omitempty"`
	Url      string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GrassInfo) Reset() {
	*x = GrassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrassInfo) ProtoMessage() {}

func (x *GrassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrassInfo.ProtoReflect.Descriptor instead.
func (*GrassInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{9}
}

func (x *GrassInfo) GetPosition() []int32 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GrassInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TeamSuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head       []string               `protobuf:"bytes,1,rep,name=head,proto3" json:"head,omitempty"`
	Body       []string               `protobuf:"bytes,2,rep,name=body,proto3" json:"body,omitempty"`
	RepeatRate []int32                `protobuf:"varint,3,rep,packed,name=repeat_rate,json=repeatRate,proto3" json:"repeat_rate,omitempty"`
	Imgurl     string                 `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name       string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NewSuit    []*TeamSuitNewSuitInfo `protobuf:"bytes,6,rep,name=new_suit,json=newSuit,proto3" json:"new_suit,omitempty"`
}

func (x *TeamSuit) Reset() {
	*x = TeamSuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuit) ProtoMessage() {}

func (x *TeamSuit) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuit.ProtoReflect.Descriptor instead.
func (*TeamSuit) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{10}
}

func (x *TeamSuit) GetHead() []string {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TeamSuit) GetBody() []string {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *TeamSuit) GetRepeatRate() []int32 {
	if x != nil {
		return x.RepeatRate
	}
	return nil
}

func (x *TeamSuit) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *TeamSuit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamSuit) GetNewSuit() []*TeamSuitNewSuitInfo {
	if x != nil {
		return x.NewSuit
	}
	return nil
}

type TeamSuitNewSuitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinIds []int32 `protobuf:"varint,1,rep,packed,name=skin_ids,json=skinIds,proto3" json:"skin_ids,omitempty"`
	Id      int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Imgurl  string  `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name    string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TeamSuitNewSuitInfo) Reset() {
	*x = TeamSuitNewSuitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuitNewSuitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuitNewSuitInfo) ProtoMessage() {}

func (x *TeamSuitNewSuitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuitNewSuitInfo.ProtoReflect.Descriptor instead.
func (*TeamSuitNewSuitInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{11}
}

func (x *TeamSuitNewSuitInfo) GetSkinIds() []int32 {
	if x != nil {
		return x.SkinIds
	}
	return nil
}

func (x *TeamSuitNewSuitInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamSuitNewSuitInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *TeamSuitNewSuitInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TeamKillConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstBloodSoundEffect int32    `protobuf:"varint,1,opt,name=first_blood_sound_effect,json=firstBloodSoundEffect,proto3" json:"first_blood_sound_effect,omitempty"`
	ClanPointRule         string   `protobuf:"bytes,2,opt,name=clan_point_rule,json=clanPointRule,proto3" json:"clan_point_rule,omitempty"`
	IntroUrls             []string `protobuf:"bytes,3,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	IntroUrlsIpad         []string `protobuf:"bytes,4,rep,name=intro_urls_ipad,json=introUrlsIpad,proto3" json:"intro_urls_ipad,omitempty"`
	TopRewardDesc         string   `protobuf:"bytes,5,opt,name=top_reward_desc,json=topRewardDesc,proto3" json:"top_reward_desc,omitempty"`
	TopIntro              string   `protobuf:"bytes,6,opt,name=top_intro,json=topIntro,proto3" json:"top_intro,omitempty"`
	TopFirstIntro         string   `protobuf:"bytes,7,opt,name=top_first_intro,json=topFirstIntro,proto3" json:"top_first_intro,omitempty"`
	UseSeasonScore        int32    `protobuf:"varint,8,opt,name=use_season_score,json=useSeasonScore,proto3" json:"use_season_score,omitempty"`
}

func (x *TeamKillConfig) Reset() {
	*x = TeamKillConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamKillConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamKillConfig) ProtoMessage() {}

func (x *TeamKillConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamKillConfig.ProtoReflect.Descriptor instead.
func (*TeamKillConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{12}
}

func (x *TeamKillConfig) GetFirstBloodSoundEffect() int32 {
	if x != nil {
		return x.FirstBloodSoundEffect
	}
	return 0
}

func (x *TeamKillConfig) GetClanPointRule() string {
	if x != nil {
		return x.ClanPointRule
	}
	return ""
}

func (x *TeamKillConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *TeamKillConfig) GetIntroUrlsIpad() []string {
	if x != nil {
		return x.IntroUrlsIpad
	}
	return nil
}

func (x *TeamKillConfig) GetTopRewardDesc() string {
	if x != nil {
		return x.TopRewardDesc
	}
	return ""
}

func (x *TeamKillConfig) GetTopIntro() string {
	if x != nil {
		return x.TopIntro
	}
	return ""
}

func (x *TeamKillConfig) GetTopFirstIntro() string {
	if x != nil {
		return x.TopFirstIntro
	}
	return ""
}

func (x *TeamKillConfig) GetUseSeasonScore() int32 {
	if x != nil {
		return x.UseSeasonScore
	}
	return 0
}

type TeamMeleeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamMeleeRule string   `protobuf:"bytes,1,opt,name=team_melee_rule,json=teamMeleeRule,proto3" json:"team_melee_rule,omitempty"`
	GameRule      string   `protobuf:"bytes,2,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`
	ClanPointRule string   `protobuf:"bytes,3,opt,name=clan_point_rule,json=clanPointRule,proto3" json:"clan_point_rule,omitempty"`
	IntroUrls     []string `protobuf:"bytes,4,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	ShowFeedback  int32    `protobuf:"varint,5,opt,name=show_feedback,json=showFeedback,proto3" json:"show_feedback,omitempty"`
	FeedbackUrl   string   `protobuf:"bytes,6,opt,name=feedback_url,json=feedbackUrl,proto3" json:"feedback_url,omitempty"`
	ShowGradeInfo int32    `protobuf:"varint,7,opt,name=show_grade_info,json=showGradeInfo,proto3" json:"show_grade_info,omitempty"`
}

func (x *TeamMeleeConfig) Reset() {
	*x = TeamMeleeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMeleeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMeleeConfig) ProtoMessage() {}

func (x *TeamMeleeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMeleeConfig.ProtoReflect.Descriptor instead.
func (*TeamMeleeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{13}
}

func (x *TeamMeleeConfig) GetTeamMeleeRule() string {
	if x != nil {
		return x.TeamMeleeRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetGameRule() string {
	if x != nil {
		return x.GameRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetClanPointRule() string {
	if x != nil {
		return x.ClanPointRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *TeamMeleeConfig) GetShowFeedback() int32 {
	if x != nil {
		return x.ShowFeedback
	}
	return 0
}

func (x *TeamMeleeConfig) GetFeedbackUrl() string {
	if x != nil {
		return x.FeedbackUrl
	}
	return ""
}

func (x *TeamMeleeConfig) GetShowGradeInfo() int32 {
	if x != nil {
		return x.ShowGradeInfo
	}
	return 0
}

type QualifyingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntroUrls       []string `protobuf:"bytes,1,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	IntroUrlsV2     []string `protobuf:"bytes,2,rep,name=intro_urls_v2,json=introUrlsV2,proto3" json:"intro_urls_v2,omitempty"`
	IntroUrlsIpad   []string `protobuf:"bytes,3,rep,name=intro_urls_ipad,json=introUrlsIpad,proto3" json:"intro_urls_ipad,omitempty"`
	IntroUrlsIpadV2 []string `protobuf:"bytes,4,rep,name=intro_urls_ipad_v2,json=introUrlsIpadV2,proto3" json:"intro_urls_ipad_v2,omitempty"`
	UnlockTip       string   `protobuf:"bytes,5,opt,name=unlock_tip,json=unlockTip,proto3" json:"unlock_tip,omitempty"`     // 解锁提示"无尽模式达到***分解锁"
	GameRule        string   `protobuf:"bytes,6,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`        // 结算页点赞说明
	ForceGuide      int32    `protobuf:"varint,7,opt,name=force_guide,json=forceGuide,proto3" json:"force_guide,omitempty"` //1有引导 // 对于未玩过团战的玩家,无尽模式以高于一定分数的成绩结束后是否出现强制团战引导
	PrettyPage      int32    `protobuf:"varint,8,opt,name=pretty_page,json=prettyPage,proto3" json:"pretty_page,omitempty"`
	BannerUrl       string   `protobuf:"bytes,9,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	BannerLink      string   `protobuf:"bytes,10,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	UseKcpV2        int32    `protobuf:"varint,11,opt,name=use_kcp_v2,json=useKcpV2,proto3" json:"use_kcp_v2,omitempty"`
	UseNettyV2      int32    `protobuf:"varint,12,opt,name=use_netty_v2,json=useNettyV2,proto3" json:"use_netty_v2,omitempty"`
	UseNetty        int32    `protobuf:"varint,13,opt,name=use_netty,json=useNetty,proto3" json:"use_netty,omitempty"`
	NetworkSurvey   int32    `protobuf:"varint,14,opt,name=network_survey,json=networkSurvey,proto3" json:"network_survey,omitempty"`
	UseRenderOffset int32    `protobuf:"varint,15,opt,name=use_render_offset,json=useRenderOffset,proto3" json:"use_render_offset,omitempty"`
	NetworkSurveyV2 int32    `protobuf:"varint,16,opt,name=network_survey_v2,json=networkSurveyV2,proto3" json:"network_survey_v2,omitempty"`
}

func (x *QualifyingConfig) Reset() {
	*x = QualifyingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingConfig) ProtoMessage() {}

func (x *QualifyingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingConfig.ProtoReflect.Descriptor instead.
func (*QualifyingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{14}
}

func (x *QualifyingConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsV2() []string {
	if x != nil {
		return x.IntroUrlsV2
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsIpad() []string {
	if x != nil {
		return x.IntroUrlsIpad
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsIpadV2() []string {
	if x != nil {
		return x.IntroUrlsIpadV2
	}
	return nil
}

func (x *QualifyingConfig) GetUnlockTip() string {
	if x != nil {
		return x.UnlockTip
	}
	return ""
}

func (x *QualifyingConfig) GetGameRule() string {
	if x != nil {
		return x.GameRule
	}
	return ""
}

func (x *QualifyingConfig) GetForceGuide() int32 {
	if x != nil {
		return x.ForceGuide
	}
	return 0
}

func (x *QualifyingConfig) GetPrettyPage() int32 {
	if x != nil {
		return x.PrettyPage
	}
	return 0
}

func (x *QualifyingConfig) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *QualifyingConfig) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *QualifyingConfig) GetUseKcpV2() int32 {
	if x != nil {
		return x.UseKcpV2
	}
	return 0
}

func (x *QualifyingConfig) GetUseNettyV2() int32 {
	if x != nil {
		return x.UseNettyV2
	}
	return 0
}

func (x *QualifyingConfig) GetUseNetty() int32 {
	if x != nil {
		return x.UseNetty
	}
	return 0
}

func (x *QualifyingConfig) GetNetworkSurvey() int32 {
	if x != nil {
		return x.NetworkSurvey
	}
	return 0
}

func (x *QualifyingConfig) GetUseRenderOffset() int32 {
	if x != nil {
		return x.UseRenderOffset
	}
	return 0
}

func (x *QualifyingConfig) GetNetworkSurveyV2() int32 {
	if x != nil {
		return x.NetworkSurveyV2
	}
	return 0
}

type RaceNormalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannerUrl  string   `protobuf:"bytes,1,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	BannerLink string   `protobuf:"bytes,2,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	IntroUrls  []string `protobuf:"bytes,3,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
}

func (x *RaceNormalConfig) Reset() {
	*x = RaceNormalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceNormalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceNormalConfig) ProtoMessage() {}

func (x *RaceNormalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceNormalConfig.ProtoReflect.Descriptor instead.
func (*RaceNormalConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{15}
}

func (x *RaceNormalConfig) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *RaceNormalConfig) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *RaceNormalConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

type TeamKillProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceList []*CPriceInfo          `protobuf:"bytes,1,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PropList  []*config.RewardConfig `protobuf:"bytes,2,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
	GameFree  int32                  `protobuf:"varint,3,opt,name=game_free,json=gameFree,proto3" json:"game_free,omitempty"`
	ShowIcon  int32                  `protobuf:"varint,4,opt,name=show_icon,json=showIcon,proto3" json:"show_icon,omitempty"`
}

func (x *TeamKillProp) Reset() {
	*x = TeamKillProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamKillProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamKillProp) ProtoMessage() {}

func (x *TeamKillProp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamKillProp.ProtoReflect.Descriptor instead.
func (*TeamKillProp) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{16}
}

func (x *TeamKillProp) GetPriceList() []*CPriceInfo {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *TeamKillProp) GetPropList() []*config.RewardConfig {
	if x != nil {
		return x.PropList
	}
	return nil
}

func (x *TeamKillProp) GetGameFree() int32 {
	if x != nil {
		return x.GameFree
	}
	return 0
}

func (x *TeamKillProp) GetShowIcon() int32 {
	if x != nil {
		return x.ShowIcon
	}
	return 0
}

// === show_config begin ======================================
type ShowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelConfig   []*ShowLevelConfig `protobuf:"bytes,1,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty"`
	SkillName     []*ShowSkillName   `protobuf:"bytes,2,rep,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	IntroV2       string             `protobuf:"bytes,3,opt,name=intro_v2,json=introV2,proto3" json:"intro_v2,omitempty"`
	AdditionIntro string             `protobuf:"bytes,4,opt,name=addition_intro,json=additionIntro,proto3" json:"addition_intro,omitempty"`
	Intro         string             `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	IconStyle     []*ShowIconStyle   `protobuf:"bytes,6,rep,name=icon_style,json=iconStyle,proto3" json:"icon_style,omitempty"`
}

func (x *ShowConfig) Reset() {
	*x = ShowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowConfig) ProtoMessage() {}

func (x *ShowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowConfig.ProtoReflect.Descriptor instead.
func (*ShowConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{17}
}

func (x *ShowConfig) GetLevelConfig() []*ShowLevelConfig {
	if x != nil {
		return x.LevelConfig
	}
	return nil
}

func (x *ShowConfig) GetSkillName() []*ShowSkillName {
	if x != nil {
		return x.SkillName
	}
	return nil
}

func (x *ShowConfig) GetIntroV2() string {
	if x != nil {
		return x.IntroV2
	}
	return ""
}

func (x *ShowConfig) GetAdditionIntro() string {
	if x != nil {
		return x.AdditionIntro
	}
	return ""
}

func (x *ShowConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *ShowConfig) GetIconStyle() []*ShowIconStyle {
	if x != nil {
		return x.IconStyle
	}
	return nil
}

type ShowIconStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num    int32  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ImgUrl string `protobuf:"bytes,2,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
}

func (x *ShowIconStyle) Reset() {
	*x = ShowIconStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIconStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIconStyle) ProtoMessage() {}

func (x *ShowIconStyle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIconStyle.ProtoReflect.Descriptor instead.
func (*ShowIconStyle) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{18}
}

func (x *ShowIconStyle) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ShowIconStyle) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

type ShowLevelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSkill     string           `protobuf:"bytes,1,opt,name=game_skill,json=gameSkill,proto3" json:"game_skill,omitempty"`
	Reward        []*CRewardItem   `protobuf:"bytes,2,rep,name=reward,proto3" json:"reward,omitempty"`
	Thumbnail     string           `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ThumAnimUrl   string           `protobuf:"bytes,4,opt,name=thum_anim_url,json=thumAnimUrl,proto3" json:"thum_anim_url,omitempty"`
	IconUrl       string           `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	AnimUrl       string           `protobuf:"bytes,6,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	TotalShow     int32            `protobuf:"varint,7,opt,name=total_show,json=totalShow,proto3" json:"total_show,omitempty"`
	Level         int32            `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	GameSkillList []*ShowSkillBuff `protobuf:"bytes,9,rep,name=game_skill_list,json=gameSkillList,proto3" json:"game_skill_list,omitempty"` // 不返回客户端
	Show          string           `protobuf:"bytes,10,opt,name=show,proto3" json:"show,omitempty"`
}

func (x *ShowLevelConfig) Reset() {
	*x = ShowLevelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowLevelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowLevelConfig) ProtoMessage() {}

func (x *ShowLevelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowLevelConfig.ProtoReflect.Descriptor instead.
func (*ShowLevelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{19}
}

func (x *ShowLevelConfig) GetGameSkill() string {
	if x != nil {
		return x.GameSkill
	}
	return ""
}

func (x *ShowLevelConfig) GetReward() []*CRewardItem {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ShowLevelConfig) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ShowLevelConfig) GetThumAnimUrl() string {
	if x != nil {
		return x.ThumAnimUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetTotalShow() int32 {
	if x != nil {
		return x.TotalShow
	}
	return 0
}

func (x *ShowLevelConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ShowLevelConfig) GetGameSkillList() []*ShowSkillBuff {
	if x != nil {
		return x.GameSkillList
	}
	return nil
}

func (x *ShowLevelConfig) GetShow() string {
	if x != nil {
		return x.Show
	}
	return ""
}

type ShowSkillName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillType int32  `protobuf:"varint,1,opt,name=skill_type,json=skillType,proto3" json:"skill_type,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ShowSkillName) Reset() {
	*x = ShowSkillName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSkillName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSkillName) ProtoMessage() {}

func (x *ShowSkillName) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSkillName.ProtoReflect.Descriptor instead.
func (*ShowSkillName) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{20}
}

func (x *ShowSkillName) GetSkillType() int32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *ShowSkillName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ShowSkillBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillType int32  `protobuf:"varint,1,opt,name=skill_type,json=skillType,proto3" json:"skill_type,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValueText string `protobuf:"bytes,3,opt,name=value_text,json=valueText,proto3" json:"value_text,omitempty"`
}

func (x *ShowSkillBuff) Reset() {
	*x = ShowSkillBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSkillBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSkillBuff) ProtoMessage() {}

func (x *ShowSkillBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSkillBuff.ProtoReflect.Descriptor instead.
func (*ShowSkillBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{21}
}

func (x *ShowSkillBuff) GetSkillType() int32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *ShowSkillBuff) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ShowSkillBuff) GetValueText() string {
	if x != nil {
		return x.ValueText
	}
	return ""
}

// === user_config begin ======================================
type UserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenderCost               int32            `protobuf:"varint,1,opt,name=gender_cost,json=genderCost,proto3" json:"gender_cost,omitempty"`                                //性别修改需要的苹果数量
	CertifyUrl               string           `protobuf:"bytes,2,opt,name=certify_url,json=certifyUrl,proto3" json:"certify_url,omitempty"`                                 // 实名认证 url 地址
	CacheCleanSwitch         int32            `protobuf:"varint,3,opt,name=cache_clean_switch,json=cacheCleanSwitch,proto3" json:"cache_clean_switch,omitempty"`            //1开2关
	SnakeCoinLimit           int32            `protobuf:"varint,4,opt,name=snake_coin_limit,json=snakeCoinLimit,proto3" json:"snake_coin_limit,omitempty"`                  // 彩豆周上限
	SingleTextConfig         string           `protobuf:"bytes,5,opt,name=single_text_config,json=singleTextConfig,proto3" json:"single_text_config,omitempty"`             // 单机右上角文案说明
	QualifyingTextConfig     string           `protobuf:"bytes,6,opt,name=qualifying_text_config,json=qualifyingTextConfig,proto3" json:"qualifying_text_config,omitempty"` // 团战右上角文案说明
	ClanTextConfig           string           `protobuf:"bytes,7,opt,name=clan_text_config,json=clanTextConfig,proto3" json:"clan_text_config,omitempty"`                   // 战队赛结算右上角文案说明
	AbnormalStore            []*DeviceConfig  `protobuf:"bytes,8,rep,name=abnormal_store,json=abnormalStore,proto3" json:"abnormal_store,omitempty"`
	ZhiTokenUrl2             string           `protobuf:"bytes,9,opt,name=zhi_token_url2,json=zhiTokenUrl2,proto3" json:"zhi_token_url2,omitempty"`                            // 吱口令
	SendRedPackNeedCare      int32            `protobuf:"varint,10,opt,name=send_red_pack_need_care,json=sendRedPackNeedCare,proto3" json:"send_red_pack_need_care,omitempty"` // 红包守护值
	UploadAvatarTips         string           `protobuf:"bytes,11,opt,name=upload_avatar_tips,json=uploadAvatarTips,proto3" json:"upload_avatar_tips,omitempty"`               // 上传头像奖励
	StartEndlessFlag         int32            `protobuf:"varint,12,opt,name=start_endless_flag,json=startEndlessFlag,proto3" json:"start_endless_flag,omitempty"`              // 是否首页直接进无尽，0否1是
	HomeLoginDays            []int32          `protobuf:"varint,13,rep,packed,name=home_login_days,json=homeLoginDays,proto3" json:"home_login_days,omitempty"`                //新用户第多少天登录 首次回首页后弹登录
	NicknameHomeCount        int32            `protobuf:"varint,14,opt,name=nickname_home_count,json=nicknameHomeCount,proto3" json:"nickname_home_count,omitempty"`           //新用户第三天登录 多少次回首页后弹改名
	ShowConfig               *ShowConfig      `protobuf:"bytes,15,opt,name=show_config,json=showConfig,proto3" json:"show_config,omitempty"`
	AntiAddiction            *AntiAddiction   `protobuf:"bytes,16,opt,name=anti_addiction,json=antiAddiction,proto3" json:"anti_addiction,omitempty"`
	OnlineIntervalSeconds    int32            `protobuf:"varint,17,opt,name=online_interval_seconds,json=onlineIntervalSeconds,proto3" json:"online_interval_seconds,omitempty"`
	GameEndSkin              *GameEndSkin     `protobuf:"bytes,18,opt,name=game_end_skin,json=gameEndSkin,proto3" json:"game_end_skin,omitempty"`
	WorkdayList              []string         `protobuf:"bytes,19,rep,name=workday_list,json=workdayList,proto3" json:"workday_list,omitempty"`
	HolidayList              []string         `protobuf:"bytes,20,rep,name=holiday_list,json=holidayList,proto3" json:"holiday_list,omitempty"`
	RenamePopupRule          *RenamePopupRule `protobuf:"bytes,21,opt,name=rename_popup_rule,json=renamePopupRule,proto3" json:"rename_popup_rule,omitempty"`
	BindConfig               *BindConfig      `protobuf:"bytes,22,opt,name=bind_config,json=bindConfig,proto3" json:"bind_config,omitempty"`
	SettingConf              *SettingConfig   `protobuf:"bytes,23,opt,name=setting_conf,json=settingConf,proto3" json:"setting_conf,omitempty"`
	Feedback                 *FeedbackConfig  `protobuf:"bytes,24,opt,name=feedback,proto3" json:"feedback,omitempty"`
	Flags                    *FlagsConfig     `protobuf:"bytes,25,opt,name=flags,proto3" json:"flags,omitempty"`
	CertifyReward            []*CRewardItem   `protobuf:"bytes,26,rep,name=certify_reward,json=certifyReward,proto3" json:"certify_reward,omitempty"`
	RegisterSurvey           *RegisterSurvey  `protobuf:"bytes,27,opt,name=register_survey,json=registerSurvey,proto3" json:"register_survey,omitempty"`
	RecruitPopup             *RecruitPopup    `protobuf:"bytes,28,opt,name=recruit_popup,json=recruitPopup,proto3" json:"recruit_popup,omitempty"`
	MinorLimit               *MinorLimit      `protobuf:"bytes,29,opt,name=minor_limit,json=minorLimit,proto3" json:"minor_limit,omitempty"`
	LoginLimitMsg            string           `protobuf:"bytes,30,opt,name=login_limit_msg,json=loginLimitMsg,proto3" json:"login_limit_msg,omitempty"`
	AgeTipsText              string           `protobuf:"bytes,31,opt,name=age_tips_text,json=ageTipsText,proto3" json:"age_tips_text,omitempty"`
	CertifyRewardImage       string           `protobuf:"bytes,32,opt,name=certify_reward_image,json=certifyRewardImage,proto3" json:"certify_reward_image,omitempty"`
	NewUserConfig            *NewUserConfig   `protobuf:"bytes,33,opt,name=new_user_config,json=newUserConfig,proto3" json:"new_user_config,omitempty"`
	OpenCpButton             int32            `protobuf:"varint,34,opt,name=open_cp_button,json=openCpButton,proto3" json:"open_cp_button,omitempty"` // 是否开启cp背景更换按钮，1为开
	AlipayCertify            int32            `protobuf:"varint,35,opt,name=alipay_certify,json=alipayCertify,proto3" json:"alipay_certify,omitempty"`
	ChannelLoginFlag         int32            `protobuf:"varint,36,opt,name=channel_login_flag,json=channelLoginFlag,proto3" json:"channel_login_flag,omitempty"`
	CommentConfig            *CommentConfig   `protobuf:"bytes,37,opt,name=comment_config,json=commentConfig,proto3" json:"comment_config,omitempty"` // 评论配置
	LoginPageFlag            int32            `protobuf:"varint,38,opt,name=login_page_flag,json=loginPageFlag,proto3" json:"login_page_flag,omitempty"`
	ContactText              string           `protobuf:"bytes,39,opt,name=contact_text,json=contactText,proto3" json:"contact_text,omitempty"`
	LoginHomeCount           int32            `protobuf:"varint,40,opt,name=login_home_count,json=loginHomeCount,proto3" json:"login_home_count,omitempty"`
	UnityFlags               *UnityFlags      `protobuf:"bytes,41,opt,name=unity_flags,json=unityFlags,proto3" json:"unity_flags,omitempty"`
	UseTopon                 int32            `protobuf:"varint,42,opt,name=use_topon,json=useTopon,proto3" json:"use_topon,omitempty"`
	IdfaConfig               *IdfaConfig      `protobuf:"bytes,43,opt,name=idfa_config,json=idfaConfig,proto3" json:"idfa_config,omitempty"` // ios idfa 弹窗配置
	VisitorFlag              int32            `protobuf:"varint,44,opt,name=visitor_flag,json=visitorFlag,proto3" json:"visitor_flag,omitempty"`
	ThirdFailedVisitorFlag   int32            `protobuf:"varint,45,opt,name=third_failed_visitor_flag,json=thirdFailedVisitorFlag,proto3" json:"third_failed_visitor_flag,omitempty"`
	ThirdFailedVisitorMarket []string         `protobuf:"bytes,46,rep,name=third_failed_visitor_market,json=thirdFailedVisitorMarket,proto3" json:"third_failed_visitor_market,omitempty"`
}

func (x *UserConfig) Reset() {
	*x = UserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConfig) ProtoMessage() {}

func (x *UserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConfig.ProtoReflect.Descriptor instead.
func (*UserConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{22}
}

func (x *UserConfig) GetGenderCost() int32 {
	if x != nil {
		return x.GenderCost
	}
	return 0
}

func (x *UserConfig) GetCertifyUrl() string {
	if x != nil {
		return x.CertifyUrl
	}
	return ""
}

func (x *UserConfig) GetCacheCleanSwitch() int32 {
	if x != nil {
		return x.CacheCleanSwitch
	}
	return 0
}

func (x *UserConfig) GetSnakeCoinLimit() int32 {
	if x != nil {
		return x.SnakeCoinLimit
	}
	return 0
}

func (x *UserConfig) GetSingleTextConfig() string {
	if x != nil {
		return x.SingleTextConfig
	}
	return ""
}

func (x *UserConfig) GetQualifyingTextConfig() string {
	if x != nil {
		return x.QualifyingTextConfig
	}
	return ""
}

func (x *UserConfig) GetClanTextConfig() string {
	if x != nil {
		return x.ClanTextConfig
	}
	return ""
}

func (x *UserConfig) GetAbnormalStore() []*DeviceConfig {
	if x != nil {
		return x.AbnormalStore
	}
	return nil
}

func (x *UserConfig) GetZhiTokenUrl2() string {
	if x != nil {
		return x.ZhiTokenUrl2
	}
	return ""
}

func (x *UserConfig) GetSendRedPackNeedCare() int32 {
	if x != nil {
		return x.SendRedPackNeedCare
	}
	return 0
}

func (x *UserConfig) GetUploadAvatarTips() string {
	if x != nil {
		return x.UploadAvatarTips
	}
	return ""
}

func (x *UserConfig) GetStartEndlessFlag() int32 {
	if x != nil {
		return x.StartEndlessFlag
	}
	return 0
}

func (x *UserConfig) GetHomeLoginDays() []int32 {
	if x != nil {
		return x.HomeLoginDays
	}
	return nil
}

func (x *UserConfig) GetNicknameHomeCount() int32 {
	if x != nil {
		return x.NicknameHomeCount
	}
	return 0
}

func (x *UserConfig) GetShowConfig() *ShowConfig {
	if x != nil {
		return x.ShowConfig
	}
	return nil
}

func (x *UserConfig) GetAntiAddiction() *AntiAddiction {
	if x != nil {
		return x.AntiAddiction
	}
	return nil
}

func (x *UserConfig) GetOnlineIntervalSeconds() int32 {
	if x != nil {
		return x.OnlineIntervalSeconds
	}
	return 0
}

func (x *UserConfig) GetGameEndSkin() *GameEndSkin {
	if x != nil {
		return x.GameEndSkin
	}
	return nil
}

func (x *UserConfig) GetWorkdayList() []string {
	if x != nil {
		return x.WorkdayList
	}
	return nil
}

func (x *UserConfig) GetHolidayList() []string {
	if x != nil {
		return x.HolidayList
	}
	return nil
}

func (x *UserConfig) GetRenamePopupRule() *RenamePopupRule {
	if x != nil {
		return x.RenamePopupRule
	}
	return nil
}

func (x *UserConfig) GetBindConfig() *BindConfig {
	if x != nil {
		return x.BindConfig
	}
	return nil
}

func (x *UserConfig) GetSettingConf() *SettingConfig {
	if x != nil {
		return x.SettingConf
	}
	return nil
}

func (x *UserConfig) GetFeedback() *FeedbackConfig {
	if x != nil {
		return x.Feedback
	}
	return nil
}

func (x *UserConfig) GetFlags() *FlagsConfig {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *UserConfig) GetCertifyReward() []*CRewardItem {
	if x != nil {
		return x.CertifyReward
	}
	return nil
}

func (x *UserConfig) GetRegisterSurvey() *RegisterSurvey {
	if x != nil {
		return x.RegisterSurvey
	}
	return nil
}

func (x *UserConfig) GetRecruitPopup() *RecruitPopup {
	if x != nil {
		return x.RecruitPopup
	}
	return nil
}

func (x *UserConfig) GetMinorLimit() *MinorLimit {
	if x != nil {
		return x.MinorLimit
	}
	return nil
}

func (x *UserConfig) GetLoginLimitMsg() string {
	if x != nil {
		return x.LoginLimitMsg
	}
	return ""
}

func (x *UserConfig) GetAgeTipsText() string {
	if x != nil {
		return x.AgeTipsText
	}
	return ""
}

func (x *UserConfig) GetCertifyRewardImage() string {
	if x != nil {
		return x.CertifyRewardImage
	}
	return ""
}

func (x *UserConfig) GetNewUserConfig() *NewUserConfig {
	if x != nil {
		return x.NewUserConfig
	}
	return nil
}

func (x *UserConfig) GetOpenCpButton() int32 {
	if x != nil {
		return x.OpenCpButton
	}
	return 0
}

func (x *UserConfig) GetAlipayCertify() int32 {
	if x != nil {
		return x.AlipayCertify
	}
	return 0
}

func (x *UserConfig) GetChannelLoginFlag() int32 {
	if x != nil {
		return x.ChannelLoginFlag
	}
	return 0
}

func (x *UserConfig) GetCommentConfig() *CommentConfig {
	if x != nil {
		return x.CommentConfig
	}
	return nil
}

func (x *UserConfig) GetLoginPageFlag() int32 {
	if x != nil {
		return x.LoginPageFlag
	}
	return 0
}

func (x *UserConfig) GetContactText() string {
	if x != nil {
		return x.ContactText
	}
	return ""
}

func (x *UserConfig) GetLoginHomeCount() int32 {
	if x != nil {
		return x.LoginHomeCount
	}
	return 0
}

func (x *UserConfig) GetUnityFlags() *UnityFlags {
	if x != nil {
		return x.UnityFlags
	}
	return nil
}

func (x *UserConfig) GetUseTopon() int32 {
	if x != nil {
		return x.UseTopon
	}
	return 0
}

func (x *UserConfig) GetIdfaConfig() *IdfaConfig {
	if x != nil {
		return x.IdfaConfig
	}
	return nil
}

func (x *UserConfig) GetVisitorFlag() int32 {
	if x != nil {
		return x.VisitorFlag
	}
	return 0
}

func (x *UserConfig) GetThirdFailedVisitorFlag() int32 {
	if x != nil {
		return x.ThirdFailedVisitorFlag
	}
	return 0
}

func (x *UserConfig) GetThirdFailedVisitorMarket() []string {
	if x != nil {
		return x.ThirdFailedVisitorMarket
	}
	return nil
}

type UnityFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnityFlags) Reset() {
	*x = UnityFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityFlags) ProtoMessage() {}

func (x *UnityFlags) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityFlags.ProtoReflect.Descriptor instead.
func (*UnityFlags) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{23}
}

type MinorLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAge         int32         `protobuf:"varint,1,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`                           //小于这个18值的是未成年
	HideGameVoice  int32         `protobuf:"varint,2,opt,name=hide_game_voice,json=hideGameVoice,proto3" json:"hide_game_voice,omitempty"`    //1隐藏
	HideFriendRank int32         `protobuf:"varint,3,opt,name=hide_friend_rank,json=hideFriendRank,proto3" json:"hide_friend_rank,omitempty"` //1隐藏
	OrderCurator   *OrderCurator `protobuf:"bytes,4,opt,name=order_curator,json=orderCurator,proto3" json:"order_curator,omitempty"`
}

func (x *MinorLimit) Reset() {
	*x = MinorLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinorLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinorLimit) ProtoMessage() {}

func (x *MinorLimit) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinorLimit.ProtoReflect.Descriptor instead.
func (*MinorLimit) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{24}
}

func (x *MinorLimit) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *MinorLimit) GetHideGameVoice() int32 {
	if x != nil {
		return x.HideGameVoice
	}
	return 0
}

func (x *MinorLimit) GetHideFriendRank() int32 {
	if x != nil {
		return x.HideFriendRank
	}
	return 0
}

func (x *MinorLimit) GetOrderCurator() *OrderCurator {
	if x != nil {
		return x.OrderCurator
	}
	return nil
}

type OrderCurator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Need int32  `protobuf:"varint,2,opt,name=need,proto3" json:"need,omitempty"` //1要弹
}

func (x *OrderCurator) Reset() {
	*x = OrderCurator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCurator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCurator) ProtoMessage() {}

func (x *OrderCurator) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCurator.ProtoReflect.Descriptor instead.
func (*OrderCurator) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{25}
}

func (x *OrderCurator) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *OrderCurator) GetNeed() int32 {
	if x != nil {
		return x.Need
	}
	return 0
}

type FlagsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisitorFlag                       int32 `protobuf:"varint,1,opt,name=visitor_flag,json=visitorFlag,proto3" json:"visitor_flag,omitempty"`
	DeleteArrayOes                    int32 `protobuf:"varint,2,opt,name=delete_array_oes,json=deleteArrayOes,proto3" json:"delete_array_oes,omitempty"`
	FirstBloodSoundEffect             int32 `protobuf:"varint,3,opt,name=first_blood_sound_effect,json=firstBloodSoundEffect,proto3" json:"first_blood_sound_effect,omitempty"` //1是新音效，0默认音效
	OpenWeddingListAnim               int32 `protobuf:"varint,4,opt,name=open_wedding_list_anim,json=openWeddingListAnim,proto3" json:"open_wedding_list_anim,omitempty"`       // 是否开启教堂婚礼列表动画
	TcpPushStash                      int32 `protobuf:"varint,5,opt,name=tcp_push_stash,json=tcpPushStash,proto3" json:"tcp_push_stash,omitempty"`                              //是否开启暂存
	OpenGotoUnityEndless              int32 `protobuf:"varint,6,opt,name=open_goto_unity_endless,json=openGotoUnityEndless,proto3" json:"open_goto_unity_endless,omitempty"`
	OldSingleGameSettle               int32 `protobuf:"varint,7,opt,name=old_single_game_settle,json=oldSingleGameSettle,proto3" json:"old_single_game_settle,omitempty"`
	SgEndUiFlag                       int32 `protobuf:"varint,8,opt,name=sg_end_ui_flag,json=sgEndUiFlag,proto3" json:"sg_end_ui_flag,omitempty"`
	SigmobDelay                       int32 `protobuf:"varint,9,opt,name=sigmob_delay,json=sigmobDelay,proto3" json:"sigmob_delay,omitempty"`
	CloseOffScreenRendering           int32 `protobuf:"varint,10,opt,name=close_off_screen_rendering,json=closeOffScreenRendering,proto3" json:"close_off_screen_rendering,omitempty"`
	MemoryDotDelay                    int32 `protobuf:"varint,11,opt,name=memory_dot_delay,json=memoryDotDelay,proto3" json:"memory_dot_delay,omitempty"`
	GlCheckAppState                   int32 `protobuf:"varint,12,opt,name=gl_check_app_state,json=glCheckAppState,proto3" json:"gl_check_app_state,omitempty"`
	IosOptimizeHomeSkinFlag           int32 `protobuf:"varint,13,opt,name=ios_optimize_home_skin_flag,json=iosOptimizeHomeSkinFlag,proto3" json:"ios_optimize_home_skin_flag,omitempty"`
	ChannelSocialHuaweiState          int32 `protobuf:"varint,14,opt,name=channel_social_huawei_state,json=channelSocialHuaweiState,proto3" json:"channel_social_huawei_state,omitempty"`
	ChannelSocialOppoState            int32 `protobuf:"varint,15,opt,name=channel_social_oppo_state,json=channelSocialOppoState,proto3" json:"channel_social_oppo_state,omitempty"`
	ChannelSocialVivoState            int32 `protobuf:"varint,16,opt,name=channel_social_vivo_state,json=channelSocialVivoState,proto3" json:"channel_social_vivo_state,omitempty"`
	NewImageChooser                   int32 `protobuf:"varint,17,opt,name=new_image_chooser,json=newImageChooser,proto3" json:"new_image_chooser,omitempty"`
	CloseNativeOperatorFlag           int32 `protobuf:"varint,18,opt,name=close_native_operator_flag,json=closeNativeOperatorFlag,proto3" json:"close_native_operator_flag,omitempty"`
	DownloaderState                   int32 `protobuf:"varint,19,opt,name=downloader_state,json=downloaderState,proto3" json:"downloader_state,omitempty"`
	DownloaderPauseStateV2            int32 `protobuf:"varint,20,opt,name=downloader_pause_state_v2,json=downloaderPauseStateV2,proto3" json:"downloader_pause_state_v2,omitempty"`
	CloseVideoMetalRender             int32 `protobuf:"varint,21,opt,name=close_video_metal_render,json=closeVideoMetalRender,proto3" json:"close_video_metal_render,omitempty"`
	JsbridgeStopHandleSpecialCharater int32 `protobuf:"varint,22,opt,name=jsbridge_stop_handle_special_charater,json=jsbridgeStopHandleSpecialCharater,proto3" json:"jsbridge_stop_handle_special_charater,omitempty"`
	OppoLoginFlag                     int32 `protobuf:"varint,23,opt,name=oppo_login_flag,json=oppoLoginFlag,proto3" json:"oppo_login_flag,omitempty"`
	OppoLoginRetryCount               int32 `protobuf:"varint,24,opt,name=oppo_login_retry_count,json=oppoLoginRetryCount,proto3" json:"oppo_login_retry_count,omitempty"`
	EnableWebveiwCopyFileToTemp       int32 `protobuf:"varint,25,opt,name=enable_webveiw_copy_file_to_temp,json=enableWebveiwCopyFileToTemp,proto3" json:"enable_webveiw_copy_file_to_temp,omitempty"`
	OpenGameProfiler                  int32 `protobuf:"varint,26,opt,name=open_game_profiler,json=openGameProfiler,proto3" json:"open_game_profiler,omitempty"`
	DisableInvisibleMemoryReclamation int32 `protobuf:"varint,27,opt,name=disable_invisible_memory_reclamation,json=disableInvisibleMemoryReclamation,proto3" json:"disable_invisible_memory_reclamation,omitempty"`
	YybTobidAdSwitch                  int32 `protobuf:"varint,28,opt,name=yyb_tobid_ad_switch,json=yybTobidAdSwitch,proto3" json:"yyb_tobid_ad_switch,omitempty"`
	NotShowIdfa                       int32 `protobuf:"varint,29,opt,name=not_show_idfa,json=notShowIdfa,proto3" json:"not_show_idfa,omitempty"`
}

func (x *FlagsConfig) Reset() {
	*x = FlagsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagsConfig) ProtoMessage() {}

func (x *FlagsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagsConfig.ProtoReflect.Descriptor instead.
func (*FlagsConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{26}
}

func (x *FlagsConfig) GetVisitorFlag() int32 {
	if x != nil {
		return x.VisitorFlag
	}
	return 0
}

func (x *FlagsConfig) GetDeleteArrayOes() int32 {
	if x != nil {
		return x.DeleteArrayOes
	}
	return 0
}

func (x *FlagsConfig) GetFirstBloodSoundEffect() int32 {
	if x != nil {
		return x.FirstBloodSoundEffect
	}
	return 0
}

func (x *FlagsConfig) GetOpenWeddingListAnim() int32 {
	if x != nil {
		return x.OpenWeddingListAnim
	}
	return 0
}

func (x *FlagsConfig) GetTcpPushStash() int32 {
	if x != nil {
		return x.TcpPushStash
	}
	return 0
}

func (x *FlagsConfig) GetOpenGotoUnityEndless() int32 {
	if x != nil {
		return x.OpenGotoUnityEndless
	}
	return 0
}

func (x *FlagsConfig) GetOldSingleGameSettle() int32 {
	if x != nil {
		return x.OldSingleGameSettle
	}
	return 0
}

func (x *FlagsConfig) GetSgEndUiFlag() int32 {
	if x != nil {
		return x.SgEndUiFlag
	}
	return 0
}

func (x *FlagsConfig) GetSigmobDelay() int32 {
	if x != nil {
		return x.SigmobDelay
	}
	return 0
}

func (x *FlagsConfig) GetCloseOffScreenRendering() int32 {
	if x != nil {
		return x.CloseOffScreenRendering
	}
	return 0
}

func (x *FlagsConfig) GetMemoryDotDelay() int32 {
	if x != nil {
		return x.MemoryDotDelay
	}
	return 0
}

func (x *FlagsConfig) GetGlCheckAppState() int32 {
	if x != nil {
		return x.GlCheckAppState
	}
	return 0
}

func (x *FlagsConfig) GetIosOptimizeHomeSkinFlag() int32 {
	if x != nil {
		return x.IosOptimizeHomeSkinFlag
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialHuaweiState() int32 {
	if x != nil {
		return x.ChannelSocialHuaweiState
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialOppoState() int32 {
	if x != nil {
		return x.ChannelSocialOppoState
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialVivoState() int32 {
	if x != nil {
		return x.ChannelSocialVivoState
	}
	return 0
}

func (x *FlagsConfig) GetNewImageChooser() int32 {
	if x != nil {
		return x.NewImageChooser
	}
	return 0
}

func (x *FlagsConfig) GetCloseNativeOperatorFlag() int32 {
	if x != nil {
		return x.CloseNativeOperatorFlag
	}
	return 0
}

func (x *FlagsConfig) GetDownloaderState() int32 {
	if x != nil {
		return x.DownloaderState
	}
	return 0
}

func (x *FlagsConfig) GetDownloaderPauseStateV2() int32 {
	if x != nil {
		return x.DownloaderPauseStateV2
	}
	return 0
}

func (x *FlagsConfig) GetCloseVideoMetalRender() int32 {
	if x != nil {
		return x.CloseVideoMetalRender
	}
	return 0
}

func (x *FlagsConfig) GetJsbridgeStopHandleSpecialCharater() int32 {
	if x != nil {
		return x.JsbridgeStopHandleSpecialCharater
	}
	return 0
}

func (x *FlagsConfig) GetOppoLoginFlag() int32 {
	if x != nil {
		return x.OppoLoginFlag
	}
	return 0
}

func (x *FlagsConfig) GetOppoLoginRetryCount() int32 {
	if x != nil {
		return x.OppoLoginRetryCount
	}
	return 0
}

func (x *FlagsConfig) GetEnableWebveiwCopyFileToTemp() int32 {
	if x != nil {
		return x.EnableWebveiwCopyFileToTemp
	}
	return 0
}

func (x *FlagsConfig) GetOpenGameProfiler() int32 {
	if x != nil {
		return x.OpenGameProfiler
	}
	return 0
}

func (x *FlagsConfig) GetDisableInvisibleMemoryReclamation() int32 {
	if x != nil {
		return x.DisableInvisibleMemoryReclamation
	}
	return 0
}

func (x *FlagsConfig) GetYybTobidAdSwitch() int32 {
	if x != nil {
		return x.YybTobidAdSwitch
	}
	return 0
}

func (x *FlagsConfig) GetNotShowIdfa() int32 {
	if x != nil {
		return x.NotShowIdfa
	}
	return 0
}

type FeedbackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	RegisterDays int32  `protobuf:"varint,3,opt,name=register_days,json=registerDays,proto3" json:"register_days,omitempty"`
	PlayCount    int32  `protobuf:"varint,4,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`
	Score        int32  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Limit        int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FeedbackConfig) Reset() {
	*x = FeedbackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackConfig) ProtoMessage() {}

func (x *FeedbackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackConfig.ProtoReflect.Descriptor instead.
func (*FeedbackConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{27}
}

func (x *FeedbackConfig) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *FeedbackConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FeedbackConfig) GetRegisterDays() int32 {
	if x != nil {
		return x.RegisterDays
	}
	return 0
}

func (x *FeedbackConfig) GetPlayCount() int32 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *FeedbackConfig) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FeedbackConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SettingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMultiTrans    int32             `protobuf:"varint,1,opt,name=game_multi_trans,json=gameMultiTrans,proto3" json:"game_multi_trans,omitempty"`
	EnableVolc        bool              `protobuf:"varint,2,opt,name=enable_volc,json=enableVolc,proto3" json:"enable_volc,omitempty"`
	EnableKoom        bool              `protobuf:"varint,3,opt,name=enable_koom,json=enableKoom,proto3" json:"enable_koom,omitempty"`
	NativeCrashReport bool              `protobuf:"varint,4,opt,name=native_crash_report,json=nativeCrashReport,proto3" json:"native_crash_report,omitempty"`
	DocVersion        *DocVersion       `protobuf:"bytes,5,opt,name=doc_version,json=docVersion,proto3" json:"doc_version,omitempty"`
	NetworkCheck      *NetworkCheck     `protobuf:"bytes,6,opt,name=network_check,json=networkCheck,proto3" json:"network_check,omitempty"`
	Prometheus        *Prometheus       `protobuf:"bytes,7,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	OkhttpDispatcher  *OkhttpDispatcher `protobuf:"bytes,8,opt,name=okhttp_dispatcher,json=okhttpDispatcher,proto3" json:"okhttp_dispatcher,omitempty"`
	MemSwitch         *MemSwitch        `protobuf:"bytes,9,opt,name=mem_switch,json=memSwitch,proto3" json:"mem_switch,omitempty"`
}

func (x *SettingConfig) Reset() {
	*x = SettingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingConfig) ProtoMessage() {}

func (x *SettingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingConfig.ProtoReflect.Descriptor instead.
func (*SettingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{28}
}

func (x *SettingConfig) GetGameMultiTrans() int32 {
	if x != nil {
		return x.GameMultiTrans
	}
	return 0
}

func (x *SettingConfig) GetEnableVolc() bool {
	if x != nil {
		return x.EnableVolc
	}
	return false
}

func (x *SettingConfig) GetEnableKoom() bool {
	if x != nil {
		return x.EnableKoom
	}
	return false
}

func (x *SettingConfig) GetNativeCrashReport() bool {
	if x != nil {
		return x.NativeCrashReport
	}
	return false
}

func (x *SettingConfig) GetDocVersion() *DocVersion {
	if x != nil {
		return x.DocVersion
	}
	return nil
}

func (x *SettingConfig) GetNetworkCheck() *NetworkCheck {
	if x != nil {
		return x.NetworkCheck
	}
	return nil
}

func (x *SettingConfig) GetPrometheus() *Prometheus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *SettingConfig) GetOkhttpDispatcher() *OkhttpDispatcher {
	if x != nil {
		return x.OkhttpDispatcher
	}
	return nil
}

func (x *SettingConfig) GetMemSwitch() *MemSwitch {
	if x != nil {
		return x.MemSwitch
	}
	return nil
}

// 用户协议、隐私政策、未成年声明
type DocVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agreement       string `protobuf:"bytes,1,opt,name=agreement,proto3" json:"agreement,omitempty"`
	Privacy         string `protobuf:"bytes,2,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Announce        string `protobuf:"bytes,3,opt,name=announce,proto3" json:"announce,omitempty"`
	InfoSharingList string `protobuf:"bytes,4,opt,name=info_sharing_list,json=infoSharingList,proto3" json:"info_sharing_list,omitempty"`
	PersonalInfo    string `protobuf:"bytes,5,opt,name=personal_info,json=personalInfo,proto3" json:"personal_info,omitempty"`
}

func (x *DocVersion) Reset() {
	*x = DocVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocVersion) ProtoMessage() {}

func (x *DocVersion) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocVersion.ProtoReflect.Descriptor instead.
func (*DocVersion) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{29}
}

func (x *DocVersion) GetAgreement() string {
	if x != nil {
		return x.Agreement
	}
	return ""
}

func (x *DocVersion) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *DocVersion) GetAnnounce() string {
	if x != nil {
		return x.Announce
	}
	return ""
}

func (x *DocVersion) GetInfoSharingList() string {
	if x != nil {
		return x.InfoSharingList
	}
	return ""
}

func (x *DocVersion) GetPersonalInfo() string {
	if x != nil {
		return x.PersonalInfo
	}
	return ""
}

type NetworkCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Target   string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Open     int32  `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"` //1开0隐藏
}

func (x *NetworkCheck) Reset() {
	*x = NetworkCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCheck) ProtoMessage() {}

func (x *NetworkCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCheck.ProtoReflect.Descriptor instead.
func (*NetworkCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{30}
}

func (x *NetworkCheck) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *NetworkCheck) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *NetworkCheck) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

type Prometheus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch              int32 `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	BitmapMemThreshold int32 `protobuf:"varint,2,opt,name=bitmap_mem_threshold,json=bitmapMemThreshold,proto3" json:"bitmap_mem_threshold,omitempty"`
	Enabled            bool  `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Prometheus) Reset() {
	*x = Prometheus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prometheus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prometheus) ProtoMessage() {}

func (x *Prometheus) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prometheus.ProtoReflect.Descriptor instead.
func (*Prometheus) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{31}
}

func (x *Prometheus) GetBatch() int32 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *Prometheus) GetBitmapMemThreshold() int32 {
	if x != nil {
		return x.BitmapMemThreshold
	}
	return 0
}

func (x *Prometheus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type OkhttpDispatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueCapacity int32 `protobuf:"varint,1,opt,name=queue_capacity,json=queueCapacity,proto3" json:"queue_capacity,omitempty"`
	KeepLiveTime  int32 `protobuf:"varint,2,opt,name=keep_live_time,json=keepLiveTime,proto3" json:"keep_live_time,omitempty"`
}

func (x *OkhttpDispatcher) Reset() {
	*x = OkhttpDispatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkhttpDispatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkhttpDispatcher) ProtoMessage() {}

func (x *OkhttpDispatcher) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkhttpDispatcher.ProtoReflect.Descriptor instead.
func (*OkhttpDispatcher) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{32}
}

func (x *OkhttpDispatcher) GetQueueCapacity() int32 {
	if x != nil {
		return x.QueueCapacity
	}
	return 0
}

func (x *OkhttpDispatcher) GetKeepLiveTime() int32 {
	if x != nil {
		return x.KeepLiveTime
	}
	return 0
}

type MemSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rgb565Enabled       bool    `protobuf:"varint,1,opt,name=rgb565_enabled,json=rgb565Enabled,proto3" json:"rgb565_enabled,omitempty"`
	Rgb565Transform     bool    `protobuf:"varint,2,opt,name=rgb565_transform,json=rgb565Transform,proto3" json:"rgb565_transform,omitempty"`
	ImageBgOpt          bool    `protobuf:"varint,3,opt,name=image_bg_opt,json=imageBgOpt,proto3" json:"image_bg_opt,omitempty"`
	AnimReportEnabled   bool    `protobuf:"varint,4,opt,name=anim_report_enabled,json=animReportEnabled,proto3" json:"anim_report_enabled,omitempty"`
	FixStartPageMemLeak bool    `protobuf:"varint,5,opt,name=fix_start_page_mem_leak,json=fixStartPageMemLeak,proto3" json:"fix_start_page_mem_leak,omitempty"`
	AnimSampleRate      float64 `protobuf:"fixed64,6,opt,name=anim_sample_rate,json=animSampleRate,proto3" json:"anim_sample_rate,omitempty"`
}

func (x *MemSwitch) Reset() {
	*x = MemSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemSwitch) ProtoMessage() {}

func (x *MemSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemSwitch.ProtoReflect.Descriptor instead.
func (*MemSwitch) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{33}
}

func (x *MemSwitch) GetRgb565Enabled() bool {
	if x != nil {
		return x.Rgb565Enabled
	}
	return false
}

func (x *MemSwitch) GetRgb565Transform() bool {
	if x != nil {
		return x.Rgb565Transform
	}
	return false
}

func (x *MemSwitch) GetImageBgOpt() bool {
	if x != nil {
		return x.ImageBgOpt
	}
	return false
}

func (x *MemSwitch) GetAnimReportEnabled() bool {
	if x != nil {
		return x.AnimReportEnabled
	}
	return false
}

func (x *MemSwitch) GetFixStartPageMemLeak() bool {
	if x != nil {
		return x.FixStartPageMemLeak
	}
	return false
}

func (x *MemSwitch) GetAnimSampleRate() float64 {
	if x != nil {
		return x.AnimSampleRate
	}
	return 0
}

type BindConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgUrl    string `protobuf:"bytes,1,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`
	CanClose int32  `protobuf:"varint,2,opt,name=can_close,json=canClose,proto3" json:"can_close,omitempty"`
}

func (x *BindConfig) Reset() {
	*x = BindConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindConfig) ProtoMessage() {}

func (x *BindConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindConfig.ProtoReflect.Descriptor instead.
func (*BindConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{34}
}

func (x *BindConfig) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *BindConfig) GetCanClose() int32 {
	if x != nil {
		return x.CanClose
	}
	return 0
}

type RenamePopupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewbieClub      *NewbieClub      `protobuf:"bytes,1,opt,name=newbie_club,json=newbieClub,proto3" json:"newbie_club,omitempty"`
	QualifyingMatch *QualifyingMatch `protobuf:"bytes,2,opt,name=qualifying_match,json=qualifyingMatch,proto3" json:"qualifying_match,omitempty"`
}

func (x *RenamePopupRule) Reset() {
	*x = RenamePopupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenamePopupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenamePopupRule) ProtoMessage() {}

func (x *RenamePopupRule) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenamePopupRule.ProtoReflect.Descriptor instead.
func (*RenamePopupRule) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{35}
}

func (x *RenamePopupRule) GetNewbieClub() *NewbieClub {
	if x != nil {
		return x.NewbieClub
	}
	return nil
}

func (x *RenamePopupRule) GetQualifyingMatch() *QualifyingMatch {
	if x != nil {
		return x.QualifyingMatch
	}
	return nil
}

type QualifyingMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QualifyingMatch) Reset() {
	*x = QualifyingMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingMatch) ProtoMessage() {}

func (x *QualifyingMatch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingMatch.ProtoReflect.Descriptor instead.
func (*QualifyingMatch) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{36}
}

func (x *QualifyingMatch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type NewbieClub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Limit    int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *NewbieClub) Reset() {
	*x = NewbieClub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieClub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieClub) ProtoMessage() {}

func (x *NewbieClub) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieClub.ProtoReflect.Descriptor instead.
func (*NewbieClub) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{37}
}

func (x *NewbieClub) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *NewbieClub) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GameEndSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeUrl string `protobuf:"bytes,1,opt,name=notice_url,json=noticeUrl,proto3" json:"notice_url,omitempty"` //气泡图
	Link      string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`                            //跳转库
}

func (x *GameEndSkin) Reset() {
	*x = GameEndSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndSkin) ProtoMessage() {}

func (x *GameEndSkin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndSkin.ProtoReflect.Descriptor instead.
func (*GameEndSkin) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{38}
}

func (x *GameEndSkin) GetNoticeUrl() string {
	if x != nil {
		return x.NoticeUrl
	}
	return ""
}

func (x *GameEndSkin) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type DeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model        string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`               //手机型号(MODEL)
	Product      string `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`           //当前手机品牌(PRODUCT)
	Brand        string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`               //手机厂商(BOARD)
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"` //设备制造商(MANUFACTURER)
}

func (x *DeviceConfig) Reset() {
	*x = DeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfig) ProtoMessage() {}

func (x *DeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfig.ProtoReflect.Descriptor instead.
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{39}
}

func (x *DeviceConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceConfig) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *DeviceConfig) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *DeviceConfig) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

type AntiAddiction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notify         *Notify        `protobuf:"bytes,1,opt,name=notify,proto3" json:"notify,omitempty"`
	MinorNotify    *MinorNotify   `protobuf:"bytes,2,opt,name=minor_notify,json=minorNotify,proto3" json:"minor_notify,omitempty"` // 14岁以上未成年防沉迷配置
	SafeGameNotify string         `protobuf:"bytes,3,opt,name=safe_game_notify,json=safeGameNotify,proto3" json:"safe_game_notify,omitempty"`
	PayNotify      *PayNotify     `protobuf:"bytes,4,opt,name=pay_notify,json=payNotify,proto3" json:"pay_notify,omitempty"`
	SocialDesc     *SocialDesc    `protobuf:"bytes,5,opt,name=social_desc,json=socialDesc,proto3" json:"social_desc,omitempty"`
	IdentityAge    *IdentityAge   `protobuf:"bytes,6,opt,name=identity_age,json=identityAge,proto3" json:"identity_age,omitempty"`
	CertifyNotify  *CertifyNotify `protobuf:"bytes,7,opt,name=certify_notify,json=certifyNotify,proto3" json:"certify_notify,omitempty"`
	CertifyUrl     string         `protobuf:"bytes,8,opt,name=certify_url,json=certifyUrl,proto3" json:"certify_url,omitempty"`
	InfantNotify   *MinorNotify   `protobuf:"bytes,9,opt,name=infant_notify,json=infantNotify,proto3" json:"infant_notify,omitempty"` // 12岁以下防沉迷配置，已废弃
	NeedCertify    int32          `protobuf:"varint,10,opt,name=need_certify,json=needCertify,proto3" json:"need_certify,omitempty"`  // 实名开关，已废弃
}

func (x *AntiAddiction) Reset() {
	*x = AntiAddiction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiAddiction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiAddiction) ProtoMessage() {}

func (x *AntiAddiction) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiAddiction.ProtoReflect.Descriptor instead.
func (*AntiAddiction) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{40}
}

func (x *AntiAddiction) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *AntiAddiction) GetMinorNotify() *MinorNotify {
	if x != nil {
		return x.MinorNotify
	}
	return nil
}

func (x *AntiAddiction) GetSafeGameNotify() string {
	if x != nil {
		return x.SafeGameNotify
	}
	return ""
}

func (x *AntiAddiction) GetPayNotify() *PayNotify {
	if x != nil {
		return x.PayNotify
	}
	return nil
}

func (x *AntiAddiction) GetSocialDesc() *SocialDesc {
	if x != nil {
		return x.SocialDesc
	}
	return nil
}

func (x *AntiAddiction) GetIdentityAge() *IdentityAge {
	if x != nil {
		return x.IdentityAge
	}
	return nil
}

func (x *AntiAddiction) GetCertifyNotify() *CertifyNotify {
	if x != nil {
		return x.CertifyNotify
	}
	return nil
}

func (x *AntiAddiction) GetCertifyUrl() string {
	if x != nil {
		return x.CertifyUrl
	}
	return ""
}

func (x *AntiAddiction) GetInfantNotify() *MinorNotify {
	if x != nil {
		return x.InfantNotify
	}
	return nil
}

func (x *AntiAddiction) GetNeedCertify() int32 {
	if x != nil {
		return x.NeedCertify
	}
	return 0
}

type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uncertified []*CertifyGameConfig `protobuf:"bytes,1,rep,name=uncertified,proto3" json:"uncertified,omitempty"`
	Minor       []*CertifyGameConfig `protobuf:"bytes,2,rep,name=minor,proto3" json:"minor,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{41}
}

func (x *Notify) GetUncertified() []*CertifyGameConfig {
	if x != nil {
		return x.Uncertified
	}
	return nil
}

func (x *Notify) GetMinor() []*CertifyGameConfig {
	if x != nil {
		return x.Minor
	}
	return nil
}

//*
// game_time : 10800
// msg : 【健康系统】您今日的累计游戏时间已经超过3小时，为了您的健康，请您下线休息，做适当身体活动，注意劳逸结合。
type CertifyGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime     int32  `protobuf:"varint,1,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	Msg          string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	IntervalTime int32  `protobuf:"varint,3,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`
}

func (x *CertifyGameConfig) Reset() {
	*x = CertifyGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyGameConfig) ProtoMessage() {}

func (x *CertifyGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyGameConfig.ProtoReflect.Descriptor instead.
func (*CertifyGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{42}
}

func (x *CertifyGameConfig) GetGameTime() int32 {
	if x != nil {
		return x.GameTime
	}
	return 0
}

func (x *CertifyGameConfig) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CertifyGameConfig) GetIntervalTime() int32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

//*
// "login_text": "为空则没有宵禁","begin": "22:00","end": "08:00",
//         "workday_active": 3600,"holiday_active": 10800,"active_text": "超时提醒",
//         "active_notice": "剩余活跃时间提醒{remain}占位","notice_interval": 1800
type MinorNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginText      string `protobuf:"bytes,1,opt,name=login_text,json=loginText,proto3" json:"login_text,omitempty"`
	Begin          string `protobuf:"bytes,2,opt,name=begin,proto3" json:"begin,omitempty"`
	End            string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	WorkdayActive  int32  `protobuf:"varint,4,opt,name=workday_active,json=workdayActive,proto3" json:"workday_active,omitempty"`
	HolidayActive  int32  `protobuf:"varint,5,opt,name=holiday_active,json=holidayActive,proto3" json:"holiday_active,omitempty"`
	ActiveText     string `protobuf:"bytes,6,opt,name=active_text,json=activeText,proto3" json:"active_text,omitempty"`
	ActiveNotice   string `protobuf:"bytes,7,opt,name=active_notice,json=activeNotice,proto3" json:"active_notice,omitempty"`
	NoticeInterval int32  `protobuf:"varint,8,opt,name=notice_interval,json=noticeInterval,proto3" json:"notice_interval,omitempty"`
	AddictedFlag   int32  `protobuf:"varint,9,opt,name=addicted_flag,json=addictedFlag,proto3" json:"addicted_flag,omitempty"` //防沉迷开关 0关闭，1打开
	Title          string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ActiveTime     int32  `protobuf:"varint,11,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
}

func (x *MinorNotify) Reset() {
	*x = MinorNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinorNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinorNotify) ProtoMessage() {}

func (x *MinorNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinorNotify.ProtoReflect.Descriptor instead.
func (*MinorNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{43}
}

func (x *MinorNotify) GetLoginText() string {
	if x != nil {
		return x.LoginText
	}
	return ""
}

func (x *MinorNotify) GetBegin() string {
	if x != nil {
		return x.Begin
	}
	return ""
}

func (x *MinorNotify) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *MinorNotify) GetWorkdayActive() int32 {
	if x != nil {
		return x.WorkdayActive
	}
	return 0
}

func (x *MinorNotify) GetHolidayActive() int32 {
	if x != nil {
		return x.HolidayActive
	}
	return 0
}

func (x *MinorNotify) GetActiveText() string {
	if x != nil {
		return x.ActiveText
	}
	return ""
}

func (x *MinorNotify) GetActiveNotice() string {
	if x != nil {
		return x.ActiveNotice
	}
	return ""
}

func (x *MinorNotify) GetNoticeInterval() int32 {
	if x != nil {
		return x.NoticeInterval
	}
	return 0
}

func (x *MinorNotify) GetAddictedFlag() int32 {
	if x != nil {
		return x.AddictedFlag
	}
	return 0
}

func (x *MinorNotify) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MinorNotify) GetActiveTime() int32 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

type PayNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minor       string `protobuf:"bytes,1,opt,name=minor,proto3" json:"minor,omitempty"`
	CertifyFlag int32  `protobuf:"varint,2,opt,name=certify_flag,json=certifyFlag,proto3" json:"certify_flag,omitempty"` //0不弹窗，1弹窗可充值，2弹窗不可充值
}

func (x *PayNotify) Reset() {
	*x = PayNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotify) ProtoMessage() {}

func (x *PayNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotify.ProtoReflect.Descriptor instead.
func (*PayNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{44}
}

func (x *PayNotify) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

func (x *PayNotify) GetCertifyFlag() int32 {
	if x != nil {
		return x.CertifyFlag
	}
	return 0
}

type SocialDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast string `protobuf:"bytes,1,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	World     string `protobuf:"bytes,2,opt,name=world,proto3" json:"world,omitempty"`
	Friend    string `protobuf:"bytes,3,opt,name=friend,proto3" json:"friend,omitempty"`
	Clan      string `protobuf:"bytes,4,opt,name=clan,proto3" json:"clan,omitempty"`
}

func (x *SocialDesc) Reset() {
	*x = SocialDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialDesc) ProtoMessage() {}

func (x *SocialDesc) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialDesc.ProtoReflect.Descriptor instead.
func (*SocialDesc) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{45}
}

func (x *SocialDesc) GetBroadcast() string {
	if x != nil {
		return x.Broadcast
	}
	return ""
}

func (x *SocialDesc) GetWorld() string {
	if x != nil {
		return x.World
	}
	return ""
}

func (x *SocialDesc) GetFriend() string {
	if x != nil {
		return x.Friend
	}
	return ""
}

func (x *SocialDesc) GetClan() string {
	if x != nil {
		return x.Clan
	}
	return ""
}

type IdentityAge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minor  int32 `protobuf:"varint,1,opt,name=minor,proto3" json:"minor,omitempty"`
	Infant int32 `protobuf:"varint,2,opt,name=infant,proto3" json:"infant,omitempty"`
}

func (x *IdentityAge) Reset() {
	*x = IdentityAge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAge) ProtoMessage() {}

func (x *IdentityAge) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAge.ProtoReflect.Descriptor instead.
func (*IdentityAge) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{46}
}

func (x *IdentityAge) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *IdentityAge) GetInfant() int32 {
	if x != nil {
		return x.Infant
	}
	return 0
}

type CertifyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveLimit  int32    `protobuf:"varint,1,opt,name=active_limit,json=activeLimit,proto3" json:"active_limit,omitempty"`
	Interval     int32    `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Limit        int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Flag         int32    `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"` // 0不弹，1弹窗可关，2弹窗不可关
	IgnoreMarket []string `protobuf:"bytes,5,rep,name=ignore_market,json=ignoreMarket,proto3" json:"ignore_market,omitempty"`
	ForceMarket  []string `protobuf:"bytes,6,rep,name=force_market,json=forceMarket,proto3" json:"force_market,omitempty"`
}

func (x *CertifyNotify) Reset() {
	*x = CertifyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyNotify) ProtoMessage() {}

func (x *CertifyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyNotify.ProtoReflect.Descriptor instead.
func (*CertifyNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{47}
}

func (x *CertifyNotify) GetActiveLimit() int32 {
	if x != nil {
		return x.ActiveLimit
	}
	return 0
}

func (x *CertifyNotify) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *CertifyNotify) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CertifyNotify) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *CertifyNotify) GetIgnoreMarket() []string {
	if x != nil {
		return x.IgnoreMarket
	}
	return nil
}

func (x *CertifyNotify) GetForceMarket() []string {
	if x != nil {
		return x.ForceMarket
	}
	return nil
}

type IdfaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward     []*CRewardItem `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward,omitempty"`
	IosVersion string         `protobuf:"bytes,2,opt,name=ios_version,json=iosVersion,proto3" json:"ios_version,omitempty"`
	Force      bool           `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	LoginCount int32          `protobuf:"varint,4,opt,name=login_count,json=loginCount,proto3" json:"login_count,omitempty"`
	FirstPop   int32          `protobuf:"varint,5,opt,name=first_pop,json=firstPop,proto3" json:"first_pop,omitempty"`
	Interval   int32          `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *IdfaConfig) Reset() {
	*x = IdfaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdfaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdfaConfig) ProtoMessage() {}

func (x *IdfaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdfaConfig.ProtoReflect.Descriptor instead.
func (*IdfaConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{48}
}

func (x *IdfaConfig) GetReward() []*CRewardItem {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *IdfaConfig) GetIosVersion() string {
	if x != nil {
		return x.IosVersion
	}
	return ""
}

func (x *IdfaConfig) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *IdfaConfig) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *IdfaConfig) GetFirstPop() int32 {
	if x != nil {
		return x.FirstPop
	}
	return 0
}

func (x *IdfaConfig) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type CommentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score       int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	SwitchState int32 `protobuf:"varint,2,opt,name=switch_state,json=switchState,proto3" json:"switch_state,omitempty"`
}

func (x *CommentConfig) Reset() {
	*x = CommentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentConfig) ProtoMessage() {}

func (x *CommentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentConfig.ProtoReflect.Descriptor instead.
func (*CommentConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{49}
}

func (x *CommentConfig) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CommentConfig) GetSwitchState() int32 {
	if x != nil {
		return x.SwitchState
	}
	return 0
}

type RegisterSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32          `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`                             //1开0关
	Score        int64          `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                               //分数条件
	NewUserDay   int32          `protobuf:"varint,3,opt,name=new_user_day,json=newUserDay,proto3" json:"new_user_day,omitempty"` //注册多少天内算新手
	QaUrl        string         `protobuf:"bytes,4,opt,name=qa_url,json=qaUrl,proto3" json:"qa_url,omitempty"`                   //问卷链接，需替换 {uid}
	MailTitle    string         `protobuf:"bytes,5,opt,name=mail_title,json=mailTitle,proto3" json:"mail_title,omitempty"`
	MailContent  string         `protobuf:"bytes,6,opt,name=mail_content,json=mailContent,proto3" json:"mail_content,omitempty"`
	Reward       []*CRewardItem `protobuf:"bytes,7,rep,name=reward,proto3" json:"reward,omitempty"`
	SecretaryMsg string         `protobuf:"bytes,8,opt,name=secretary_msg,json=secretaryMsg,proto3" json:"secretary_msg,omitempty"`
	SurveyIds    []int32        `protobuf:"varint,9,rep,packed,name=survey_ids,json=surveyIds,proto3" json:"survey_ids,omitempty"`
}

func (x *RegisterSurvey) Reset() {
	*x = RegisterSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSurvey) ProtoMessage() {}

func (x *RegisterSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSurvey.ProtoReflect.Descriptor instead.
func (*RegisterSurvey) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{50}
}

func (x *RegisterSurvey) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *RegisterSurvey) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RegisterSurvey) GetNewUserDay() int32 {
	if x != nil {
		return x.NewUserDay
	}
	return 0
}

func (x *RegisterSurvey) GetQaUrl() string {
	if x != nil {
		return x.QaUrl
	}
	return ""
}

func (x *RegisterSurvey) GetMailTitle() string {
	if x != nil {
		return x.MailTitle
	}
	return ""
}

func (x *RegisterSurvey) GetMailContent() string {
	if x != nil {
		return x.MailContent
	}
	return ""
}

func (x *RegisterSurvey) GetReward() []*CRewardItem {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *RegisterSurvey) GetSecretaryMsg() string {
	if x != nil {
		return x.SecretaryMsg
	}
	return ""
}

func (x *RegisterSurvey) GetSurveyIds() []int32 {
	if x != nil {
		return x.SurveyIds
	}
	return nil
}

type RecruitPopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`                        //1开0关
	PlayCount    int64  `protobuf:"varint,2,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"` //局数条件
	Score        int64  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                          //分数条件
	QaUrl        string `protobuf:"bytes,4,opt,name=qa_url,json=qaUrl,proto3" json:"qa_url,omitempty"`              //问卷链接，需替换 {uid}
	Id           int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`                                // 期数
	BannerUrl    string `protobuf:"bytes,6,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	ScreenShare  int32  `protobuf:"varint,7,opt,name=screen_share,json=screenShare,proto3" json:"screen_share,omitempty"`
	SecretaryMsg string `protobuf:"bytes,8,opt,name=secretary_msg,json=secretaryMsg,proto3" json:"secretary_msg,omitempty"`
}

func (x *RecruitPopup) Reset() {
	*x = RecruitPopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitPopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitPopup) ProtoMessage() {}

func (x *RecruitPopup) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitPopup.ProtoReflect.Descriptor instead.
func (*RecruitPopup) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{51}
}

func (x *RecruitPopup) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *RecruitPopup) GetPlayCount() int64 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *RecruitPopup) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RecruitPopup) GetQaUrl() string {
	if x != nil {
		return x.QaUrl
	}
	return ""
}

func (x *RecruitPopup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecruitPopup) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *RecruitPopup) GetScreenShare() int32 {
	if x != nil {
		return x.ScreenShare
	}
	return 0
}

func (x *RecruitPopup) GetSecretaryMsg() string {
	if x != nil {
		return x.SecretaryMsg
	}
	return ""
}

//*
// "new_user_config": {
//     "player_eat_food_rate_change_scope": 200,
//     "player_eat_food_count_for_increase_node": 10,
// 		"eat_food_rate_change_scope": 200,
//     "eat_food_count_for_increase_node": 10,
//     "guide_candy_total_count": 100, //新手引导糖果总个数
//   	"guide_candy_score": 100, //新手引导糖果分数
//     "free_revive_game_count": 5, //新手无尽前几局每局第一次免费复活
//   }
type NewUserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerEatFoodRateChangeScope      int32          `protobuf:"varint,1,opt,name=player_eat_food_rate_change_scope,json=playerEatFoodRateChangeScope,proto3" json:"player_eat_food_rate_change_scope,omitempty"`
	PlayerEatFoodCountForIncreaseNode int32          `protobuf:"varint,2,opt,name=player_eat_food_count_for_increase_node,json=playerEatFoodCountForIncreaseNode,proto3" json:"player_eat_food_count_for_increase_node,omitempty"`
	EatFoodRateChangeScope            int32          `protobuf:"varint,3,opt,name=eat_food_rate_change_scope,json=eatFoodRateChangeScope,proto3" json:"eat_food_rate_change_scope,omitempty"`
	EatFoodCountForIncreaseNode       int32          `protobuf:"varint,4,opt,name=eat_food_count_for_increase_node,json=eatFoodCountForIncreaseNode,proto3" json:"eat_food_count_for_increase_node,omitempty"`
	GuideCandyTotalCount              int32          `protobuf:"varint,5,opt,name=guide_candy_total_count,json=guideCandyTotalCount,proto3" json:"guide_candy_total_count,omitempty"`
	GuideCandyScore                   int32          `protobuf:"varint,6,opt,name=guide_candy_score,json=guideCandyScore,proto3" json:"guide_candy_score,omitempty"`
	FreeReviveGameCount               int32          `protobuf:"varint,7,opt,name=free_revive_game_count,json=freeReviveGameCount,proto3" json:"free_revive_game_count,omitempty"`
	NewbieLoginDays                   int32          `protobuf:"varint,8,opt,name=newbie_login_days,json=newbieLoginDays,proto3" json:"newbie_login_days,omitempty"`
	NewbieQualifyingCount             int32          `protobuf:"varint,9,opt,name=newbie_qualifying_count,json=newbieQualifyingCount,proto3" json:"newbie_qualifying_count,omitempty"`
	NewbieEndlessCount                int32          `protobuf:"varint,10,opt,name=newbie_endless_count,json=newbieEndlessCount,proto3" json:"newbie_endless_count,omitempty"`
	GuideType                         int32          `protobuf:"varint,11,opt,name=guide_type,json=guideType,proto3" json:"guide_type,omitempty"`
	NewUserImg                        string         `protobuf:"bytes,12,opt,name=new_user_img,json=newUserImg,proto3" json:"new_user_img,omitempty"`
	OldUserImg                        string         `protobuf:"bytes,13,opt,name=old_user_img,json=oldUserImg,proto3" json:"old_user_img,omitempty"`
	GuideReward                       []*CRewardItem `protobuf:"bytes,14,rep,name=guide_reward,json=guideReward,proto3" json:"guide_reward,omitempty"`
	GuideSkipFlag                     int32          `protobuf:"varint,15,opt,name=guide_skip_flag,json=guideSkipFlag,proto3" json:"guide_skip_flag,omitempty"` // 0关1开 新手引导流程修改实验开关
}

func (x *NewUserConfig) Reset() {
	*x = NewUserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserConfig) ProtoMessage() {}

func (x *NewUserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserConfig.ProtoReflect.Descriptor instead.
func (*NewUserConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{52}
}

func (x *NewUserConfig) GetPlayerEatFoodRateChangeScope() int32 {
	if x != nil {
		return x.PlayerEatFoodRateChangeScope
	}
	return 0
}

func (x *NewUserConfig) GetPlayerEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.PlayerEatFoodCountForIncreaseNode
	}
	return 0
}

func (x *NewUserConfig) GetEatFoodRateChangeScope() int32 {
	if x != nil {
		return x.EatFoodRateChangeScope
	}
	return 0
}

func (x *NewUserConfig) GetEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.EatFoodCountForIncreaseNode
	}
	return 0
}

func (x *NewUserConfig) GetGuideCandyTotalCount() int32 {
	if x != nil {
		return x.GuideCandyTotalCount
	}
	return 0
}

func (x *NewUserConfig) GetGuideCandyScore() int32 {
	if x != nil {
		return x.GuideCandyScore
	}
	return 0
}

func (x *NewUserConfig) GetFreeReviveGameCount() int32 {
	if x != nil {
		return x.FreeReviveGameCount
	}
	return 0
}

func (x *NewUserConfig) GetNewbieLoginDays() int32 {
	if x != nil {
		return x.NewbieLoginDays
	}
	return 0
}

func (x *NewUserConfig) GetNewbieQualifyingCount() int32 {
	if x != nil {
		return x.NewbieQualifyingCount
	}
	return 0
}

func (x *NewUserConfig) GetNewbieEndlessCount() int32 {
	if x != nil {
		return x.NewbieEndlessCount
	}
	return 0
}

func (x *NewUserConfig) GetGuideType() int32 {
	if x != nil {
		return x.GuideType
	}
	return 0
}

func (x *NewUserConfig) GetNewUserImg() string {
	if x != nil {
		return x.NewUserImg
	}
	return ""
}

func (x *NewUserConfig) GetOldUserImg() string {
	if x != nil {
		return x.OldUserImg
	}
	return ""
}

func (x *NewUserConfig) GetGuideReward() []*CRewardItem {
	if x != nil {
		return x.GuideReward
	}
	return nil
}

func (x *NewUserConfig) GetGuideSkipFlag() int32 {
	if x != nil {
		return x.GuideSkipFlag
	}
	return 0
}

// === offline_game_config start ========================================
type ReviveConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdRevive      int32 `protobuf:"varint,1,opt,name=ad_revive,json=adRevive,proto3" json:"ad_revive,omitempty"`
	CardRevive    int32 `protobuf:"varint,2,opt,name=card_revive,json=cardRevive,proto3" json:"card_revive,omitempty"`
	DiamondRevive int32 `protobuf:"varint,3,opt,name=diamond_revive,json=diamondRevive,proto3" json:"diamond_revive,omitempty"`
}

func (x *ReviveConfigItem) Reset() {
	*x = ReviveConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviveConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviveConfigItem) ProtoMessage() {}

func (x *ReviveConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviveConfigItem.ProtoReflect.Descriptor instead.
func (*ReviveConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{53}
}

func (x *ReviveConfigItem) GetAdRevive() int32 {
	if x != nil {
		return x.AdRevive
	}
	return 0
}

func (x *ReviveConfigItem) GetCardRevive() int32 {
	if x != nil {
		return x.CardRevive
	}
	return 0
}

func (x *ReviveConfigItem) GetDiamondRevive() int32 {
	if x != nil {
		return x.DiamondRevive
	}
	return 0
}

type SingleGameAiConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLength      int64   `protobuf:"varint,1,opt,name=start_length,json=startLength,proto3" json:"start_length,omitempty"`
	BorderDisFactor  float64 `protobuf:"fixed64,2,opt,name=border_dis_factor,json=borderDisFactor,proto3" json:"border_dis_factor,omitempty"`
	SnakeDisFactor   float64 `protobuf:"fixed64,3,opt,name=snake_dis_factor,json=snakeDisFactor,proto3" json:"snake_dis_factor,omitempty"`
	WreckDisFactor   float64 `protobuf:"fixed64,4,opt,name=wreck_dis_factor,json=wreckDisFactor,proto3" json:"wreck_dis_factor,omitempty"`
	AiSnakeViewAngle float64 `protobuf:"fixed64,5,opt,name=ai_snake_view_angle,json=aiSnakeViewAngle,proto3" json:"ai_snake_view_angle,omitempty"`
}

func (x *SingleGameAiConfigItem) Reset() {
	*x = SingleGameAiConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleGameAiConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleGameAiConfigItem) ProtoMessage() {}

func (x *SingleGameAiConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleGameAiConfigItem.ProtoReflect.Descriptor instead.
func (*SingleGameAiConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{54}
}

func (x *SingleGameAiConfigItem) GetStartLength() int64 {
	if x != nil {
		return x.StartLength
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetBorderDisFactor() float64 {
	if x != nil {
		return x.BorderDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetSnakeDisFactor() float64 {
	if x != nil {
		return x.SnakeDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetWreckDisFactor() float64 {
	if x != nil {
		return x.WreckDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetAiSnakeViewAngle() float64 {
	if x != nil {
		return x.AiSnakeViewAngle
	}
	return 0
}

type FloaterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BornLen      []int32 `protobuf:"varint,1,rep,packed,name=born_len,json=bornLen,proto3" json:"born_len,omitempty"`
	BornCount    int32   `protobuf:"varint,2,opt,name=born_count,json=bornCount,proto3" json:"born_count,omitempty"`
	BornCountV2  int32   `protobuf:"varint,3,opt,name=born_count_v2,json=bornCountV2,proto3" json:"born_count_v2,omitempty"`
	BornRadius   int32   `protobuf:"varint,4,opt,name=born_radius,json=bornRadius,proto3" json:"born_radius,omitempty"`
	FloaterScore int32   `protobuf:"varint,5,opt,name=floater_score,json=floaterScore,proto3" json:"floater_score,omitempty"`
	IntervalTime int32   `protobuf:"varint,6,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`
	BornLen2     []int32 `protobuf:"varint,7,rep,packed,name=born_len2,json=bornLen2,proto3" json:"born_len2,omitempty"`
}

func (x *FloaterConfig) Reset() {
	*x = FloaterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloaterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloaterConfig) ProtoMessage() {}

func (x *FloaterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloaterConfig.ProtoReflect.Descriptor instead.
func (*FloaterConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{55}
}

func (x *FloaterConfig) GetBornLen() []int32 {
	if x != nil {
		return x.BornLen
	}
	return nil
}

func (x *FloaterConfig) GetBornCount() int32 {
	if x != nil {
		return x.BornCount
	}
	return 0
}

func (x *FloaterConfig) GetBornCountV2() int32 {
	if x != nil {
		return x.BornCountV2
	}
	return 0
}

func (x *FloaterConfig) GetBornRadius() int32 {
	if x != nil {
		return x.BornRadius
	}
	return 0
}

func (x *FloaterConfig) GetFloaterScore() int32 {
	if x != nil {
		return x.FloaterScore
	}
	return 0
}

func (x *FloaterConfig) GetIntervalTime() int32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

func (x *FloaterConfig) GetBornLen2() []int32 {
	if x != nil {
		return x.BornLen2
	}
	return nil
}

type ActivityMapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	NewMapThemeId int32 `protobuf:"varint,3,opt,name=new_map_theme_id,json=newMapThemeId,proto3" json:"new_map_theme_id,omitempty"`
}

func (x *ActivityMapConfig) Reset() {
	*x = ActivityMapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityMapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityMapConfig) ProtoMessage() {}

func (x *ActivityMapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityMapConfig.ProtoReflect.Descriptor instead.
func (*ActivityMapConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{56}
}

func (x *ActivityMapConfig) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ActivityMapConfig) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityMapConfig) GetNewMapThemeId() int32 {
	if x != nil {
		return x.NewMapThemeId
	}
	return 0
}

type EndlessLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosLengthEndlessLimit_1         int64   `protobuf:"varint,1,opt,name=ios_length_endless_limit_1,json=iosLengthEndlessLimit1,proto3" json:"ios_length_endless_limit_1,omitempty"`
	IosLengthEndlessLimit_2         int64   `protobuf:"varint,2,opt,name=ios_length_endless_limit_2,json=iosLengthEndlessLimit2,proto3" json:"ios_length_endless_limit_2,omitempty"`
	IosLengthEndlessTimeLimit_1     float64 `protobuf:"fixed64,3,opt,name=ios_length_endless_time_limit_1,json=iosLengthEndlessTimeLimit1,proto3" json:"ios_length_endless_time_limit_1,omitempty"`
	IosLengthEndlessTimeLimit_2     float64 `protobuf:"fixed64,4,opt,name=ios_length_endless_time_limit_2,json=iosLengthEndlessTimeLimit2,proto3" json:"ios_length_endless_time_limit_2,omitempty"`
	AndroidLengthEndlessLimit_1     int64   `protobuf:"varint,5,opt,name=android_length_endless_limit_1,json=androidLengthEndlessLimit1,proto3" json:"android_length_endless_limit_1,omitempty"`
	AndroidLengthEndlessLimit_2     int64   `protobuf:"varint,6,opt,name=android_length_endless_limit_2,json=androidLengthEndlessLimit2,proto3" json:"android_length_endless_limit_2,omitempty"`
	AndroidLengthEndlessTimeLimit_1 float64 `protobuf:"fixed64,7,opt,name=android_length_endless_time_limit_1,json=androidLengthEndlessTimeLimit1,proto3" json:"android_length_endless_time_limit_1,omitempty"`
	AndroidLengthEndlessTimeLimit_2 float64 `protobuf:"fixed64,8,opt,name=android_length_endless_time_limit_2,json=androidLengthEndlessTimeLimit2,proto3" json:"android_length_endless_time_limit_2,omitempty"`
	IosKillEndlessLimit_1           int64   `protobuf:"varint,9,opt,name=ios_kill_endless_limit_1,json=iosKillEndlessLimit1,proto3" json:"ios_kill_endless_limit_1,omitempty"`
	IosKillEndlessLimit_2           int64   `protobuf:"varint,10,opt,name=ios_kill_endless_limit_2,json=iosKillEndlessLimit2,proto3" json:"ios_kill_endless_limit_2,omitempty"`
	IosKillEndlessTimeLimit_1       float64 `protobuf:"fixed64,11,opt,name=ios_kill_endless_time_limit_1,json=iosKillEndlessTimeLimit1,proto3" json:"ios_kill_endless_time_limit_1,omitempty"`
	IosKillEndlessTimeLimit_2       float64 `protobuf:"fixed64,12,opt,name=ios_kill_endless_time_limit_2,json=iosKillEndlessTimeLimit2,proto3" json:"ios_kill_endless_time_limit_2,omitempty"`
	AndroidKillEndlessLimit_1       int64   `protobuf:"varint,13,opt,name=android_kill_endless_limit_1,json=androidKillEndlessLimit1,proto3" json:"android_kill_endless_limit_1,omitempty"`
	AndroidKillEndlessLimit_2       int64   `protobuf:"varint,14,opt,name=android_kill_endless_limit_2,json=androidKillEndlessLimit2,proto3" json:"android_kill_endless_limit_2,omitempty"`
	AndroidKillEndlessTimeLimit_1   float64 `protobuf:"fixed64,15,opt,name=android_kill_endless_time_limit_1,json=androidKillEndlessTimeLimit1,proto3" json:"android_kill_endless_time_limit_1,omitempty"`
	AndroidKillEndlessTimeLimit_2   float64 `protobuf:"fixed64,16,opt,name=android_kill_endless_time_limit_2,json=androidKillEndlessTimeLimit2,proto3" json:"android_kill_endless_time_limit_2,omitempty"`
}

func (x *EndlessLimitConfig) Reset() {
	*x = EndlessLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessLimitConfig) ProtoMessage() {}

func (x *EndlessLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessLimitConfig.ProtoReflect.Descriptor instead.
func (*EndlessLimitConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{57}
}

func (x *EndlessLimitConfig) GetIosLengthEndlessLimit_1() int64 {
	if x != nil {
		return x.IosLengthEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessLimit_2() int64 {
	if x != nil {
		return x.IosLengthEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.IosLengthEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.IosLengthEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessLimit_1() int64 {
	if x != nil {
		return x.AndroidLengthEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessLimit_2() int64 {
	if x != nil {
		return x.AndroidLengthEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.AndroidLengthEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.AndroidLengthEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessLimit_1() int64 {
	if x != nil {
		return x.IosKillEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessLimit_2() int64 {
	if x != nil {
		return x.IosKillEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.IosKillEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.IosKillEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessLimit_1() int64 {
	if x != nil {
		return x.AndroidKillEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessLimit_2() int64 {
	if x != nil {
		return x.AndroidKillEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.AndroidKillEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.AndroidKillEndlessTimeLimit_2
	}
	return 0
}

type EndlessBubbleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int32  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int32  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Link       string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *EndlessBubbleConfig) Reset() {
	*x = EndlessBubbleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBubbleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBubbleConfig) ProtoMessage() {}

func (x *EndlessBubbleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBubbleConfig.ProtoReflect.Descriptor instead.
func (*EndlessBubbleConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{58}
}

func (x *EndlessBubbleConfig) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessBubbleConfig) GetFinishTime() int32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *EndlessBubbleConfig) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type EndlessTrackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLen       int32 `protobuf:"varint,1,opt,name=start_len,json=startLen,proto3" json:"start_len,omitempty"`
	IntervalLen    int32 `protobuf:"varint,2,opt,name=interval_len,json=intervalLen,proto3" json:"interval_len,omitempty"`
	IntervalSecond int32 `protobuf:"varint,3,opt,name=interval_second,json=intervalSecond,proto3" json:"interval_second,omitempty"`
}

func (x *EndlessTrackConfig) Reset() {
	*x = EndlessTrackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessTrackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessTrackConfig) ProtoMessage() {}

func (x *EndlessTrackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessTrackConfig.ProtoReflect.Descriptor instead.
func (*EndlessTrackConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{59}
}

func (x *EndlessTrackConfig) GetStartLen() int32 {
	if x != nil {
		return x.StartLen
	}
	return 0
}

func (x *EndlessTrackConfig) GetIntervalLen() int32 {
	if x != nil {
		return x.IntervalLen
	}
	return 0
}

func (x *EndlessTrackConfig) GetIntervalSecond() int32 {
	if x != nil {
		return x.IntervalSecond
	}
	return 0
}

type WildStormListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration  int32   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	SpeedRate float64 `protobuf:"fixed64,2,opt,name=speed_rate,json=speedRate,proto3" json:"speed_rate,omitempty"`
}

func (x *WildStormListItem) Reset() {
	*x = WildStormListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildStormListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildStormListItem) ProtoMessage() {}

func (x *WildStormListItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildStormListItem.ProtoReflect.Descriptor instead.
func (*WildStormListItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{60}
}

func (x *WildStormListItem) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *WildStormListItem) GetSpeedRate() float64 {
	if x != nil {
		return x.SpeedRate
	}
	return 0
}

type WildStormConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSpeedRate  float64              `protobuf:"fixed64,1,opt,name=max_speed_rate,json=maxSpeedRate,proto3" json:"max_speed_rate,omitempty"`
	WildStormList []*WildStormListItem `protobuf:"bytes,2,rep,name=wild_storm_list,json=wildStormList,proto3" json:"wild_storm_list,omitempty"`
}

func (x *WildStormConfig) Reset() {
	*x = WildStormConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildStormConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildStormConfig) ProtoMessage() {}

func (x *WildStormConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildStormConfig.ProtoReflect.Descriptor instead.
func (*WildStormConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{61}
}

func (x *WildStormConfig) GetMaxSpeedRate() float64 {
	if x != nil {
		return x.MaxSpeedRate
	}
	return 0
}

func (x *WildStormConfig) GetWildStormList() []*WildStormListItem {
	if x != nil {
		return x.WildStormList
	}
	return nil
}

type OfflineGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigSnakeRate           int32                `protobuf:"varint,1,opt,name=big_snake_rate,json=bigSnakeRate,proto3" json:"big_snake_rate,omitempty"`
	MediumSnakeRate        int32                `protobuf:"varint,2,opt,name=medium_snake_rate,json=mediumSnakeRate,proto3" json:"medium_snake_rate,omitempty"`
	ReliveLengthLimit      int32                `protobuf:"varint,3,opt,name=relive_length_limit,json=reliveLengthLimit,proto3" json:"relive_length_limit,omitempty"`
	ReliveNeedDiamond      int32                `protobuf:"varint,4,opt,name=relive_need_diamond,json=reliveNeedDiamond,proto3" json:"relive_need_diamond,omitempty"`
	SnakeDirection         int32                `protobuf:"varint,5,opt,name=snake_direction,json=snakeDirection,proto3" json:"snake_direction,omitempty"`
	TwiceReliveDiamond     int32                `protobuf:"varint,6,opt,name=twice_relive_diamond,json=twiceReliveDiamond,proto3" json:"twice_relive_diamond,omitempty"`
	TwiceReliveLength      int32                `protobuf:"varint,7,opt,name=twice_relive_length,json=twiceReliveLength,proto3" json:"twice_relive_length,omitempty"`
	EndlessReviveConfig    []*ReviveConfigItem  `protobuf:"bytes,8,rep,name=endless_revive_config,json=endlessReviveConfig,proto3" json:"endless_revive_config,omitempty"`
	EndlessReviveConfigAb1 []*ReviveConfigItem  `protobuf:"bytes,9,rep,name=endless_revive_config_ab1,json=endlessReviveConfigAb1,proto3" json:"endless_revive_config_ab1,omitempty"`
	EndlessReviveConfigAb2 []*ReviveConfigItem  `protobuf:"bytes,10,rep,name=endless_revive_config_ab2,json=endlessReviveConfigAb2,proto3" json:"endless_revive_config_ab2,omitempty"`
	ExciteReviveConfig     []*ReviveConfigItem  `protobuf:"bytes,11,rep,name=excite_revive_config,json=exciteReviveConfig,proto3" json:"excite_revive_config,omitempty"`
	LimitReviveConfig      []*ReviveConfigItem  `protobuf:"bytes,12,rep,name=limit_revive_config,json=limitReviveConfig,proto3" json:"limit_revive_config,omitempty"`
	VoiceBroadcast         int32                `protobuf:"varint,13,opt,name=voice_broadcast,json=voiceBroadcast,proto3" json:"voice_broadcast,omitempty"`
	UseAiV3                int32                `protobuf:"varint,14,opt,name=use_ai_v3,json=useAiV3,proto3" json:"use_ai_v3,omitempty"`
	NewKillBroadcast       int32                `protobuf:"varint,15,opt,name=new_kill_broadcast,json=newKillBroadcast,proto3" json:"new_kill_broadcast,omitempty"`
	NewMap                 int32                `protobuf:"varint,16,opt,name=new_map,json=newMap,proto3" json:"new_map,omitempty"`
	Recover                int32                `protobuf:"varint,17,opt,name=recover,proto3" json:"recover,omitempty"`
	FloaterConfig          *FloaterConfig       `protobuf:"bytes,18,opt,name=floater_config,json=floaterConfig,proto3" json:"floater_config,omitempty"` // 貌似已经废弃，移到到ai_config_v3配置里了
	EndlessLimitConfig     *EndlessLimitConfig  `protobuf:"bytes,19,opt,name=endless_limit_config,json=endlessLimitConfig,proto3" json:"endless_limit_config,omitempty"`
	ActivityMapConfig      *ActivityMapConfig   `protobuf:"bytes,20,opt,name=activity_map_config,json=activityMapConfig,proto3" json:"activity_map_config,omitempty"`
	EndlessBubble          *EndlessBubbleConfig `protobuf:"bytes,21,opt,name=endless_bubble,json=endlessBubble,proto3" json:"endless_bubble,omitempty"`
	EndlessTrack           *EndlessTrackConfig  `protobuf:"bytes,22,opt,name=endless_track,json=endlessTrack,proto3" json:"endless_track,omitempty"`
	WildStorm              *WildStormConfig     `protobuf:"bytes,23,opt,name=wild_storm,json=wildStorm,proto3" json:"wild_storm,omitempty"`
	EndlessBuffProp        *EndLessBuffPropInfo `protobuf:"bytes,24,opt,name=endless_buff_prop,json=endlessBuffProp,proto3" json:"endless_buff_prop,omitempty"`
}

func (x *OfflineGameConfig) Reset() {
	*x = OfflineGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineGameConfig) ProtoMessage() {}

func (x *OfflineGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineGameConfig.ProtoReflect.Descriptor instead.
func (*OfflineGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{62}
}

func (x *OfflineGameConfig) GetBigSnakeRate() int32 {
	if x != nil {
		return x.BigSnakeRate
	}
	return 0
}

func (x *OfflineGameConfig) GetMediumSnakeRate() int32 {
	if x != nil {
		return x.MediumSnakeRate
	}
	return 0
}

func (x *OfflineGameConfig) GetReliveLengthLimit() int32 {
	if x != nil {
		return x.ReliveLengthLimit
	}
	return 0
}

func (x *OfflineGameConfig) GetReliveNeedDiamond() int32 {
	if x != nil {
		return x.ReliveNeedDiamond
	}
	return 0
}

func (x *OfflineGameConfig) GetSnakeDirection() int32 {
	if x != nil {
		return x.SnakeDirection
	}
	return 0
}

func (x *OfflineGameConfig) GetTwiceReliveDiamond() int32 {
	if x != nil {
		return x.TwiceReliveDiamond
	}
	return 0
}

func (x *OfflineGameConfig) GetTwiceReliveLength() int32 {
	if x != nil {
		return x.TwiceReliveLength
	}
	return 0
}

func (x *OfflineGameConfig) GetEndlessReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessReviveConfigAb1() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfigAb1
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessReviveConfigAb2() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfigAb2
	}
	return nil
}

func (x *OfflineGameConfig) GetExciteReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.ExciteReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetLimitReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.LimitReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetVoiceBroadcast() int32 {
	if x != nil {
		return x.VoiceBroadcast
	}
	return 0
}

func (x *OfflineGameConfig) GetUseAiV3() int32 {
	if x != nil {
		return x.UseAiV3
	}
	return 0
}

func (x *OfflineGameConfig) GetNewKillBroadcast() int32 {
	if x != nil {
		return x.NewKillBroadcast
	}
	return 0
}

func (x *OfflineGameConfig) GetNewMap() int32 {
	if x != nil {
		return x.NewMap
	}
	return 0
}

func (x *OfflineGameConfig) GetRecover() int32 {
	if x != nil {
		return x.Recover
	}
	return 0
}

func (x *OfflineGameConfig) GetFloaterConfig() *FloaterConfig {
	if x != nil {
		return x.FloaterConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessLimitConfig() *EndlessLimitConfig {
	if x != nil {
		return x.EndlessLimitConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetActivityMapConfig() *ActivityMapConfig {
	if x != nil {
		return x.ActivityMapConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessBubble() *EndlessBubbleConfig {
	if x != nil {
		return x.EndlessBubble
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessTrack() *EndlessTrackConfig {
	if x != nil {
		return x.EndlessTrack
	}
	return nil
}

func (x *OfflineGameConfig) GetWildStorm() *WildStormConfig {
	if x != nil {
		return x.WildStorm
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessBuffProp() *EndLessBuffPropInfo {
	if x != nil {
		return x.EndlessBuffProp
	}
	return nil
}

var File_snakecommon_project_config_proto protoreflect.FileDescriptor

var file_snakecommon_project_config_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a,
	0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x53, 0x4b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a,
	0x38, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x17, 0x45, 0x6e, 0x64,
	0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x45,
	0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xbe, 0x01,
	0x0a, 0x0f, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x22, 0x7e,
	0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf0,
	0x0a, 0x0a, 0x0c, 0x4f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x6b, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x42, 0x6f, 0x73, 0x73, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x57, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x70, 0x12, 0x2f,
	0x0a, 0x14, 0x68, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x68, 0x63,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x14, 0x6e, 0x6f, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6e,
	0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x6c,
	0x55, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x65,
	0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x36, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x6e, 0x6f, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x1a, 0x6e, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x19,
	0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x65, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3a,
	0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x75, 0x69, 0x74, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x12, 0x45,
	0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65,
	0x6c, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4a, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x12, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65,
	0x77, 0x22, 0x5e, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0x5a, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72,
	0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x61, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a,
	0x09, 0x47, 0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x75, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x75, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x75, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x49, 0x70, 0x61, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6c, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc4, 0x04, 0x0a, 0x10, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x56, 0x32, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69, 0x70,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55,
	0x72, 0x6c, 0x73, 0x49, 0x70, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x32, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x49, 0x70,
	0x61, 0x64, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x63, 0x70, 0x5f, 0x76, 0x32,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4b, 0x63, 0x70, 0x56, 0x32,
	0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x76, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x74, 0x79,
	0x56, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x76, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x32, 0x22, 0x71,
	0x0a, 0x10, 0x52, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c,
	0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f,
	0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3f, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x56, 0x32, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22,
	0x3a, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xe7, 0x02, 0x0a, 0x0f,
	0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x30,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x55,
	0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x75,
	0x66, 0x66, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x77, 0x22, 0x42, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0d, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x8f,
	0x12, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x7a, 0x68, 0x69, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x7a, 0x68, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x32, 0x12, 0x34, 0x0a,
	0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0e,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a,
	0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x5f, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74,
	0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x70,
	0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x70, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6e,
	0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x70, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x70, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x64, 0x66,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x66,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x64, 0x66, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x74, 0x68, 0x69, 0x72, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x22, 0x0c, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb7,
	0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x68, 0x69, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x65, 0x65, 0x64,
	0x22, 0xf9, 0x0b, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x6f, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x63, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x73,
	0x68, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x74, 0x6f, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x47, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0e, 0x73, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x69, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x67, 0x45, 0x6e, 0x64, 0x55, 0x69, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6d, 0x6f, 0x62, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6d, 0x6f, 0x62,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x4f, 0x66, 0x66, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x44, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x12,
	0x67, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x6c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6f, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x69, 0x6f, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x53,
	0x6b, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x76, 0x69, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x56, 0x69, 0x76, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x12, 0x37, 0x0a, 0x18, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x25, 0x6a, 0x73, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x21, 0x6a, 0x73, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x70, 0x6f, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33,
	0x0a, 0x16, 0x6f, 0x70, 0x70, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x6f, 0x70, 0x70, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x65,
	0x62, 0x76, 0x65, 0x69, 0x77, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x76, 0x65, 0x69, 0x77, 0x43, 0x6f, 0x70, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x24, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6c, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x79, 0x79, 0x62,
	0x5f, 0x74, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x79, 0x79, 0x62, 0x54, 0x6f, 0x62, 0x69, 0x64,
	0x41, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x66, 0x61, 0x22, 0xb2, 0x01, 0x0a,
	0x0e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xe1, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x6f, 0x6f, 0x6d, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64,
	0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6f, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x6b, 0x68, 0x74,
	0x74, 0x70, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x6b,
	0x68, 0x74, 0x74, 0x70, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x22, 0x6e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x5f,
	0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x5f, 0x0a, 0x10, 0x4f, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x67, 0x62, 0x35, 0x36,
	0x35, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x6f,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x67, 0x4f, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x61, 0x6e, 0x69, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x4c, 0x65, 0x61, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x62, 0x69, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x77, 0x62, 0x69, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x43, 0x6c, 0x75, 0x62, 0x12, 0x47, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x27, 0x0a,
	0x0f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3e, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x43, 0x6c, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x40, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x78, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x22, 0x97, 0x04, 0x0a, 0x0d, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x09, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x38, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x67, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6e,
	0x66, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0c, 0x69, 0x6e, 0x66,
	0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x22, 0x80, 0x01, 0x0a,
	0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x75, 0x6e,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22,
	0x67, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x64, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x6c,
	0x0a, 0x0a, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6c, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6c, 0x61, 0x6e, 0x22, 0x3b, 0x0a, 0x0b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0xcf, 0x01, 0x0a,
	0x0a, 0x49, 0x64, 0x66, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x48,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x71,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x61, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x71, 0x61, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x61, 0x55, 0x72, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x22, 0xa5, 0x06, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x61, 0x74, 0x46, 0x6f,
	0x6f, 0x64, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x52, 0x0a, 0x27, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x61, 0x74, 0x5f,
	0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x61, 0x74, 0x46, 0x6f,
	0x6f, 0x64, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x45, 0x0a, 0x20, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x65, 0x61, 0x74,
	0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x77,
	0x0a, 0x10, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x77,
	0x72, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x65, 0x77, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x4c, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x6e, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x32, 0x22, 0x76, 0x0a, 0x11,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6e,
	0x65, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x70, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x49, 0x64, 0x22, 0xbc, 0x08, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x1a, 0x69,
	0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x16, 0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6f, 0x73, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x69, 0x6f, 0x73,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x32, 0x12, 0x43, 0x0a, 0x1f, 0x69, 0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x69, 0x6f,
	0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x43, 0x0a, 0x1f, 0x69, 0x6f, 0x73, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1a, 0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x42, 0x0a,
	0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x31, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x31, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12,
	0x36, 0x0a, 0x18, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x69, 0x6f, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x6f, 0x73, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x6f, 0x73, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12,
	0x3f, 0x0a, 0x1d, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x6f, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31,
	0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x6f, 0x73, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x32, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x31, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x32, 0x12, 0x47, 0x0a, 0x21, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x47, 0x0a, 0x21, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x32, 0x22, 0x69, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x7d,
	0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x4e, 0x0a,
	0x11, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0x7f, 0x0a,
	0x0f, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x77, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0d, 0x77, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9d,
	0x0b, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x67, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x69,
	0x67, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x44,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x77, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74,
	0x77, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x77, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x74, 0x77, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x51, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x62,
	0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x62, 0x31, 0x12, 0x58,
	0x0a, 0x19, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x62, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x16, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x62, 0x32, 0x12, 0x4f, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x13, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x69, 0x5f, 0x76, 0x33, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x41, 0x69, 0x56, 0x33, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4b, 0x69,
	0x6c, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x65, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x65,
	0x77, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x12, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x77, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d,
	0x12, 0x4c, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x4c, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakecommon_project_config_proto_rawDescOnce sync.Once
	file_snakecommon_project_config_proto_rawDescData = file_snakecommon_project_config_proto_rawDesc
)

func file_snakecommon_project_config_proto_rawDescGZIP() []byte {
	file_snakecommon_project_config_proto_rawDescOnce.Do(func() {
		file_snakecommon_project_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecommon_project_config_proto_rawDescData)
	})
	return file_snakecommon_project_config_proto_rawDescData
}

var file_snakecommon_project_config_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_snakecommon_project_config_proto_goTypes = []interface{}{
	(*ConfigVersionInfo)(nil),       // 0: snakecommon.ConfigVersionInfo
	(*EndLessBuffPropConfigV2)(nil), // 1: snakecommon.EndLessBuffPropConfigV2
	(*EndLessBuffPropInfo)(nil),     // 2: snakecommon.EndLessBuffPropInfo
	(*RandomPropInfo)(nil),          // 3: snakecommon.RandomPropInfo
	(*HuaweiHighlight)(nil),         // 4: snakecommon.HuaweiHighlight
	(*HighLightInfo)(nil),           // 5: snakecommon.HighLightInfo
	(*OlGameConfig)(nil),            // 6: snakecommon.OlGameConfig
	(*GameStatusTrack)(nil),         // 7: snakecommon.GameStatusTrack
	(*GrassConfig)(nil),             // 8: snakecommon.GrassConfig
	(*GrassInfo)(nil),               // 9: snakecommon.GrassInfo
	(*TeamSuit)(nil),                // 10: snakecommon.TeamSuit
	(*TeamSuitNewSuitInfo)(nil),     // 11: snakecommon.TeamSuitNewSuitInfo
	(*TeamKillConfig)(nil),          // 12: snakecommon.TeamKillConfig
	(*TeamMeleeConfig)(nil),         // 13: snakecommon.TeamMeleeConfig
	(*QualifyingConfig)(nil),        // 14: snakecommon.QualifyingConfig
	(*RaceNormalConfig)(nil),        // 15: snakecommon.RaceNormalConfig
	(*TeamKillProp)(nil),            // 16: snakecommon.TeamKillProp
	(*ShowConfig)(nil),              // 17: snakecommon.ShowConfig
	(*ShowIconStyle)(nil),           // 18: snakecommon.ShowIconStyle
	(*ShowLevelConfig)(nil),         // 19: snakecommon.ShowLevelConfig
	(*ShowSkillName)(nil),           // 20: snakecommon.ShowSkillName
	(*ShowSkillBuff)(nil),           // 21: snakecommon.ShowSkillBuff
	(*UserConfig)(nil),              // 22: snakecommon.UserConfig
	(*UnityFlags)(nil),              // 23: snakecommon.UnityFlags
	(*MinorLimit)(nil),              // 24: snakecommon.MinorLimit
	(*OrderCurator)(nil),            // 25: snakecommon.OrderCurator
	(*FlagsConfig)(nil),             // 26: snakecommon.FlagsConfig
	(*FeedbackConfig)(nil),          // 27: snakecommon.FeedbackConfig
	(*SettingConfig)(nil),           // 28: snakecommon.SettingConfig
	(*DocVersion)(nil),              // 29: snakecommon.DocVersion
	(*NetworkCheck)(nil),            // 30: snakecommon.NetworkCheck
	(*Prometheus)(nil),              // 31: snakecommon.Prometheus
	(*OkhttpDispatcher)(nil),        // 32: snakecommon.OkhttpDispatcher
	(*MemSwitch)(nil),               // 33: snakecommon.MemSwitch
	(*BindConfig)(nil),              // 34: snakecommon.BindConfig
	(*RenamePopupRule)(nil),         // 35: snakecommon.RenamePopupRule
	(*QualifyingMatch)(nil),         // 36: snakecommon.QualifyingMatch
	(*NewbieClub)(nil),              // 37: snakecommon.NewbieClub
	(*GameEndSkin)(nil),             // 38: snakecommon.GameEndSkin
	(*DeviceConfig)(nil),            // 39: snakecommon.DeviceConfig
	(*AntiAddiction)(nil),           // 40: snakecommon.AntiAddiction
	(*Notify)(nil),                  // 41: snakecommon.Notify
	(*CertifyGameConfig)(nil),       // 42: snakecommon.CertifyGameConfig
	(*MinorNotify)(nil),             // 43: snakecommon.MinorNotify
	(*PayNotify)(nil),               // 44: snakecommon.PayNotify
	(*SocialDesc)(nil),              // 45: snakecommon.SocialDesc
	(*IdentityAge)(nil),             // 46: snakecommon.IdentityAge
	(*CertifyNotify)(nil),           // 47: snakecommon.CertifyNotify
	(*IdfaConfig)(nil),              // 48: snakecommon.IdfaConfig
	(*CommentConfig)(nil),           // 49: snakecommon.CommentConfig
	(*RegisterSurvey)(nil),          // 50: snakecommon.RegisterSurvey
	(*RecruitPopup)(nil),            // 51: snakecommon.RecruitPopup
	(*NewUserConfig)(nil),           // 52: snakecommon.NewUserConfig
	(*ReviveConfigItem)(nil),        // 53: snakecommon.ReviveConfigItem
	(*SingleGameAiConfigItem)(nil),  // 54: snakecommon.SingleGameAiConfigItem
	(*FloaterConfig)(nil),           // 55: snakecommon.FloaterConfig
	(*ActivityMapConfig)(nil),       // 56: snakecommon.ActivityMapConfig
	(*EndlessLimitConfig)(nil),      // 57: snakecommon.EndlessLimitConfig
	(*EndlessBubbleConfig)(nil),     // 58: snakecommon.EndlessBubbleConfig
	(*EndlessTrackConfig)(nil),      // 59: snakecommon.EndlessTrackConfig
	(*WildStormListItem)(nil),       // 60: snakecommon.WildStormListItem
	(*WildStormConfig)(nil),         // 61: snakecommon.WildStormConfig
	(*OfflineGameConfig)(nil),       // 62: snakecommon.OfflineGameConfig
	nil,                             // 63: snakecommon.ConfigVersionInfo.FlagsEntry
	(*CPriceInfo)(nil),              // 64: snakecommon.CPriceInfo
	(*config.RewardConfig)(nil),     // 65: SnakeMain.Config.RewardConfig
	(*CRewardItem)(nil),             // 66: snakecommon.CRewardItem
}
var file_snakecommon_project_config_proto_depIdxs = []int32{
	63, // 0: snakecommon.ConfigVersionInfo.flags:type_name -> snakecommon.ConfigVersionInfo.FlagsEntry
	2,  // 1: snakecommon.EndLessBuffPropConfigV2.list:type_name -> snakecommon.EndLessBuffPropInfo
	64, // 2: snakecommon.EndLessBuffPropInfo.price_list:type_name -> snakecommon.CPriceInfo
	3,  // 3: snakecommon.EndLessBuffPropInfo.prop_list:type_name -> snakecommon.RandomPropInfo
	5,  // 4: snakecommon.HuaweiHighlight.highlight_list:type_name -> snakecommon.HighLightInfo
	7,  // 5: snakecommon.OlGameConfig.game_status_track:type_name -> snakecommon.GameStatusTrack
	8,  // 6: snakecommon.OlGameConfig.grass_config:type_name -> snakecommon.GrassConfig
	10, // 7: snakecommon.OlGameConfig.team_suit:type_name -> snakecommon.TeamSuit
	12, // 8: snakecommon.OlGameConfig.team_kill_config:type_name -> snakecommon.TeamKillConfig
	13, // 9: snakecommon.OlGameConfig.team_melee_config:type_name -> snakecommon.TeamMeleeConfig
	14, // 10: snakecommon.OlGameConfig.qualifying_config:type_name -> snakecommon.QualifyingConfig
	15, // 11: snakecommon.OlGameConfig.race_normal_config:type_name -> snakecommon.RaceNormalConfig
	16, // 12: snakecommon.OlGameConfig.team_kill_prop:type_name -> snakecommon.TeamKillProp
	9,  // 13: snakecommon.GrassConfig.grass:type_name -> snakecommon.GrassInfo
	11, // 14: snakecommon.TeamSuit.new_suit:type_name -> snakecommon.TeamSuitNewSuitInfo
	64, // 15: snakecommon.TeamKillProp.price_list:type_name -> snakecommon.CPriceInfo
	65, // 16: snakecommon.TeamKillProp.prop_list:type_name -> SnakeMain.Config.RewardConfig
	19, // 17: snakecommon.ShowConfig.level_config:type_name -> snakecommon.ShowLevelConfig
	20, // 18: snakecommon.ShowConfig.skill_name:type_name -> snakecommon.ShowSkillName
	18, // 19: snakecommon.ShowConfig.icon_style:type_name -> snakecommon.ShowIconStyle
	66, // 20: snakecommon.ShowLevelConfig.reward:type_name -> snakecommon.CRewardItem
	21, // 21: snakecommon.ShowLevelConfig.game_skill_list:type_name -> snakecommon.ShowSkillBuff
	39, // 22: snakecommon.UserConfig.abnormal_store:type_name -> snakecommon.DeviceConfig
	17, // 23: snakecommon.UserConfig.show_config:type_name -> snakecommon.ShowConfig
	40, // 24: snakecommon.UserConfig.anti_addiction:type_name -> snakecommon.AntiAddiction
	38, // 25: snakecommon.UserConfig.game_end_skin:type_name -> snakecommon.GameEndSkin
	35, // 26: snakecommon.UserConfig.rename_popup_rule:type_name -> snakecommon.RenamePopupRule
	34, // 27: snakecommon.UserConfig.bind_config:type_name -> snakecommon.BindConfig
	28, // 28: snakecommon.UserConfig.setting_conf:type_name -> snakecommon.SettingConfig
	27, // 29: snakecommon.UserConfig.feedback:type_name -> snakecommon.FeedbackConfig
	26, // 30: snakecommon.UserConfig.flags:type_name -> snakecommon.FlagsConfig
	66, // 31: snakecommon.UserConfig.certify_reward:type_name -> snakecommon.CRewardItem
	50, // 32: snakecommon.UserConfig.register_survey:type_name -> snakecommon.RegisterSurvey
	51, // 33: snakecommon.UserConfig.recruit_popup:type_name -> snakecommon.RecruitPopup
	24, // 34: snakecommon.UserConfig.minor_limit:type_name -> snakecommon.MinorLimit
	52, // 35: snakecommon.UserConfig.new_user_config:type_name -> snakecommon.NewUserConfig
	49, // 36: snakecommon.UserConfig.comment_config:type_name -> snakecommon.CommentConfig
	23, // 37: snakecommon.UserConfig.unity_flags:type_name -> snakecommon.UnityFlags
	48, // 38: snakecommon.UserConfig.idfa_config:type_name -> snakecommon.IdfaConfig
	25, // 39: snakecommon.MinorLimit.order_curator:type_name -> snakecommon.OrderCurator
	29, // 40: snakecommon.SettingConfig.doc_version:type_name -> snakecommon.DocVersion
	30, // 41: snakecommon.SettingConfig.network_check:type_name -> snakecommon.NetworkCheck
	31, // 42: snakecommon.SettingConfig.prometheus:type_name -> snakecommon.Prometheus
	32, // 43: snakecommon.SettingConfig.okhttp_dispatcher:type_name -> snakecommon.OkhttpDispatcher
	33, // 44: snakecommon.SettingConfig.mem_switch:type_name -> snakecommon.MemSwitch
	37, // 45: snakecommon.RenamePopupRule.newbie_club:type_name -> snakecommon.NewbieClub
	36, // 46: snakecommon.RenamePopupRule.qualifying_match:type_name -> snakecommon.QualifyingMatch
	41, // 47: snakecommon.AntiAddiction.notify:type_name -> snakecommon.Notify
	43, // 48: snakecommon.AntiAddiction.minor_notify:type_name -> snakecommon.MinorNotify
	44, // 49: snakecommon.AntiAddiction.pay_notify:type_name -> snakecommon.PayNotify
	45, // 50: snakecommon.AntiAddiction.social_desc:type_name -> snakecommon.SocialDesc
	46, // 51: snakecommon.AntiAddiction.identity_age:type_name -> snakecommon.IdentityAge
	47, // 52: snakecommon.AntiAddiction.certify_notify:type_name -> snakecommon.CertifyNotify
	43, // 53: snakecommon.AntiAddiction.infant_notify:type_name -> snakecommon.MinorNotify
	42, // 54: snakecommon.Notify.uncertified:type_name -> snakecommon.CertifyGameConfig
	42, // 55: snakecommon.Notify.minor:type_name -> snakecommon.CertifyGameConfig
	66, // 56: snakecommon.IdfaConfig.reward:type_name -> snakecommon.CRewardItem
	66, // 57: snakecommon.RegisterSurvey.reward:type_name -> snakecommon.CRewardItem
	66, // 58: snakecommon.NewUserConfig.guide_reward:type_name -> snakecommon.CRewardItem
	60, // 59: snakecommon.WildStormConfig.wild_storm_list:type_name -> snakecommon.WildStormListItem
	53, // 60: snakecommon.OfflineGameConfig.endless_revive_config:type_name -> snakecommon.ReviveConfigItem
	53, // 61: snakecommon.OfflineGameConfig.endless_revive_config_ab1:type_name -> snakecommon.ReviveConfigItem
	53, // 62: snakecommon.OfflineGameConfig.endless_revive_config_ab2:type_name -> snakecommon.ReviveConfigItem
	53, // 63: snakecommon.OfflineGameConfig.excite_revive_config:type_name -> snakecommon.ReviveConfigItem
	53, // 64: snakecommon.OfflineGameConfig.limit_revive_config:type_name -> snakecommon.ReviveConfigItem
	55, // 65: snakecommon.OfflineGameConfig.floater_config:type_name -> snakecommon.FloaterConfig
	57, // 66: snakecommon.OfflineGameConfig.endless_limit_config:type_name -> snakecommon.EndlessLimitConfig
	56, // 67: snakecommon.OfflineGameConfig.activity_map_config:type_name -> snakecommon.ActivityMapConfig
	58, // 68: snakecommon.OfflineGameConfig.endless_bubble:type_name -> snakecommon.EndlessBubbleConfig
	59, // 69: snakecommon.OfflineGameConfig.endless_track:type_name -> snakecommon.EndlessTrackConfig
	61, // 70: snakecommon.OfflineGameConfig.wild_storm:type_name -> snakecommon.WildStormConfig
	2,  // 71: snakecommon.OfflineGameConfig.endless_buff_prop:type_name -> snakecommon.EndLessBuffPropInfo
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_snakecommon_project_config_proto_init() }
func file_snakecommon_project_config_proto_init() {
	if File_snakecommon_project_config_proto != nil {
		return
	}
	file_snakecommon_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snakecommon_project_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLessBuffPropConfigV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLessBuffPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighLightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OlGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatusTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrassConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuitNewSuitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamKillConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMeleeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceNormalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamKillProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIconStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowLevelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSkillName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSkillBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinorLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCurator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prometheus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkhttpDispatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenamePopupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieClub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiAddiction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifyGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinorNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdfaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitPopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviveConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleGameAiConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloaterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityMapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBubbleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessTrackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildStormListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildStormConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecommon_project_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakecommon_project_config_proto_goTypes,
		DependencyIndexes: file_snakecommon_project_config_proto_depIdxs,
		MessageInfos:      file_snakecommon_project_config_proto_msgTypes,
	}.Build()
	File_snakecommon_project_config_proto = out.File
	file_snakecommon_project_config_proto_rawDesc = nil
	file_snakecommon_project_config_proto_goTypes = nil
	file_snakecommon_project_config_proto_depIdxs = nil
}
