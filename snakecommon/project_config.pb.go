// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakecommon/project_config.proto

package snakecommon

import (
	config "git.17zjh.com/snake/snake_proto/snakeapi/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShortCutConfig_SceneType int32

const (
	ShortCutConfig_invalidStatus    ShortCutConfig_SceneType = 0
	ShortCutConfig_SceneFriend      ShortCutConfig_SceneType = 1
	ShortCutConfig_SceneWorld       ShortCutConfig_SceneType = 2
	ShortCutConfig_SceneMatch       ShortCutConfig_SceneType = 3
	ShortCutConfig_SceneClan        ShortCutConfig_SceneType = 5
	ShortCutConfig_SceneCoupleMatch ShortCutConfig_SceneType = 7
	ShortCutConfig_SceneRaceRoom    ShortCutConfig_SceneType = 8
	ShortCutConfig_SceneGoatGame    ShortCutConfig_SceneType = 9
)

// Enum value maps for ShortCutConfig_SceneType.
var (
	ShortCutConfig_SceneType_name = map[int32]string{
		0: "invalidStatus",
		1: "SceneFriend",
		2: "SceneWorld",
		3: "SceneMatch",
		5: "SceneClan",
		7: "SceneCoupleMatch",
		8: "SceneRaceRoom",
		9: "SceneGoatGame",
	}
	ShortCutConfig_SceneType_value = map[string]int32{
		"invalidStatus":    0,
		"SceneFriend":      1,
		"SceneWorld":       2,
		"SceneMatch":       3,
		"SceneClan":        5,
		"SceneCoupleMatch": 7,
		"SceneRaceRoom":    8,
		"SceneGoatGame":    9,
	}
)

func (x ShortCutConfig_SceneType) Enum() *ShortCutConfig_SceneType {
	p := new(ShortCutConfig_SceneType)
	*p = x
	return p
}

func (x ShortCutConfig_SceneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShortCutConfig_SceneType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakecommon_project_config_proto_enumTypes[0].Descriptor()
}

func (ShortCutConfig_SceneType) Type() protoreflect.EnumType {
	return &file_snakecommon_project_config_proto_enumTypes[0]
}

func (x ShortCutConfig_SceneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShortCutConfig_SceneType.Descriptor instead.
func (ShortCutConfig_SceneType) EnumDescriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{46, 0}
}

type ConfigVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags map[string]string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigVersionInfo) Reset() {
	*x = ConfigVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigVersionInfo) ProtoMessage() {}

func (x *ConfigVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigVersionInfo.ProtoReflect.Descriptor instead.
func (*ConfigVersionInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigVersionInfo) GetFlags() map[string]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

// === endless_buff_prop begin ======================================
type EndLessBuffPropConfigV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*EndLessBuffPropInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EndLessBuffPropConfigV2) Reset() {
	*x = EndLessBuffPropConfigV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLessBuffPropConfigV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLessBuffPropConfigV2) ProtoMessage() {}

func (x *EndLessBuffPropConfigV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLessBuffPropConfigV2.ProtoReflect.Descriptor instead.
func (*EndLessBuffPropConfigV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{1}
}

func (x *EndLessBuffPropConfigV2) GetList() []*EndLessBuffPropInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type EndLessBuffPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffType  int32             `protobuf:"varint,1,opt,name=buff_type,json=buffType,proto3" json:"buff_type,omitempty"`
	FreeTimes int32             `protobuf:"varint,2,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	PriceList []*CPriceInfo     `protobuf:"bytes,3,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PropList  []*RandomPropInfo `protobuf:"bytes,4,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
}

func (x *EndLessBuffPropInfo) Reset() {
	*x = EndLessBuffPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLessBuffPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLessBuffPropInfo) ProtoMessage() {}

func (x *EndLessBuffPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLessBuffPropInfo.ProtoReflect.Descriptor instead.
func (*EndLessBuffPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{2}
}

func (x *EndLessBuffPropInfo) GetBuffType() int32 {
	if x != nil {
		return x.BuffType
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetPriceList() []*CPriceInfo {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *EndLessBuffPropInfo) GetPropList() []*RandomPropInfo {
	if x != nil {
		return x.PropList
	}
	return nil
}

type RandomPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Num    int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl string `protobuf:"bytes,5,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *RandomPropInfo) Reset() {
	*x = RandomPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPropInfo) ProtoMessage() {}

func (x *RandomPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPropInfo.ProtoReflect.Descriptor instead.
func (*RandomPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{3}
}

func (x *RandomPropInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RandomPropInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RandomPropInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RandomPropInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RandomPropInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

// === huawei_highlight begin ======================================
type HuaweiHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighlightList   []*HighLightInfo `protobuf:"bytes,1,rep,name=highlight_list,json=highlightList,proto3" json:"highlight_list,omitempty"`
	Open            int32            `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	TemplateIdThree string           `protobuf:"bytes,3,opt,name=template_id_three,json=templateIdThree,proto3" json:"template_id_three,omitempty"`
	TemplateIdFour  string           `protobuf:"bytes,4,opt,name=template_id_four,json=templateIdFour,proto3" json:"template_id_four,omitempty"`
}

func (x *HuaweiHighlight) Reset() {
	*x = HuaweiHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiHighlight) ProtoMessage() {}

func (x *HuaweiHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiHighlight.ProtoReflect.Descriptor instead.
func (*HuaweiHighlight) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{4}
}

func (x *HuaweiHighlight) GetHighlightList() []*HighLightInfo {
	if x != nil {
		return x.HighlightList
	}
	return nil
}

func (x *HuaweiHighlight) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *HuaweiHighlight) GetTemplateIdThree() string {
	if x != nil {
		return x.TemplateIdThree
	}
	return ""
}

func (x *HuaweiHighlight) GetTemplateIdFour() string {
	if x != nil {
		return x.TemplateIdFour
	}
	return ""
}

type HighLightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Obj       int32 `protobuf:"varint,2,opt,name=obj,proto3" json:"obj,omitempty"`
	Time      int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	DelayTime int32 `protobuf:"varint,4,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	Level     int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *HighLightInfo) Reset() {
	*x = HighLightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighLightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighLightInfo) ProtoMessage() {}

func (x *HighLightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighLightInfo.ProtoReflect.Descriptor instead.
func (*HighLightInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{5}
}

func (x *HighLightInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HighLightInfo) GetObj() int32 {
	if x != nil {
		return x.Obj
	}
	return 0
}

func (x *HighLightInfo) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HighLightInfo) GetDelayTime() int32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *HighLightInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// === ol_game_config start ======================================
type OlGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamBossSkinId               int32                  `protobuf:"varint,1,opt,name=team_boss_skin_id,json=teamBossSkinId,proto3" json:"team_boss_skin_id,omitempty"`
	GameStatusTrack              *GameStatusTrack       `protobuf:"bytes,2,opt,name=game_status_track,json=gameStatusTrack,proto3" json:"game_status_track,omitempty"`
	TeamSuitTextConfig           string                 `protobuf:"bytes,3,opt,name=team_suit_text_config,json=teamSuitTextConfig,proto3" json:"team_suit_text_config,omitempty"` // 团战队服说明文案
	GrassConfig                  *GrassConfig           `protobuf:"bytes,4,opt,name=grass_config,json=grassConfig,proto3" json:"grass_config,omitempty"`                          // 草场配置，应该已废弃
	ShowFriendGameWillEndTimeGap int32                  `protobuf:"varint,5,opt,name=show_friend_game_will_end_time_gap,json=showFriendGameWillEndTimeGap,proto3" json:"show_friend_game_will_end_time_gap,omitempty"`
	HcMatchCancelTime            []int32                `protobuf:"varint,6,rep,packed,name=hc_match_cancel_time,json=hcMatchCancelTime,proto3" json:"hc_match_cancel_time,omitempty"`
	NoTeamSkinIdList             []int32                `protobuf:"varint,7,rep,packed,name=no_team_skin_id_list,json=noTeamSkinIdList,proto3" json:"no_team_skin_id_list,omitempty"`
	OlUpActionDouble             int32                  `protobuf:"varint,8,opt,name=ol_up_action_double,json=olUpActionDouble,proto3" json:"ol_up_action_double,omitempty"`
	TeamModeWinLength            int32                  `protobuf:"varint,9,opt,name=team_mode_win_length,json=teamModeWinLength,proto3" json:"team_mode_win_length,omitempty"`
	OlGameOfflineTipTime         int32                  `protobuf:"varint,10,opt,name=ol_game_offline_tip_time,json=olGameOfflineTipTime,proto3" json:"ol_game_offline_tip_time,omitempty"`
	NoTeamSecondHeadPointSkins   []int32                `protobuf:"varint,11,rep,packed,name=no_team_second_head_point_skins,json=noTeamSecondHeadPointSkins,proto3" json:"no_team_second_head_point_skins,omitempty"`
	OlGameStableTurnCount        float64                `protobuf:"fixed64,12,opt,name=ol_game_stable_turn_count,json=olGameStableTurnCount,proto3" json:"ol_game_stable_turn_count,omitempty"`
	TeamNeckUrls                 []string               `protobuf:"bytes,13,rep,name=team_neck_urls,json=teamNeckUrls,proto3" json:"team_neck_urls,omitempty"`
	FlyFoodUrl                   string                 `protobuf:"bytes,14,opt,name=fly_food_url,json=flyFoodUrl,proto3" json:"fly_food_url,omitempty"`
	OlGamePredictDataCount       int32                  `protobuf:"varint,15,opt,name=ol_game_predict_data_count,json=olGamePredictDataCount,proto3" json:"ol_game_predict_data_count,omitempty"`
	TeamSuit                     *TeamSuit              `protobuf:"bytes,16,opt,name=team_suit,json=teamSuit,proto3" json:"team_suit,omitempty"`
	TeamKillConfig               *TeamKillConfig        `protobuf:"bytes,17,opt,name=team_kill_config,json=teamKillConfig,proto3" json:"team_kill_config,omitempty"`
	TeamMeleeConfig              *TeamMeleeConfig       `protobuf:"bytes,18,opt,name=team_melee_config,json=teamMeleeConfig,proto3" json:"team_melee_config,omitempty"`
	QualifyingConfig             *QualifyingConfig      `protobuf:"bytes,19,opt,name=qualifying_config,json=qualifyingConfig,proto3" json:"qualifying_config,omitempty"`
	RaceNormalConfig             *RaceNormalConfig      `protobuf:"bytes,20,opt,name=race_normal_config,json=raceNormalConfig,proto3" json:"race_normal_config,omitempty"`
	TeamKillProp                 *TeamKillProp          `protobuf:"bytes,21,opt,name=team_kill_prop,json=teamKillProp,proto3" json:"team_kill_prop,omitempty"`
	ExitButtonPlan               int32                  `protobuf:"varint,22,opt,name=exit_button_plan,json=exitButtonPlan,proto3" json:"exit_button_plan,omitempty"`  // 4.3.28新增,中途退出按钮状态方案
	QualifyingGuide              int32                  `protobuf:"varint,23,opt,name=qualifying_guide,json=qualifyingGuide,proto3" json:"qualifying_guide,omitempty"` //1:强引导，2：弱引导
	OlGamePredictDataCountNew    int32                  `protobuf:"varint,24,opt,name=ol_game_predict_data_count_new,json=olGamePredictDataCountNew,proto3" json:"ol_game_predict_data_count_new,omitempty"`
	MatchBackground              *MatchBackgroundConfig `protobuf:"bytes,25,opt,name=match_background,json=matchBackground,proto3" json:"match_background,omitempty"`
	JumpIcon                     *JumpIcon              `protobuf:"bytes,26,opt,name=jump_icon,json=jumpIcon,proto3" json:"jump_icon,omitempty"` // 匹配界面跳转按钮
}

func (x *OlGameConfig) Reset() {
	*x = OlGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OlGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OlGameConfig) ProtoMessage() {}

func (x *OlGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OlGameConfig.ProtoReflect.Descriptor instead.
func (*OlGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{6}
}

func (x *OlGameConfig) GetTeamBossSkinId() int32 {
	if x != nil {
		return x.TeamBossSkinId
	}
	return 0
}

func (x *OlGameConfig) GetGameStatusTrack() *GameStatusTrack {
	if x != nil {
		return x.GameStatusTrack
	}
	return nil
}

func (x *OlGameConfig) GetTeamSuitTextConfig() string {
	if x != nil {
		return x.TeamSuitTextConfig
	}
	return ""
}

func (x *OlGameConfig) GetGrassConfig() *GrassConfig {
	if x != nil {
		return x.GrassConfig
	}
	return nil
}

func (x *OlGameConfig) GetShowFriendGameWillEndTimeGap() int32 {
	if x != nil {
		return x.ShowFriendGameWillEndTimeGap
	}
	return 0
}

func (x *OlGameConfig) GetHcMatchCancelTime() []int32 {
	if x != nil {
		return x.HcMatchCancelTime
	}
	return nil
}

func (x *OlGameConfig) GetNoTeamSkinIdList() []int32 {
	if x != nil {
		return x.NoTeamSkinIdList
	}
	return nil
}

func (x *OlGameConfig) GetOlUpActionDouble() int32 {
	if x != nil {
		return x.OlUpActionDouble
	}
	return 0
}

func (x *OlGameConfig) GetTeamModeWinLength() int32 {
	if x != nil {
		return x.TeamModeWinLength
	}
	return 0
}

func (x *OlGameConfig) GetOlGameOfflineTipTime() int32 {
	if x != nil {
		return x.OlGameOfflineTipTime
	}
	return 0
}

func (x *OlGameConfig) GetNoTeamSecondHeadPointSkins() []int32 {
	if x != nil {
		return x.NoTeamSecondHeadPointSkins
	}
	return nil
}

func (x *OlGameConfig) GetOlGameStableTurnCount() float64 {
	if x != nil {
		return x.OlGameStableTurnCount
	}
	return 0
}

func (x *OlGameConfig) GetTeamNeckUrls() []string {
	if x != nil {
		return x.TeamNeckUrls
	}
	return nil
}

func (x *OlGameConfig) GetFlyFoodUrl() string {
	if x != nil {
		return x.FlyFoodUrl
	}
	return ""
}

func (x *OlGameConfig) GetOlGamePredictDataCount() int32 {
	if x != nil {
		return x.OlGamePredictDataCount
	}
	return 0
}

func (x *OlGameConfig) GetTeamSuit() *TeamSuit {
	if x != nil {
		return x.TeamSuit
	}
	return nil
}

func (x *OlGameConfig) GetTeamKillConfig() *TeamKillConfig {
	if x != nil {
		return x.TeamKillConfig
	}
	return nil
}

func (x *OlGameConfig) GetTeamMeleeConfig() *TeamMeleeConfig {
	if x != nil {
		return x.TeamMeleeConfig
	}
	return nil
}

func (x *OlGameConfig) GetQualifyingConfig() *QualifyingConfig {
	if x != nil {
		return x.QualifyingConfig
	}
	return nil
}

func (x *OlGameConfig) GetRaceNormalConfig() *RaceNormalConfig {
	if x != nil {
		return x.RaceNormalConfig
	}
	return nil
}

func (x *OlGameConfig) GetTeamKillProp() *TeamKillProp {
	if x != nil {
		return x.TeamKillProp
	}
	return nil
}

func (x *OlGameConfig) GetExitButtonPlan() int32 {
	if x != nil {
		return x.ExitButtonPlan
	}
	return 0
}

func (x *OlGameConfig) GetQualifyingGuide() int32 {
	if x != nil {
		return x.QualifyingGuide
	}
	return 0
}

func (x *OlGameConfig) GetOlGamePredictDataCountNew() int32 {
	if x != nil {
		return x.OlGamePredictDataCountNew
	}
	return 0
}

func (x *OlGameConfig) GetMatchBackground() *MatchBackgroundConfig {
	if x != nil {
		return x.MatchBackground
	}
	return nil
}

func (x *OlGameConfig) GetJumpIcon() *JumpIcon {
	if x != nil {
		return x.JumpIcon
	}
	return nil
}

type JumpIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon           string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                                           // 图标url
	Link           string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`                                           // 跳转链接
	StartTime      int64  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`               // 开始时间
	EndTime        int64  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                     // 结束时间
	SupportVersion string `protobuf:"bytes,5,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"` // 支持版本>=
}

func (x *JumpIcon) Reset() {
	*x = JumpIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JumpIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JumpIcon) ProtoMessage() {}

func (x *JumpIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JumpIcon.ProtoReflect.Descriptor instead.
func (*JumpIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{7}
}

func (x *JumpIcon) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *JumpIcon) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *JumpIcon) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JumpIcon) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *JumpIcon) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

type MatchBackgroundConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType     int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimSrc      string `protobuf:"bytes,2,opt,name=anim_src,json=animSrc,proto3" json:"anim_src,omitempty"`
	StaticImgurl string `protobuf:"bytes,3,opt,name=static_imgurl,json=staticImgurl,proto3" json:"static_imgurl,omitempty"`
}

func (x *MatchBackgroundConfig) Reset() {
	*x = MatchBackgroundConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchBackgroundConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBackgroundConfig) ProtoMessage() {}

func (x *MatchBackgroundConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBackgroundConfig.ProtoReflect.Descriptor instead.
func (*MatchBackgroundConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{8}
}

func (x *MatchBackgroundConfig) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *MatchBackgroundConfig) GetAnimSrc() string {
	if x != nil {
		return x.AnimSrc
	}
	return ""
}

func (x *MatchBackgroundConfig) GetStaticImgurl() string {
	if x != nil {
		return x.StaticImgurl
	}
	return ""
}

type GameStatusTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameMinDelay int32 `protobuf:"varint,1,opt,name=frame_min_delay,json=frameMinDelay,proto3" json:"frame_min_delay,omitempty"`
	PingInterval  int32 `protobuf:"varint,2,opt,name=ping_interval,json=pingInterval,proto3" json:"ping_interval,omitempty"`
}

func (x *GameStatusTrack) Reset() {
	*x = GameStatusTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatusTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatusTrack) ProtoMessage() {}

func (x *GameStatusTrack) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatusTrack.ProtoReflect.Descriptor instead.
func (*GameStatusTrack) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{9}
}

func (x *GameStatusTrack) GetFrameMinDelay() int32 {
	if x != nil {
		return x.FrameMinDelay
	}
	return 0
}

func (x *GameStatusTrack) GetPingInterval() int32 {
	if x != nil {
		return x.PingInterval
	}
	return 0
}

type GrassConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grass     []*GrassInfo `protobuf:"bytes,1,rep,name=grass,proto3" json:"grass,omitempty"`
	GridCount int32        `protobuf:"varint,2,opt,name=grid_count,json=gridCount,proto3" json:"grid_count,omitempty"`
}

func (x *GrassConfig) Reset() {
	*x = GrassConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrassConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrassConfig) ProtoMessage() {}

func (x *GrassConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrassConfig.ProtoReflect.Descriptor instead.
func (*GrassConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{10}
}

func (x *GrassConfig) GetGrass() []*GrassInfo {
	if x != nil {
		return x.Grass
	}
	return nil
}

func (x *GrassConfig) GetGridCount() int32 {
	if x != nil {
		return x.GridCount
	}
	return 0
}

type GrassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position []int32 `protobuf:"varint,1,rep,packed,name=position,proto3" json:"position,omitempty"`
	Url      string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GrassInfo) Reset() {
	*x = GrassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrassInfo) ProtoMessage() {}

func (x *GrassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrassInfo.ProtoReflect.Descriptor instead.
func (*GrassInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{11}
}

func (x *GrassInfo) GetPosition() []int32 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GrassInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TeamSuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head       []string               `protobuf:"bytes,1,rep,name=head,proto3" json:"head,omitempty"`
	Body       []string               `protobuf:"bytes,2,rep,name=body,proto3" json:"body,omitempty"`
	RepeatRate []int32                `protobuf:"varint,3,rep,packed,name=repeat_rate,json=repeatRate,proto3" json:"repeat_rate,omitempty"`
	Imgurl     string                 `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name       string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NewSuit    []*TeamSuitNewSuitInfo `protobuf:"bytes,6,rep,name=new_suit,json=newSuit,proto3" json:"new_suit,omitempty"`
}

func (x *TeamSuit) Reset() {
	*x = TeamSuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuit) ProtoMessage() {}

func (x *TeamSuit) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuit.ProtoReflect.Descriptor instead.
func (*TeamSuit) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{12}
}

func (x *TeamSuit) GetHead() []string {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TeamSuit) GetBody() []string {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *TeamSuit) GetRepeatRate() []int32 {
	if x != nil {
		return x.RepeatRate
	}
	return nil
}

func (x *TeamSuit) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *TeamSuit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamSuit) GetNewSuit() []*TeamSuitNewSuitInfo {
	if x != nil {
		return x.NewSuit
	}
	return nil
}

type TeamSuitNewSuitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinIds []int32 `protobuf:"varint,1,rep,packed,name=skin_ids,json=skinIds,proto3" json:"skin_ids,omitempty"`
	Id      int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Imgurl  string  `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name    string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TeamSuitNewSuitInfo) Reset() {
	*x = TeamSuitNewSuitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuitNewSuitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuitNewSuitInfo) ProtoMessage() {}

func (x *TeamSuitNewSuitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuitNewSuitInfo.ProtoReflect.Descriptor instead.
func (*TeamSuitNewSuitInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{13}
}

func (x *TeamSuitNewSuitInfo) GetSkinIds() []int32 {
	if x != nil {
		return x.SkinIds
	}
	return nil
}

func (x *TeamSuitNewSuitInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamSuitNewSuitInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *TeamSuitNewSuitInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TeamKillConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstBloodSoundEffect int32    `protobuf:"varint,1,opt,name=first_blood_sound_effect,json=firstBloodSoundEffect,proto3" json:"first_blood_sound_effect,omitempty"`
	ClanPointRule         string   `protobuf:"bytes,2,opt,name=clan_point_rule,json=clanPointRule,proto3" json:"clan_point_rule,omitempty"`
	IntroUrls             []string `protobuf:"bytes,3,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	IntroUrlsIpad         []string `protobuf:"bytes,4,rep,name=intro_urls_ipad,json=introUrlsIpad,proto3" json:"intro_urls_ipad,omitempty"`
	TopRewardDesc         string   `protobuf:"bytes,5,opt,name=top_reward_desc,json=topRewardDesc,proto3" json:"top_reward_desc,omitempty"`
	TopIntro              string   `protobuf:"bytes,6,opt,name=top_intro,json=topIntro,proto3" json:"top_intro,omitempty"`
	TopFirstIntro         string   `protobuf:"bytes,7,opt,name=top_first_intro,json=topFirstIntro,proto3" json:"top_first_intro,omitempty"`
	UseSeasonScore        int32    `protobuf:"varint,8,opt,name=use_season_score,json=useSeasonScore,proto3" json:"use_season_score,omitempty"`
}

func (x *TeamKillConfig) Reset() {
	*x = TeamKillConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamKillConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamKillConfig) ProtoMessage() {}

func (x *TeamKillConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamKillConfig.ProtoReflect.Descriptor instead.
func (*TeamKillConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{14}
}

func (x *TeamKillConfig) GetFirstBloodSoundEffect() int32 {
	if x != nil {
		return x.FirstBloodSoundEffect
	}
	return 0
}

func (x *TeamKillConfig) GetClanPointRule() string {
	if x != nil {
		return x.ClanPointRule
	}
	return ""
}

func (x *TeamKillConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *TeamKillConfig) GetIntroUrlsIpad() []string {
	if x != nil {
		return x.IntroUrlsIpad
	}
	return nil
}

func (x *TeamKillConfig) GetTopRewardDesc() string {
	if x != nil {
		return x.TopRewardDesc
	}
	return ""
}

func (x *TeamKillConfig) GetTopIntro() string {
	if x != nil {
		return x.TopIntro
	}
	return ""
}

func (x *TeamKillConfig) GetTopFirstIntro() string {
	if x != nil {
		return x.TopFirstIntro
	}
	return ""
}

func (x *TeamKillConfig) GetUseSeasonScore() int32 {
	if x != nil {
		return x.UseSeasonScore
	}
	return 0
}

type TeamMeleeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamMeleeRule string   `protobuf:"bytes,1,opt,name=team_melee_rule,json=teamMeleeRule,proto3" json:"team_melee_rule,omitempty"`
	GameRule      string   `protobuf:"bytes,2,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`
	ClanPointRule string   `protobuf:"bytes,3,opt,name=clan_point_rule,json=clanPointRule,proto3" json:"clan_point_rule,omitempty"`
	IntroUrls     []string `protobuf:"bytes,4,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	ShowFeedback  int32    `protobuf:"varint,5,opt,name=show_feedback,json=showFeedback,proto3" json:"show_feedback,omitempty"`
	FeedbackUrl   string   `protobuf:"bytes,6,opt,name=feedback_url,json=feedbackUrl,proto3" json:"feedback_url,omitempty"`
	ShowGradeInfo int32    `protobuf:"varint,7,opt,name=show_grade_info,json=showGradeInfo,proto3" json:"show_grade_info,omitempty"`
}

func (x *TeamMeleeConfig) Reset() {
	*x = TeamMeleeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMeleeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMeleeConfig) ProtoMessage() {}

func (x *TeamMeleeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMeleeConfig.ProtoReflect.Descriptor instead.
func (*TeamMeleeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{15}
}

func (x *TeamMeleeConfig) GetTeamMeleeRule() string {
	if x != nil {
		return x.TeamMeleeRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetGameRule() string {
	if x != nil {
		return x.GameRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetClanPointRule() string {
	if x != nil {
		return x.ClanPointRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *TeamMeleeConfig) GetShowFeedback() int32 {
	if x != nil {
		return x.ShowFeedback
	}
	return 0
}

func (x *TeamMeleeConfig) GetFeedbackUrl() string {
	if x != nil {
		return x.FeedbackUrl
	}
	return ""
}

func (x *TeamMeleeConfig) GetShowGradeInfo() int32 {
	if x != nil {
		return x.ShowGradeInfo
	}
	return 0
}

type QualifyingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntroUrls       []string `protobuf:"bytes,1,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	IntroUrlsV2     []string `protobuf:"bytes,2,rep,name=intro_urls_v2,json=introUrlsV2,proto3" json:"intro_urls_v2,omitempty"`
	IntroUrlsIpad   []string `protobuf:"bytes,3,rep,name=intro_urls_ipad,json=introUrlsIpad,proto3" json:"intro_urls_ipad,omitempty"`
	IntroUrlsIpadV2 []string `protobuf:"bytes,4,rep,name=intro_urls_ipad_v2,json=introUrlsIpadV2,proto3" json:"intro_urls_ipad_v2,omitempty"`
	UnlockTip       string   `protobuf:"bytes,5,opt,name=unlock_tip,json=unlockTip,proto3" json:"unlock_tip,omitempty"`     // 解锁提示"无尽模式达到***分解锁"
	GameRule        string   `protobuf:"bytes,6,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`        // 结算页点赞说明
	ForceGuide      int32    `protobuf:"varint,7,opt,name=force_guide,json=forceGuide,proto3" json:"force_guide,omitempty"` //1有引导 // 对于未玩过团战的玩家,无尽模式以高于一定分数的成绩结束后是否出现强制团战引导
	PrettyPage      int32    `protobuf:"varint,8,opt,name=pretty_page,json=prettyPage,proto3" json:"pretty_page,omitempty"`
	BannerUrl       string   `protobuf:"bytes,9,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	BannerLink      string   `protobuf:"bytes,10,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	UseKcpV2        int32    `protobuf:"varint,11,opt,name=use_kcp_v2,json=useKcpV2,proto3" json:"use_kcp_v2,omitempty"`
	UseNettyV2      int32    `protobuf:"varint,12,opt,name=use_netty_v2,json=useNettyV2,proto3" json:"use_netty_v2,omitempty"`
	UseNetty        int32    `protobuf:"varint,13,opt,name=use_netty,json=useNetty,proto3" json:"use_netty,omitempty"`
	NetworkSurvey   int32    `protobuf:"varint,14,opt,name=network_survey,json=networkSurvey,proto3" json:"network_survey,omitempty"`
	UseRenderOffset int32    `protobuf:"varint,15,opt,name=use_render_offset,json=useRenderOffset,proto3" json:"use_render_offset,omitempty"`
	NetworkSurveyV2 int32    `protobuf:"varint,16,opt,name=network_survey_v2,json=networkSurveyV2,proto3" json:"network_survey_v2,omitempty"`
	IconLink        string   `protobuf:"bytes,17,opt,name=icon_link,json=iconLink,proto3" json:"icon_link,omitempty"`
	IconUrl         string   `protobuf:"bytes,18,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	UseKcp          int32    `protobuf:"varint,19,opt,name=use_kcp,json=useKcp,proto3" json:"use_kcp,omitempty"`
}

func (x *QualifyingConfig) Reset() {
	*x = QualifyingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingConfig) ProtoMessage() {}

func (x *QualifyingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingConfig.ProtoReflect.Descriptor instead.
func (*QualifyingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{16}
}

func (x *QualifyingConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsV2() []string {
	if x != nil {
		return x.IntroUrlsV2
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsIpad() []string {
	if x != nil {
		return x.IntroUrlsIpad
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsIpadV2() []string {
	if x != nil {
		return x.IntroUrlsIpadV2
	}
	return nil
}

func (x *QualifyingConfig) GetUnlockTip() string {
	if x != nil {
		return x.UnlockTip
	}
	return ""
}

func (x *QualifyingConfig) GetGameRule() string {
	if x != nil {
		return x.GameRule
	}
	return ""
}

func (x *QualifyingConfig) GetForceGuide() int32 {
	if x != nil {
		return x.ForceGuide
	}
	return 0
}

func (x *QualifyingConfig) GetPrettyPage() int32 {
	if x != nil {
		return x.PrettyPage
	}
	return 0
}

func (x *QualifyingConfig) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *QualifyingConfig) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *QualifyingConfig) GetUseKcpV2() int32 {
	if x != nil {
		return x.UseKcpV2
	}
	return 0
}

func (x *QualifyingConfig) GetUseNettyV2() int32 {
	if x != nil {
		return x.UseNettyV2
	}
	return 0
}

func (x *QualifyingConfig) GetUseNetty() int32 {
	if x != nil {
		return x.UseNetty
	}
	return 0
}

func (x *QualifyingConfig) GetNetworkSurvey() int32 {
	if x != nil {
		return x.NetworkSurvey
	}
	return 0
}

func (x *QualifyingConfig) GetUseRenderOffset() int32 {
	if x != nil {
		return x.UseRenderOffset
	}
	return 0
}

func (x *QualifyingConfig) GetNetworkSurveyV2() int32 {
	if x != nil {
		return x.NetworkSurveyV2
	}
	return 0
}

func (x *QualifyingConfig) GetIconLink() string {
	if x != nil {
		return x.IconLink
	}
	return ""
}

func (x *QualifyingConfig) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *QualifyingConfig) GetUseKcp() int32 {
	if x != nil {
		return x.UseKcp
	}
	return 0
}

type RaceNormalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannerUrl  string   `protobuf:"bytes,1,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	BannerLink string   `protobuf:"bytes,2,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	IntroUrls  []string `protobuf:"bytes,3,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
}

func (x *RaceNormalConfig) Reset() {
	*x = RaceNormalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceNormalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceNormalConfig) ProtoMessage() {}

func (x *RaceNormalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceNormalConfig.ProtoReflect.Descriptor instead.
func (*RaceNormalConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{17}
}

func (x *RaceNormalConfig) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *RaceNormalConfig) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *RaceNormalConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

type TeamKillProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceList []*CPriceInfo          `protobuf:"bytes,1,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PropList  []*config.RewardConfig `protobuf:"bytes,2,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
	GameFree  int32                  `protobuf:"varint,3,opt,name=game_free,json=gameFree,proto3" json:"game_free,omitempty"`
	ShowIcon  int32                  `protobuf:"varint,4,opt,name=show_icon,json=showIcon,proto3" json:"show_icon,omitempty"`
}

func (x *TeamKillProp) Reset() {
	*x = TeamKillProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamKillProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamKillProp) ProtoMessage() {}

func (x *TeamKillProp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamKillProp.ProtoReflect.Descriptor instead.
func (*TeamKillProp) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{18}
}

func (x *TeamKillProp) GetPriceList() []*CPriceInfo {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *TeamKillProp) GetPropList() []*config.RewardConfig {
	if x != nil {
		return x.PropList
	}
	return nil
}

func (x *TeamKillProp) GetGameFree() int32 {
	if x != nil {
		return x.GameFree
	}
	return 0
}

func (x *TeamKillProp) GetShowIcon() int32 {
	if x != nil {
		return x.ShowIcon
	}
	return 0
}

// === clan_config begin =======================================
type ClanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleDesc               *RuleDesc                 `protobuf:"bytes,1,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"` // 战队赛增加活跃点规则
	RaceTimeConfig         []*RaceTimeConfig         `protobuf:"bytes,2,rep,name=race_time_config,json=raceTimeConfig,proto3" json:"race_time_config,omitempty"`
	ClanRaceReward         map[int32]*ClanRaceReward `protobuf:"bytes,3,rep,name=clan_race_reward,json=clanRaceReward,proto3" json:"clan_race_reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LevelConfig            []*ClanLevelInfo          `protobuf:"bytes,4,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty"`
	ClanRewardTips         string                    `protobuf:"bytes,5,opt,name=clan_reward_tips,json=clanRewardTips,proto3" json:"clan_reward_tips,omitempty"`
	QrcodeFormat           string                    `protobuf:"bytes,6,opt,name=qrcode_format,json=qrcodeFormat,proto3" json:"qrcode_format,omitempty"`
	UnlockStar             int32                     `protobuf:"varint,7,opt,name=unlock_star,json=unlockStar,proto3" json:"unlock_star,omitempty"`
	RewardPartition        []int32                   `protobuf:"varint,8,rep,packed,name=reward_partition,json=rewardPartition,proto3" json:"reward_partition,omitempty"`                        // 这是老的，结算的时候用，[0]为高，[1]为中，[2]为低
	RewardExplainPartition []int32                   `protobuf:"varint,9,rep,packed,name=reward_explain_partition,json=rewardExplainPartition,proto3" json:"reward_explain_partition,omitempty"` // 这是新的，预览的时候用，[0]为高，[1]为中，[2]为低
	PermissionImgurl       string                    `protobuf:"bytes,10,opt,name=permission_imgurl,json=permissionImgurl,proto3" json:"permission_imgurl,omitempty"`
	AddCupRule             string                    `protobuf:"bytes,11,opt,name=add_cup_rule,json=addCupRule,proto3" json:"add_cup_rule,omitempty"`
	TeamAddCupRule         string                    `protobuf:"bytes,12,opt,name=team_add_cup_rule,json=teamAddCupRule,proto3" json:"team_add_cup_rule,omitempty"`
	CreateClanCostDiamond  int32                     `protobuf:"varint,13,opt,name=create_clan_cost_diamond,json=createClanCostDiamond,proto3" json:"create_clan_cost_diamond,omitempty"`
	SeasonCupUrl           string                    `protobuf:"bytes,14,opt,name=season_cup_url,json=seasonCupUrl,proto3" json:"season_cup_url,omitempty"`
	RewardWeb              string                    `protobuf:"bytes,15,opt,name=reward_web,json=rewardWeb,proto3" json:"reward_web,omitempty"`
	RewardConfig           []*NewClanRewardItem      `protobuf:"bytes,16,rep,name=reward_config,json=rewardConfig,proto3" json:"reward_config,omitempty"`                        // 这是老的，结算的时候用，服务器返回从大到小的顺序，客户端从小到大展示
	RewardExplainConfig    []*NewClanRewardItem      `protobuf:"bytes,17,rep,name=reward_explain_config,json=rewardExplainConfig,proto3" json:"reward_explain_config,omitempty"` // 这是新的，预览的时候用，服务器返回从大到小的顺序，客户端从小到大展示
	DescUrlV2              string                    `protobuf:"bytes,18,opt,name=desc_url_v2,json=descUrlV2,proto3" json:"desc_url_v2,omitempty"`
}

func (x *ClanConfig) Reset() {
	*x = ClanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanConfig) ProtoMessage() {}

func (x *ClanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanConfig.ProtoReflect.Descriptor instead.
func (*ClanConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{19}
}

func (x *ClanConfig) GetRuleDesc() *RuleDesc {
	if x != nil {
		return x.RuleDesc
	}
	return nil
}

func (x *ClanConfig) GetRaceTimeConfig() []*RaceTimeConfig {
	if x != nil {
		return x.RaceTimeConfig
	}
	return nil
}

func (x *ClanConfig) GetClanRaceReward() map[int32]*ClanRaceReward {
	if x != nil {
		return x.ClanRaceReward
	}
	return nil
}

func (x *ClanConfig) GetLevelConfig() []*ClanLevelInfo {
	if x != nil {
		return x.LevelConfig
	}
	return nil
}

func (x *ClanConfig) GetClanRewardTips() string {
	if x != nil {
		return x.ClanRewardTips
	}
	return ""
}

func (x *ClanConfig) GetQrcodeFormat() string {
	if x != nil {
		return x.QrcodeFormat
	}
	return ""
}

func (x *ClanConfig) GetUnlockStar() int32 {
	if x != nil {
		return x.UnlockStar
	}
	return 0
}

func (x *ClanConfig) GetRewardPartition() []int32 {
	if x != nil {
		return x.RewardPartition
	}
	return nil
}

func (x *ClanConfig) GetRewardExplainPartition() []int32 {
	if x != nil {
		return x.RewardExplainPartition
	}
	return nil
}

func (x *ClanConfig) GetPermissionImgurl() string {
	if x != nil {
		return x.PermissionImgurl
	}
	return ""
}

func (x *ClanConfig) GetAddCupRule() string {
	if x != nil {
		return x.AddCupRule
	}
	return ""
}

func (x *ClanConfig) GetTeamAddCupRule() string {
	if x != nil {
		return x.TeamAddCupRule
	}
	return ""
}

func (x *ClanConfig) GetCreateClanCostDiamond() int32 {
	if x != nil {
		return x.CreateClanCostDiamond
	}
	return 0
}

func (x *ClanConfig) GetSeasonCupUrl() string {
	if x != nil {
		return x.SeasonCupUrl
	}
	return ""
}

func (x *ClanConfig) GetRewardWeb() string {
	if x != nil {
		return x.RewardWeb
	}
	return ""
}

func (x *ClanConfig) GetRewardConfig() []*NewClanRewardItem {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

func (x *ClanConfig) GetRewardExplainConfig() []*NewClanRewardItem {
	if x != nil {
		return x.RewardExplainConfig
	}
	return nil
}

func (x *ClanConfig) GetDescUrlV2() string {
	if x != nil {
		return x.DescUrlV2
	}
	return ""
}

type RuleDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamAddCupRule      string                 `protobuf:"bytes,1,opt,name=team_add_cup_rule,json=teamAddCupRule,proto3" json:"team_add_cup_rule,omitempty"`              //战队赛增加活跃点规则
	AddCupRule          string                 `protobuf:"bytes,2,opt,name=add_cup_rule,json=addCupRule,proto3" json:"add_cup_rule,omitempty"`                            //团战增加活跃点规则
	FormalMemberCup     int32                  `protobuf:"varint,3,opt,name=formal_member_cup,json=formalMemberCup,proto3" json:"formal_member_cup,omitempty"`            //候补队员转正提示
	LevelExplainUrl     string                 `protobuf:"bytes,4,opt,name=level_explain_url,json=levelExplainUrl,proto3" json:"level_explain_url,omitempty"`             //战队等级介绍 url
	ActivePointAddition []*ActivePointAddition `protobuf:"bytes,5,rep,name=active_point_addition,json=activePointAddition,proto3" json:"active_point_addition,omitempty"` //排位赛战队成员组队加成
	RaceCupRate         int32                  `protobuf:"varint,6,opt,name=race_cup_rate,json=raceCupRate,proto3" json:"race_cup_rate,omitempty"`                        //战队赛倍数
}

func (x *RuleDesc) Reset() {
	*x = RuleDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDesc) ProtoMessage() {}

func (x *RuleDesc) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDesc.ProtoReflect.Descriptor instead.
func (*RuleDesc) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{20}
}

func (x *RuleDesc) GetTeamAddCupRule() string {
	if x != nil {
		return x.TeamAddCupRule
	}
	return ""
}

func (x *RuleDesc) GetAddCupRule() string {
	if x != nil {
		return x.AddCupRule
	}
	return ""
}

func (x *RuleDesc) GetFormalMemberCup() int32 {
	if x != nil {
		return x.FormalMemberCup
	}
	return 0
}

func (x *RuleDesc) GetLevelExplainUrl() string {
	if x != nil {
		return x.LevelExplainUrl
	}
	return ""
}

func (x *RuleDesc) GetActivePointAddition() []*ActivePointAddition {
	if x != nil {
		return x.ActivePointAddition
	}
	return nil
}

func (x *RuleDesc) GetRaceCupRate() int32 {
	if x != nil {
		return x.RaceCupRate
	}
	return 0
}

type ActivePointAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member int32  `protobuf:"varint,1,opt,name=member,proto3" json:"member,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ActivePointAddition) Reset() {
	*x = ActivePointAddition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePointAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePointAddition) ProtoMessage() {}

func (x *ActivePointAddition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePointAddition.ProtoReflect.Descriptor instead.
func (*ActivePointAddition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{21}
}

func (x *ActivePointAddition) GetMember() int32 {
	if x != nil {
		return x.Member
	}
	return 0
}

func (x *ActivePointAddition) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RaceTimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeekDay   int32  `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`      // 星期日为7
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 格式24:00:00
	EndTime   string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 格式24:00:00
}

func (x *RaceTimeConfig) Reset() {
	*x = RaceTimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceTimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceTimeConfig) ProtoMessage() {}

func (x *RaceTimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceTimeConfig.ProtoReflect.Descriptor instead.
func (*RaceTimeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{22}
}

func (x *RaceTimeConfig) GetWeekDay() int32 {
	if x != nil {
		return x.WeekDay
	}
	return 0
}

func (x *RaceTimeConfig) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *RaceTimeConfig) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type ClanRaceReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value    int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Desc     string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Progress string `protobuf:"bytes,4,opt,name=progress,proto3" json:"progress,omitempty"`
	State    int32  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ClanRaceReward) Reset() {
	*x = ClanRaceReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanRaceReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanRaceReward) ProtoMessage() {}

func (x *ClanRaceReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanRaceReward.ProtoReflect.Descriptor instead.
func (*ClanRaceReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{23}
}

func (x *ClanRaceReward) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ClanRaceReward) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ClanRaceReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ClanRaceReward) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *ClanRaceReward) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type ClanLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberNum int32  `protobuf:"varint,1,opt,name=member_num,json=memberNum,proto3" json:"member_num,omitempty"`
	CupStart  int32  `protobuf:"varint,2,opt,name=cup_start,json=cupStart,proto3" json:"cup_start,omitempty"`
	Level     int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	IconUrl   string `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	EliteNum  int32  `protobuf:"varint,6,opt,name=elite_num,json=eliteNum,proto3" json:"elite_num,omitempty"`
}

func (x *ClanLevelInfo) Reset() {
	*x = ClanLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanLevelInfo) ProtoMessage() {}

func (x *ClanLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanLevelInfo.ProtoReflect.Descriptor instead.
func (*ClanLevelInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{24}
}

func (x *ClanLevelInfo) GetMemberNum() int32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *ClanLevelInfo) GetCupStart() int32 {
	if x != nil {
		return x.CupStart
	}
	return 0
}

func (x *ClanLevelInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ClanLevelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClanLevelInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *ClanLevelInfo) GetEliteNum() int32 {
	if x != nil {
		return x.EliteNum
	}
	return 0
}

type NewClanRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // 只代表id，不代表等级的高低
	BadgeImgurl  string                 `protobuf:"bytes,2,opt,name=badge_imgurl,json=badgeImgurl,proto3" json:"badge_imgurl,omitempty"`
	Grade        string                 `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	BorderImgurl string                 `protobuf:"bytes,4,opt,name=border_imgurl,json=borderImgurl,proto3" json:"border_imgurl,omitempty"`
	Rank         int32                  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	Diamond      int32                  `protobuf:"varint,6,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Reward       []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward,proto3" json:"reward,omitempty"`
	CupStart     int32                  `protobuf:"varint,8,opt,name=cup_start,json=cupStart,proto3" json:"cup_start,omitempty"`
	RewardId     int32                  `protobuf:"varint,9,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// 下一个不同 grade 的 rank 位置
	NextRank int32 `protobuf:"varint,10,opt,name=nextRank,proto3" json:"nextRank,omitempty"`
	Degree   int32 `protobuf:"varint,11,opt,name=degree,proto3" json:"degree,omitempty"` // 依据服务器返回来的等级列表位置，小的一定等级低，最低等级为0；0,1,2,3...n-1 中间没有空位
}

func (x *NewClanRewardItem) Reset() {
	*x = NewClanRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClanRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClanRewardItem) ProtoMessage() {}

func (x *NewClanRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClanRewardItem.ProtoReflect.Descriptor instead.
func (*NewClanRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{25}
}

func (x *NewClanRewardItem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NewClanRewardItem) GetBadgeImgurl() string {
	if x != nil {
		return x.BadgeImgurl
	}
	return ""
}

func (x *NewClanRewardItem) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *NewClanRewardItem) GetBorderImgurl() string {
	if x != nil {
		return x.BorderImgurl
	}
	return ""
}

func (x *NewClanRewardItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *NewClanRewardItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *NewClanRewardItem) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *NewClanRewardItem) GetCupStart() int32 {
	if x != nil {
		return x.CupStart
	}
	return 0
}

func (x *NewClanRewardItem) GetRewardId() int32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *NewClanRewardItem) GetNextRank() int32 {
	if x != nil {
		return x.NextRank
	}
	return 0
}

func (x *NewClanRewardItem) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

// === rank_config begin ======================================
type RankConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime          int64         `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64         `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SeasonName         string        `protobuf:"bytes,3,opt,name=season_name,json=seasonName,proto3" json:"season_name,omitempty"`
	SeasonIntroduceUrl string        `protobuf:"bytes,4,opt,name=season_introduce_url,json=seasonIntroduceUrl,proto3" json:"season_introduce_url,omitempty"`
	Title              string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Imgurl             string        `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Height             int32         `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Width              int32         `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	SeasonId           int32         `protobuf:"varint,9,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	SkinId             int32         `protobuf:"varint,10,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	PrimeKingRange     int32         `protobuf:"varint,11,opt,name=prime_king_range,json=primeKingRange,proto3" json:"prime_king_range,omitempty"` //最强王者数目
	PrimeTopUrls       []string      `protobuf:"bytes,12,rep,name=prime_top_urls,json=primeTopUrls,proto3" json:"prime_top_urls,omitempty"`
	Level              []*RankLevel  `protobuf:"bytes,13,rep,name=level,proto3" json:"level,omitempty"`
	RankReward         []*RankReward `protobuf:"bytes,14,rep,name=rank_reward,json=rankReward,proto3" json:"rank_reward,omitempty"`
	PrimeKingRangeText string        `protobuf:"bytes,15,opt,name=prime_king_range_text,json=primeKingRangeText,proto3" json:"prime_king_range_text,omitempty"`
}

func (x *RankConfig) Reset() {
	*x = RankConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankConfig) ProtoMessage() {}

func (x *RankConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankConfig.ProtoReflect.Descriptor instead.
func (*RankConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{26}
}

func (x *RankConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RankConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RankConfig) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *RankConfig) GetSeasonIntroduceUrl() string {
	if x != nil {
		return x.SeasonIntroduceUrl
	}
	return ""
}

func (x *RankConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RankConfig) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RankConfig) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RankConfig) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RankConfig) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *RankConfig) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RankConfig) GetPrimeKingRange() int32 {
	if x != nil {
		return x.PrimeKingRange
	}
	return 0
}

func (x *RankConfig) GetPrimeTopUrls() []string {
	if x != nil {
		return x.PrimeTopUrls
	}
	return nil
}

func (x *RankConfig) GetLevel() []*RankLevel {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *RankConfig) GetRankReward() []*RankReward {
	if x != nil {
		return x.RankReward
	}
	return nil
}

func (x *RankConfig) GetPrimeKingRangeText() string {
	if x != nil {
		return x.PrimeKingRangeText
	}
	return ""
}

type RankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "star_range": [0, 3],
	StarRange []int32 `protobuf:"varint,1,rep,packed,name=star_range,json=starRange,proto3" json:"star_range,omitempty"`
	// "reward_list": [通用奖励数组]
	RewardList []*config.RewardConfig `protobuf:"bytes,2,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *RankReward) Reset() {
	*x = RankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankReward) ProtoMessage() {}

func (x *RankReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankReward.ProtoReflect.Descriptor instead.
func (*RankReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{27}
}

func (x *RankReward) GetStarRange() []int32 {
	if x != nil {
		return x.StarRange
	}
	return nil
}

func (x *RankReward) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type RankLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarStartNum int32   `protobuf:"varint,1,opt,name=star_start_num,json=starStartNum,proto3" json:"star_start_num,omitempty"`
	Rule         []int32 `protobuf:"varint,2,rep,packed,name=rule,proto3" json:"rule,omitempty"`
	StarEndNum   int32   `protobuf:"varint,3,opt,name=star_end_num,json=starEndNum,proto3" json:"star_end_num,omitempty"`
	Url          string  `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Name         string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Mvp          int32   `protobuf:"varint,6,opt,name=mvp,proto3" json:"mvp,omitempty"`
	SpriteName   string  `protobuf:"bytes,7,opt,name=sprite_name,json=spriteName,proto3" json:"sprite_name,omitempty"`
	LevelId      int32   `protobuf:"varint,8,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"` // 段位的 id
}

func (x *RankLevel) Reset() {
	*x = RankLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankLevel) ProtoMessage() {}

func (x *RankLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankLevel.ProtoReflect.Descriptor instead.
func (*RankLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{28}
}

func (x *RankLevel) GetStarStartNum() int32 {
	if x != nil {
		return x.StarStartNum
	}
	return 0
}

func (x *RankLevel) GetRule() []int32 {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *RankLevel) GetStarEndNum() int32 {
	if x != nil {
		return x.StarEndNum
	}
	return 0
}

func (x *RankLevel) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RankLevel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RankLevel) GetMvp() int32 {
	if x != nil {
		return x.Mvp
	}
	return 0
}

func (x *RankLevel) GetSpriteName() string {
	if x != nil {
		return x.SpriteName
	}
	return ""
}

func (x *RankLevel) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type SeasonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime          int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SeasonName         string `protobuf:"bytes,3,opt,name=season_name,json=seasonName,proto3" json:"season_name,omitempty"`
	SeasonIntroduceUrl string `protobuf:"bytes,4,opt,name=season_introduce_url,json=seasonIntroduceUrl,proto3" json:"season_introduce_url,omitempty"`
	Title              string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Imgurl             string `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Height             int32  `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Width              int32  `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	SeasonId           int32  `protobuf:"varint,9,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	SkinId             int32  `protobuf:"varint,10,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
}

func (x *SeasonInfo) Reset() {
	*x = SeasonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonInfo) ProtoMessage() {}

func (x *SeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonInfo.ProtoReflect.Descriptor instead.
func (*SeasonInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{29}
}

func (x *SeasonInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeasonInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SeasonInfo) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *SeasonInfo) GetSeasonIntroduceUrl() string {
	if x != nil {
		return x.SeasonIntroduceUrl
	}
	return ""
}

func (x *SeasonInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SeasonInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *SeasonInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SeasonInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SeasonInfo) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

// === share_config begin ======================================
type ShareConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareUrl           string            `protobuf:"bytes,1,opt,name=share_url,json=shareUrl,proto3" json:"share_url,omitempty"`
	ShareTitle         string            `protobuf:"bytes,2,opt,name=share_title,json=shareTitle,proto3" json:"share_title,omitempty"`
	ShareText          string            `protobuf:"bytes,3,opt,name=share_text,json=shareText,proto3" json:"share_text,omitempty"`
	MyQrUrl            string            `protobuf:"bytes,4,opt,name=my_qr_url,json=myQrUrl,proto3" json:"my_qr_url,omitempty"`
	ChannelConfig      *ChannelConfig    `protobuf:"bytes,5,opt,name=channel_config,json=channelConfig,proto3" json:"channel_config,omitempty"`
	GameInvite         *GameInvite       `protobuf:"bytes,6,opt,name=game_invite,json=gameInvite,proto3" json:"game_invite,omitempty"`
	VideoShareIcon     []*VideoShareIcon `protobuf:"bytes,7,rep,name=video_share_icon,json=videoShareIcon,proto3" json:"video_share_icon,omitempty"`
	ClipboardCheck     []*ClipBoardCheck `protobuf:"bytes,8,rep,name=clipboard_check,json=clipboardCheck,proto3" json:"clipboard_check,omitempty"`
	ShareTag           *ShareTag         `protobuf:"bytes,9,opt,name=share_tag,json=shareTag,proto3" json:"share_tag,omitempty"`
	NewWxUniversalLink int32             `protobuf:"varint,10,opt,name=new_wx_universal_link,json=newWxUniversalLink,proto3" json:"new_wx_universal_link,omitempty"`
}

func (x *ShareConfig) Reset() {
	*x = ShareConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareConfig) ProtoMessage() {}

func (x *ShareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareConfig.ProtoReflect.Descriptor instead.
func (*ShareConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{30}
}

func (x *ShareConfig) GetShareUrl() string {
	if x != nil {
		return x.ShareUrl
	}
	return ""
}

func (x *ShareConfig) GetShareTitle() string {
	if x != nil {
		return x.ShareTitle
	}
	return ""
}

func (x *ShareConfig) GetShareText() string {
	if x != nil {
		return x.ShareText
	}
	return ""
}

func (x *ShareConfig) GetMyQrUrl() string {
	if x != nil {
		return x.MyQrUrl
	}
	return ""
}

func (x *ShareConfig) GetChannelConfig() *ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

func (x *ShareConfig) GetGameInvite() *GameInvite {
	if x != nil {
		return x.GameInvite
	}
	return nil
}

func (x *ShareConfig) GetVideoShareIcon() []*VideoShareIcon {
	if x != nil {
		return x.VideoShareIcon
	}
	return nil
}

func (x *ShareConfig) GetClipboardCheck() []*ClipBoardCheck {
	if x != nil {
		return x.ClipboardCheck
	}
	return nil
}

func (x *ShareConfig) GetShareTag() *ShareTag {
	if x != nil {
		return x.ShareTag
	}
	return nil
}

func (x *ShareConfig) GetNewWxUniversalLink() int32 {
	if x != nil {
		return x.NewWxUniversalLink
	}
	return 0
}

type ShareTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kuaishou string `protobuf:"bytes,1,opt,name=kuaishou,proto3" json:"kuaishou,omitempty"`
	Douyin   string `protobuf:"bytes,2,opt,name=douyin,proto3" json:"douyin,omitempty"`
	Weibo    string `protobuf:"bytes,3,opt,name=weibo,proto3" json:"weibo,omitempty"`
}

func (x *ShareTag) Reset() {
	*x = ShareTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareTag) ProtoMessage() {}

func (x *ShareTag) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareTag.ProtoReflect.Descriptor instead.
func (*ShareTag) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{31}
}

func (x *ShareTag) GetKuaishou() string {
	if x != nil {
		return x.Kuaishou
	}
	return ""
}

func (x *ShareTag) GetDouyin() string {
	if x != nil {
		return x.Douyin
	}
	return ""
}

func (x *ShareTag) GetWeibo() string {
	if x != nil {
		return x.Weibo
	}
	return ""
}

type ClipBoardCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Act        string `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty"`
	Reg        string `protobuf:"bytes,4,opt,name=reg,proto3" json:"reg,omitempty"`
}

func (x *ClipBoardCheck) Reset() {
	*x = ClipBoardCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClipBoardCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClipBoardCheck) ProtoMessage() {}

func (x *ClipBoardCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClipBoardCheck.ProtoReflect.Descriptor instead.
func (*ClipBoardCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{32}
}

func (x *ClipBoardCheck) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ClipBoardCheck) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *ClipBoardCheck) GetAct() string {
	if x != nil {
		return x.Act
	}
	return ""
}

func (x *ClipBoardCheck) GetReg() string {
	if x != nil {
		return x.Reg
	}
	return ""
}

type VideoShareIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	StartTime  int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Imgurl     string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Link       string `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *VideoShareIcon) Reset() {
	*x = VideoShareIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoShareIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoShareIcon) ProtoMessage() {}

func (x *VideoShareIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoShareIcon.ProtoReflect.Descriptor instead.
func (*VideoShareIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{33}
}

func (x *VideoShareIcon) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VideoShareIcon) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VideoShareIcon) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *VideoShareIcon) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *VideoShareIcon) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WechatFriend int32 `protobuf:"varint,1,opt,name=wechat_friend,json=wechatFriend,proto3" json:"wechat_friend,omitempty"`
	WechatCircle int32 `protobuf:"varint,2,opt,name=wechat_circle,json=wechatCircle,proto3" json:"wechat_circle,omitempty"`
	QqCircle     int32 `protobuf:"varint,3,opt,name=qq_circle,json=qqCircle,proto3" json:"qq_circle,omitempty"`
	QqFriend     int32 `protobuf:"varint,4,opt,name=qq_friend,json=qqFriend,proto3" json:"qq_friend,omitempty"`
	Weibo        int32 `protobuf:"varint,5,opt,name=weibo,proto3" json:"weibo,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{34}
}

func (x *ChannelConfig) GetWechatFriend() int32 {
	if x != nil {
		return x.WechatFriend
	}
	return 0
}

func (x *ChannelConfig) GetWechatCircle() int32 {
	if x != nil {
		return x.WechatCircle
	}
	return 0
}

func (x *ChannelConfig) GetQqCircle() int32 {
	if x != nil {
		return x.QqCircle
	}
	return 0
}

func (x *ChannelConfig) GetQqFriend() int32 {
	if x != nil {
		return x.QqFriend
	}
	return 0
}

func (x *ChannelConfig) GetWeibo() int32 {
	if x != nil {
		return x.Weibo
	}
	return 0
}

type GameInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XiaomiImg string `protobuf:"bytes,4,opt,name=xiaomi_img,json=xiaomiImg,proto3" json:"xiaomi_img,omitempty"`
}

func (x *GameInvite) Reset() {
	*x = GameInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInvite) ProtoMessage() {}

func (x *GameInvite) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInvite.ProtoReflect.Descriptor instead.
func (*GameInvite) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{35}
}

func (x *GameInvite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GameInvite) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GameInvite) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GameInvite) GetXiaomiImg() string {
	if x != nil {
		return x.XiaomiImg
	}
	return ""
}

// === social_config begin ======================================
type SocialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastIntervalTime  int32                  `protobuf:"varint,1,opt,name=broadcast_interval_time,json=broadcastIntervalTime,proto3" json:"broadcast_interval_time,omitempty"` // 广播刷新时间
	CharmLevel             []*CharmLevelItem      `protobuf:"bytes,2,rep,name=charm_level,json=charmLevel,proto3" json:"charm_level,omitempty"`
	CharmTopConfig         *CharmTopConfig        `protobuf:"bytes,3,opt,name=charm_top_config,json=charmTopConfig,proto3" json:"charm_top_config,omitempty"`
	MarryPoint             int32                  `protobuf:"varint,4,opt,name=marry_point,json=marryPoint,proto3" json:"marry_point,omitempty"`
	MarriageVowHead        string                 `protobuf:"bytes,5,opt,name=marriage_vow_head,json=marriageVowHead,proto3" json:"marriage_vow_head,omitempty"`
	MarriageVowContent     string                 `protobuf:"bytes,6,opt,name=marriage_vow_content,json=marriageVowContent,proto3" json:"marriage_vow_content,omitempty"`
	MarriageVowFoot        string                 `protobuf:"bytes,7,opt,name=marriage_vow_foot,json=marriageVowFoot,proto3" json:"marriage_vow_foot,omitempty"`
	MarryRewardMailTitle   string                 `protobuf:"bytes,8,opt,name=marry_reward_mail_title,json=marryRewardMailTitle,proto3" json:"marry_reward_mail_title,omitempty"`
	MarryRewardMailContent string                 `protobuf:"bytes,9,opt,name=marry_reward_mail_content,json=marryRewardMailContent,proto3" json:"marry_reward_mail_content,omitempty"`
	MarryRewards           []*config.RewardConfig `protobuf:"bytes,10,rep,name=marry_rewards,json=marryRewards,proto3" json:"marry_rewards,omitempty"`
	WorldSpeakIntervalTime int32                  `protobuf:"varint,11,opt,name=world_speak_interval_time,json=worldSpeakIntervalTime,proto3" json:"world_speak_interval_time,omitempty"`
	WorldSpeakMinStar      int32                  `protobuf:"varint,12,opt,name=world_speak_min_star,json=worldSpeakMinStar,proto3" json:"world_speak_min_star,omitempty"`         // 世界发言最低星数
	WorldSpeakMinStarV2    int32                  `protobuf:"varint,13,opt,name=world_speak_min_star_v2,json=worldSpeakMinStarV2,proto3" json:"world_speak_min_star_v2,omitempty"` // 查看世界发言最低星数
	GroupSpeakMinStar      int32                  `protobuf:"varint,14,opt,name=group_speak_min_star,json=groupSpeakMinStar,proto3" json:"group_speak_min_star,omitempty"`
	UnlockSendGift         *SocialThreshold       `protobuf:"bytes,15,opt,name=unlock_send_gift,json=unlockSendGift,proto3" json:"unlock_send_gift,omitempty"`    // 解锁送礼
	UnlockClan             *SocialThreshold       `protobuf:"bytes,16,opt,name=unlock_clan,json=unlockClan,proto3" json:"unlock_clan,omitempty"`                  // 解锁战队
	UnlockWorldChat        *SocialThreshold       `protobuf:"bytes,17,opt,name=unlock_world_chat,json=unlockWorldChat,proto3" json:"unlock_world_chat,omitempty"` // 解锁世界发言
}

func (x *SocialConfig) Reset() {
	*x = SocialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialConfig) ProtoMessage() {}

func (x *SocialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialConfig.ProtoReflect.Descriptor instead.
func (*SocialConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{36}
}

func (x *SocialConfig) GetBroadcastIntervalTime() int32 {
	if x != nil {
		return x.BroadcastIntervalTime
	}
	return 0
}

func (x *SocialConfig) GetCharmLevel() []*CharmLevelItem {
	if x != nil {
		return x.CharmLevel
	}
	return nil
}

func (x *SocialConfig) GetCharmTopConfig() *CharmTopConfig {
	if x != nil {
		return x.CharmTopConfig
	}
	return nil
}

func (x *SocialConfig) GetMarryPoint() int32 {
	if x != nil {
		return x.MarryPoint
	}
	return 0
}

func (x *SocialConfig) GetMarriageVowHead() string {
	if x != nil {
		return x.MarriageVowHead
	}
	return ""
}

func (x *SocialConfig) GetMarriageVowContent() string {
	if x != nil {
		return x.MarriageVowContent
	}
	return ""
}

func (x *SocialConfig) GetMarriageVowFoot() string {
	if x != nil {
		return x.MarriageVowFoot
	}
	return ""
}

func (x *SocialConfig) GetMarryRewardMailTitle() string {
	if x != nil {
		return x.MarryRewardMailTitle
	}
	return ""
}

func (x *SocialConfig) GetMarryRewardMailContent() string {
	if x != nil {
		return x.MarryRewardMailContent
	}
	return ""
}

func (x *SocialConfig) GetMarryRewards() []*config.RewardConfig {
	if x != nil {
		return x.MarryRewards
	}
	return nil
}

func (x *SocialConfig) GetWorldSpeakIntervalTime() int32 {
	if x != nil {
		return x.WorldSpeakIntervalTime
	}
	return 0
}

func (x *SocialConfig) GetWorldSpeakMinStar() int32 {
	if x != nil {
		return x.WorldSpeakMinStar
	}
	return 0
}

func (x *SocialConfig) GetWorldSpeakMinStarV2() int32 {
	if x != nil {
		return x.WorldSpeakMinStarV2
	}
	return 0
}

func (x *SocialConfig) GetGroupSpeakMinStar() int32 {
	if x != nil {
		return x.GroupSpeakMinStar
	}
	return 0
}

func (x *SocialConfig) GetUnlockSendGift() *SocialThreshold {
	if x != nil {
		return x.UnlockSendGift
	}
	return nil
}

func (x *SocialConfig) GetUnlockClan() *SocialThreshold {
	if x != nil {
		return x.UnlockClan
	}
	return nil
}

func (x *SocialConfig) GetUnlockWorldChat() *SocialThreshold {
	if x != nil {
		return x.UnlockWorldChat
	}
	return nil
}

type CharmTopConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncreaseDesc string `protobuf:"bytes,1,opt,name=increase_desc,json=increaseDesc,proto3" json:"increase_desc,omitempty"`
	ListCount    int32  `protobuf:"varint,2,opt,name=list_count,json=listCount,proto3" json:"list_count,omitempty"`
	UserShowDay  int32  `protobuf:"varint,3,opt,name=user_show_day,json=userShowDay,proto3" json:"user_show_day,omitempty"`
}

func (x *CharmTopConfig) Reset() {
	*x = CharmTopConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTopConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTopConfig) ProtoMessage() {}

func (x *CharmTopConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTopConfig.ProtoReflect.Descriptor instead.
func (*CharmTopConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{37}
}

func (x *CharmTopConfig) GetIncreaseDesc() string {
	if x != nil {
		return x.IncreaseDesc
	}
	return ""
}

func (x *CharmTopConfig) GetListCount() int32 {
	if x != nil {
		return x.ListCount
	}
	return 0
}

func (x *CharmTopConfig) GetUserShowDay() int32 {
	if x != nil {
		return x.UserShowDay
	}
	return 0
}

type CharmLevelItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmStart int32  `protobuf:"varint,1,opt,name=charm_start,json=charmStart,proto3" json:"charm_start,omitempty"`
	IconUrl    string `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	IconUrlV2  string `protobuf:"bytes,3,opt,name=icon_url_v2,json=iconUrlV2,proto3" json:"icon_url_v2,omitempty"`
	Num        int32  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *CharmLevelItem) Reset() {
	*x = CharmLevelItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmLevelItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmLevelItem) ProtoMessage() {}

func (x *CharmLevelItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmLevelItem.ProtoReflect.Descriptor instead.
func (*CharmLevelItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{38}
}

func (x *CharmLevelItem) GetCharmStart() int32 {
	if x != nil {
		return x.CharmStart
	}
	return 0
}

func (x *CharmLevelItem) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CharmLevelItem) GetIconUrlV2() string {
	if x != nil {
		return x.IconUrlV2
	}
	return ""
}

func (x *CharmLevelItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type SocialThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ios     *SocialThresholdPlatform `protobuf:"bytes,1,opt,name=ios,proto3" json:"ios,omitempty"`         // ios 配置
	Android *SocialThresholdPlatform `protobuf:"bytes,2,opt,name=android,proto3" json:"android,omitempty"` // android 配置
}

func (x *SocialThreshold) Reset() {
	*x = SocialThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialThreshold) ProtoMessage() {}

func (x *SocialThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialThreshold.ProtoReflect.Descriptor instead.
func (*SocialThreshold) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{39}
}

func (x *SocialThreshold) GetIos() *SocialThresholdPlatform {
	if x != nil {
		return x.Ios
	}
	return nil
}

func (x *SocialThreshold) GetAndroid() *SocialThresholdPlatform {
	if x != nil {
		return x.Android
	}
	return nil
}

type SocialThresholdPlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentStar      int32  `protobuf:"varint,1,opt,name=current_star,json=currentStar,proto3" json:"current_star,omitempty"`                  // 当前段位需要达到的星数
	HistoryMaxLength int64  `protobuf:"varint,2,opt,name=history_max_length,json=historyMaxLength,proto3" json:"history_max_length,omitempty"` // 历史最高长度需要达到的长度
	Prompt           string `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`                                                // 错误提示
}

func (x *SocialThresholdPlatform) Reset() {
	*x = SocialThresholdPlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialThresholdPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialThresholdPlatform) ProtoMessage() {}

func (x *SocialThresholdPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialThresholdPlatform.ProtoReflect.Descriptor instead.
func (*SocialThresholdPlatform) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{40}
}

func (x *SocialThresholdPlatform) GetCurrentStar() int32 {
	if x != nil {
		return x.CurrentStar
	}
	return 0
}

func (x *SocialThresholdPlatform) GetHistoryMaxLength() int64 {
	if x != nil {
		return x.HistoryMaxLength
	}
	return 0
}

func (x *SocialThresholdPlatform) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

// === charm_exp_config begin ======================================
type CharmExpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmExpRanks   []*CharmExpRank       `protobuf:"bytes,1,rep,name=charm_exp_ranks,json=charmExpRanks,proto3" json:"charm_exp_ranks,omitempty"`     // 魅力勋章等级配置
	PrivilegeConfig []*CharmPrivilegeItem `protobuf:"bytes,2,rep,name=privilege_config,json=privilegeConfig,proto3" json:"privilege_config,omitempty"` // 特权配置
	RuleUrl         string                `protobuf:"bytes,3,opt,name=rule_url,json=ruleUrl,proto3" json:"rule_url,omitempty"`                         // 规则说明url
	PrivilegeDesc   string                `protobuf:"bytes,4,opt,name=privilege_desc,json=privilegeDesc,proto3" json:"privilege_desc,omitempty"`       // 特权说明
	CharmDetail     string                `protobuf:"bytes,5,opt,name=charm_detail,json=charmDetail,proto3" json:"charm_detail,omitempty"`             // 魅力勋章详情页
}

func (x *CharmExpConfig) Reset() {
	*x = CharmExpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmExpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmExpConfig) ProtoMessage() {}

func (x *CharmExpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmExpConfig.ProtoReflect.Descriptor instead.
func (*CharmExpConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{41}
}

func (x *CharmExpConfig) GetCharmExpRanks() []*CharmExpRank {
	if x != nil {
		return x.CharmExpRanks
	}
	return nil
}

func (x *CharmExpConfig) GetPrivilegeConfig() []*CharmPrivilegeItem {
	if x != nil {
		return x.PrivilegeConfig
	}
	return nil
}

func (x *CharmExpConfig) GetRuleUrl() string {
	if x != nil {
		return x.RuleUrl
	}
	return ""
}

func (x *CharmExpConfig) GetPrivilegeDesc() string {
	if x != nil {
		return x.PrivilegeDesc
	}
	return ""
}

func (x *CharmExpConfig) GetCharmDetail() string {
	if x != nil {
		return x.CharmDetail
	}
	return ""
}

type CharmExpRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        int32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon         string  `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	NeedExp      int32   `protobuf:"varint,4,opt,name=need_exp,json=needExp,proto3" json:"need_exp,omitempty"`
	PrivilegeIds []int32 `protobuf:"varint,5,rep,packed,name=privilege_ids,json=privilegeIds,proto3" json:"privilege_ids,omitempty"`
	TextBgUrl    string  `protobuf:"bytes,6,opt,name=text_bg_url,json=textBgUrl,proto3" json:"text_bg_url,omitempty"` // 首页魅力勋章背景图
	KeepExp      int32   `protobuf:"varint,7,opt,name=keep_exp,json=keepExp,proto3" json:"keep_exp,omitempty"`        // 勋章保留经验值，用于计算勋章升级
}

func (x *CharmExpRank) Reset() {
	*x = CharmExpRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmExpRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmExpRank) ProtoMessage() {}

func (x *CharmExpRank) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmExpRank.ProtoReflect.Descriptor instead.
func (*CharmExpRank) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{42}
}

func (x *CharmExpRank) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharmExpRank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharmExpRank) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CharmExpRank) GetNeedExp() int32 {
	if x != nil {
		return x.NeedExp
	}
	return 0
}

func (x *CharmExpRank) GetPrivilegeIds() []int32 {
	if x != nil {
		return x.PrivilegeIds
	}
	return nil
}

func (x *CharmExpRank) GetTextBgUrl() string {
	if x != nil {
		return x.TextBgUrl
	}
	return ""
}

func (x *CharmExpRank) GetKeepExp() int32 {
	if x != nil {
		return x.KeepExp
	}
	return 0
}

type CharmPrivilegeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl   string `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	MinLevel int32  `protobuf:"varint,4,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	Desc     string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *CharmPrivilegeItem) Reset() {
	*x = CharmPrivilegeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmPrivilegeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmPrivilegeItem) ProtoMessage() {}

func (x *CharmPrivilegeItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmPrivilegeItem.ProtoReflect.Descriptor instead.
func (*CharmPrivilegeItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{43}
}

func (x *CharmPrivilegeItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharmPrivilegeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharmPrivilegeItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *CharmPrivilegeItem) GetMinLevel() int32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *CharmPrivilegeItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// === text_config begin ======================================
type TextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmStar            string            `protobuf:"bytes,1,opt,name=charm_star,json=charmStar,proto3" json:"charm_star,omitempty"`
	HappycoinTitle       string            `protobuf:"bytes,2,opt,name=happycoin_title,json=happycoinTitle,proto3" json:"happycoin_title,omitempty"`
	CoinDealNotify       string            `protobuf:"bytes,3,opt,name=coin_deal_notify,json=coinDealNotify,proto3" json:"coin_deal_notify,omitempty"`
	ShareTextList        []string          `protobuf:"bytes,4,rep,name=share_text_list,json=shareTextList,proto3" json:"share_text_list,omitempty"`
	QualifyingBetaRule   string            `protobuf:"bytes,5,opt,name=qualifying_beta_rule,json=qualifyingBetaRule,proto3" json:"qualifying_beta_rule,omitempty"`
	GiftRule             string            `protobuf:"bytes,6,opt,name=gift_rule,json=giftRule,proto3" json:"gift_rule,omitempty"`
	EndlessTips          string            `protobuf:"bytes,7,opt,name=endless_tips,json=endlessTips,proto3" json:"endless_tips,omitempty"`
	GiftLikeTextList     *GiftLikeTextList `protobuf:"bytes,8,opt,name=gift_like_text_list,json=giftLikeTextList,proto3" json:"gift_like_text_list,omitempty"`
	QuickPhraseTextList  []*ShortCutConfig `protobuf:"bytes,9,rep,name=quick_phrase_text_list,json=quickPhraseTextList,proto3" json:"quick_phrase_text_list,omitempty"`
	AiAnchorNicknameList []string          `protobuf:"bytes,10,rep,name=ai_anchor_nickname_list,json=aiAnchorNicknameList,proto3" json:"ai_anchor_nickname_list,omitempty"`
	ReportBehaviorList   []*ReportBehavior `protobuf:"bytes,11,rep,name=report_behavior_list,json=reportBehaviorList,proto3" json:"report_behavior_list,omitempty"`
	AdReportBehaviorList []*ReportBehavior `protobuf:"bytes,12,rep,name=ad_report_behavior_list,json=adReportBehaviorList,proto3" json:"ad_report_behavior_list,omitempty"`
	FollowerTopListTips  string            `protobuf:"bytes,13,opt,name=follower_top_list_tips,json=followerTopListTips,proto3" json:"follower_top_list_tips,omitempty"`
	HomeBroadcastScenes  []string          `protobuf:"bytes,14,rep,name=home_broadcast_scenes,json=homeBroadcastScenes,proto3" json:"home_broadcast_scenes,omitempty"` // 首页播报秀播报场景
}

func (x *TextConfig) Reset() {
	*x = TextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextConfig) ProtoMessage() {}

func (x *TextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextConfig.ProtoReflect.Descriptor instead.
func (*TextConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{44}
}

func (x *TextConfig) GetCharmStar() string {
	if x != nil {
		return x.CharmStar
	}
	return ""
}

func (x *TextConfig) GetHappycoinTitle() string {
	if x != nil {
		return x.HappycoinTitle
	}
	return ""
}

func (x *TextConfig) GetCoinDealNotify() string {
	if x != nil {
		return x.CoinDealNotify
	}
	return ""
}

func (x *TextConfig) GetShareTextList() []string {
	if x != nil {
		return x.ShareTextList
	}
	return nil
}

func (x *TextConfig) GetQualifyingBetaRule() string {
	if x != nil {
		return x.QualifyingBetaRule
	}
	return ""
}

func (x *TextConfig) GetGiftRule() string {
	if x != nil {
		return x.GiftRule
	}
	return ""
}

func (x *TextConfig) GetEndlessTips() string {
	if x != nil {
		return x.EndlessTips
	}
	return ""
}

func (x *TextConfig) GetGiftLikeTextList() *GiftLikeTextList {
	if x != nil {
		return x.GiftLikeTextList
	}
	return nil
}

func (x *TextConfig) GetQuickPhraseTextList() []*ShortCutConfig {
	if x != nil {
		return x.QuickPhraseTextList
	}
	return nil
}

func (x *TextConfig) GetAiAnchorNicknameList() []string {
	if x != nil {
		return x.AiAnchorNicknameList
	}
	return nil
}

func (x *TextConfig) GetReportBehaviorList() []*ReportBehavior {
	if x != nil {
		return x.ReportBehaviorList
	}
	return nil
}

func (x *TextConfig) GetAdReportBehaviorList() []*ReportBehavior {
	if x != nil {
		return x.AdReportBehaviorList
	}
	return nil
}

func (x *TextConfig) GetFollowerTopListTips() string {
	if x != nil {
		return x.FollowerTopListTips
	}
	return ""
}

func (x *TextConfig) GetHomeBroadcastScenes() []string {
	if x != nil {
		return x.HomeBroadcastScenes
	}
	return nil
}

type GiftLikeTextList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enemy   []string `protobuf:"bytes,1,rep,name=enemy,proto3" json:"enemy,omitempty"`
	Partner []string `protobuf:"bytes,2,rep,name=partner,proto3" json:"partner,omitempty"`
}

func (x *GiftLikeTextList) Reset() {
	*x = GiftLikeTextList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftLikeTextList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftLikeTextList) ProtoMessage() {}

func (x *GiftLikeTextList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftLikeTextList.ProtoReflect.Descriptor instead.
func (*GiftLikeTextList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{45}
}

func (x *GiftLikeTextList) GetEnemy() []string {
	if x != nil {
		return x.Enemy
	}
	return nil
}

func (x *GiftLikeTextList) GetPartner() []string {
	if x != nil {
		return x.Partner
	}
	return nil
}

type ShortCutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShortCutConfig) Reset() {
	*x = ShortCutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCutConfig) ProtoMessage() {}

func (x *ShortCutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCutConfig.ProtoReflect.Descriptor instead.
func (*ShortCutConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{46}
}

func (x *ShortCutConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ShortCutConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortCutConfig) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type ReportBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ReportBehavior) Reset() {
	*x = ReportBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBehavior) ProtoMessage() {}

func (x *ReportBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBehavior.ProtoReflect.Descriptor instead.
func (*ReportBehavior) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{47}
}

func (x *ReportBehavior) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReportBehavior) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// === ui_config_v3 start =======================================
type UiConfigV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndlessIconV2        *GameIcon         `protobuf:"bytes,1,opt,name=endless_icon_v2,json=endlessIconV2,proto3" json:"endless_icon_v2,omitempty"`
	QualifyingIconV2     *GameIcon         `protobuf:"bytes,2,opt,name=qualifying_icon_v2,json=qualifyingIconV2,proto3" json:"qualifying_icon_v2,omitempty"`
	LeftCorner           *GameIcon         `protobuf:"bytes,3,opt,name=left_corner,json=leftCorner,proto3" json:"left_corner,omitempty"`
	RightCorner          *GameIcon         `protobuf:"bytes,4,opt,name=right_corner,json=rightCorner,proto3" json:"right_corner,omitempty"`
	MoreGame             []*GameIcon       `protobuf:"bytes,5,rep,name=more_game,json=moreGame,proto3" json:"more_game,omitempty"`
	NewbieCondition      *NewbieCondition  `protobuf:"bytes,6,opt,name=newbie_condition,json=newbieCondition,proto3" json:"newbie_condition,omitempty"`
	EndlessHugeIcon      *GameIcon         `protobuf:"bytes,7,opt,name=endless_huge_icon,json=endlessHugeIcon,proto3" json:"endless_huge_icon,omitempty"`
	GameSlideIntervalSec int64             `protobuf:"varint,8,opt,name=game_slide_interval_sec,json=gameSlideIntervalSec,proto3" json:"game_slide_interval_sec,omitempty"`
	GameSlideList        []*GameIcon       `protobuf:"bytes,9,rep,name=game_slide_list,json=gameSlideList,proto3" json:"game_slide_list,omitempty"`
	EndlessIcon          *GameIcon         `protobuf:"bytes,10,opt,name=endless_icon,json=endlessIcon,proto3" json:"endless_icon,omitempty"`
	QualifyingIcon       *GameIcon         `protobuf:"bytes,11,opt,name=qualifying_icon,json=qualifyingIcon,proto3" json:"qualifying_icon,omitempty"`
	HomeBackground       *HomeBackground   `protobuf:"bytes,12,opt,name=home_background,json=homeBackground,proto3" json:"home_background,omitempty"`
	ArIcon               *GameIcon         `protobuf:"bytes,13,opt,name=ar_icon,json=arIcon,proto3" json:"ar_icon,omitempty"`
	PlantIcon            *GameIcon         `protobuf:"bytes,14,opt,name=plant_icon,json=plantIcon,proto3" json:"plant_icon,omitempty"`
	MoreGameBgurl        string            `protobuf:"bytes,15,opt,name=more_game_bgurl,json=moreGameBgurl,proto3" json:"more_game_bgurl,omitempty"`
	FallguysIcon         *GameIcon         `protobuf:"bytes,16,opt,name=fallguys_icon,json=fallguysIcon,proto3" json:"fallguys_icon,omitempty"`
	LittleGameIcon       []*LittleGameIcon `protobuf:"bytes,17,rep,name=little_game_icon,json=littleGameIcon,proto3" json:"little_game_icon,omitempty"`
	Compose              *GameIcon         `protobuf:"bytes,18,opt,name=compose,proto3" json:"compose,omitempty"`
	CouplePasscheck      *GameIcon         `protobuf:"bytes,19,opt,name=couple_passcheck,json=couplePasscheck,proto3" json:"couple_passcheck,omitempty"`
	Use_5275IconLayout   bool              `protobuf:"varint,20,opt,name=use_5275_icon_layout,json=use5275IconLayout,proto3" json:"use_5275_icon_layout,omitempty"` // 是否使用5275版本优化后的首页icon布局
	TeamendlessBgurl     string            `protobuf:"bytes,21,opt,name=teamendless_bgurl,json=teamendlessBgurl,proto3" json:"teamendless_bgurl,omitempty"`         // 多人无尽按钮背景
	PointsChampIcon      *GameIcon         `protobuf:"bytes,22,opt,name=points_champ_icon,json=pointsChampIcon,proto3" json:"points_champ_icon,omitempty"`          // 新春大赏入口 icon https://wepie.feishu.cn/docx/LFuLdbWnco1DjuxVi9AcRUdfnyc
}

func (x *UiConfigV3) Reset() {
	*x = UiConfigV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiConfigV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiConfigV3) ProtoMessage() {}

func (x *UiConfigV3) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiConfigV3.ProtoReflect.Descriptor instead.
func (*UiConfigV3) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{48}
}

func (x *UiConfigV3) GetEndlessIconV2() *GameIcon {
	if x != nil {
		return x.EndlessIconV2
	}
	return nil
}

func (x *UiConfigV3) GetQualifyingIconV2() *GameIcon {
	if x != nil {
		return x.QualifyingIconV2
	}
	return nil
}

func (x *UiConfigV3) GetLeftCorner() *GameIcon {
	if x != nil {
		return x.LeftCorner
	}
	return nil
}

func (x *UiConfigV3) GetRightCorner() *GameIcon {
	if x != nil {
		return x.RightCorner
	}
	return nil
}

func (x *UiConfigV3) GetMoreGame() []*GameIcon {
	if x != nil {
		return x.MoreGame
	}
	return nil
}

func (x *UiConfigV3) GetNewbieCondition() *NewbieCondition {
	if x != nil {
		return x.NewbieCondition
	}
	return nil
}

func (x *UiConfigV3) GetEndlessHugeIcon() *GameIcon {
	if x != nil {
		return x.EndlessHugeIcon
	}
	return nil
}

func (x *UiConfigV3) GetGameSlideIntervalSec() int64 {
	if x != nil {
		return x.GameSlideIntervalSec
	}
	return 0
}

func (x *UiConfigV3) GetGameSlideList() []*GameIcon {
	if x != nil {
		return x.GameSlideList
	}
	return nil
}

func (x *UiConfigV3) GetEndlessIcon() *GameIcon {
	if x != nil {
		return x.EndlessIcon
	}
	return nil
}

func (x *UiConfigV3) GetQualifyingIcon() *GameIcon {
	if x != nil {
		return x.QualifyingIcon
	}
	return nil
}

func (x *UiConfigV3) GetHomeBackground() *HomeBackground {
	if x != nil {
		return x.HomeBackground
	}
	return nil
}

func (x *UiConfigV3) GetArIcon() *GameIcon {
	if x != nil {
		return x.ArIcon
	}
	return nil
}

func (x *UiConfigV3) GetPlantIcon() *GameIcon {
	if x != nil {
		return x.PlantIcon
	}
	return nil
}

func (x *UiConfigV3) GetMoreGameBgurl() string {
	if x != nil {
		return x.MoreGameBgurl
	}
	return ""
}

func (x *UiConfigV3) GetFallguysIcon() *GameIcon {
	if x != nil {
		return x.FallguysIcon
	}
	return nil
}

func (x *UiConfigV3) GetLittleGameIcon() []*LittleGameIcon {
	if x != nil {
		return x.LittleGameIcon
	}
	return nil
}

func (x *UiConfigV3) GetCompose() *GameIcon {
	if x != nil {
		return x.Compose
	}
	return nil
}

func (x *UiConfigV3) GetCouplePasscheck() *GameIcon {
	if x != nil {
		return x.CouplePasscheck
	}
	return nil
}

func (x *UiConfigV3) GetUse_5275IconLayout() bool {
	if x != nil {
		return x.Use_5275IconLayout
	}
	return false
}

func (x *UiConfigV3) GetTeamendlessBgurl() string {
	if x != nil {
		return x.TeamendlessBgurl
	}
	return ""
}

func (x *UiConfigV3) GetPointsChampIcon() *GameIcon {
	if x != nil {
		return x.PointsChampIcon
	}
	return nil
}

type GameIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url            string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	LockUrl        string  `protobuf:"bytes,2,opt,name=lock_url,json=lockUrl,proto3" json:"lock_url,omitempty"`
	Link           string  `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Bubble         *Bubble `protobuf:"bytes,4,opt,name=bubble,proto3" json:"bubble,omitempty"`
	SupportVersion string  `protobuf:"bytes,5,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"`
	TextImgurl     string  `protobuf:"bytes,6,opt,name=text_imgurl,json=textImgurl,proto3" json:"text_imgurl,omitempty"` // 文字底图
	AnimUrl        string  `protobuf:"bytes,7,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`          // icon 动效，引导动效
	AnimType       int32   `protobuf:"varint,8,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`      // 动效类型
	VapUrl         string  `protobuf:"bytes,9,opt,name=vap_url,json=vapUrl,proto3" json:"vap_url,omitempty"`
	ReviewHide     int32   `protobuf:"varint,10,opt,name=review_hide,json=reviewHide,proto3" json:"review_hide,omitempty"` // 审核模式是否隐藏
	NewbieHide     int32   `protobuf:"varint,11,opt,name=newbie_hide,json=newbieHide,proto3" json:"newbie_hide,omitempty"` // 对新手是否隐藏，1是，0否
	ModelHide      int32   `protobuf:"varint,12,opt,name=model_hide,json=modelHide,proto3" json:"model_hide,omitempty"`    // 0 全关 1 客户端判断机型
	SizeType       int32   `protobuf:"varint,13,opt,name=size_type,json=sizeType,proto3" json:"size_type,omitempty"`       // 大图0
	GameMode       int32   `protobuf:"varint,14,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	OpenDayStart   string  `protobuf:"bytes,15,opt,name=open_day_start,json=openDayStart,proto3" json:"open_day_start,omitempty"`
	OpenDayEnd     string  `protobuf:"bytes,16,opt,name=open_day_end,json=openDayEnd,proto3" json:"open_day_end,omitempty"`
	StartTime      int64   `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64   `protobuf:"varint,18,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GameIcon) Reset() {
	*x = GameIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameIcon) ProtoMessage() {}

func (x *GameIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameIcon.ProtoReflect.Descriptor instead.
func (*GameIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{49}
}

func (x *GameIcon) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GameIcon) GetLockUrl() string {
	if x != nil {
		return x.LockUrl
	}
	return ""
}

func (x *GameIcon) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *GameIcon) GetBubble() *Bubble {
	if x != nil {
		return x.Bubble
	}
	return nil
}

func (x *GameIcon) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

func (x *GameIcon) GetTextImgurl() string {
	if x != nil {
		return x.TextImgurl
	}
	return ""
}

func (x *GameIcon) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *GameIcon) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *GameIcon) GetVapUrl() string {
	if x != nil {
		return x.VapUrl
	}
	return ""
}

func (x *GameIcon) GetReviewHide() int32 {
	if x != nil {
		return x.ReviewHide
	}
	return 0
}

func (x *GameIcon) GetNewbieHide() int32 {
	if x != nil {
		return x.NewbieHide
	}
	return 0
}

func (x *GameIcon) GetModelHide() int32 {
	if x != nil {
		return x.ModelHide
	}
	return 0
}

func (x *GameIcon) GetSizeType() int32 {
	if x != nil {
		return x.SizeType
	}
	return 0
}

func (x *GameIcon) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *GameIcon) GetOpenDayStart() string {
	if x != nil {
		return x.OpenDayStart
	}
	return ""
}

func (x *GameIcon) GetOpenDayEnd() string {
	if x != nil {
		return x.OpenDayEnd
	}
	return ""
}

func (x *GameIcon) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GameIcon) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type LittleGameIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameIcon  *GameIcon `protobuf:"bytes,1,opt,name=game_icon,json=gameIcon,proto3" json:"game_icon,omitempty"`
	EidDev    string    `protobuf:"bytes,2,opt,name=eid_dev,json=eidDev,proto3" json:"eid_dev,omitempty"`
	EidOnline string    `protobuf:"bytes,3,opt,name=eid_online,json=eidOnline,proto3" json:"eid_online,omitempty"`
	EFlag     string    `protobuf:"bytes,4,opt,name=e_flag,json=eFlag,proto3" json:"e_flag,omitempty"`
}

func (x *LittleGameIcon) Reset() {
	*x = LittleGameIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LittleGameIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LittleGameIcon) ProtoMessage() {}

func (x *LittleGameIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LittleGameIcon.ProtoReflect.Descriptor instead.
func (*LittleGameIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{50}
}

func (x *LittleGameIcon) GetGameIcon() *GameIcon {
	if x != nil {
		return x.GameIcon
	}
	return nil
}

func (x *LittleGameIcon) GetEidDev() string {
	if x != nil {
		return x.EidDev
	}
	return ""
}

func (x *LittleGameIcon) GetEidOnline() string {
	if x != nil {
		return x.EidOnline
	}
	return ""
}

func (x *LittleGameIcon) GetEFlag() string {
	if x != nil {
		return x.EFlag
	}
	return ""
}

type Bubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                                  // 动画/图片链接
	StaySecond int32  `protobuf:"varint,2,opt,name=stay_second,json=staySecond,proto3" json:"stay_second,omitempty"` // 动画展示秒数
	ShowStart  int64  `protobuf:"varint,3,opt,name=show_start,json=showStart,proto3" json:"show_start,omitempty"`
	ShowEnd    int64  `protobuf:"varint,4,opt,name=show_end,json=showEnd,proto3" json:"show_end,omitempty"`
}

func (x *Bubble) Reset() {
	*x = Bubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bubble) ProtoMessage() {}

func (x *Bubble) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bubble.ProtoReflect.Descriptor instead.
func (*Bubble) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{51}
}

func (x *Bubble) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Bubble) GetStaySecond() int32 {
	if x != nil {
		return x.StaySecond
	}
	return 0
}

func (x *Bubble) GetShowStart() int64 {
	if x != nil {
		return x.ShowStart
	}
	return 0
}

func (x *Bubble) GetShowEnd() int64 {
	if x != nil {
		return x.ShowEnd
	}
	return 0
}

type NewbieCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterDay int32 `protobuf:"varint,1,opt,name=register_day,json=registerDay,proto3" json:"register_day,omitempty"`
	SingleLen   int64 `protobuf:"varint,2,opt,name=single_len,json=singleLen,proto3" json:"single_len,omitempty"`
}

func (x *NewbieCondition) Reset() {
	*x = NewbieCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieCondition) ProtoMessage() {}

func (x *NewbieCondition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieCondition.ProtoReflect.Descriptor instead.
func (*NewbieCondition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{52}
}

func (x *NewbieCondition) GetRegisterDay() int32 {
	if x != nil {
		return x.RegisterDay
	}
	return 0
}

func (x *NewbieCondition) GetSingleLen() int64 {
	if x != nil {
		return x.SingleLen
	}
	return 0
}

type HomeBackground struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType           int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimSrc            string `protobuf:"bytes,2,opt,name=anim_src,json=animSrc,proto3" json:"anim_src,omitempty"`
	StaticImgurl       string `protobuf:"bytes,3,opt,name=static_imgurl,json=staticImgurl,proto3" json:"static_imgurl,omitempty"`
	BottomShadowImgurl string `protobuf:"bytes,4,opt,name=bottom_shadow_imgurl,json=bottomShadowImgurl,proto3" json:"bottom_shadow_imgurl,omitempty"`
	SkinLightBgImgurl  string `protobuf:"bytes,5,opt,name=skin_light_bg_imgurl,json=skinLightBgImgurl,proto3" json:"skin_light_bg_imgurl,omitempty"`
	SkinFloorBgImgurl  string `protobuf:"bytes,6,opt,name=skin_floor_bg_imgurl,json=skinFloorBgImgurl,proto3" json:"skin_floor_bg_imgurl,omitempty"`
	TopShadowImgurl    string `protobuf:"bytes,7,opt,name=top_shadow_imgurl,json=topShadowImgurl,proto3" json:"top_shadow_imgurl,omitempty"`
	LeftShadowImgurl   string `protobuf:"bytes,8,opt,name=left_shadow_imgurl,json=leftShadowImgurl,proto3" json:"left_shadow_imgurl,omitempty"`
	UnityHomeBg        int64  `protobuf:"varint,9,opt,name=unity_home_bg,json=unityHomeBg,proto3" json:"unity_home_bg,omitempty"`
}

func (x *HomeBackground) Reset() {
	*x = HomeBackground{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBackground) ProtoMessage() {}

func (x *HomeBackground) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBackground.ProtoReflect.Descriptor instead.
func (*HomeBackground) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{53}
}

func (x *HomeBackground) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *HomeBackground) GetAnimSrc() string {
	if x != nil {
		return x.AnimSrc
	}
	return ""
}

func (x *HomeBackground) GetStaticImgurl() string {
	if x != nil {
		return x.StaticImgurl
	}
	return ""
}

func (x *HomeBackground) GetBottomShadowImgurl() string {
	if x != nil {
		return x.BottomShadowImgurl
	}
	return ""
}

func (x *HomeBackground) GetSkinLightBgImgurl() string {
	if x != nil {
		return x.SkinLightBgImgurl
	}
	return ""
}

func (x *HomeBackground) GetSkinFloorBgImgurl() string {
	if x != nil {
		return x.SkinFloorBgImgurl
	}
	return ""
}

func (x *HomeBackground) GetTopShadowImgurl() string {
	if x != nil {
		return x.TopShadowImgurl
	}
	return ""
}

func (x *HomeBackground) GetLeftShadowImgurl() string {
	if x != nil {
		return x.LeftShadowImgurl
	}
	return ""
}

func (x *HomeBackground) GetUnityHomeBg() int64 {
	if x != nil {
		return x.UnityHomeBg
	}
	return 0
}

// === ping_config start =======================================
type PingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingStrategy       int32             `protobuf:"varint,1,opt,name=ping_strategy,json=pingStrategy,proto3" json:"ping_strategy,omitempty"`
	NewPingCount       int32             `protobuf:"varint,2,opt,name=new_ping_count,json=newPingCount,proto3" json:"new_ping_count,omitempty"`
	PingLossRate       float64           `protobuf:"fixed64,3,opt,name=ping_loss_rate,json=pingLossRate,proto3" json:"ping_loss_rate,omitempty"`
	PingIntervalTime   int32             `protobuf:"varint,4,opt,name=ping_interval_time,json=pingIntervalTime,proto3" json:"ping_interval_time,omitempty"`
	PingIntervalCount  int32             `protobuf:"varint,5,opt,name=ping_interval_count,json=pingIntervalCount,proto3" json:"ping_interval_count,omitempty"`
	PingIpList         map[string]string `protobuf:"bytes,6,rep,name=ping_ip_list,json=pingIpList,proto3" json:"ping_ip_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PingCount          int32             `protobuf:"varint,7,opt,name=ping_count,json=pingCount,proto3" json:"ping_count,omitempty"`
	PingIntervalSwitch bool              `protobuf:"varint,8,opt,name=ping_interval_switch,json=pingIntervalSwitch,proto3" json:"ping_interval_switch,omitempty"`
}

func (x *PingConfig) Reset() {
	*x = PingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingConfig) ProtoMessage() {}

func (x *PingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingConfig.ProtoReflect.Descriptor instead.
func (*PingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{54}
}

func (x *PingConfig) GetPingStrategy() int32 {
	if x != nil {
		return x.PingStrategy
	}
	return 0
}

func (x *PingConfig) GetNewPingCount() int32 {
	if x != nil {
		return x.NewPingCount
	}
	return 0
}

func (x *PingConfig) GetPingLossRate() float64 {
	if x != nil {
		return x.PingLossRate
	}
	return 0
}

func (x *PingConfig) GetPingIntervalTime() int32 {
	if x != nil {
		return x.PingIntervalTime
	}
	return 0
}

func (x *PingConfig) GetPingIntervalCount() int32 {
	if x != nil {
		return x.PingIntervalCount
	}
	return 0
}

func (x *PingConfig) GetPingIpList() map[string]string {
	if x != nil {
		return x.PingIpList
	}
	return nil
}

func (x *PingConfig) GetPingCount() int32 {
	if x != nil {
		return x.PingCount
	}
	return 0
}

func (x *PingConfig) GetPingIntervalSwitch() bool {
	if x != nil {
		return x.PingIntervalSwitch
	}
	return false
}

// === reward_config start =======================================
type RewardMarkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardMarks []*RewardMark `protobuf:"bytes,1,rep,name=reward_marks,json=rewardMarks,proto3" json:"reward_marks,omitempty"`
}

func (x *RewardMarkConfig) Reset() {
	*x = RewardMarkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardMarkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardMarkConfig) ProtoMessage() {}

func (x *RewardMarkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardMarkConfig.ProtoReflect.Descriptor instead.
func (*RewardMarkConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{55}
}

func (x *RewardMarkConfig) GetRewardMarks() []*RewardMark {
	if x != nil {
		return x.RewardMarks
	}
	return nil
}

type RewardMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 角标id
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"` // 角标图片
}

func (x *RewardMark) Reset() {
	*x = RewardMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardMark) ProtoMessage() {}

func (x *RewardMark) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardMark.ProtoReflect.Descriptor instead.
func (*RewardMark) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{56}
}

func (x *RewardMark) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RewardMark) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// === show_ad_config start =======================================
type ShowAdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnakeCoinAdConfig            []*AdRewardModel           `protobuf:"bytes,1,rep,name=snake_coin_ad_config,json=snakeCoinAdConfig,proto3" json:"snake_coin_ad_config,omitempty"`
	CouponAdConfig               []*AdRewardModel           `protobuf:"bytes,2,rep,name=coupon_ad_config,json=couponAdConfig,proto3" json:"coupon_ad_config,omitempty"`
	HappycoinAdConfig            []*AdRewardModel           `protobuf:"bytes,3,rep,name=happycoin_ad_config,json=happycoinAdConfig,proto3" json:"happycoin_ad_config,omitempty"`
	GoodsList                    []*AdGoodsItem             `protobuf:"bytes,4,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	IronSourceSwitch             int32                      `protobuf:"varint,5,opt,name=iron_source_switch,json=ironSourceSwitch,proto3" json:"iron_source_switch,omitempty"`
	AdDiamondState               int32                      `protobuf:"varint,6,opt,name=ad_diamond_state,json=adDiamondState,proto3" json:"ad_diamond_state,omitempty"`
	AdReliveState                int32                      `protobuf:"varint,7,opt,name=ad_relive_state,json=adReliveState,proto3" json:"ad_relive_state,omitempty"`
	Times                        int32                      `protobuf:"varint,8,opt,name=times,proto3" json:"times,omitempty"`
	FirstTimes                   int32                      `protobuf:"varint,9,opt,name=first_times,json=firstTimes,proto3" json:"first_times,omitempty"`
	AdChestReduceTime            int32                      `protobuf:"varint,10,opt,name=ad_chest_reduce_time,json=adChestReduceTime,proto3" json:"ad_chest_reduce_time,omitempty"`
	AdSnakeCoinState             int32                      `protobuf:"varint,11,opt,name=ad_snake_coin_state,json=adSnakeCoinState,proto3" json:"ad_snake_coin_state,omitempty"`
	DoubleSnakeCoinState         int32                      `protobuf:"varint,12,opt,name=double_snake_coin_state,json=doubleSnakeCoinState,proto3" json:"double_snake_coin_state,omitempty"`
	SingleAddBuffUi              string                     `protobuf:"bytes,13,opt,name=single_add_buff_ui,json=singleAddBuffUi,proto3" json:"single_add_buff_ui,omitempty"`
	EndlessBuff                  *EndlessBuff               `protobuf:"bytes,14,opt,name=endless_buff,json=endlessBuff,proto3" json:"endless_buff,omitempty"`
	AdPopupsConfig               *AdPopupsConfig            `protobuf:"bytes,15,opt,name=ad_popups_config,json=adPopupsConfig,proto3" json:"ad_popups_config,omitempty"`
	AndroidAdPopupsConfig        *AdPopupsConfig            `protobuf:"bytes,16,opt,name=android_ad_popups_config,json=androidAdPopupsConfig,proto3" json:"android_ad_popups_config,omitempty"`
	AbAdPopupsConfig             *AdPopupsConfig            `protobuf:"bytes,17,opt,name=ab_ad_popups_config,json=abAdPopupsConfig,proto3" json:"ab_ad_popups_config,omitempty"`
	EndlessCheckoutRecommend     []*EndlessAdRecommend      `protobuf:"bytes,18,rep,name=endless_checkout_recommend,json=endlessCheckoutRecommend,proto3" json:"endless_checkout_recommend,omitempty"`
	NoadEndlessCheckoutRecommend []*EndlessAdRecommend      `protobuf:"bytes,19,rep,name=noad_endless_checkout_recommend,json=noadEndlessCheckoutRecommend,proto3" json:"noad_endless_checkout_recommend,omitempty"`
	MeleeCheckoutRecommend       []*EndlessAdRecommend      `protobuf:"bytes,20,rep,name=melee_checkout_recommend,json=meleeCheckoutRecommend,proto3" json:"melee_checkout_recommend,omitempty"`
	AdPercent                    map[string]int32           `protobuf:"bytes,21,rep,name=ad_percent,json=adPercent,proto3" json:"ad_percent,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CrossPromotions              *CrossPromotions           `protobuf:"bytes,22,opt,name=cross_promotions,json=crossPromotions,proto3" json:"cross_promotions,omitempty"`
	OpenBuyLink                  bool                       `protobuf:"varint,23,opt,name=open_buy_link,json=openBuyLink,proto3" json:"open_buy_link,omitempty"`                                                                                                            // 是否开启购买链接
	BuyMonthCardLink             string                     `protobuf:"bytes,24,opt,name=buy_month_card_link,json=buyMonthCardLink,proto3" json:"buy_month_card_link,omitempty"`                                                                                            // 购买月卡弹窗链接
	BuyAdCardLink                string                     `protobuf:"bytes,25,opt,name=buy_ad_card_link,json=buyAdCardLink,proto3" json:"buy_ad_card_link,omitempty"`                                                                                                     // 购买广告券弹窗链接
	BuyToast                     string                     `protobuf:"bytes,26,opt,name=buy_toast,json=buyToast,proto3" json:"buy_toast,omitempty"`                                                                                                                        // 购买弹窗toast
	SpecialBuyToast              string                     `protobuf:"bytes,27,opt,name=special_buy_toast,json=specialBuyToast,proto3" json:"special_buy_toast,omitempty"`                                                                                                 // 特殊购买弹窗toast
	BuyToastList                 []string                   `protobuf:"bytes,28,rep,name=buy_toast_list,json=buyToastList,proto3" json:"buy_toast_list,omitempty"`                                                                                                          // 购买弹窗toast列表
	SpecialBuyToastList          []string                   `protobuf:"bytes,29,rep,name=special_buy_toast_list,json=specialBuyToastList,proto3" json:"special_buy_toast_list,omitempty"`                                                                                   // 特殊购买弹窗toast列表
	AdActSetLink                 string                     `protobuf:"bytes,30,opt,name=ad_act_set_link,json=adActSetLink,proto3" json:"ad_act_set_link,omitempty"`                                                                                                        // 广告券合集活动跳转链接
	AbAdPopupsConfigs            map[string]*AdPopupsConfig `protobuf:"bytes,31,rep,name=ab_ad_popups_configs,json=abAdPopupsConfigs,proto3" json:"ab_ad_popups_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 广告弹窗 ab 实验配置合集
}

func (x *ShowAdConfig) Reset() {
	*x = ShowAdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAdConfig) ProtoMessage() {}

func (x *ShowAdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAdConfig.ProtoReflect.Descriptor instead.
func (*ShowAdConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{57}
}

func (x *ShowAdConfig) GetSnakeCoinAdConfig() []*AdRewardModel {
	if x != nil {
		return x.SnakeCoinAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetCouponAdConfig() []*AdRewardModel {
	if x != nil {
		return x.CouponAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetHappycoinAdConfig() []*AdRewardModel {
	if x != nil {
		return x.HappycoinAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetGoodsList() []*AdGoodsItem {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *ShowAdConfig) GetIronSourceSwitch() int32 {
	if x != nil {
		return x.IronSourceSwitch
	}
	return 0
}

func (x *ShowAdConfig) GetAdDiamondState() int32 {
	if x != nil {
		return x.AdDiamondState
	}
	return 0
}

func (x *ShowAdConfig) GetAdReliveState() int32 {
	if x != nil {
		return x.AdReliveState
	}
	return 0
}

func (x *ShowAdConfig) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *ShowAdConfig) GetFirstTimes() int32 {
	if x != nil {
		return x.FirstTimes
	}
	return 0
}

func (x *ShowAdConfig) GetAdChestReduceTime() int32 {
	if x != nil {
		return x.AdChestReduceTime
	}
	return 0
}

func (x *ShowAdConfig) GetAdSnakeCoinState() int32 {
	if x != nil {
		return x.AdSnakeCoinState
	}
	return 0
}

func (x *ShowAdConfig) GetDoubleSnakeCoinState() int32 {
	if x != nil {
		return x.DoubleSnakeCoinState
	}
	return 0
}

func (x *ShowAdConfig) GetSingleAddBuffUi() string {
	if x != nil {
		return x.SingleAddBuffUi
	}
	return ""
}

func (x *ShowAdConfig) GetEndlessBuff() *EndlessBuff {
	if x != nil {
		return x.EndlessBuff
	}
	return nil
}

func (x *ShowAdConfig) GetAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetAndroidAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AndroidAdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetAbAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AbAdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetEndlessCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.EndlessCheckoutRecommend
	}
	return nil
}

func (x *ShowAdConfig) GetNoadEndlessCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.NoadEndlessCheckoutRecommend
	}
	return nil
}

func (x *ShowAdConfig) GetMeleeCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.MeleeCheckoutRecommend
	}
	return nil
}

func (x *ShowAdConfig) GetAdPercent() map[string]int32 {
	if x != nil {
		return x.AdPercent
	}
	return nil
}

func (x *ShowAdConfig) GetCrossPromotions() *CrossPromotions {
	if x != nil {
		return x.CrossPromotions
	}
	return nil
}

func (x *ShowAdConfig) GetOpenBuyLink() bool {
	if x != nil {
		return x.OpenBuyLink
	}
	return false
}

func (x *ShowAdConfig) GetBuyMonthCardLink() string {
	if x != nil {
		return x.BuyMonthCardLink
	}
	return ""
}

func (x *ShowAdConfig) GetBuyAdCardLink() string {
	if x != nil {
		return x.BuyAdCardLink
	}
	return ""
}

func (x *ShowAdConfig) GetBuyToast() string {
	if x != nil {
		return x.BuyToast
	}
	return ""
}

func (x *ShowAdConfig) GetSpecialBuyToast() string {
	if x != nil {
		return x.SpecialBuyToast
	}
	return ""
}

func (x *ShowAdConfig) GetBuyToastList() []string {
	if x != nil {
		return x.BuyToastList
	}
	return nil
}

func (x *ShowAdConfig) GetSpecialBuyToastList() []string {
	if x != nil {
		return x.SpecialBuyToastList
	}
	return nil
}

func (x *ShowAdConfig) GetAdActSetLink() string {
	if x != nil {
		return x.AdActSetLink
	}
	return ""
}

func (x *ShowAdConfig) GetAbAdPopupsConfigs() map[string]*AdPopupsConfig {
	if x != nil {
		return x.AbAdPopupsConfigs
	}
	return nil
}

type CrossPromotions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy []int32                  `protobuf:"varint,1,rep,packed,name=strategy,proto3" json:"strategy,omitempty"`
	Source   []*CrossPromotionsSource `protobuf:"bytes,2,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *CrossPromotions) Reset() {
	*x = CrossPromotions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossPromotions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossPromotions) ProtoMessage() {}

func (x *CrossPromotions) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossPromotions.ProtoReflect.Descriptor instead.
func (*CrossPromotions) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{58}
}

func (x *CrossPromotions) GetStrategy() []int32 {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *CrossPromotions) GetSource() []*CrossPromotionsSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type CrossPromotionsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Desc     string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Download string `protobuf:"bytes,3,opt,name=download,proto3" json:"download,omitempty"`
	Id       string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Rate     string `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`
	Show     string `protobuf:"bytes,6,opt,name=show,proto3" json:"show,omitempty"`
	Url      string `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CrossPromotionsSource) Reset() {
	*x = CrossPromotionsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossPromotionsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossPromotionsSource) ProtoMessage() {}

func (x *CrossPromotionsSource) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossPromotionsSource.ProtoReflect.Descriptor instead.
func (*CrossPromotionsSource) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{59}
}

func (x *CrossPromotionsSource) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CrossPromotionsSource) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CrossPromotionsSource) GetDownload() string {
	if x != nil {
		return x.Download
	}
	return ""
}

func (x *CrossPromotionsSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CrossPromotionsSource) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *CrossPromotionsSource) GetShow() string {
	if x != nil {
		return x.Show
	}
	return ""
}

func (x *CrossPromotionsSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EndlessBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times         int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	IntervalTimes int32 `protobuf:"varint,2,opt,name=interval_times,json=intervalTimes,proto3" json:"interval_times,omitempty"`
	ProtectTimes  int32 `protobuf:"varint,3,opt,name=protect_times,json=protectTimes,proto3" json:"protect_times,omitempty"`
}

func (x *EndlessBuff) Reset() {
	*x = EndlessBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBuff) ProtoMessage() {}

func (x *EndlessBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBuff.ProtoReflect.Descriptor instead.
func (*EndlessBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{60}
}

func (x *EndlessBuff) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *EndlessBuff) GetIntervalTimes() int32 {
	if x != nil {
		return x.IntervalTimes
	}
	return 0
}

func (x *EndlessBuff) GetProtectTimes() int32 {
	if x != nil {
		return x.ProtectTimes
	}
	return 0
}

type PopupPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times         int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`                                      //首次弹出的局数
	IntervalTimes int32 `protobuf:"varint,2,opt,name=interval_times,json=intervalTimes,proto3" json:"interval_times,omitempty"` //弹出间隔局数
	ShowLimit     int32 `protobuf:"varint,3,opt,name=show_limit,json=showLimit,proto3" json:"show_limit,omitempty"`             //每日展示上限
	Threshold     int32 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	IncrTimes     int32 `protobuf:"varint,5,opt,name=incr_times,json=incrTimes,proto3" json:"incr_times,omitempty"`
}

func (x *PopupPosition) Reset() {
	*x = PopupPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopupPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopupPosition) ProtoMessage() {}

func (x *PopupPosition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopupPosition.ProtoReflect.Descriptor instead.
func (*PopupPosition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{61}
}

func (x *PopupPosition) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *PopupPosition) GetIntervalTimes() int32 {
	if x != nil {
		return x.IntervalTimes
	}
	return 0
}

func (x *PopupPosition) GetShowLimit() int32 {
	if x != nil {
		return x.ShowLimit
	}
	return 0
}

func (x *PopupPosition) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *PopupPosition) GetIncrTimes() int32 {
	if x != nil {
		return x.IncrTimes
	}
	return 0
}

type AdPopupsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopupsTotalLimit    int32                     `protobuf:"varint,1,opt,name=popups_total_limit,json=popupsTotalLimit,proto3" json:"popups_total_limit,omitempty"`
	PopusOrder          []string                  `protobuf:"bytes,2,rep,name=popus_order,json=popusOrder,proto3" json:"popus_order,omitempty"` //重来时皮肤与buff都满足触发条件，优先顺序可配（默认皮肤优先）
	EndPopupCount       int32                     `protobuf:"varint,3,opt,name=end_popup_count,json=endPopupCount,proto3" json:"end_popup_count,omitempty"`
	EndPopupOrder       []string                  `protobuf:"bytes,4,rep,name=end_popup_order,json=endPopupOrder,proto3" json:"end_popup_order,omitempty"`
	NewEndPopupOrder1   []string                  `protobuf:"bytes,5,rep,name=new_end_popup_order1,json=newEndPopupOrder1,proto3" json:"new_end_popup_order1,omitempty"`
	NewEndPopupOrder2   []string                  `protobuf:"bytes,6,rep,name=new_end_popup_order2,json=newEndPopupOrder2,proto3" json:"new_end_popup_order2,omitempty"`
	NewbieProtectDay    int32                     `protobuf:"varint,7,opt,name=newbie_protect_day,json=newbieProtectDay,proto3" json:"newbie_protect_day,omitempty"`
	TrioGameCount       int32                     `protobuf:"varint,8,opt,name=trio_game_count,json=trioGameCount,proto3" json:"trio_game_count,omitempty"` //新用户首次允许弹出弹窗的局数（新手保护）
	PopupPositionConfig map[string]*PopupPosition `protobuf:"bytes,9,rep,name=popup_position_config,json=popupPositionConfig,proto3" json:"popup_position_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AdPopupsConfig) Reset() {
	*x = AdPopupsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdPopupsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdPopupsConfig) ProtoMessage() {}

func (x *AdPopupsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdPopupsConfig.ProtoReflect.Descriptor instead.
func (*AdPopupsConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{62}
}

func (x *AdPopupsConfig) GetPopupsTotalLimit() int32 {
	if x != nil {
		return x.PopupsTotalLimit
	}
	return 0
}

func (x *AdPopupsConfig) GetPopusOrder() []string {
	if x != nil {
		return x.PopusOrder
	}
	return nil
}

func (x *AdPopupsConfig) GetEndPopupCount() int32 {
	if x != nil {
		return x.EndPopupCount
	}
	return 0
}

func (x *AdPopupsConfig) GetEndPopupOrder() []string {
	if x != nil {
		return x.EndPopupOrder
	}
	return nil
}

func (x *AdPopupsConfig) GetNewEndPopupOrder1() []string {
	if x != nil {
		return x.NewEndPopupOrder1
	}
	return nil
}

func (x *AdPopupsConfig) GetNewEndPopupOrder2() []string {
	if x != nil {
		return x.NewEndPopupOrder2
	}
	return nil
}

func (x *AdPopupsConfig) GetNewbieProtectDay() int32 {
	if x != nil {
		return x.NewbieProtectDay
	}
	return 0
}

func (x *AdPopupsConfig) GetTrioGameCount() int32 {
	if x != nil {
		return x.TrioGameCount
	}
	return 0
}

func (x *AdPopupsConfig) GetPopupPositionConfig() map[string]*PopupPosition {
	if x != nil {
		return x.PopupPositionConfig
	}
	return nil
}

type EndlessAdRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId      int32  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`       //id
	AnimType    int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"` //通用动画类型,1:图片,5:视频
	AnimUrl     string `protobuf:"bytes,3,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`     //动画链接
	Link        string `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`                          //通用跳转链接
	Probability int32  `protobuf:"varint,5,opt,name=probability,proto3" json:"probability,omitempty"`           //权重
}

func (x *EndlessAdRecommend) Reset() {
	*x = EndlessAdRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessAdRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessAdRecommend) ProtoMessage() {}

func (x *EndlessAdRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessAdRecommend.ProtoReflect.Descriptor instead.
func (*EndlessAdRecommend) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{63}
}

func (x *EndlessAdRecommend) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *EndlessAdRecommend) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *EndlessAdRecommend) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *EndlessAdRecommend) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *EndlessAdRecommend) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type AdRewardModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColdTime  int32 `protobuf:"varint,1,opt,name=cold_time,json=coldTime,proto3" json:"cold_time,omitempty"`
	Index     int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Num       int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Type      int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` //货币类型
	Happycoin int32 `protobuf:"varint,5,opt,name=happycoin,proto3" json:"happycoin,omitempty"`
}

func (x *AdRewardModel) Reset() {
	*x = AdRewardModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdRewardModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdRewardModel) ProtoMessage() {}

func (x *AdRewardModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdRewardModel.ProtoReflect.Descriptor instead.
func (*AdRewardModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{64}
}

func (x *AdRewardModel) GetColdTime() int32 {
	if x != nil {
		return x.ColdTime
	}
	return 0
}

func (x *AdRewardModel) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AdRewardModel) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AdRewardModel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdRewardModel) GetHappycoin() int32 {
	if x != nil {
		return x.Happycoin
	}
	return 0
}

type AdGoodsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diamond        int32  `protobuf:"varint,1,opt,name=diamond,proto3" json:"diamond,omitempty"`
	AppleProductId string `protobuf:"bytes,2,opt,name=apple_product_id,json=appleProductId,proto3" json:"apple_product_id,omitempty"`
	GoodsId        int32  `protobuf:"varint,3,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	GoodsPrice     int32  `protobuf:"varint,4,opt,name=goods_price,json=goodsPrice,proto3" json:"goods_price,omitempty"`
	GoodsName      string `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
}

func (x *AdGoodsItem) Reset() {
	*x = AdGoodsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdGoodsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdGoodsItem) ProtoMessage() {}

func (x *AdGoodsItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdGoodsItem.ProtoReflect.Descriptor instead.
func (*AdGoodsItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{65}
}

func (x *AdGoodsItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *AdGoodsItem) GetAppleProductId() string {
	if x != nil {
		return x.AppleProductId
	}
	return ""
}

func (x *AdGoodsItem) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *AdGoodsItem) GetGoodsPrice() int32 {
	if x != nil {
		return x.GoodsPrice
	}
	return 0
}

func (x *AdGoodsItem) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

// === order_config start =======================================
type OrderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlivePopupOrder        []int32                 `protobuf:"varint,1,rep,packed,name=alive_popup_order,json=alivePopupOrder,proto3" json:"alive_popup_order,omitempty"`
	IapppaySwitch          int32                   `protobuf:"varint,2,opt,name=iapppay_switch,json=iapppaySwitch,proto3" json:"iapppay_switch,omitempty"`
	ServiceContact         string                  `protobuf:"bytes,3,opt,name=service_contact,json=serviceContact,proto3" json:"service_contact,omitempty"`
	PackGoodsList          []*RMBPackGoodsInfo     `protobuf:"bytes,4,rep,name=pack_goods_list,json=packGoodsList,proto3" json:"pack_goods_list,omitempty"`
	AlivePackPopup         []int32                 `protobuf:"varint,5,rep,packed,name=alive_pack_popup,json=alivePackPopup,proto3" json:"alive_pack_popup,omitempty"`
	DiamondGoodsList       []*RMBPackGoodsInfo     `protobuf:"bytes,6,rep,name=diamond_goods_list,json=diamondGoodsList,proto3" json:"diamond_goods_list,omitempty"`
	FirstChargePopup       *FirstChargePopup       `protobuf:"bytes,7,opt,name=first_charge_popup,json=firstChargePopup,proto3" json:"first_charge_popup,omitempty"`
	RedPackGoodsList       []*RMBPackGoodsInfo     `protobuf:"bytes,8,rep,name=red_pack_goods_list,json=redPackGoodsList,proto3" json:"red_pack_goods_list,omitempty"`
	ExcitePopupOrder       []int32                 `protobuf:"varint,9,rep,packed,name=excite_popup_order,json=excitePopupOrder,proto3" json:"excite_popup_order,omitempty"`
	NeedBind               int32                   `protobuf:"varint,10,opt,name=need_bind,json=needBind,proto3" json:"need_bind,omitempty"`
	RandomDoubleClientInfo *RandomDoubleClientInfo `protobuf:"bytes,11,opt,name=random_double_client_info,json=randomDoubleClientInfo,proto3" json:"random_double_client_info,omitempty"` // 需要返回给客户端的数据
	AlipayDiscount         *AlipayDiscount         `protobuf:"bytes,12,opt,name=alipay_discount,json=alipayDiscount,proto3" json:"alipay_discount,omitempty"`
}

func (x *OrderConfig) Reset() {
	*x = OrderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderConfig) ProtoMessage() {}

func (x *OrderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderConfig.ProtoReflect.Descriptor instead.
func (*OrderConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{66}
}

func (x *OrderConfig) GetAlivePopupOrder() []int32 {
	if x != nil {
		return x.AlivePopupOrder
	}
	return nil
}

func (x *OrderConfig) GetIapppaySwitch() int32 {
	if x != nil {
		return x.IapppaySwitch
	}
	return 0
}

func (x *OrderConfig) GetServiceContact() string {
	if x != nil {
		return x.ServiceContact
	}
	return ""
}

func (x *OrderConfig) GetPackGoodsList() []*RMBPackGoodsInfo {
	if x != nil {
		return x.PackGoodsList
	}
	return nil
}

func (x *OrderConfig) GetAlivePackPopup() []int32 {
	if x != nil {
		return x.AlivePackPopup
	}
	return nil
}

func (x *OrderConfig) GetDiamondGoodsList() []*RMBPackGoodsInfo {
	if x != nil {
		return x.DiamondGoodsList
	}
	return nil
}

func (x *OrderConfig) GetFirstChargePopup() *FirstChargePopup {
	if x != nil {
		return x.FirstChargePopup
	}
	return nil
}

func (x *OrderConfig) GetRedPackGoodsList() []*RMBPackGoodsInfo {
	if x != nil {
		return x.RedPackGoodsList
	}
	return nil
}

func (x *OrderConfig) GetExcitePopupOrder() []int32 {
	if x != nil {
		return x.ExcitePopupOrder
	}
	return nil
}

func (x *OrderConfig) GetNeedBind() int32 {
	if x != nil {
		return x.NeedBind
	}
	return 0
}

func (x *OrderConfig) GetRandomDoubleClientInfo() *RandomDoubleClientInfo {
	if x != nil {
		return x.RandomDoubleClientInfo
	}
	return nil
}

func (x *OrderConfig) GetAlipayDiscount() *AlipayDiscount {
	if x != nil {
		return x.AlipayDiscount
	}
	return nil
}

type AlipayDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime   int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CopyWriting string `protobuf:"bytes,3,opt,name=copy_writing,json=copyWriting,proto3" json:"copy_writing,omitempty"`
}

func (x *AlipayDiscount) Reset() {
	*x = AlipayDiscount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayDiscount) ProtoMessage() {}

func (x *AlipayDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayDiscount.ProtoReflect.Descriptor instead.
func (*AlipayDiscount) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{67}
}

func (x *AlipayDiscount) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AlipayDiscount) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AlipayDiscount) GetCopyWriting() string {
	if x != nil {
		return x.CopyWriting
	}
	return ""
}

type FirstChargePopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range int32 `protobuf:"varint,1,opt,name=range,proto3" json:"range,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FirstChargePopup) Reset() {
	*x = FirstChargePopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstChargePopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstChargePopup) ProtoMessage() {}

func (x *FirstChargePopup) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstChargePopup.ProtoReflect.Descriptor instead.
func (*FirstChargePopup) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{68}
}

func (x *FirstChargePopup) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *FirstChargePopup) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RandomDoubleClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleImgurl string `protobuf:"bytes,5,opt,name=title_imgurl,json=titleImgurl,proto3" json:"title_imgurl,omitempty"`
}

func (x *RandomDoubleClientInfo) Reset() {
	*x = RandomDoubleClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomDoubleClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomDoubleClientInfo) ProtoMessage() {}

func (x *RandomDoubleClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomDoubleClientInfo.ProtoReflect.Descriptor instead.
func (*RandomDoubleClientInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{69}
}

func (x *RandomDoubleClientInfo) GetTitleImgurl() string {
	if x != nil {
		return x.TitleImgurl
	}
	return ""
}

// === unity_qualifying_open_config start =======================================
type UnityQualifyingOpenConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekdays     []int32  `protobuf:"varint,1,rep,packed,name=weekdays,proto3" json:"weekdays,omitempty"`
	DayStartTime string   `protobuf:"bytes,2,opt,name=day_start_time,json=dayStartTime,proto3" json:"day_start_time,omitempty"`
	DayEndTime   string   `protobuf:"bytes,3,opt,name=day_end_time,json=dayEndTime,proto3" json:"day_end_time,omitempty"`
	Markets      []string `protobuf:"bytes,4,rep,name=markets,proto3" json:"markets,omitempty"`
	Versions     []string `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	RelayType    int32    `protobuf:"varint,6,opt,name=relay_type,json=relayType,proto3" json:"relay_type,omitempty"` // 控制游戏内是原生还是 unity 团战，0 表示 unity，1 表示原生
}

func (x *UnityQualifyingOpenConfig) Reset() {
	*x = UnityQualifyingOpenConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityQualifyingOpenConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityQualifyingOpenConfig) ProtoMessage() {}

func (x *UnityQualifyingOpenConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityQualifyingOpenConfig.ProtoReflect.Descriptor instead.
func (*UnityQualifyingOpenConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{70}
}

func (x *UnityQualifyingOpenConfig) GetWeekdays() []int32 {
	if x != nil {
		return x.Weekdays
	}
	return nil
}

func (x *UnityQualifyingOpenConfig) GetDayStartTime() string {
	if x != nil {
		return x.DayStartTime
	}
	return ""
}

func (x *UnityQualifyingOpenConfig) GetDayEndTime() string {
	if x != nil {
		return x.DayEndTime
	}
	return ""
}

func (x *UnityQualifyingOpenConfig) GetMarkets() []string {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *UnityQualifyingOpenConfig) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *UnityQualifyingOpenConfig) GetRelayType() int32 {
	if x != nil {
		return x.RelayType
	}
	return 0
}

// === top_list_config start =======================================
type TopListConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceList               []string `protobuf:"bytes,1,rep,name=province_list,json=provinceList,proto3" json:"province_list,omitempty"`
	UserTopListResetTips       string   `protobuf:"bytes,2,opt,name=user_top_list_reset_tips,json=userTopListResetTips,proto3" json:"user_top_list_reset_tips,omitempty"`
	ClanTopListResetTips       string   `protobuf:"bytes,3,opt,name=clan_top_list_reset_tips,json=clanTopListResetTips,proto3" json:"clan_top_list_reset_tips,omitempty"`
	QualifyingTopListResetTips string   `protobuf:"bytes,4,opt,name=qualifying_top_list_reset_tips,json=qualifyingTopListResetTips,proto3" json:"qualifying_top_list_reset_tips,omitempty"`
}

func (x *TopListConfig) Reset() {
	*x = TopListConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopListConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopListConfig) ProtoMessage() {}

func (x *TopListConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopListConfig.ProtoReflect.Descriptor instead.
func (*TopListConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{71}
}

func (x *TopListConfig) GetProvinceList() []string {
	if x != nil {
		return x.ProvinceList
	}
	return nil
}

func (x *TopListConfig) GetUserTopListResetTips() string {
	if x != nil {
		return x.UserTopListResetTips
	}
	return ""
}

func (x *TopListConfig) GetClanTopListResetTips() string {
	if x != nil {
		return x.ClanTopListResetTips
	}
	return ""
}

func (x *TopListConfig) GetQualifyingTopListResetTips() string {
	if x != nil {
		return x.QualifyingTopListResetTips
	}
	return ""
}

// === show_config begin ======================================
type ShowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelConfig   []*ShowLevelConfig `protobuf:"bytes,1,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty"`
	SkillName     []*ShowSkillName   `protobuf:"bytes,2,rep,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	IntroV2       string             `protobuf:"bytes,3,opt,name=intro_v2,json=introV2,proto3" json:"intro_v2,omitempty"`
	AdditionIntro string             `protobuf:"bytes,4,opt,name=addition_intro,json=additionIntro,proto3" json:"addition_intro,omitempty"`
	Intro         string             `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	IconStyle     []*ShowIconStyle   `protobuf:"bytes,6,rep,name=icon_style,json=iconStyle,proto3" json:"icon_style,omitempty"`
	PackConfig    []*ShowPackItem    `protobuf:"bytes,7,rep,name=pack_config,json=packConfig,proto3" json:"pack_config,omitempty"`
	PackPopCdSec  int32              `protobuf:"varint,8,opt,name=pack_pop_cd_sec,json=packPopCdSec,proto3" json:"pack_pop_cd_sec,omitempty"`
}

func (x *ShowConfig) Reset() {
	*x = ShowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowConfig) ProtoMessage() {}

func (x *ShowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowConfig.ProtoReflect.Descriptor instead.
func (*ShowConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{72}
}

func (x *ShowConfig) GetLevelConfig() []*ShowLevelConfig {
	if x != nil {
		return x.LevelConfig
	}
	return nil
}

func (x *ShowConfig) GetSkillName() []*ShowSkillName {
	if x != nil {
		return x.SkillName
	}
	return nil
}

func (x *ShowConfig) GetIntroV2() string {
	if x != nil {
		return x.IntroV2
	}
	return ""
}

func (x *ShowConfig) GetAdditionIntro() string {
	if x != nil {
		return x.AdditionIntro
	}
	return ""
}

func (x *ShowConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *ShowConfig) GetIconStyle() []*ShowIconStyle {
	if x != nil {
		return x.IconStyle
	}
	return nil
}

func (x *ShowConfig) GetPackConfig() []*ShowPackItem {
	if x != nil {
		return x.PackConfig
	}
	return nil
}

func (x *ShowConfig) GetPackPopCdSec() int32 {
	if x != nil {
		return x.PackPopCdSec
	}
	return 0
}

type ShowPackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowLevel int32             `protobuf:"varint,1,opt,name=show_level,json=showLevel,proto3" json:"show_level,omitempty"`
	EffectSec int32             `protobuf:"varint,2,opt,name=effect_sec,json=effectSec,proto3" json:"effect_sec,omitempty"`
	PackInfo  *config.PackModel `protobuf:"bytes,3,opt,name=pack_info,json=packInfo,proto3" json:"pack_info,omitempty"`
}

func (x *ShowPackItem) Reset() {
	*x = ShowPackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPackItem) ProtoMessage() {}

func (x *ShowPackItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPackItem.ProtoReflect.Descriptor instead.
func (*ShowPackItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{73}
}

func (x *ShowPackItem) GetShowLevel() int32 {
	if x != nil {
		return x.ShowLevel
	}
	return 0
}

func (x *ShowPackItem) GetEffectSec() int32 {
	if x != nil {
		return x.EffectSec
	}
	return 0
}

func (x *ShowPackItem) GetPackInfo() *config.PackModel {
	if x != nil {
		return x.PackInfo
	}
	return nil
}

type ShowIconStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num    int32  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ImgUrl string `protobuf:"bytes,2,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
}

func (x *ShowIconStyle) Reset() {
	*x = ShowIconStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIconStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIconStyle) ProtoMessage() {}

func (x *ShowIconStyle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIconStyle.ProtoReflect.Descriptor instead.
func (*ShowIconStyle) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{74}
}

func (x *ShowIconStyle) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ShowIconStyle) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

type ShowLevelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSkill     string                 `protobuf:"bytes,1,opt,name=game_skill,json=gameSkill,proto3" json:"game_skill,omitempty"`
	Reward        []*config.RewardConfig `protobuf:"bytes,2,rep,name=reward,proto3" json:"reward,omitempty"`
	Thumbnail     string                 `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ThumAnimUrl   string                 `protobuf:"bytes,4,opt,name=thum_anim_url,json=thumAnimUrl,proto3" json:"thum_anim_url,omitempty"`
	IconUrl       string                 `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	AnimUrl       string                 `protobuf:"bytes,6,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	TotalShow     int32                  `protobuf:"varint,7,opt,name=total_show,json=totalShow,proto3" json:"total_show,omitempty"`
	Level         int32                  `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	GameSkillList []*ShowSkillBuff       `protobuf:"bytes,9,rep,name=game_skill_list,json=gameSkillList,proto3" json:"game_skill_list,omitempty"` // 不返回客户端
	Show          string                 `protobuf:"bytes,10,opt,name=show,proto3" json:"show,omitempty"`
}

func (x *ShowLevelConfig) Reset() {
	*x = ShowLevelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowLevelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowLevelConfig) ProtoMessage() {}

func (x *ShowLevelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowLevelConfig.ProtoReflect.Descriptor instead.
func (*ShowLevelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{75}
}

func (x *ShowLevelConfig) GetGameSkill() string {
	if x != nil {
		return x.GameSkill
	}
	return ""
}

func (x *ShowLevelConfig) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ShowLevelConfig) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ShowLevelConfig) GetThumAnimUrl() string {
	if x != nil {
		return x.ThumAnimUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetTotalShow() int32 {
	if x != nil {
		return x.TotalShow
	}
	return 0
}

func (x *ShowLevelConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ShowLevelConfig) GetGameSkillList() []*ShowSkillBuff {
	if x != nil {
		return x.GameSkillList
	}
	return nil
}

func (x *ShowLevelConfig) GetShow() string {
	if x != nil {
		return x.Show
	}
	return ""
}

type ShowSkillName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillType int32  `protobuf:"varint,1,opt,name=skill_type,json=skillType,proto3" json:"skill_type,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ShowSkillName) Reset() {
	*x = ShowSkillName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSkillName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSkillName) ProtoMessage() {}

func (x *ShowSkillName) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSkillName.ProtoReflect.Descriptor instead.
func (*ShowSkillName) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{76}
}

func (x *ShowSkillName) GetSkillType() int32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *ShowSkillName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ShowSkillBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillType int32  `protobuf:"varint,1,opt,name=skill_type,json=skillType,proto3" json:"skill_type,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValueText string `protobuf:"bytes,3,opt,name=value_text,json=valueText,proto3" json:"value_text,omitempty"`
}

func (x *ShowSkillBuff) Reset() {
	*x = ShowSkillBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSkillBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSkillBuff) ProtoMessage() {}

func (x *ShowSkillBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSkillBuff.ProtoReflect.Descriptor instead.
func (*ShowSkillBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{77}
}

func (x *ShowSkillBuff) GetSkillType() int32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *ShowSkillBuff) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ShowSkillBuff) GetValueText() string {
	if x != nil {
		return x.ValueText
	}
	return ""
}

// === user_config begin ======================================
type UserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenderCost               int32                  `protobuf:"varint,1,opt,name=gender_cost,json=genderCost,proto3" json:"gender_cost,omitempty"`                                //性别修改需要的苹果数量
	CertifyUrl               string                 `protobuf:"bytes,2,opt,name=certify_url,json=certifyUrl,proto3" json:"certify_url,omitempty"`                                 // 实名认证 url 地址
	CacheCleanSwitch         int32                  `protobuf:"varint,3,opt,name=cache_clean_switch,json=cacheCleanSwitch,proto3" json:"cache_clean_switch,omitempty"`            //1开2关
	SnakeCoinLimit           int32                  `protobuf:"varint,4,opt,name=snake_coin_limit,json=snakeCoinLimit,proto3" json:"snake_coin_limit,omitempty"`                  // 彩豆周上限
	SingleTextConfig         string                 `protobuf:"bytes,5,opt,name=single_text_config,json=singleTextConfig,proto3" json:"single_text_config,omitempty"`             // 单机右上角文案说明
	QualifyingTextConfig     string                 `protobuf:"bytes,6,opt,name=qualifying_text_config,json=qualifyingTextConfig,proto3" json:"qualifying_text_config,omitempty"` // 团战右上角文案说明
	ClanTextConfig           string                 `protobuf:"bytes,7,opt,name=clan_text_config,json=clanTextConfig,proto3" json:"clan_text_config,omitempty"`                   // 战队赛结算右上角文案说明
	AbnormalStore            []*DeviceConfig        `protobuf:"bytes,8,rep,name=abnormal_store,json=abnormalStore,proto3" json:"abnormal_store,omitempty"`
	ZhiTokenUrl2             string                 `protobuf:"bytes,9,opt,name=zhi_token_url2,json=zhiTokenUrl2,proto3" json:"zhi_token_url2,omitempty"`                            // 吱口令
	SendRedPackNeedCare      int32                  `protobuf:"varint,10,opt,name=send_red_pack_need_care,json=sendRedPackNeedCare,proto3" json:"send_red_pack_need_care,omitempty"` // 红包守护值
	UploadAvatarTips         string                 `protobuf:"bytes,11,opt,name=upload_avatar_tips,json=uploadAvatarTips,proto3" json:"upload_avatar_tips,omitempty"`               // 上传头像奖励
	StartEndlessFlag         int32                  `protobuf:"varint,12,opt,name=start_endless_flag,json=startEndlessFlag,proto3" json:"start_endless_flag,omitempty"`              // 是否首页直接进无尽，0否1是
	HomeLoginDays            []int32                `protobuf:"varint,13,rep,packed,name=home_login_days,json=homeLoginDays,proto3" json:"home_login_days,omitempty"`                //新用户第多少天登录 首次回首页后弹登录
	NicknameHomeCount        int32                  `protobuf:"varint,14,opt,name=nickname_home_count,json=nicknameHomeCount,proto3" json:"nickname_home_count,omitempty"`           //新用户第三天登录 多少次回首页后弹改名
	AntiAddiction            *AntiAddiction         `protobuf:"bytes,16,opt,name=anti_addiction,json=antiAddiction,proto3" json:"anti_addiction,omitempty"`
	OnlineIntervalSeconds    int32                  `protobuf:"varint,17,opt,name=online_interval_seconds,json=onlineIntervalSeconds,proto3" json:"online_interval_seconds,omitempty"`
	GameEndSkin              *GameEndSkin           `protobuf:"bytes,18,opt,name=game_end_skin,json=gameEndSkin,proto3" json:"game_end_skin,omitempty"`
	WorkdayList              []string               `protobuf:"bytes,19,rep,name=workday_list,json=workdayList,proto3" json:"workday_list,omitempty"`
	HolidayList              []string               `protobuf:"bytes,20,rep,name=holiday_list,json=holidayList,proto3" json:"holiday_list,omitempty"`
	RenamePopupRule          *RenamePopupRule       `protobuf:"bytes,21,opt,name=rename_popup_rule,json=renamePopupRule,proto3" json:"rename_popup_rule,omitempty"`
	BindConfig               *BindConfig            `protobuf:"bytes,22,opt,name=bind_config,json=bindConfig,proto3" json:"bind_config,omitempty"`
	SettingConf              *SettingConfig         `protobuf:"bytes,23,opt,name=setting_conf,json=settingConf,proto3" json:"setting_conf,omitempty"`
	Feedback                 *FeedbackConfig        `protobuf:"bytes,24,opt,name=feedback,proto3" json:"feedback,omitempty"`
	Flags                    *FlagsConfig           `protobuf:"bytes,25,opt,name=flags,proto3" json:"flags,omitempty"`
	CertifyReward            []*config.RewardConfig `protobuf:"bytes,26,rep,name=certify_reward,json=certifyReward,proto3" json:"certify_reward,omitempty"`
	RegisterSurvey           *RegisterSurvey        `protobuf:"bytes,27,opt,name=register_survey,json=registerSurvey,proto3" json:"register_survey,omitempty"`
	RecruitPopup             *RecruitPopup          `protobuf:"bytes,28,opt,name=recruit_popup,json=recruitPopup,proto3" json:"recruit_popup,omitempty"`
	MinorLimit               *MinorLimit            `protobuf:"bytes,29,opt,name=minor_limit,json=minorLimit,proto3" json:"minor_limit,omitempty"`
	LoginLimitMsg            string                 `protobuf:"bytes,30,opt,name=login_limit_msg,json=loginLimitMsg,proto3" json:"login_limit_msg,omitempty"`
	AgeTipsText              string                 `protobuf:"bytes,31,opt,name=age_tips_text,json=ageTipsText,proto3" json:"age_tips_text,omitempty"`
	CertifyRewardImage       string                 `protobuf:"bytes,32,opt,name=certify_reward_image,json=certifyRewardImage,proto3" json:"certify_reward_image,omitempty"` // 实名认证奖励图片
	NewUserConfig            *NewUserConfig         `protobuf:"bytes,33,opt,name=new_user_config,json=newUserConfig,proto3" json:"new_user_config,omitempty"`
	OpenCpButton             int32                  `protobuf:"varint,34,opt,name=open_cp_button,json=openCpButton,proto3" json:"open_cp_button,omitempty"` // 是否开启cp背景更换按钮，1为开
	AlipayCertify            int32                  `protobuf:"varint,35,opt,name=alipay_certify,json=alipayCertify,proto3" json:"alipay_certify,omitempty"`
	ChannelLoginFlag         int32                  `protobuf:"varint,36,opt,name=channel_login_flag,json=channelLoginFlag,proto3" json:"channel_login_flag,omitempty"`
	CommentConfig            *CommentConfig         `protobuf:"bytes,37,opt,name=comment_config,json=commentConfig,proto3" json:"comment_config,omitempty"` // 评论配置
	LoginPageFlag            int32                  `protobuf:"varint,38,opt,name=login_page_flag,json=loginPageFlag,proto3" json:"login_page_flag,omitempty"`
	ContactText              string                 `protobuf:"bytes,39,opt,name=contact_text,json=contactText,proto3" json:"contact_text,omitempty"`
	LoginHomeCount           int32                  `protobuf:"varint,40,opt,name=login_home_count,json=loginHomeCount,proto3" json:"login_home_count,omitempty"`
	UnityFlags               *UnityFlags            `protobuf:"bytes,41,opt,name=unity_flags,json=unityFlags,proto3" json:"unity_flags,omitempty"`
	UseTopon                 int32                  `protobuf:"varint,42,opt,name=use_topon,json=useTopon,proto3" json:"use_topon,omitempty"`
	IdfaConfig               *IdfaConfig            `protobuf:"bytes,43,opt,name=idfa_config,json=idfaConfig,proto3" json:"idfa_config,omitempty"` // ios idfa 弹窗配置
	VisitorFlag              int32                  `protobuf:"varint,44,opt,name=visitor_flag,json=visitorFlag,proto3" json:"visitor_flag,omitempty"`
	ThirdFailedVisitorFlag   int32                  `protobuf:"varint,45,opt,name=third_failed_visitor_flag,json=thirdFailedVisitorFlag,proto3" json:"third_failed_visitor_flag,omitempty"`
	ThirdFailedVisitorMarket []string               `protobuf:"bytes,46,rep,name=third_failed_visitor_market,json=thirdFailedVisitorMarket,proto3" json:"third_failed_visitor_market,omitempty"`
	RelivePackAutoPopCount   int32                  `protobuf:"varint,47,opt,name=relive_pack_auto_pop_count,json=relivePackAutoPopCount,proto3" json:"relive_pack_auto_pop_count,omitempty"`
	CertifyVedioUrlV2        string                 `protobuf:"bytes,48,opt,name=certify_vedio_url_v2,json=certifyVedioUrlV2,proto3" json:"certify_vedio_url_v2,omitempty"`          // 实名认证视频链接
	CertifyRewardImageV2     string                 `protobuf:"bytes,49,opt,name=certify_reward_image_v2,json=certifyRewardImageV2,proto3" json:"certify_reward_image_v2,omitempty"` // 实名认证奖励图片
	CertifyRewardV2          []*config.RewardConfig `protobuf:"bytes,50,rep,name=certify_reward_v2,json=certifyRewardV2,proto3" json:"certify_reward_v2,omitempty"`                  // 实名认证奖励
}

func (x *UserConfig) Reset() {
	*x = UserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConfig) ProtoMessage() {}

func (x *UserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConfig.ProtoReflect.Descriptor instead.
func (*UserConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{78}
}

func (x *UserConfig) GetGenderCost() int32 {
	if x != nil {
		return x.GenderCost
	}
	return 0
}

func (x *UserConfig) GetCertifyUrl() string {
	if x != nil {
		return x.CertifyUrl
	}
	return ""
}

func (x *UserConfig) GetCacheCleanSwitch() int32 {
	if x != nil {
		return x.CacheCleanSwitch
	}
	return 0
}

func (x *UserConfig) GetSnakeCoinLimit() int32 {
	if x != nil {
		return x.SnakeCoinLimit
	}
	return 0
}

func (x *UserConfig) GetSingleTextConfig() string {
	if x != nil {
		return x.SingleTextConfig
	}
	return ""
}

func (x *UserConfig) GetQualifyingTextConfig() string {
	if x != nil {
		return x.QualifyingTextConfig
	}
	return ""
}

func (x *UserConfig) GetClanTextConfig() string {
	if x != nil {
		return x.ClanTextConfig
	}
	return ""
}

func (x *UserConfig) GetAbnormalStore() []*DeviceConfig {
	if x != nil {
		return x.AbnormalStore
	}
	return nil
}

func (x *UserConfig) GetZhiTokenUrl2() string {
	if x != nil {
		return x.ZhiTokenUrl2
	}
	return ""
}

func (x *UserConfig) GetSendRedPackNeedCare() int32 {
	if x != nil {
		return x.SendRedPackNeedCare
	}
	return 0
}

func (x *UserConfig) GetUploadAvatarTips() string {
	if x != nil {
		return x.UploadAvatarTips
	}
	return ""
}

func (x *UserConfig) GetStartEndlessFlag() int32 {
	if x != nil {
		return x.StartEndlessFlag
	}
	return 0
}

func (x *UserConfig) GetHomeLoginDays() []int32 {
	if x != nil {
		return x.HomeLoginDays
	}
	return nil
}

func (x *UserConfig) GetNicknameHomeCount() int32 {
	if x != nil {
		return x.NicknameHomeCount
	}
	return 0
}

func (x *UserConfig) GetAntiAddiction() *AntiAddiction {
	if x != nil {
		return x.AntiAddiction
	}
	return nil
}

func (x *UserConfig) GetOnlineIntervalSeconds() int32 {
	if x != nil {
		return x.OnlineIntervalSeconds
	}
	return 0
}

func (x *UserConfig) GetGameEndSkin() *GameEndSkin {
	if x != nil {
		return x.GameEndSkin
	}
	return nil
}

func (x *UserConfig) GetWorkdayList() []string {
	if x != nil {
		return x.WorkdayList
	}
	return nil
}

func (x *UserConfig) GetHolidayList() []string {
	if x != nil {
		return x.HolidayList
	}
	return nil
}

func (x *UserConfig) GetRenamePopupRule() *RenamePopupRule {
	if x != nil {
		return x.RenamePopupRule
	}
	return nil
}

func (x *UserConfig) GetBindConfig() *BindConfig {
	if x != nil {
		return x.BindConfig
	}
	return nil
}

func (x *UserConfig) GetSettingConf() *SettingConfig {
	if x != nil {
		return x.SettingConf
	}
	return nil
}

func (x *UserConfig) GetFeedback() *FeedbackConfig {
	if x != nil {
		return x.Feedback
	}
	return nil
}

func (x *UserConfig) GetFlags() *FlagsConfig {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *UserConfig) GetCertifyReward() []*config.RewardConfig {
	if x != nil {
		return x.CertifyReward
	}
	return nil
}

func (x *UserConfig) GetRegisterSurvey() *RegisterSurvey {
	if x != nil {
		return x.RegisterSurvey
	}
	return nil
}

func (x *UserConfig) GetRecruitPopup() *RecruitPopup {
	if x != nil {
		return x.RecruitPopup
	}
	return nil
}

func (x *UserConfig) GetMinorLimit() *MinorLimit {
	if x != nil {
		return x.MinorLimit
	}
	return nil
}

func (x *UserConfig) GetLoginLimitMsg() string {
	if x != nil {
		return x.LoginLimitMsg
	}
	return ""
}

func (x *UserConfig) GetAgeTipsText() string {
	if x != nil {
		return x.AgeTipsText
	}
	return ""
}

func (x *UserConfig) GetCertifyRewardImage() string {
	if x != nil {
		return x.CertifyRewardImage
	}
	return ""
}

func (x *UserConfig) GetNewUserConfig() *NewUserConfig {
	if x != nil {
		return x.NewUserConfig
	}
	return nil
}

func (x *UserConfig) GetOpenCpButton() int32 {
	if x != nil {
		return x.OpenCpButton
	}
	return 0
}

func (x *UserConfig) GetAlipayCertify() int32 {
	if x != nil {
		return x.AlipayCertify
	}
	return 0
}

func (x *UserConfig) GetChannelLoginFlag() int32 {
	if x != nil {
		return x.ChannelLoginFlag
	}
	return 0
}

func (x *UserConfig) GetCommentConfig() *CommentConfig {
	if x != nil {
		return x.CommentConfig
	}
	return nil
}

func (x *UserConfig) GetLoginPageFlag() int32 {
	if x != nil {
		return x.LoginPageFlag
	}
	return 0
}

func (x *UserConfig) GetContactText() string {
	if x != nil {
		return x.ContactText
	}
	return ""
}

func (x *UserConfig) GetLoginHomeCount() int32 {
	if x != nil {
		return x.LoginHomeCount
	}
	return 0
}

func (x *UserConfig) GetUnityFlags() *UnityFlags {
	if x != nil {
		return x.UnityFlags
	}
	return nil
}

func (x *UserConfig) GetUseTopon() int32 {
	if x != nil {
		return x.UseTopon
	}
	return 0
}

func (x *UserConfig) GetIdfaConfig() *IdfaConfig {
	if x != nil {
		return x.IdfaConfig
	}
	return nil
}

func (x *UserConfig) GetVisitorFlag() int32 {
	if x != nil {
		return x.VisitorFlag
	}
	return 0
}

func (x *UserConfig) GetThirdFailedVisitorFlag() int32 {
	if x != nil {
		return x.ThirdFailedVisitorFlag
	}
	return 0
}

func (x *UserConfig) GetThirdFailedVisitorMarket() []string {
	if x != nil {
		return x.ThirdFailedVisitorMarket
	}
	return nil
}

func (x *UserConfig) GetRelivePackAutoPopCount() int32 {
	if x != nil {
		return x.RelivePackAutoPopCount
	}
	return 0
}

func (x *UserConfig) GetCertifyVedioUrlV2() string {
	if x != nil {
		return x.CertifyVedioUrlV2
	}
	return ""
}

func (x *UserConfig) GetCertifyRewardImageV2() string {
	if x != nil {
		return x.CertifyRewardImageV2
	}
	return ""
}

func (x *UserConfig) GetCertifyRewardV2() []*config.RewardConfig {
	if x != nil {
		return x.CertifyRewardV2
	}
	return nil
}

type UnityFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnityFlags) Reset() {
	*x = UnityFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityFlags) ProtoMessage() {}

func (x *UnityFlags) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityFlags.ProtoReflect.Descriptor instead.
func (*UnityFlags) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{79}
}

type MinorLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAge         int32         `protobuf:"varint,1,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`                           //小于这个18值的是未成年
	HideGameVoice  int32         `protobuf:"varint,2,opt,name=hide_game_voice,json=hideGameVoice,proto3" json:"hide_game_voice,omitempty"`    //1隐藏
	HideFriendRank int32         `protobuf:"varint,3,opt,name=hide_friend_rank,json=hideFriendRank,proto3" json:"hide_friend_rank,omitempty"` //1隐藏
	OrderCurator   *OrderCurator `protobuf:"bytes,4,opt,name=order_curator,json=orderCurator,proto3" json:"order_curator,omitempty"`
}

func (x *MinorLimit) Reset() {
	*x = MinorLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinorLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinorLimit) ProtoMessage() {}

func (x *MinorLimit) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinorLimit.ProtoReflect.Descriptor instead.
func (*MinorLimit) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{80}
}

func (x *MinorLimit) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *MinorLimit) GetHideGameVoice() int32 {
	if x != nil {
		return x.HideGameVoice
	}
	return 0
}

func (x *MinorLimit) GetHideFriendRank() int32 {
	if x != nil {
		return x.HideFriendRank
	}
	return 0
}

func (x *MinorLimit) GetOrderCurator() *OrderCurator {
	if x != nil {
		return x.OrderCurator
	}
	return nil
}

type OrderCurator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Need int32  `protobuf:"varint,2,opt,name=need,proto3" json:"need,omitempty"` //1要弹
}

func (x *OrderCurator) Reset() {
	*x = OrderCurator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCurator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCurator) ProtoMessage() {}

func (x *OrderCurator) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCurator.ProtoReflect.Descriptor instead.
func (*OrderCurator) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{81}
}

func (x *OrderCurator) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *OrderCurator) GetNeed() int32 {
	if x != nil {
		return x.Need
	}
	return 0
}

type FlagsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisitorFlag                       int32 `protobuf:"varint,1,opt,name=visitor_flag,json=visitorFlag,proto3" json:"visitor_flag,omitempty"`
	DeleteArrayOes                    int32 `protobuf:"varint,2,opt,name=delete_array_oes,json=deleteArrayOes,proto3" json:"delete_array_oes,omitempty"`
	FirstBloodSoundEffect             int32 `protobuf:"varint,3,opt,name=first_blood_sound_effect,json=firstBloodSoundEffect,proto3" json:"first_blood_sound_effect,omitempty"` //1是新音效，0默认音效
	OpenWeddingListAnim               int32 `protobuf:"varint,4,opt,name=open_wedding_list_anim,json=openWeddingListAnim,proto3" json:"open_wedding_list_anim,omitempty"`       // 是否开启教堂婚礼列表动画
	TcpPushStash                      int32 `protobuf:"varint,5,opt,name=tcp_push_stash,json=tcpPushStash,proto3" json:"tcp_push_stash,omitempty"`                              //是否开启暂存
	OpenGotoUnityEndless              int32 `protobuf:"varint,6,opt,name=open_goto_unity_endless,json=openGotoUnityEndless,proto3" json:"open_goto_unity_endless,omitempty"`
	OldSingleGameSettle               int32 `protobuf:"varint,7,opt,name=old_single_game_settle,json=oldSingleGameSettle,proto3" json:"old_single_game_settle,omitempty"`
	SgEndUiFlag                       int32 `protobuf:"varint,8,opt,name=sg_end_ui_flag,json=sgEndUiFlag,proto3" json:"sg_end_ui_flag,omitempty"`
	SigmobDelay                       int32 `protobuf:"varint,9,opt,name=sigmob_delay,json=sigmobDelay,proto3" json:"sigmob_delay,omitempty"`
	CloseOffScreenRendering           int32 `protobuf:"varint,10,opt,name=close_off_screen_rendering,json=closeOffScreenRendering,proto3" json:"close_off_screen_rendering,omitempty"`
	MemoryDotDelay                    int32 `protobuf:"varint,11,opt,name=memory_dot_delay,json=memoryDotDelay,proto3" json:"memory_dot_delay,omitempty"`
	GlCheckAppState                   int32 `protobuf:"varint,12,opt,name=gl_check_app_state,json=glCheckAppState,proto3" json:"gl_check_app_state,omitempty"`
	IosOptimizeHomeSkinFlag           int32 `protobuf:"varint,13,opt,name=ios_optimize_home_skin_flag,json=iosOptimizeHomeSkinFlag,proto3" json:"ios_optimize_home_skin_flag,omitempty"`
	ChannelSocialHuaweiState          int32 `protobuf:"varint,14,opt,name=channel_social_huawei_state,json=channelSocialHuaweiState,proto3" json:"channel_social_huawei_state,omitempty"`
	ChannelSocialOppoState            int32 `protobuf:"varint,15,opt,name=channel_social_oppo_state,json=channelSocialOppoState,proto3" json:"channel_social_oppo_state,omitempty"`
	ChannelSocialVivoState            int32 `protobuf:"varint,16,opt,name=channel_social_vivo_state,json=channelSocialVivoState,proto3" json:"channel_social_vivo_state,omitempty"`
	NewImageChooser                   int32 `protobuf:"varint,17,opt,name=new_image_chooser,json=newImageChooser,proto3" json:"new_image_chooser,omitempty"`
	CloseNativeOperatorFlag           int32 `protobuf:"varint,18,opt,name=close_native_operator_flag,json=closeNativeOperatorFlag,proto3" json:"close_native_operator_flag,omitempty"`
	DownloaderState                   int32 `protobuf:"varint,19,opt,name=downloader_state,json=downloaderState,proto3" json:"downloader_state,omitempty"`
	DownloaderPauseStateV2            int32 `protobuf:"varint,20,opt,name=downloader_pause_state_v2,json=downloaderPauseStateV2,proto3" json:"downloader_pause_state_v2,omitempty"`
	CloseVideoMetalRender             int32 `protobuf:"varint,21,opt,name=close_video_metal_render,json=closeVideoMetalRender,proto3" json:"close_video_metal_render,omitempty"`
	JsbridgeStopHandleSpecialCharater int32 `protobuf:"varint,22,opt,name=jsbridge_stop_handle_special_charater,json=jsbridgeStopHandleSpecialCharater,proto3" json:"jsbridge_stop_handle_special_charater,omitempty"`
	OppoLoginFlag                     int32 `protobuf:"varint,23,opt,name=oppo_login_flag,json=oppoLoginFlag,proto3" json:"oppo_login_flag,omitempty"`
	OppoLoginRetryCount               int32 `protobuf:"varint,24,opt,name=oppo_login_retry_count,json=oppoLoginRetryCount,proto3" json:"oppo_login_retry_count,omitempty"`
	EnableWebveiwCopyFileToTemp       int32 `protobuf:"varint,25,opt,name=enable_webveiw_copy_file_to_temp,json=enableWebveiwCopyFileToTemp,proto3" json:"enable_webveiw_copy_file_to_temp,omitempty"`
	OpenGameProfiler                  int32 `protobuf:"varint,26,opt,name=open_game_profiler,json=openGameProfiler,proto3" json:"open_game_profiler,omitempty"`
	DisableInvisibleMemoryReclamation int32 `protobuf:"varint,27,opt,name=disable_invisible_memory_reclamation,json=disableInvisibleMemoryReclamation,proto3" json:"disable_invisible_memory_reclamation,omitempty"`
	YybTobidAdSwitch                  int32 `protobuf:"varint,28,opt,name=yyb_tobid_ad_switch,json=yybTobidAdSwitch,proto3" json:"yyb_tobid_ad_switch,omitempty"`
	NotShowIdfa                       int32 `protobuf:"varint,29,opt,name=not_show_idfa,json=notShowIdfa,proto3" json:"not_show_idfa,omitempty"`
	SilenceDownload                   int32 `protobuf:"varint,30,opt,name=silence_download,json=silenceDownload,proto3" json:"silence_download,omitempty"`
	ChatBackup                        int32 `protobuf:"varint,31,opt,name=chat_backup,json=chatBackup,proto3" json:"chat_backup,omitempty"`                                                    // 聊天备份, 默认0为不备份
	UnityEndlessV2                    int32 `protobuf:"varint,32,opt,name=unity_endless_v2,json=unityEndlessV2,proto3" json:"unity_endless_v2,omitempty"`                                      // 是否开启复刻unity无尽
	NewPayApi                         int32 `protobuf:"varint,33,opt,name=new_pay_api,json=newPayApi,proto3" json:"new_pay_api,omitempty"`                                                     // unity是否使用新支付接口
	OpenCertifyGuideV2                int32 `protobuf:"varint,34,opt,name=open_certify_guide_v2,json=openCertifyGuideV2,proto3" json:"open_certify_guide_v2,omitempty"`                        // 是否开启实名认证 & 新手引导v2
	OpenEndlessSpringBgm              int32 `protobuf:"varint,35,opt,name=open_endless_spring_bgm,json=openEndlessSpringBgm,proto3" json:"open_endless_spring_bgm,omitempty"`                  // 是否开启无尽春节背景音乐
	OpenTeamgameSpringBgm             int32 `protobuf:"varint,36,opt,name=open_teamgame_spring_bgm,json=openTeamgameSpringBgm,proto3" json:"open_teamgame_spring_bgm,omitempty"`               // 是否开启团战春节背景音乐
	OpenTeamendlessSpringBgm          int32 `protobuf:"varint,37,opt,name=open_teamendless_spring_bgm,json=openTeamendlessSpringBgm,proto3" json:"open_teamendless_spring_bgm,omitempty"`      // 是否开启多人无尽春节背景音乐
	OpenEndlessAdaptLowDevice         int32 `protobuf:"varint,38,opt,name=open_endless_adapt_low_device,json=openEndlessAdaptLowDevice,proto3" json:"open_endless_adapt_low_device,omitempty"` // 是否开启适配低端设备
	OpenUnityVoiceRoom                int32 `protobuf:"varint,39,opt,name=open_unity_voice_room,json=openUnityVoiceRoom,proto3" json:"open_unity_voice_room,omitempty"`                        // 是否开启unity语音房
	UseTobidAd                        int32 `protobuf:"varint,40,opt,name=use_tobid_ad,json=useTobidAd,proto3" json:"use_tobid_ad,omitempty"`                                                  // ios双聚合广告选择开关
	OpenSnakeAreaToast                int32 `protobuf:"varint,41,opt,name=open_snake_area_toast,json=openSnakeAreaToast,proto3" json:"open_snake_area_toast,omitempty"`                        // 游戏内提示地域榜弹窗实验
	GiftAnimSingleFlag                int32 `protobuf:"varint,42,opt,name=gift_anim_single_flag,json=giftAnimSingleFlag,proto3" json:"gift_anim_single_flag,omitempty"`                        // 礼物动效 0：同时播放多个 1：同时只能播放一个
	JoinSnakeAreaTeam                 int32 `protobuf:"varint,43,opt,name=join_snake_area_team,json=joinSnakeAreaTeam,proto3" json:"join_snake_area_team,omitempty"`                           // 今天是否进入过蛇蛇小队
	TeamEndlessNewIcon                int32 `protobuf:"varint,44,opt,name=team_endless_new_icon,json=teamEndlessNewIcon,proto3" json:"team_endless_new_icon,omitempty"`                        // 双人无尽新图标，0：不显示 1：显示
}

func (x *FlagsConfig) Reset() {
	*x = FlagsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagsConfig) ProtoMessage() {}

func (x *FlagsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagsConfig.ProtoReflect.Descriptor instead.
func (*FlagsConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{82}
}

func (x *FlagsConfig) GetVisitorFlag() int32 {
	if x != nil {
		return x.VisitorFlag
	}
	return 0
}

func (x *FlagsConfig) GetDeleteArrayOes() int32 {
	if x != nil {
		return x.DeleteArrayOes
	}
	return 0
}

func (x *FlagsConfig) GetFirstBloodSoundEffect() int32 {
	if x != nil {
		return x.FirstBloodSoundEffect
	}
	return 0
}

func (x *FlagsConfig) GetOpenWeddingListAnim() int32 {
	if x != nil {
		return x.OpenWeddingListAnim
	}
	return 0
}

func (x *FlagsConfig) GetTcpPushStash() int32 {
	if x != nil {
		return x.TcpPushStash
	}
	return 0
}

func (x *FlagsConfig) GetOpenGotoUnityEndless() int32 {
	if x != nil {
		return x.OpenGotoUnityEndless
	}
	return 0
}

func (x *FlagsConfig) GetOldSingleGameSettle() int32 {
	if x != nil {
		return x.OldSingleGameSettle
	}
	return 0
}

func (x *FlagsConfig) GetSgEndUiFlag() int32 {
	if x != nil {
		return x.SgEndUiFlag
	}
	return 0
}

func (x *FlagsConfig) GetSigmobDelay() int32 {
	if x != nil {
		return x.SigmobDelay
	}
	return 0
}

func (x *FlagsConfig) GetCloseOffScreenRendering() int32 {
	if x != nil {
		return x.CloseOffScreenRendering
	}
	return 0
}

func (x *FlagsConfig) GetMemoryDotDelay() int32 {
	if x != nil {
		return x.MemoryDotDelay
	}
	return 0
}

func (x *FlagsConfig) GetGlCheckAppState() int32 {
	if x != nil {
		return x.GlCheckAppState
	}
	return 0
}

func (x *FlagsConfig) GetIosOptimizeHomeSkinFlag() int32 {
	if x != nil {
		return x.IosOptimizeHomeSkinFlag
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialHuaweiState() int32 {
	if x != nil {
		return x.ChannelSocialHuaweiState
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialOppoState() int32 {
	if x != nil {
		return x.ChannelSocialOppoState
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialVivoState() int32 {
	if x != nil {
		return x.ChannelSocialVivoState
	}
	return 0
}

func (x *FlagsConfig) GetNewImageChooser() int32 {
	if x != nil {
		return x.NewImageChooser
	}
	return 0
}

func (x *FlagsConfig) GetCloseNativeOperatorFlag() int32 {
	if x != nil {
		return x.CloseNativeOperatorFlag
	}
	return 0
}

func (x *FlagsConfig) GetDownloaderState() int32 {
	if x != nil {
		return x.DownloaderState
	}
	return 0
}

func (x *FlagsConfig) GetDownloaderPauseStateV2() int32 {
	if x != nil {
		return x.DownloaderPauseStateV2
	}
	return 0
}

func (x *FlagsConfig) GetCloseVideoMetalRender() int32 {
	if x != nil {
		return x.CloseVideoMetalRender
	}
	return 0
}

func (x *FlagsConfig) GetJsbridgeStopHandleSpecialCharater() int32 {
	if x != nil {
		return x.JsbridgeStopHandleSpecialCharater
	}
	return 0
}

func (x *FlagsConfig) GetOppoLoginFlag() int32 {
	if x != nil {
		return x.OppoLoginFlag
	}
	return 0
}

func (x *FlagsConfig) GetOppoLoginRetryCount() int32 {
	if x != nil {
		return x.OppoLoginRetryCount
	}
	return 0
}

func (x *FlagsConfig) GetEnableWebveiwCopyFileToTemp() int32 {
	if x != nil {
		return x.EnableWebveiwCopyFileToTemp
	}
	return 0
}

func (x *FlagsConfig) GetOpenGameProfiler() int32 {
	if x != nil {
		return x.OpenGameProfiler
	}
	return 0
}

func (x *FlagsConfig) GetDisableInvisibleMemoryReclamation() int32 {
	if x != nil {
		return x.DisableInvisibleMemoryReclamation
	}
	return 0
}

func (x *FlagsConfig) GetYybTobidAdSwitch() int32 {
	if x != nil {
		return x.YybTobidAdSwitch
	}
	return 0
}

func (x *FlagsConfig) GetNotShowIdfa() int32 {
	if x != nil {
		return x.NotShowIdfa
	}
	return 0
}

func (x *FlagsConfig) GetSilenceDownload() int32 {
	if x != nil {
		return x.SilenceDownload
	}
	return 0
}

func (x *FlagsConfig) GetChatBackup() int32 {
	if x != nil {
		return x.ChatBackup
	}
	return 0
}

func (x *FlagsConfig) GetUnityEndlessV2() int32 {
	if x != nil {
		return x.UnityEndlessV2
	}
	return 0
}

func (x *FlagsConfig) GetNewPayApi() int32 {
	if x != nil {
		return x.NewPayApi
	}
	return 0
}

func (x *FlagsConfig) GetOpenCertifyGuideV2() int32 {
	if x != nil {
		return x.OpenCertifyGuideV2
	}
	return 0
}

func (x *FlagsConfig) GetOpenEndlessSpringBgm() int32 {
	if x != nil {
		return x.OpenEndlessSpringBgm
	}
	return 0
}

func (x *FlagsConfig) GetOpenTeamgameSpringBgm() int32 {
	if x != nil {
		return x.OpenTeamgameSpringBgm
	}
	return 0
}

func (x *FlagsConfig) GetOpenTeamendlessSpringBgm() int32 {
	if x != nil {
		return x.OpenTeamendlessSpringBgm
	}
	return 0
}

func (x *FlagsConfig) GetOpenEndlessAdaptLowDevice() int32 {
	if x != nil {
		return x.OpenEndlessAdaptLowDevice
	}
	return 0
}

func (x *FlagsConfig) GetOpenUnityVoiceRoom() int32 {
	if x != nil {
		return x.OpenUnityVoiceRoom
	}
	return 0
}

func (x *FlagsConfig) GetUseTobidAd() int32 {
	if x != nil {
		return x.UseTobidAd
	}
	return 0
}

func (x *FlagsConfig) GetOpenSnakeAreaToast() int32 {
	if x != nil {
		return x.OpenSnakeAreaToast
	}
	return 0
}

func (x *FlagsConfig) GetGiftAnimSingleFlag() int32 {
	if x != nil {
		return x.GiftAnimSingleFlag
	}
	return 0
}

func (x *FlagsConfig) GetJoinSnakeAreaTeam() int32 {
	if x != nil {
		return x.JoinSnakeAreaTeam
	}
	return 0
}

func (x *FlagsConfig) GetTeamEndlessNewIcon() int32 {
	if x != nil {
		return x.TeamEndlessNewIcon
	}
	return 0
}

type FeedbackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	RegisterDays int32  `protobuf:"varint,3,opt,name=register_days,json=registerDays,proto3" json:"register_days,omitempty"`
	PlayCount    int32  `protobuf:"varint,4,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`
	Score        int32  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Limit        int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FeedbackConfig) Reset() {
	*x = FeedbackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackConfig) ProtoMessage() {}

func (x *FeedbackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackConfig.ProtoReflect.Descriptor instead.
func (*FeedbackConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{83}
}

func (x *FeedbackConfig) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *FeedbackConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FeedbackConfig) GetRegisterDays() int32 {
	if x != nil {
		return x.RegisterDays
	}
	return 0
}

func (x *FeedbackConfig) GetPlayCount() int32 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *FeedbackConfig) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FeedbackConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SettingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMultiTrans    int32             `protobuf:"varint,1,opt,name=game_multi_trans,json=gameMultiTrans,proto3" json:"game_multi_trans,omitempty"`
	EnableVolc        bool              `protobuf:"varint,2,opt,name=enable_volc,json=enableVolc,proto3" json:"enable_volc,omitempty"`
	EnableKoom        bool              `protobuf:"varint,3,opt,name=enable_koom,json=enableKoom,proto3" json:"enable_koom,omitempty"`
	NativeCrashReport bool              `protobuf:"varint,4,opt,name=native_crash_report,json=nativeCrashReport,proto3" json:"native_crash_report,omitempty"`
	DocVersion        *DocVersion       `protobuf:"bytes,5,opt,name=doc_version,json=docVersion,proto3" json:"doc_version,omitempty"`
	NetworkCheck      *NetworkCheck     `protobuf:"bytes,6,opt,name=network_check,json=networkCheck,proto3" json:"network_check,omitempty"`
	Prometheus        *Prometheus       `protobuf:"bytes,7,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	OkhttpDispatcher  *OkhttpDispatcher `protobuf:"bytes,8,opt,name=okhttp_dispatcher,json=okhttpDispatcher,proto3" json:"okhttp_dispatcher,omitempty"`
	MemSwitch         *MemSwitch        `protobuf:"bytes,9,opt,name=mem_switch,json=memSwitch,proto3" json:"mem_switch,omitempty"`
}

func (x *SettingConfig) Reset() {
	*x = SettingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingConfig) ProtoMessage() {}

func (x *SettingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingConfig.ProtoReflect.Descriptor instead.
func (*SettingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{84}
}

func (x *SettingConfig) GetGameMultiTrans() int32 {
	if x != nil {
		return x.GameMultiTrans
	}
	return 0
}

func (x *SettingConfig) GetEnableVolc() bool {
	if x != nil {
		return x.EnableVolc
	}
	return false
}

func (x *SettingConfig) GetEnableKoom() bool {
	if x != nil {
		return x.EnableKoom
	}
	return false
}

func (x *SettingConfig) GetNativeCrashReport() bool {
	if x != nil {
		return x.NativeCrashReport
	}
	return false
}

func (x *SettingConfig) GetDocVersion() *DocVersion {
	if x != nil {
		return x.DocVersion
	}
	return nil
}

func (x *SettingConfig) GetNetworkCheck() *NetworkCheck {
	if x != nil {
		return x.NetworkCheck
	}
	return nil
}

func (x *SettingConfig) GetPrometheus() *Prometheus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *SettingConfig) GetOkhttpDispatcher() *OkhttpDispatcher {
	if x != nil {
		return x.OkhttpDispatcher
	}
	return nil
}

func (x *SettingConfig) GetMemSwitch() *MemSwitch {
	if x != nil {
		return x.MemSwitch
	}
	return nil
}

// 用户协议、隐私政策、未成年声明
type DocVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agreement       string `protobuf:"bytes,1,opt,name=agreement,proto3" json:"agreement,omitempty"`
	Privacy         string `protobuf:"bytes,2,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Announce        string `protobuf:"bytes,3,opt,name=announce,proto3" json:"announce,omitempty"`
	InfoSharingList string `protobuf:"bytes,4,opt,name=info_sharing_list,json=infoSharingList,proto3" json:"info_sharing_list,omitempty"`
	PersonalInfo    string `protobuf:"bytes,5,opt,name=personal_info,json=personalInfo,proto3" json:"personal_info,omitempty"`
}

func (x *DocVersion) Reset() {
	*x = DocVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocVersion) ProtoMessage() {}

func (x *DocVersion) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocVersion.ProtoReflect.Descriptor instead.
func (*DocVersion) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{85}
}

func (x *DocVersion) GetAgreement() string {
	if x != nil {
		return x.Agreement
	}
	return ""
}

func (x *DocVersion) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *DocVersion) GetAnnounce() string {
	if x != nil {
		return x.Announce
	}
	return ""
}

func (x *DocVersion) GetInfoSharingList() string {
	if x != nil {
		return x.InfoSharingList
	}
	return ""
}

func (x *DocVersion) GetPersonalInfo() string {
	if x != nil {
		return x.PersonalInfo
	}
	return ""
}

type NetworkCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Target   string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Open     int32  `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"` //1开0隐藏
}

func (x *NetworkCheck) Reset() {
	*x = NetworkCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCheck) ProtoMessage() {}

func (x *NetworkCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCheck.ProtoReflect.Descriptor instead.
func (*NetworkCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{86}
}

func (x *NetworkCheck) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *NetworkCheck) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *NetworkCheck) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

type Prometheus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch              int32 `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	BitmapMemThreshold int32 `protobuf:"varint,2,opt,name=bitmap_mem_threshold,json=bitmapMemThreshold,proto3" json:"bitmap_mem_threshold,omitempty"`
	Enabled            bool  `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Prometheus) Reset() {
	*x = Prometheus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prometheus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prometheus) ProtoMessage() {}

func (x *Prometheus) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prometheus.ProtoReflect.Descriptor instead.
func (*Prometheus) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{87}
}

func (x *Prometheus) GetBatch() int32 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *Prometheus) GetBitmapMemThreshold() int32 {
	if x != nil {
		return x.BitmapMemThreshold
	}
	return 0
}

func (x *Prometheus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type OkhttpDispatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueCapacity int32 `protobuf:"varint,1,opt,name=queue_capacity,json=queueCapacity,proto3" json:"queue_capacity,omitempty"`
	KeepLiveTime  int32 `protobuf:"varint,2,opt,name=keep_live_time,json=keepLiveTime,proto3" json:"keep_live_time,omitempty"`
}

func (x *OkhttpDispatcher) Reset() {
	*x = OkhttpDispatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkhttpDispatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkhttpDispatcher) ProtoMessage() {}

func (x *OkhttpDispatcher) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkhttpDispatcher.ProtoReflect.Descriptor instead.
func (*OkhttpDispatcher) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{88}
}

func (x *OkhttpDispatcher) GetQueueCapacity() int32 {
	if x != nil {
		return x.QueueCapacity
	}
	return 0
}

func (x *OkhttpDispatcher) GetKeepLiveTime() int32 {
	if x != nil {
		return x.KeepLiveTime
	}
	return 0
}

type MemSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rgb565Enabled       bool    `protobuf:"varint,1,opt,name=rgb565_enabled,json=rgb565Enabled,proto3" json:"rgb565_enabled,omitempty"`
	Rgb565Transform     bool    `protobuf:"varint,2,opt,name=rgb565_transform,json=rgb565Transform,proto3" json:"rgb565_transform,omitempty"`
	ImageBgOpt          bool    `protobuf:"varint,3,opt,name=image_bg_opt,json=imageBgOpt,proto3" json:"image_bg_opt,omitempty"`
	AnimReportEnabled   bool    `protobuf:"varint,4,opt,name=anim_report_enabled,json=animReportEnabled,proto3" json:"anim_report_enabled,omitempty"`
	FixStartPageMemLeak bool    `protobuf:"varint,5,opt,name=fix_start_page_mem_leak,json=fixStartPageMemLeak,proto3" json:"fix_start_page_mem_leak,omitempty"`
	AnimSampleRate      float64 `protobuf:"fixed64,6,opt,name=anim_sample_rate,json=animSampleRate,proto3" json:"anim_sample_rate,omitempty"`
}

func (x *MemSwitch) Reset() {
	*x = MemSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemSwitch) ProtoMessage() {}

func (x *MemSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemSwitch.ProtoReflect.Descriptor instead.
func (*MemSwitch) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{89}
}

func (x *MemSwitch) GetRgb565Enabled() bool {
	if x != nil {
		return x.Rgb565Enabled
	}
	return false
}

func (x *MemSwitch) GetRgb565Transform() bool {
	if x != nil {
		return x.Rgb565Transform
	}
	return false
}

func (x *MemSwitch) GetImageBgOpt() bool {
	if x != nil {
		return x.ImageBgOpt
	}
	return false
}

func (x *MemSwitch) GetAnimReportEnabled() bool {
	if x != nil {
		return x.AnimReportEnabled
	}
	return false
}

func (x *MemSwitch) GetFixStartPageMemLeak() bool {
	if x != nil {
		return x.FixStartPageMemLeak
	}
	return false
}

func (x *MemSwitch) GetAnimSampleRate() float64 {
	if x != nil {
		return x.AnimSampleRate
	}
	return 0
}

type BindConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgUrl    string `protobuf:"bytes,1,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`
	CanClose int32  `protobuf:"varint,2,opt,name=can_close,json=canClose,proto3" json:"can_close,omitempty"`
}

func (x *BindConfig) Reset() {
	*x = BindConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindConfig) ProtoMessage() {}

func (x *BindConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindConfig.ProtoReflect.Descriptor instead.
func (*BindConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{90}
}

func (x *BindConfig) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *BindConfig) GetCanClose() int32 {
	if x != nil {
		return x.CanClose
	}
	return 0
}

type RenamePopupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewbieClub      *NewbieClub      `protobuf:"bytes,1,opt,name=newbie_club,json=newbieClub,proto3" json:"newbie_club,omitempty"`
	QualifyingMatch *QualifyingMatch `protobuf:"bytes,2,opt,name=qualifying_match,json=qualifyingMatch,proto3" json:"qualifying_match,omitempty"`
}

func (x *RenamePopupRule) Reset() {
	*x = RenamePopupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenamePopupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenamePopupRule) ProtoMessage() {}

func (x *RenamePopupRule) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenamePopupRule.ProtoReflect.Descriptor instead.
func (*RenamePopupRule) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{91}
}

func (x *RenamePopupRule) GetNewbieClub() *NewbieClub {
	if x != nil {
		return x.NewbieClub
	}
	return nil
}

func (x *RenamePopupRule) GetQualifyingMatch() *QualifyingMatch {
	if x != nil {
		return x.QualifyingMatch
	}
	return nil
}

type QualifyingMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QualifyingMatch) Reset() {
	*x = QualifyingMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingMatch) ProtoMessage() {}

func (x *QualifyingMatch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingMatch.ProtoReflect.Descriptor instead.
func (*QualifyingMatch) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{92}
}

func (x *QualifyingMatch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type NewbieClub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Limit    int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *NewbieClub) Reset() {
	*x = NewbieClub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieClub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieClub) ProtoMessage() {}

func (x *NewbieClub) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieClub.ProtoReflect.Descriptor instead.
func (*NewbieClub) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{93}
}

func (x *NewbieClub) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *NewbieClub) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GameEndSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeUrl string `protobuf:"bytes,1,opt,name=notice_url,json=noticeUrl,proto3" json:"notice_url,omitempty"` //气泡图
	Link      string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`                            //跳转库
}

func (x *GameEndSkin) Reset() {
	*x = GameEndSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndSkin) ProtoMessage() {}

func (x *GameEndSkin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndSkin.ProtoReflect.Descriptor instead.
func (*GameEndSkin) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{94}
}

func (x *GameEndSkin) GetNoticeUrl() string {
	if x != nil {
		return x.NoticeUrl
	}
	return ""
}

func (x *GameEndSkin) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type DeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model        string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`               //手机型号(MODEL)
	Product      string `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`           //当前手机品牌(PRODUCT)
	Brand        string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`               //手机厂商(BOARD)
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"` //设备制造商(MANUFACTURER)
}

func (x *DeviceConfig) Reset() {
	*x = DeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfig) ProtoMessage() {}

func (x *DeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfig.ProtoReflect.Descriptor instead.
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{95}
}

func (x *DeviceConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceConfig) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *DeviceConfig) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *DeviceConfig) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

type AntiAddiction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notify         *Notify        `protobuf:"bytes,1,opt,name=notify,proto3" json:"notify,omitempty"`
	MinorNotify    *MinorNotify   `protobuf:"bytes,2,opt,name=minor_notify,json=minorNotify,proto3" json:"minor_notify,omitempty"` // 14岁以上未成年防沉迷配置
	SafeGameNotify string         `protobuf:"bytes,3,opt,name=safe_game_notify,json=safeGameNotify,proto3" json:"safe_game_notify,omitempty"`
	PayNotify      *PayNotify     `protobuf:"bytes,4,opt,name=pay_notify,json=payNotify,proto3" json:"pay_notify,omitempty"`
	SocialDesc     *SocialDesc    `protobuf:"bytes,5,opt,name=social_desc,json=socialDesc,proto3" json:"social_desc,omitempty"`
	IdentityAge    *IdentityAge   `protobuf:"bytes,6,opt,name=identity_age,json=identityAge,proto3" json:"identity_age,omitempty"`
	CertifyNotify  *CertifyNotify `protobuf:"bytes,7,opt,name=certify_notify,json=certifyNotify,proto3" json:"certify_notify,omitempty"`
	CertifyUrl     string         `protobuf:"bytes,8,opt,name=certify_url,json=certifyUrl,proto3" json:"certify_url,omitempty"`
	InfantNotify   *MinorNotify   `protobuf:"bytes,9,opt,name=infant_notify,json=infantNotify,proto3" json:"infant_notify,omitempty"` // 12岁以下防沉迷配置，已废弃
	NeedCertify    int32          `protobuf:"varint,10,opt,name=need_certify,json=needCertify,proto3" json:"need_certify,omitempty"`  // 实名开关，已废弃
}

func (x *AntiAddiction) Reset() {
	*x = AntiAddiction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiAddiction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiAddiction) ProtoMessage() {}

func (x *AntiAddiction) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiAddiction.ProtoReflect.Descriptor instead.
func (*AntiAddiction) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{96}
}

func (x *AntiAddiction) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *AntiAddiction) GetMinorNotify() *MinorNotify {
	if x != nil {
		return x.MinorNotify
	}
	return nil
}

func (x *AntiAddiction) GetSafeGameNotify() string {
	if x != nil {
		return x.SafeGameNotify
	}
	return ""
}

func (x *AntiAddiction) GetPayNotify() *PayNotify {
	if x != nil {
		return x.PayNotify
	}
	return nil
}

func (x *AntiAddiction) GetSocialDesc() *SocialDesc {
	if x != nil {
		return x.SocialDesc
	}
	return nil
}

func (x *AntiAddiction) GetIdentityAge() *IdentityAge {
	if x != nil {
		return x.IdentityAge
	}
	return nil
}

func (x *AntiAddiction) GetCertifyNotify() *CertifyNotify {
	if x != nil {
		return x.CertifyNotify
	}
	return nil
}

func (x *AntiAddiction) GetCertifyUrl() string {
	if x != nil {
		return x.CertifyUrl
	}
	return ""
}

func (x *AntiAddiction) GetInfantNotify() *MinorNotify {
	if x != nil {
		return x.InfantNotify
	}
	return nil
}

func (x *AntiAddiction) GetNeedCertify() int32 {
	if x != nil {
		return x.NeedCertify
	}
	return 0
}

type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uncertified []*CertifyGameConfig `protobuf:"bytes,1,rep,name=uncertified,proto3" json:"uncertified,omitempty"`
	Minor       []*CertifyGameConfig `protobuf:"bytes,2,rep,name=minor,proto3" json:"minor,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{97}
}

func (x *Notify) GetUncertified() []*CertifyGameConfig {
	if x != nil {
		return x.Uncertified
	}
	return nil
}

func (x *Notify) GetMinor() []*CertifyGameConfig {
	if x != nil {
		return x.Minor
	}
	return nil
}

// *
// game_time : 10800
// msg : 【健康系统】您今日的累计游戏时间已经超过3小时，为了您的健康，请您下线休息，做适当身体活动，注意劳逸结合。
type CertifyGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime     int32  `protobuf:"varint,1,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	Msg          string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	IntervalTime int32  `protobuf:"varint,3,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`
}

func (x *CertifyGameConfig) Reset() {
	*x = CertifyGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyGameConfig) ProtoMessage() {}

func (x *CertifyGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyGameConfig.ProtoReflect.Descriptor instead.
func (*CertifyGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{98}
}

func (x *CertifyGameConfig) GetGameTime() int32 {
	if x != nil {
		return x.GameTime
	}
	return 0
}

func (x *CertifyGameConfig) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CertifyGameConfig) GetIntervalTime() int32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

// *
// "login_text": "为空则没有宵禁","begin": "22:00","end": "08:00",
//
//	"workday_active": 3600,"holiday_active": 10800,"active_text": "超时提醒",
//	"active_notice": "剩余活跃时间提醒{remain}占位","notice_interval": 1800
type MinorNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginText      string `protobuf:"bytes,1,opt,name=login_text,json=loginText,proto3" json:"login_text,omitempty"`
	Begin          string `protobuf:"bytes,2,opt,name=begin,proto3" json:"begin,omitempty"`
	End            string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	WorkdayActive  int32  `protobuf:"varint,4,opt,name=workday_active,json=workdayActive,proto3" json:"workday_active,omitempty"`
	HolidayActive  int32  `protobuf:"varint,5,opt,name=holiday_active,json=holidayActive,proto3" json:"holiday_active,omitempty"`
	ActiveText     string `protobuf:"bytes,6,opt,name=active_text,json=activeText,proto3" json:"active_text,omitempty"`
	ActiveNotice   string `protobuf:"bytes,7,opt,name=active_notice,json=activeNotice,proto3" json:"active_notice,omitempty"`
	NoticeInterval int32  `protobuf:"varint,8,opt,name=notice_interval,json=noticeInterval,proto3" json:"notice_interval,omitempty"`
	AddictedFlag   int32  `protobuf:"varint,9,opt,name=addicted_flag,json=addictedFlag,proto3" json:"addicted_flag,omitempty"` //防沉迷开关 0关闭，1打开
	Title          string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ActiveTime     int32  `protobuf:"varint,11,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
}

func (x *MinorNotify) Reset() {
	*x = MinorNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinorNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinorNotify) ProtoMessage() {}

func (x *MinorNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinorNotify.ProtoReflect.Descriptor instead.
func (*MinorNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{99}
}

func (x *MinorNotify) GetLoginText() string {
	if x != nil {
		return x.LoginText
	}
	return ""
}

func (x *MinorNotify) GetBegin() string {
	if x != nil {
		return x.Begin
	}
	return ""
}

func (x *MinorNotify) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *MinorNotify) GetWorkdayActive() int32 {
	if x != nil {
		return x.WorkdayActive
	}
	return 0
}

func (x *MinorNotify) GetHolidayActive() int32 {
	if x != nil {
		return x.HolidayActive
	}
	return 0
}

func (x *MinorNotify) GetActiveText() string {
	if x != nil {
		return x.ActiveText
	}
	return ""
}

func (x *MinorNotify) GetActiveNotice() string {
	if x != nil {
		return x.ActiveNotice
	}
	return ""
}

func (x *MinorNotify) GetNoticeInterval() int32 {
	if x != nil {
		return x.NoticeInterval
	}
	return 0
}

func (x *MinorNotify) GetAddictedFlag() int32 {
	if x != nil {
		return x.AddictedFlag
	}
	return 0
}

func (x *MinorNotify) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MinorNotify) GetActiveTime() int32 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

type PayNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minor       string `protobuf:"bytes,1,opt,name=minor,proto3" json:"minor,omitempty"`
	CertifyFlag int32  `protobuf:"varint,2,opt,name=certify_flag,json=certifyFlag,proto3" json:"certify_flag,omitempty"` //0不弹窗，1弹窗可充值，2弹窗不可充值
}

func (x *PayNotify) Reset() {
	*x = PayNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotify) ProtoMessage() {}

func (x *PayNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotify.ProtoReflect.Descriptor instead.
func (*PayNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{100}
}

func (x *PayNotify) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

func (x *PayNotify) GetCertifyFlag() int32 {
	if x != nil {
		return x.CertifyFlag
	}
	return 0
}

type SocialDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast string `protobuf:"bytes,1,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	World     string `protobuf:"bytes,2,opt,name=world,proto3" json:"world,omitempty"`
	Friend    string `protobuf:"bytes,3,opt,name=friend,proto3" json:"friend,omitempty"`
	Clan      string `protobuf:"bytes,4,opt,name=clan,proto3" json:"clan,omitempty"`
}

func (x *SocialDesc) Reset() {
	*x = SocialDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialDesc) ProtoMessage() {}

func (x *SocialDesc) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialDesc.ProtoReflect.Descriptor instead.
func (*SocialDesc) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{101}
}

func (x *SocialDesc) GetBroadcast() string {
	if x != nil {
		return x.Broadcast
	}
	return ""
}

func (x *SocialDesc) GetWorld() string {
	if x != nil {
		return x.World
	}
	return ""
}

func (x *SocialDesc) GetFriend() string {
	if x != nil {
		return x.Friend
	}
	return ""
}

func (x *SocialDesc) GetClan() string {
	if x != nil {
		return x.Clan
	}
	return ""
}

type IdentityAge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minor  int32 `protobuf:"varint,1,opt,name=minor,proto3" json:"minor,omitempty"`
	Infant int32 `protobuf:"varint,2,opt,name=infant,proto3" json:"infant,omitempty"`
}

func (x *IdentityAge) Reset() {
	*x = IdentityAge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAge) ProtoMessage() {}

func (x *IdentityAge) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAge.ProtoReflect.Descriptor instead.
func (*IdentityAge) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{102}
}

func (x *IdentityAge) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *IdentityAge) GetInfant() int32 {
	if x != nil {
		return x.Infant
	}
	return 0
}

type CertifyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveLimit  int32    `protobuf:"varint,1,opt,name=active_limit,json=activeLimit,proto3" json:"active_limit,omitempty"`
	Interval     int32    `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Limit        int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Flag         int32    `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"` // 0不弹，1弹窗可关，2弹窗不可关
	IgnoreMarket []string `protobuf:"bytes,5,rep,name=ignore_market,json=ignoreMarket,proto3" json:"ignore_market,omitempty"`
	ForceMarket  []string `protobuf:"bytes,6,rep,name=force_market,json=forceMarket,proto3" json:"force_market,omitempty"`
}

func (x *CertifyNotify) Reset() {
	*x = CertifyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyNotify) ProtoMessage() {}

func (x *CertifyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyNotify.ProtoReflect.Descriptor instead.
func (*CertifyNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{103}
}

func (x *CertifyNotify) GetActiveLimit() int32 {
	if x != nil {
		return x.ActiveLimit
	}
	return 0
}

func (x *CertifyNotify) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *CertifyNotify) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CertifyNotify) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *CertifyNotify) GetIgnoreMarket() []string {
	if x != nil {
		return x.IgnoreMarket
	}
	return nil
}

func (x *CertifyNotify) GetForceMarket() []string {
	if x != nil {
		return x.ForceMarket
	}
	return nil
}

type IdfaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward     []*config.RewardConfig `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward,omitempty"`
	IosVersion string                 `protobuf:"bytes,2,opt,name=ios_version,json=iosVersion,proto3" json:"ios_version,omitempty"`
	Force      bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	LoginCount int32                  `protobuf:"varint,4,opt,name=login_count,json=loginCount,proto3" json:"login_count,omitempty"`
	FirstPop   int32                  `protobuf:"varint,5,opt,name=first_pop,json=firstPop,proto3" json:"first_pop,omitempty"`
	Interval   int32                  `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *IdfaConfig) Reset() {
	*x = IdfaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdfaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdfaConfig) ProtoMessage() {}

func (x *IdfaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdfaConfig.ProtoReflect.Descriptor instead.
func (*IdfaConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{104}
}

func (x *IdfaConfig) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *IdfaConfig) GetIosVersion() string {
	if x != nil {
		return x.IosVersion
	}
	return ""
}

func (x *IdfaConfig) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *IdfaConfig) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *IdfaConfig) GetFirstPop() int32 {
	if x != nil {
		return x.FirstPop
	}
	return 0
}

func (x *IdfaConfig) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type CommentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score       int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	SwitchState int32 `protobuf:"varint,2,opt,name=switch_state,json=switchState,proto3" json:"switch_state,omitempty"`
}

func (x *CommentConfig) Reset() {
	*x = CommentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentConfig) ProtoMessage() {}

func (x *CommentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentConfig.ProtoReflect.Descriptor instead.
func (*CommentConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{105}
}

func (x *CommentConfig) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CommentConfig) GetSwitchState() int32 {
	if x != nil {
		return x.SwitchState
	}
	return 0
}

type RegisterSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32                  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`                             //1开0关
	Score        int64                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                               //分数条件
	NewUserDay   int32                  `protobuf:"varint,3,opt,name=new_user_day,json=newUserDay,proto3" json:"new_user_day,omitempty"` //注册多少天内算新手
	QaUrl        string                 `protobuf:"bytes,4,opt,name=qa_url,json=qaUrl,proto3" json:"qa_url,omitempty"`                   //问卷链接，需替换 {uid}
	MailTitle    string                 `protobuf:"bytes,5,opt,name=mail_title,json=mailTitle,proto3" json:"mail_title,omitempty"`
	MailContent  string                 `protobuf:"bytes,6,opt,name=mail_content,json=mailContent,proto3" json:"mail_content,omitempty"`
	Reward       []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward,proto3" json:"reward,omitempty"`
	SecretaryMsg string                 `protobuf:"bytes,8,opt,name=secretary_msg,json=secretaryMsg,proto3" json:"secretary_msg,omitempty"`
	SurveyIds    []int32                `protobuf:"varint,9,rep,packed,name=survey_ids,json=surveyIds,proto3" json:"survey_ids,omitempty"`
}

func (x *RegisterSurvey) Reset() {
	*x = RegisterSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSurvey) ProtoMessage() {}

func (x *RegisterSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSurvey.ProtoReflect.Descriptor instead.
func (*RegisterSurvey) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{106}
}

func (x *RegisterSurvey) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *RegisterSurvey) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RegisterSurvey) GetNewUserDay() int32 {
	if x != nil {
		return x.NewUserDay
	}
	return 0
}

func (x *RegisterSurvey) GetQaUrl() string {
	if x != nil {
		return x.QaUrl
	}
	return ""
}

func (x *RegisterSurvey) GetMailTitle() string {
	if x != nil {
		return x.MailTitle
	}
	return ""
}

func (x *RegisterSurvey) GetMailContent() string {
	if x != nil {
		return x.MailContent
	}
	return ""
}

func (x *RegisterSurvey) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *RegisterSurvey) GetSecretaryMsg() string {
	if x != nil {
		return x.SecretaryMsg
	}
	return ""
}

func (x *RegisterSurvey) GetSurveyIds() []int32 {
	if x != nil {
		return x.SurveyIds
	}
	return nil
}

type RecruitPopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch          int32  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`                        //1开0关
	PlayCount       int64  `protobuf:"varint,2,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"` //局数条件
	Score           int64  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                          //分数条件
	QaUrl           string `protobuf:"bytes,4,opt,name=qa_url,json=qaUrl,proto3" json:"qa_url,omitempty"`              //问卷链接，需替换 {uid}
	Id              int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`                                // 期数
	BannerUrl       string `protobuf:"bytes,6,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	ScreenShare     int32  `protobuf:"varint,7,opt,name=screen_share,json=screenShare,proto3" json:"screen_share,omitempty"`
	SecretaryMsg    string `protobuf:"bytes,8,opt,name=secretary_msg,json=secretaryMsg,proto3" json:"secretary_msg,omitempty"`
	UnityBannerLink string `protobuf:"bytes,9,opt,name=unity_banner_link,json=unityBannerLink,proto3" json:"unity_banner_link,omitempty"`
}

func (x *RecruitPopup) Reset() {
	*x = RecruitPopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitPopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitPopup) ProtoMessage() {}

func (x *RecruitPopup) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitPopup.ProtoReflect.Descriptor instead.
func (*RecruitPopup) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{107}
}

func (x *RecruitPopup) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *RecruitPopup) GetPlayCount() int64 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *RecruitPopup) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RecruitPopup) GetQaUrl() string {
	if x != nil {
		return x.QaUrl
	}
	return ""
}

func (x *RecruitPopup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecruitPopup) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *RecruitPopup) GetScreenShare() int32 {
	if x != nil {
		return x.ScreenShare
	}
	return 0
}

func (x *RecruitPopup) GetSecretaryMsg() string {
	if x != nil {
		return x.SecretaryMsg
	}
	return ""
}

func (x *RecruitPopup) GetUnityBannerLink() string {
	if x != nil {
		return x.UnityBannerLink
	}
	return ""
}

// *
//
//	"new_user_config": {
//	    "player_eat_food_rate_change_scope": 200,
//	    "player_eat_food_count_for_increase_node": 10,
//			"eat_food_rate_change_scope": 200,
//	    "eat_food_count_for_increase_node": 10,
//	    "guide_candy_total_count": 100, //新手引导糖果总个数
//	  	"guide_candy_score": 100, //新手引导糖果分数
//	    "free_revive_game_count": 5, //新手无尽前几局每局第一次免费复活
//	  }
type NewUserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerEatFoodRateChangeScope      int32                  `protobuf:"varint,1,opt,name=player_eat_food_rate_change_scope,json=playerEatFoodRateChangeScope,proto3" json:"player_eat_food_rate_change_scope,omitempty"`
	PlayerEatFoodCountForIncreaseNode int32                  `protobuf:"varint,2,opt,name=player_eat_food_count_for_increase_node,json=playerEatFoodCountForIncreaseNode,proto3" json:"player_eat_food_count_for_increase_node,omitempty"`
	EatFoodRateChangeScope            int32                  `protobuf:"varint,3,opt,name=eat_food_rate_change_scope,json=eatFoodRateChangeScope,proto3" json:"eat_food_rate_change_scope,omitempty"`
	EatFoodCountForIncreaseNode       int32                  `protobuf:"varint,4,opt,name=eat_food_count_for_increase_node,json=eatFoodCountForIncreaseNode,proto3" json:"eat_food_count_for_increase_node,omitempty"`
	GuideCandyTotalCount              int32                  `protobuf:"varint,5,opt,name=guide_candy_total_count,json=guideCandyTotalCount,proto3" json:"guide_candy_total_count,omitempty"`
	GuideCandyScore                   int32                  `protobuf:"varint,6,opt,name=guide_candy_score,json=guideCandyScore,proto3" json:"guide_candy_score,omitempty"`
	FreeReviveGameCount               int32                  `protobuf:"varint,7,opt,name=free_revive_game_count,json=freeReviveGameCount,proto3" json:"free_revive_game_count,omitempty"`
	NewbieLoginDays                   int32                  `protobuf:"varint,8,opt,name=newbie_login_days,json=newbieLoginDays,proto3" json:"newbie_login_days,omitempty"`
	NewbieQualifyingCount             int32                  `protobuf:"varint,9,opt,name=newbie_qualifying_count,json=newbieQualifyingCount,proto3" json:"newbie_qualifying_count,omitempty"`
	NewbieEndlessCount                int32                  `protobuf:"varint,10,opt,name=newbie_endless_count,json=newbieEndlessCount,proto3" json:"newbie_endless_count,omitempty"`
	GuideType                         int32                  `protobuf:"varint,11,opt,name=guide_type,json=guideType,proto3" json:"guide_type,omitempty"`
	NewUserImg                        string                 `protobuf:"bytes,12,opt,name=new_user_img,json=newUserImg,proto3" json:"new_user_img,omitempty"`
	OldUserImg                        string                 `protobuf:"bytes,13,opt,name=old_user_img,json=oldUserImg,proto3" json:"old_user_img,omitempty"`
	GuideReward                       []*config.RewardConfig `protobuf:"bytes,14,rep,name=guide_reward,json=guideReward,proto3" json:"guide_reward,omitempty"`
	GuideSkipFlag                     int32                  `protobuf:"varint,15,opt,name=guide_skip_flag,json=guideSkipFlag,proto3" json:"guide_skip_flag,omitempty"` // 0关1开 新手引导流程修改实验开关
}

func (x *NewUserConfig) Reset() {
	*x = NewUserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserConfig) ProtoMessage() {}

func (x *NewUserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserConfig.ProtoReflect.Descriptor instead.
func (*NewUserConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{108}
}

func (x *NewUserConfig) GetPlayerEatFoodRateChangeScope() int32 {
	if x != nil {
		return x.PlayerEatFoodRateChangeScope
	}
	return 0
}

func (x *NewUserConfig) GetPlayerEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.PlayerEatFoodCountForIncreaseNode
	}
	return 0
}

func (x *NewUserConfig) GetEatFoodRateChangeScope() int32 {
	if x != nil {
		return x.EatFoodRateChangeScope
	}
	return 0
}

func (x *NewUserConfig) GetEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.EatFoodCountForIncreaseNode
	}
	return 0
}

func (x *NewUserConfig) GetGuideCandyTotalCount() int32 {
	if x != nil {
		return x.GuideCandyTotalCount
	}
	return 0
}

func (x *NewUserConfig) GetGuideCandyScore() int32 {
	if x != nil {
		return x.GuideCandyScore
	}
	return 0
}

func (x *NewUserConfig) GetFreeReviveGameCount() int32 {
	if x != nil {
		return x.FreeReviveGameCount
	}
	return 0
}

func (x *NewUserConfig) GetNewbieLoginDays() int32 {
	if x != nil {
		return x.NewbieLoginDays
	}
	return 0
}

func (x *NewUserConfig) GetNewbieQualifyingCount() int32 {
	if x != nil {
		return x.NewbieQualifyingCount
	}
	return 0
}

func (x *NewUserConfig) GetNewbieEndlessCount() int32 {
	if x != nil {
		return x.NewbieEndlessCount
	}
	return 0
}

func (x *NewUserConfig) GetGuideType() int32 {
	if x != nil {
		return x.GuideType
	}
	return 0
}

func (x *NewUserConfig) GetNewUserImg() string {
	if x != nil {
		return x.NewUserImg
	}
	return ""
}

func (x *NewUserConfig) GetOldUserImg() string {
	if x != nil {
		return x.OldUserImg
	}
	return ""
}

func (x *NewUserConfig) GetGuideReward() []*config.RewardConfig {
	if x != nil {
		return x.GuideReward
	}
	return nil
}

func (x *NewUserConfig) GetGuideSkipFlag() int32 {
	if x != nil {
		return x.GuideSkipFlag
	}
	return 0
}

// === offline_game_config start ========================================
type ReviveConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdRevive      int32 `protobuf:"varint,1,opt,name=ad_revive,json=adRevive,proto3" json:"ad_revive,omitempty"`
	CardRevive    int32 `protobuf:"varint,2,opt,name=card_revive,json=cardRevive,proto3" json:"card_revive,omitempty"`
	DiamondRevive int32 `protobuf:"varint,3,opt,name=diamond_revive,json=diamondRevive,proto3" json:"diamond_revive,omitempty"`
}

func (x *ReviveConfigItem) Reset() {
	*x = ReviveConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviveConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviveConfigItem) ProtoMessage() {}

func (x *ReviveConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviveConfigItem.ProtoReflect.Descriptor instead.
func (*ReviveConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{109}
}

func (x *ReviveConfigItem) GetAdRevive() int32 {
	if x != nil {
		return x.AdRevive
	}
	return 0
}

func (x *ReviveConfigItem) GetCardRevive() int32 {
	if x != nil {
		return x.CardRevive
	}
	return 0
}

func (x *ReviveConfigItem) GetDiamondRevive() int32 {
	if x != nil {
		return x.DiamondRevive
	}
	return 0
}

type SingleGameAiConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLength      int64   `protobuf:"varint,1,opt,name=start_length,json=startLength,proto3" json:"start_length,omitempty"`
	BorderDisFactor  float64 `protobuf:"fixed64,2,opt,name=border_dis_factor,json=borderDisFactor,proto3" json:"border_dis_factor,omitempty"`
	SnakeDisFactor   float64 `protobuf:"fixed64,3,opt,name=snake_dis_factor,json=snakeDisFactor,proto3" json:"snake_dis_factor,omitempty"`
	WreckDisFactor   float64 `protobuf:"fixed64,4,opt,name=wreck_dis_factor,json=wreckDisFactor,proto3" json:"wreck_dis_factor,omitempty"`
	AiSnakeViewAngle float64 `protobuf:"fixed64,5,opt,name=ai_snake_view_angle,json=aiSnakeViewAngle,proto3" json:"ai_snake_view_angle,omitempty"`
}

func (x *SingleGameAiConfigItem) Reset() {
	*x = SingleGameAiConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleGameAiConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleGameAiConfigItem) ProtoMessage() {}

func (x *SingleGameAiConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleGameAiConfigItem.ProtoReflect.Descriptor instead.
func (*SingleGameAiConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{110}
}

func (x *SingleGameAiConfigItem) GetStartLength() int64 {
	if x != nil {
		return x.StartLength
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetBorderDisFactor() float64 {
	if x != nil {
		return x.BorderDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetSnakeDisFactor() float64 {
	if x != nil {
		return x.SnakeDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetWreckDisFactor() float64 {
	if x != nil {
		return x.WreckDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetAiSnakeViewAngle() float64 {
	if x != nil {
		return x.AiSnakeViewAngle
	}
	return 0
}

type FloaterConfigOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BornLen      []int32 `protobuf:"varint,1,rep,packed,name=born_len,json=bornLen,proto3" json:"born_len,omitempty"`
	BornCount    int32   `protobuf:"varint,2,opt,name=born_count,json=bornCount,proto3" json:"born_count,omitempty"`
	BornCountV2  int32   `protobuf:"varint,3,opt,name=born_count_v2,json=bornCountV2,proto3" json:"born_count_v2,omitempty"`
	BornRadius   int32   `protobuf:"varint,4,opt,name=born_radius,json=bornRadius,proto3" json:"born_radius,omitempty"`
	FloaterScore int32   `protobuf:"varint,5,opt,name=floater_score,json=floaterScore,proto3" json:"floater_score,omitempty"`
	IntervalTime int32   `protobuf:"varint,6,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`
	BornLen2     []int32 `protobuf:"varint,7,rep,packed,name=born_len2,json=bornLen2,proto3" json:"born_len2,omitempty"`
	MaxCount     int64   `protobuf:"varint,8,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	Desc         string  `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	SvgaUrl      string  `protobuf:"bytes,10,opt,name=svga_url,json=svgaUrl,proto3" json:"svga_url,omitempty"`
	Imgurl       string  `protobuf:"bytes,11,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	RewardImg    string  `protobuf:"bytes,12,opt,name=reward_img,json=rewardImg,proto3" json:"reward_img,omitempty"`
	RefreshType  int64   `protobuf:"varint,13,opt,name=refresh_type,json=refreshType,proto3" json:"refresh_type,omitempty"`
}

func (x *FloaterConfigOld) Reset() {
	*x = FloaterConfigOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloaterConfigOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloaterConfigOld) ProtoMessage() {}

func (x *FloaterConfigOld) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloaterConfigOld.ProtoReflect.Descriptor instead.
func (*FloaterConfigOld) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{111}
}

func (x *FloaterConfigOld) GetBornLen() []int32 {
	if x != nil {
		return x.BornLen
	}
	return nil
}

func (x *FloaterConfigOld) GetBornCount() int32 {
	if x != nil {
		return x.BornCount
	}
	return 0
}

func (x *FloaterConfigOld) GetBornCountV2() int32 {
	if x != nil {
		return x.BornCountV2
	}
	return 0
}

func (x *FloaterConfigOld) GetBornRadius() int32 {
	if x != nil {
		return x.BornRadius
	}
	return 0
}

func (x *FloaterConfigOld) GetFloaterScore() int32 {
	if x != nil {
		return x.FloaterScore
	}
	return 0
}

func (x *FloaterConfigOld) GetIntervalTime() int32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

func (x *FloaterConfigOld) GetBornLen2() []int32 {
	if x != nil {
		return x.BornLen2
	}
	return nil
}

func (x *FloaterConfigOld) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *FloaterConfigOld) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FloaterConfigOld) GetSvgaUrl() string {
	if x != nil {
		return x.SvgaUrl
	}
	return ""
}

func (x *FloaterConfigOld) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *FloaterConfigOld) GetRewardImg() string {
	if x != nil {
		return x.RewardImg
	}
	return ""
}

func (x *FloaterConfigOld) GetRefreshType() int64 {
	if x != nil {
		return x.RefreshType
	}
	return 0
}

type ActivityMapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	NewMapThemeId int32 `protobuf:"varint,3,opt,name=new_map_theme_id,json=newMapThemeId,proto3" json:"new_map_theme_id,omitempty"`
}

func (x *ActivityMapConfig) Reset() {
	*x = ActivityMapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityMapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityMapConfig) ProtoMessage() {}

func (x *ActivityMapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityMapConfig.ProtoReflect.Descriptor instead.
func (*ActivityMapConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{112}
}

func (x *ActivityMapConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ActivityMapConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityMapConfig) GetNewMapThemeId() int32 {
	if x != nil {
		return x.NewMapThemeId
	}
	return 0
}

type EndlessLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosLengthEndlessLimit_1         int64   `protobuf:"varint,1,opt,name=ios_length_endless_limit_1,json=iosLengthEndlessLimit1,proto3" json:"ios_length_endless_limit_1,omitempty"`
	IosLengthEndlessLimit_2         int64   `protobuf:"varint,2,opt,name=ios_length_endless_limit_2,json=iosLengthEndlessLimit2,proto3" json:"ios_length_endless_limit_2,omitempty"`
	IosLengthEndlessTimeLimit_1     float64 `protobuf:"fixed64,3,opt,name=ios_length_endless_time_limit_1,json=iosLengthEndlessTimeLimit1,proto3" json:"ios_length_endless_time_limit_1,omitempty"`
	IosLengthEndlessTimeLimit_2     float64 `protobuf:"fixed64,4,opt,name=ios_length_endless_time_limit_2,json=iosLengthEndlessTimeLimit2,proto3" json:"ios_length_endless_time_limit_2,omitempty"`
	AndroidLengthEndlessLimit_1     int64   `protobuf:"varint,5,opt,name=android_length_endless_limit_1,json=androidLengthEndlessLimit1,proto3" json:"android_length_endless_limit_1,omitempty"`
	AndroidLengthEndlessLimit_2     int64   `protobuf:"varint,6,opt,name=android_length_endless_limit_2,json=androidLengthEndlessLimit2,proto3" json:"android_length_endless_limit_2,omitempty"`
	AndroidLengthEndlessTimeLimit_1 float64 `protobuf:"fixed64,7,opt,name=android_length_endless_time_limit_1,json=androidLengthEndlessTimeLimit1,proto3" json:"android_length_endless_time_limit_1,omitempty"`
	AndroidLengthEndlessTimeLimit_2 float64 `protobuf:"fixed64,8,opt,name=android_length_endless_time_limit_2,json=androidLengthEndlessTimeLimit2,proto3" json:"android_length_endless_time_limit_2,omitempty"`
	IosKillEndlessLimit_1           int64   `protobuf:"varint,9,opt,name=ios_kill_endless_limit_1,json=iosKillEndlessLimit1,proto3" json:"ios_kill_endless_limit_1,omitempty"`
	IosKillEndlessLimit_2           int64   `protobuf:"varint,10,opt,name=ios_kill_endless_limit_2,json=iosKillEndlessLimit2,proto3" json:"ios_kill_endless_limit_2,omitempty"`
	IosKillEndlessTimeLimit_1       float64 `protobuf:"fixed64,11,opt,name=ios_kill_endless_time_limit_1,json=iosKillEndlessTimeLimit1,proto3" json:"ios_kill_endless_time_limit_1,omitempty"`
	IosKillEndlessTimeLimit_2       float64 `protobuf:"fixed64,12,opt,name=ios_kill_endless_time_limit_2,json=iosKillEndlessTimeLimit2,proto3" json:"ios_kill_endless_time_limit_2,omitempty"`
	AndroidKillEndlessLimit_1       int64   `protobuf:"varint,13,opt,name=android_kill_endless_limit_1,json=androidKillEndlessLimit1,proto3" json:"android_kill_endless_limit_1,omitempty"`
	AndroidKillEndlessLimit_2       int64   `protobuf:"varint,14,opt,name=android_kill_endless_limit_2,json=androidKillEndlessLimit2,proto3" json:"android_kill_endless_limit_2,omitempty"`
	AndroidKillEndlessTimeLimit_1   float64 `protobuf:"fixed64,15,opt,name=android_kill_endless_time_limit_1,json=androidKillEndlessTimeLimit1,proto3" json:"android_kill_endless_time_limit_1,omitempty"`
	AndroidKillEndlessTimeLimit_2   float64 `protobuf:"fixed64,16,opt,name=android_kill_endless_time_limit_2,json=androidKillEndlessTimeLimit2,proto3" json:"android_kill_endless_time_limit_2,omitempty"`
}

func (x *EndlessLimitConfig) Reset() {
	*x = EndlessLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessLimitConfig) ProtoMessage() {}

func (x *EndlessLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessLimitConfig.ProtoReflect.Descriptor instead.
func (*EndlessLimitConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{113}
}

func (x *EndlessLimitConfig) GetIosLengthEndlessLimit_1() int64 {
	if x != nil {
		return x.IosLengthEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessLimit_2() int64 {
	if x != nil {
		return x.IosLengthEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.IosLengthEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.IosLengthEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessLimit_1() int64 {
	if x != nil {
		return x.AndroidLengthEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessLimit_2() int64 {
	if x != nil {
		return x.AndroidLengthEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.AndroidLengthEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.AndroidLengthEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessLimit_1() int64 {
	if x != nil {
		return x.IosKillEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessLimit_2() int64 {
	if x != nil {
		return x.IosKillEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.IosKillEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.IosKillEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessLimit_1() int64 {
	if x != nil {
		return x.AndroidKillEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessLimit_2() int64 {
	if x != nil {
		return x.AndroidKillEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.AndroidKillEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.AndroidKillEndlessTimeLimit_2
	}
	return 0
}

type EndlessBubbleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Link       string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *EndlessBubbleConfig) Reset() {
	*x = EndlessBubbleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBubbleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBubbleConfig) ProtoMessage() {}

func (x *EndlessBubbleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBubbleConfig.ProtoReflect.Descriptor instead.
func (*EndlessBubbleConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{114}
}

func (x *EndlessBubbleConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessBubbleConfig) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *EndlessBubbleConfig) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type EndlessTrackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLen       int32 `protobuf:"varint,1,opt,name=start_len,json=startLen,proto3" json:"start_len,omitempty"`
	IntervalLen    int32 `protobuf:"varint,2,opt,name=interval_len,json=intervalLen,proto3" json:"interval_len,omitempty"`
	IntervalSecond int32 `protobuf:"varint,3,opt,name=interval_second,json=intervalSecond,proto3" json:"interval_second,omitempty"`
}

func (x *EndlessTrackConfig) Reset() {
	*x = EndlessTrackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessTrackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessTrackConfig) ProtoMessage() {}

func (x *EndlessTrackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessTrackConfig.ProtoReflect.Descriptor instead.
func (*EndlessTrackConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{115}
}

func (x *EndlessTrackConfig) GetStartLen() int32 {
	if x != nil {
		return x.StartLen
	}
	return 0
}

func (x *EndlessTrackConfig) GetIntervalLen() int32 {
	if x != nil {
		return x.IntervalLen
	}
	return 0
}

func (x *EndlessTrackConfig) GetIntervalSecond() int32 {
	if x != nil {
		return x.IntervalSecond
	}
	return 0
}

type WildStormListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration  int32   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	SpeedRate float64 `protobuf:"fixed64,2,opt,name=speed_rate,json=speedRate,proto3" json:"speed_rate,omitempty"`
}

func (x *WildStormListItem) Reset() {
	*x = WildStormListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildStormListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildStormListItem) ProtoMessage() {}

func (x *WildStormListItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildStormListItem.ProtoReflect.Descriptor instead.
func (*WildStormListItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{116}
}

func (x *WildStormListItem) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *WildStormListItem) GetSpeedRate() float64 {
	if x != nil {
		return x.SpeedRate
	}
	return 0
}

type WildStormConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSpeedRate  float64              `protobuf:"fixed64,1,opt,name=max_speed_rate,json=maxSpeedRate,proto3" json:"max_speed_rate,omitempty"`
	WildStormList []*WildStormListItem `protobuf:"bytes,2,rep,name=wild_storm_list,json=wildStormList,proto3" json:"wild_storm_list,omitempty"`
}

func (x *WildStormConfig) Reset() {
	*x = WildStormConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildStormConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildStormConfig) ProtoMessage() {}

func (x *WildStormConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildStormConfig.ProtoReflect.Descriptor instead.
func (*WildStormConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{117}
}

func (x *WildStormConfig) GetMaxSpeedRate() float64 {
	if x != nil {
		return x.MaxSpeedRate
	}
	return 0
}

func (x *WildStormConfig) GetWildStormList() []*WildStormListItem {
	if x != nil {
		return x.WildStormList
	}
	return nil
}

type OfflineGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigSnakeRate              int32                `protobuf:"varint,1,opt,name=big_snake_rate,json=bigSnakeRate,proto3" json:"big_snake_rate,omitempty"`
	MediumSnakeRate           int32                `protobuf:"varint,2,opt,name=medium_snake_rate,json=mediumSnakeRate,proto3" json:"medium_snake_rate,omitempty"`
	ReliveLengthLimit         int32                `protobuf:"varint,3,opt,name=relive_length_limit,json=reliveLengthLimit,proto3" json:"relive_length_limit,omitempty"`
	ReliveNeedDiamond         int32                `protobuf:"varint,4,opt,name=relive_need_diamond,json=reliveNeedDiamond,proto3" json:"relive_need_diamond,omitempty"`
	SnakeDirection            int32                `protobuf:"varint,5,opt,name=snake_direction,json=snakeDirection,proto3" json:"snake_direction,omitempty"`
	TwiceReliveDiamond        int32                `protobuf:"varint,6,opt,name=twice_relive_diamond,json=twiceReliveDiamond,proto3" json:"twice_relive_diamond,omitempty"`
	TwiceReliveLength         int32                `protobuf:"varint,7,opt,name=twice_relive_length,json=twiceReliveLength,proto3" json:"twice_relive_length,omitempty"`
	EndlessReviveConfig       []*ReviveConfigItem  `protobuf:"bytes,8,rep,name=endless_revive_config,json=endlessReviveConfig,proto3" json:"endless_revive_config,omitempty"`
	EndlessReviveConfigAb1    []*ReviveConfigItem  `protobuf:"bytes,9,rep,name=endless_revive_config_ab1,json=endlessReviveConfigAb1,proto3" json:"endless_revive_config_ab1,omitempty"`
	EndlessReviveConfigAb2    []*ReviveConfigItem  `protobuf:"bytes,10,rep,name=endless_revive_config_ab2,json=endlessReviveConfigAb2,proto3" json:"endless_revive_config_ab2,omitempty"`
	ExciteReviveConfig        []*ReviveConfigItem  `protobuf:"bytes,11,rep,name=excite_revive_config,json=exciteReviveConfig,proto3" json:"excite_revive_config,omitempty"`
	LimitReviveConfig         []*ReviveConfigItem  `protobuf:"bytes,12,rep,name=limit_revive_config,json=limitReviveConfig,proto3" json:"limit_revive_config,omitempty"`
	VoiceBroadcast            int32                `protobuf:"varint,13,opt,name=voice_broadcast,json=voiceBroadcast,proto3" json:"voice_broadcast,omitempty"`
	UseAiV3                   int32                `protobuf:"varint,14,opt,name=use_ai_v3,json=useAiV3,proto3" json:"use_ai_v3,omitempty"`
	NewKillBroadcast          int32                `protobuf:"varint,15,opt,name=new_kill_broadcast,json=newKillBroadcast,proto3" json:"new_kill_broadcast,omitempty"`
	NewMap                    int32                `protobuf:"varint,16,opt,name=new_map,json=newMap,proto3" json:"new_map,omitempty"`
	Recover                   int32                `protobuf:"varint,17,opt,name=recover,proto3" json:"recover,omitempty"`
	FloaterConfig             *FloaterConfigOld    `protobuf:"bytes,18,opt,name=floater_config,json=floaterConfig,proto3" json:"floater_config,omitempty"` // 貌似已经废弃，移到到ai_config_v3配置里了
	EndlessLimitConfig        *EndlessLimitConfig  `protobuf:"bytes,19,opt,name=endless_limit_config,json=endlessLimitConfig,proto3" json:"endless_limit_config,omitempty"`
	ActivityMapConfig         *ActivityMapConfig   `protobuf:"bytes,20,opt,name=activity_map_config,json=activityMapConfig,proto3" json:"activity_map_config,omitempty"`
	EndlessBubble             *EndlessBubbleConfig `protobuf:"bytes,21,opt,name=endless_bubble,json=endlessBubble,proto3" json:"endless_bubble,omitempty"`
	EndlessTrack              *EndlessTrackConfig  `protobuf:"bytes,22,opt,name=endless_track,json=endlessTrack,proto3" json:"endless_track,omitempty"`
	WildStorm                 *WildStormConfig     `protobuf:"bytes,23,opt,name=wild_storm,json=wildStorm,proto3" json:"wild_storm,omitempty"`
	EndlessBuffProp           *EndLessBuffPropInfo `protobuf:"bytes,24,opt,name=endless_buff_prop,json=endlessBuffProp,proto3" json:"endless_buff_prop,omitempty"`
	AnthapShake               int32                `protobuf:"varint,25,opt,name=anthap_shake,json=anthapShake,proto3" json:"anthap_shake,omitempty"`                                                 // 震动开关
	OpenUnityEndlessBlackHole bool                 `protobuf:"varint,26,opt,name=open_unity_endless_black_hole,json=openUnityEndlessBlackHole,proto3" json:"open_unity_endless_black_hole,omitempty"` // 是否开启 unity 无尽黑洞
}

func (x *OfflineGameConfig) Reset() {
	*x = OfflineGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineGameConfig) ProtoMessage() {}

func (x *OfflineGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineGameConfig.ProtoReflect.Descriptor instead.
func (*OfflineGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{118}
}

func (x *OfflineGameConfig) GetBigSnakeRate() int32 {
	if x != nil {
		return x.BigSnakeRate
	}
	return 0
}

func (x *OfflineGameConfig) GetMediumSnakeRate() int32 {
	if x != nil {
		return x.MediumSnakeRate
	}
	return 0
}

func (x *OfflineGameConfig) GetReliveLengthLimit() int32 {
	if x != nil {
		return x.ReliveLengthLimit
	}
	return 0
}

func (x *OfflineGameConfig) GetReliveNeedDiamond() int32 {
	if x != nil {
		return x.ReliveNeedDiamond
	}
	return 0
}

func (x *OfflineGameConfig) GetSnakeDirection() int32 {
	if x != nil {
		return x.SnakeDirection
	}
	return 0
}

func (x *OfflineGameConfig) GetTwiceReliveDiamond() int32 {
	if x != nil {
		return x.TwiceReliveDiamond
	}
	return 0
}

func (x *OfflineGameConfig) GetTwiceReliveLength() int32 {
	if x != nil {
		return x.TwiceReliveLength
	}
	return 0
}

func (x *OfflineGameConfig) GetEndlessReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessReviveConfigAb1() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfigAb1
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessReviveConfigAb2() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfigAb2
	}
	return nil
}

func (x *OfflineGameConfig) GetExciteReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.ExciteReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetLimitReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.LimitReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetVoiceBroadcast() int32 {
	if x != nil {
		return x.VoiceBroadcast
	}
	return 0
}

func (x *OfflineGameConfig) GetUseAiV3() int32 {
	if x != nil {
		return x.UseAiV3
	}
	return 0
}

func (x *OfflineGameConfig) GetNewKillBroadcast() int32 {
	if x != nil {
		return x.NewKillBroadcast
	}
	return 0
}

func (x *OfflineGameConfig) GetNewMap() int32 {
	if x != nil {
		return x.NewMap
	}
	return 0
}

func (x *OfflineGameConfig) GetRecover() int32 {
	if x != nil {
		return x.Recover
	}
	return 0
}

func (x *OfflineGameConfig) GetFloaterConfig() *FloaterConfigOld {
	if x != nil {
		return x.FloaterConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessLimitConfig() *EndlessLimitConfig {
	if x != nil {
		return x.EndlessLimitConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetActivityMapConfig() *ActivityMapConfig {
	if x != nil {
		return x.ActivityMapConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessBubble() *EndlessBubbleConfig {
	if x != nil {
		return x.EndlessBubble
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessTrack() *EndlessTrackConfig {
	if x != nil {
		return x.EndlessTrack
	}
	return nil
}

func (x *OfflineGameConfig) GetWildStorm() *WildStormConfig {
	if x != nil {
		return x.WildStorm
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessBuffProp() *EndLessBuffPropInfo {
	if x != nil {
		return x.EndlessBuffProp
	}
	return nil
}

func (x *OfflineGameConfig) GetAnthapShake() int32 {
	if x != nil {
		return x.AnthapShake
	}
	return 0
}

func (x *OfflineGameConfig) GetOpenUnityEndlessBlackHole() bool {
	if x != nil {
		return x.OpenUnityEndlessBlackHole
	}
	return false
}

// === mentorship_config start ========================================
type MentorshipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterPrivilegeConfig  []*MentorPrivilegeInfo        `protobuf:"bytes,1,rep,name=master_privilege_config,json=masterPrivilegeConfig,proto3" json:"master_privilege_config,omitempty"`
	BondTitleConfig        []*MentorshipBondTitleItem    `protobuf:"bytes,2,rep,name=bond_title_config,json=bondTitleConfig,proto3" json:"bond_title_config,omitempty"`
	FinishReward           *MentorFinishReward           `protobuf:"bytes,3,opt,name=finish_reward,json=finishReward,proto3" json:"finish_reward,omitempty"`
	MasterPrenticeStrategy []*MasterPrenticeStrategyItem `protobuf:"bytes,4,rep,name=master_prentice_strategy,json=masterPrenticeStrategy,proto3" json:"master_prentice_strategy,omitempty"`
	MasterStarLimit        int32                         `protobuf:"varint,5,opt,name=master_star_limit,json=masterStarLimit,proto3" json:"master_star_limit,omitempty"`
	BreakHourLimit         int32                         `protobuf:"varint,6,opt,name=break_hour_limit,json=breakHourLimit,proto3" json:"break_hour_limit,omitempty"`
	MentorshipOpen         int32                         `protobuf:"varint,7,opt,name=mentorship_open,json=mentorshipOpen,proto3" json:"mentorship_open,omitempty"`
}

func (x *MentorshipConfig) Reset() {
	*x = MentorshipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorshipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorshipConfig) ProtoMessage() {}

func (x *MentorshipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorshipConfig.ProtoReflect.Descriptor instead.
func (*MentorshipConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{119}
}

func (x *MentorshipConfig) GetMasterPrivilegeConfig() []*MentorPrivilegeInfo {
	if x != nil {
		return x.MasterPrivilegeConfig
	}
	return nil
}

func (x *MentorshipConfig) GetBondTitleConfig() []*MentorshipBondTitleItem {
	if x != nil {
		return x.BondTitleConfig
	}
	return nil
}

func (x *MentorshipConfig) GetFinishReward() *MentorFinishReward {
	if x != nil {
		return x.FinishReward
	}
	return nil
}

func (x *MentorshipConfig) GetMasterPrenticeStrategy() []*MasterPrenticeStrategyItem {
	if x != nil {
		return x.MasterPrenticeStrategy
	}
	return nil
}

func (x *MentorshipConfig) GetMasterStarLimit() int32 {
	if x != nil {
		return x.MasterStarLimit
	}
	return 0
}

func (x *MentorshipConfig) GetBreakHourLimit() int32 {
	if x != nil {
		return x.BreakHourLimit
	}
	return 0
}

func (x *MentorshipConfig) GetMentorshipOpen() int32 {
	if x != nil {
		return x.MentorshipOpen
	}
	return 0
}

type MentorPrivilegeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Level      int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	LevelExp   int32                  `protobuf:"varint,3,opt,name=level_exp,json=levelExp,proto3" json:"level_exp,omitempty"`
	TitleImg   string                 `protobuf:"bytes,4,opt,name=title_img,json=titleImg,proto3" json:"title_img,omitempty"`
	AnimType   int32                  `protobuf:"varint,5,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Addition   int32                  `protobuf:"varint,6,opt,name=addition,proto3" json:"addition,omitempty"`                      // 名师加成百分比1～100
	Privilege  []*PrivilegeDetailInfo `protobuf:"bytes,7,rep,name=privilege,proto3" json:"privilege,omitempty"`                     // 当前名师等级特权配图
	RewardList []*config.RewardConfig `protobuf:"bytes,8,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"` // 名师特权奖励
}

func (x *MentorPrivilegeInfo) Reset() {
	*x = MentorPrivilegeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorPrivilegeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorPrivilegeInfo) ProtoMessage() {}

func (x *MentorPrivilegeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorPrivilegeInfo.ProtoReflect.Descriptor instead.
func (*MentorPrivilegeInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{120}
}

func (x *MentorPrivilegeInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MentorPrivilegeInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetLevelExp() int32 {
	if x != nil {
		return x.LevelExp
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetTitleImg() string {
	if x != nil {
		return x.TitleImg
	}
	return ""
}

func (x *MentorPrivilegeInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetAddition() int32 {
	if x != nil {
		return x.Addition
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetPrivilege() []*PrivilegeDetailInfo {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *MentorPrivilegeInfo) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type PrivilegeDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgUrl string `protobuf:"bytes,1,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PrivilegeDetailInfo) Reset() {
	*x = PrivilegeDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeDetailInfo) ProtoMessage() {}

func (x *PrivilegeDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeDetailInfo.ProtoReflect.Descriptor instead.
func (*PrivilegeDetailInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{121}
}

func (x *PrivilegeDetailInfo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *PrivilegeDetailInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type MentorshipBondTitleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FadeTime     int64 `protobuf:"varint,1,opt,name=fade_time,json=fadeTime,proto3" json:"fade_time,omitempty"`               // 褪色时间(s)
	BondLevel    int32 `protobuf:"varint,2,opt,name=bond_level,json=bondLevel,proto3" json:"bond_level,omitempty"`            // 羁绊等级
	BondLevelExp int32 `protobuf:"varint,3,opt,name=bond_level_exp,json=bondLevelExp,proto3" json:"bond_level_exp,omitempty"` // 羁绊等级对应经验值
}

func (x *MentorshipBondTitleItem) Reset() {
	*x = MentorshipBondTitleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorshipBondTitleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorshipBondTitleItem) ProtoMessage() {}

func (x *MentorshipBondTitleItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorshipBondTitleItem.ProtoReflect.Descriptor instead.
func (*MentorshipBondTitleItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{122}
}

func (x *MentorshipBondTitleItem) GetFadeTime() int64 {
	if x != nil {
		return x.FadeTime
	}
	return 0
}

func (x *MentorshipBondTitleItem) GetBondLevel() int32 {
	if x != nil {
		return x.BondLevel
	}
	return 0
}

func (x *MentorshipBondTitleItem) GetBondLevelExp() int32 {
	if x != nil {
		return x.BondLevelExp
	}
	return 0
}

type MentorFinishReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterReward   []*config.RewardConfig `protobuf:"bytes,1,rep,name=master_reward,json=masterReward,proto3" json:"master_reward,omitempty"`
	PrenticeReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=prentice_reward,json=prenticeReward,proto3" json:"prentice_reward,omitempty"`
}

func (x *MentorFinishReward) Reset() {
	*x = MentorFinishReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorFinishReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorFinishReward) ProtoMessage() {}

func (x *MentorFinishReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorFinishReward.ProtoReflect.Descriptor instead.
func (*MentorFinishReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{123}
}

func (x *MentorFinishReward) GetMasterReward() []*config.RewardConfig {
	if x != nil {
		return x.MasterReward
	}
	return nil
}

func (x *MentorFinishReward) GetPrenticeReward() []*config.RewardConfig {
	if x != nil {
		return x.PrenticeReward
	}
	return nil
}

type MasterPrenticeStrategyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Img   string `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *MasterPrenticeStrategyItem) Reset() {
	*x = MasterPrenticeStrategyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterPrenticeStrategyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterPrenticeStrategyItem) ProtoMessage() {}

func (x *MasterPrenticeStrategyItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterPrenticeStrategyItem.ProtoReflect.Descriptor instead.
func (*MasterPrenticeStrategyItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{124}
}

func (x *MasterPrenticeStrategyItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MasterPrenticeStrategyItem) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// === hot_config start ========================================
type HotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketState     int32  `protobuf:"varint,1,opt,name=market_state,json=marketState,proto3" json:"market_state,omitempty"`
	SubConfig       string `protobuf:"bytes,2,opt,name=sub_config,json=subConfig,proto3" json:"sub_config,omitempty"`                     // 小秘书配置
	UnityLoadingUrl string `protobuf:"bytes,3,opt,name=unity_loading_url,json=unityLoadingUrl,proto3" json:"unity_loading_url,omitempty"` // unity loading配置资源包
}

func (x *HotConfig) Reset() {
	*x = HotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotConfig) ProtoMessage() {}

func (x *HotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotConfig.ProtoReflect.Descriptor instead.
func (*HotConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{125}
}

func (x *HotConfig) GetMarketState() int32 {
	if x != nil {
		return x.MarketState
	}
	return 0
}

func (x *HotConfig) GetSubConfig() string {
	if x != nil {
		return x.SubConfig
	}
	return ""
}

func (x *HotConfig) GetUnityLoadingUrl() string {
	if x != nil {
		return x.UnityLoadingUrl
	}
	return ""
}

// product_config start =========================================
type ProductConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property            *config.Property            `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	CurrencyStore       *config.CurrencyStore       `protobuf:"bytes,2,opt,name=currency_store,json=currencyStore,proto3" json:"currency_store,omitempty"`
	MiddleItemList      []*config.MiddleItem        `protobuf:"bytes,3,rep,name=middle_item_list,json=middleItemList,proto3" json:"middle_item_list,omitempty"` // 中间道具配置
	DrawCardGuideConfig *config.DrawCardGuideConfig `protobuf:"bytes,4,opt,name=draw_card_guide_config,json=drawCardGuideConfig,proto3" json:"draw_card_guide_config,omitempty"`
	StoreConfig         *config.StoreConfig         `protobuf:"bytes,5,opt,name=store_config,json=storeConfig,proto3" json:"store_config,omitempty"` // proto商店配置
}

func (x *ProductConfig) Reset() {
	*x = ProductConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductConfig) ProtoMessage() {}

func (x *ProductConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductConfig.ProtoReflect.Descriptor instead.
func (*ProductConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{126}
}

func (x *ProductConfig) GetProperty() *config.Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *ProductConfig) GetCurrencyStore() *config.CurrencyStore {
	if x != nil {
		return x.CurrencyStore
	}
	return nil
}

func (x *ProductConfig) GetMiddleItemList() []*config.MiddleItem {
	if x != nil {
		return x.MiddleItemList
	}
	return nil
}

func (x *ProductConfig) GetDrawCardGuideConfig() *config.DrawCardGuideConfig {
	if x != nil {
		return x.DrawCardGuideConfig
	}
	return nil
}

func (x *ProductConfig) GetStoreConfig() *config.StoreConfig {
	if x != nil {
		return x.StoreConfig
	}
	return nil
}

// wedding_config start
type WeddingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceDivorceNeedDiamond int64              `protobuf:"varint,1,opt,name=force_divorce_need_diamond,json=forceDivorceNeedDiamond,proto3" json:"force_divorce_need_diamond,omitempty"`
	Contact                 string             `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
	TemplateList            []*WeddingTemplate `protobuf:"bytes,3,rep,name=template_list,json=templateList,proto3" json:"template_list,omitempty"`
	LimitedTemplateList     []*WeddingTemplate `protobuf:"bytes,4,rep,name=limited_template_list,json=limitedTemplateList,proto3" json:"limited_template_list,omitempty"`
	TemplateUrl             string             `protobuf:"bytes,5,opt,name=template_url,json=templateUrl,proto3" json:"template_url,omitempty"`
	MusicList               []*WeddingMusic    `protobuf:"bytes,6,rep,name=music_list,json=musicList,proto3" json:"music_list,omitempty"`
	MusicUrl                string             `protobuf:"bytes,7,opt,name=music_url,json=musicUrl,proto3" json:"music_url,omitempty"`
	TextList                []string           `protobuf:"bytes,8,rep,name=text_list,json=textList,proto3" json:"text_list,omitempty"`
}

func (x *WeddingConfig) Reset() {
	*x = WeddingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingConfig) ProtoMessage() {}

func (x *WeddingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingConfig.ProtoReflect.Descriptor instead.
func (*WeddingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{127}
}

func (x *WeddingConfig) GetForceDivorceNeedDiamond() int64 {
	if x != nil {
		return x.ForceDivorceNeedDiamond
	}
	return 0
}

func (x *WeddingConfig) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *WeddingConfig) GetTemplateList() []*WeddingTemplate {
	if x != nil {
		return x.TemplateList
	}
	return nil
}

func (x *WeddingConfig) GetLimitedTemplateList() []*WeddingTemplate {
	if x != nil {
		return x.LimitedTemplateList
	}
	return nil
}

func (x *WeddingConfig) GetTemplateUrl() string {
	if x != nil {
		return x.TemplateUrl
	}
	return ""
}

func (x *WeddingConfig) GetMusicList() []*WeddingMusic {
	if x != nil {
		return x.MusicList
	}
	return nil
}

func (x *WeddingConfig) GetMusicUrl() string {
	if x != nil {
		return x.MusicUrl
	}
	return ""
}

func (x *WeddingConfig) GetTextList() []string {
	if x != nil {
		return x.TextList
	}
	return nil
}

type WeddingTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl     string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TemplateId int64  `protobuf:"varint,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Version    int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *WeddingTemplate) Reset() {
	*x = WeddingTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingTemplate) ProtoMessage() {}

func (x *WeddingTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingTemplate.ProtoReflect.Descriptor instead.
func (*WeddingTemplate) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{128}
}

func (x *WeddingTemplate) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *WeddingTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeddingTemplate) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *WeddingTemplate) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type WeddingMusic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MusicId int64  `protobuf:"varint,2,opt,name=music_id,json=musicId,proto3" json:"music_id,omitempty"`
}

func (x *WeddingMusic) Reset() {
	*x = WeddingMusic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingMusic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingMusic) ProtoMessage() {}

func (x *WeddingMusic) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingMusic.ProtoReflect.Descriptor instead.
func (*WeddingMusic) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{129}
}

func (x *WeddingMusic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeddingMusic) GetMusicId() int64 {
	if x != nil {
		return x.MusicId
	}
	return 0
}

// happy_mode_config start
type HappycoinConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HappycoinId   int64  `protobuf:"varint,1,opt,name=happycoin_id,json=happycoinId,proto3" json:"happycoin_id,omitempty"`
	Happycoin     int64  `protobuf:"varint,2,opt,name=happycoin,proto3" json:"happycoin,omitempty"`
	FreeHappycoin int64  `protobuf:"varint,3,opt,name=free_happycoin,json=freeHappycoin,proto3" json:"free_happycoin,omitempty"`
	CostDiamond   int64  `protobuf:"varint,4,opt,name=cost_diamond,json=costDiamond,proto3" json:"cost_diamond,omitempty"`
	Imgurl        string `protobuf:"bytes,5,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	FreeImgurl    string `protobuf:"bytes,6,opt,name=free_imgurl,json=freeImgurl,proto3" json:"free_imgurl,omitempty"`
}

func (x *HappycoinConfig) Reset() {
	*x = HappycoinConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappycoinConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappycoinConfig) ProtoMessage() {}

func (x *HappycoinConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappycoinConfig.ProtoReflect.Descriptor instead.
func (*HappycoinConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{130}
}

func (x *HappycoinConfig) GetHappycoinId() int64 {
	if x != nil {
		return x.HappycoinId
	}
	return 0
}

func (x *HappycoinConfig) GetHappycoin() int64 {
	if x != nil {
		return x.Happycoin
	}
	return 0
}

func (x *HappycoinConfig) GetFreeHappycoin() int64 {
	if x != nil {
		return x.FreeHappycoin
	}
	return 0
}

func (x *HappycoinConfig) GetCostDiamond() int64 {
	if x != nil {
		return x.CostDiamond
	}
	return 0
}

func (x *HappycoinConfig) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *HappycoinConfig) GetFreeImgurl() string {
	if x != nil {
		return x.FreeImgurl
	}
	return ""
}

type LengthFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length int64 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Fee    int64 `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *LengthFee) Reset() {
	*x = LengthFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LengthFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LengthFee) ProtoMessage() {}

func (x *LengthFee) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LengthFee.ProtoReflect.Descriptor instead.
func (*LengthFee) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{131}
}

func (x *LengthFee) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *LengthFee) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type HappyModeRace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaceId       int64        `protobuf:"varint,1,opt,name=race_id,json=raceId,proto3" json:"race_id,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EntranceFee  int64        `protobuf:"varint,3,opt,name=entrance_fee,json=entranceFee,proto3" json:"entrance_fee,omitempty"`
	LowLimit     int64        `protobuf:"varint,4,opt,name=low_limit,json=lowLimit,proto3" json:"low_limit,omitempty"`
	UpperLimit   int64        `protobuf:"varint,5,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	ImgUrl       string       `protobuf:"bytes,6,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
	LengthConfig []*LengthFee `protobuf:"bytes,7,rep,name=length_config,json=lengthConfig,proto3" json:"length_config,omitempty"`
	HideNickName int64        `protobuf:"varint,8,opt,name=hide_nick_name,json=hideNickName,proto3" json:"hide_nick_name,omitempty"`
}

func (x *HappyModeRace) Reset() {
	*x = HappyModeRace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyModeRace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyModeRace) ProtoMessage() {}

func (x *HappyModeRace) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyModeRace.ProtoReflect.Descriptor instead.
func (*HappyModeRace) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{132}
}

func (x *HappyModeRace) GetRaceId() int64 {
	if x != nil {
		return x.RaceId
	}
	return 0
}

func (x *HappyModeRace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HappyModeRace) GetEntranceFee() int64 {
	if x != nil {
		return x.EntranceFee
	}
	return 0
}

func (x *HappyModeRace) GetLowLimit() int64 {
	if x != nil {
		return x.LowLimit
	}
	return 0
}

func (x *HappyModeRace) GetUpperLimit() int64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *HappyModeRace) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *HappyModeRace) GetLengthConfig() []*LengthFee {
	if x != nil {
		return x.LengthConfig
	}
	return nil
}

func (x *HappyModeRace) GetHideNickName() int64 {
	if x != nil {
		return x.HideNickName
	}
	return 0
}

type LowIncomeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num       int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Happycoin int64 `protobuf:"varint,2,opt,name=happycoin,proto3" json:"happycoin,omitempty"`
}

func (x *LowIncomeConfig) Reset() {
	*x = LowIncomeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowIncomeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowIncomeConfig) ProtoMessage() {}

func (x *LowIncomeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowIncomeConfig.ProtoReflect.Descriptor instead.
func (*LowIncomeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{133}
}

func (x *LowIncomeConfig) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *LowIncomeConfig) GetHappycoin() int64 {
	if x != nil {
		return x.Happycoin
	}
	return 0
}

type HappyModeTitleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartNum int64  `protobuf:"varint,1,opt,name=start_num,json=startNum,proto3" json:"start_num,omitempty"`
	Rank     int64  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	BgIndex  string `protobuf:"bytes,4,opt,name=bg_index,json=bgIndex,proto3" json:"bg_index,omitempty"`
}

func (x *HappyModeTitleConfig) Reset() {
	*x = HappyModeTitleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyModeTitleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyModeTitleConfig) ProtoMessage() {}

func (x *HappyModeTitleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyModeTitleConfig.ProtoReflect.Descriptor instead.
func (*HappyModeTitleConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{134}
}

func (x *HappyModeTitleConfig) GetStartNum() int64 {
	if x != nil {
		return x.StartNum
	}
	return 0
}

func (x *HappyModeTitleConfig) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *HappyModeTitleConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HappyModeTitleConfig) GetBgIndex() string {
	if x != nil {
		return x.BgIndex
	}
	return ""
}

type HappyModeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HappycoinList   []*HappycoinConfig      `protobuf:"bytes,1,rep,name=happycoin_list,json=happycoinList,proto3" json:"happycoin_list,omitempty"`
	LowIncomeConfig *LowIncomeConfig        `protobuf:"bytes,2,opt,name=low_income_config,json=lowIncomeConfig,proto3" json:"low_income_config,omitempty"`
	RaceConfig      []*HappyModeRace        `protobuf:"bytes,3,rep,name=race_config,json=raceConfig,proto3" json:"race_config,omitempty"`
	TitleConfig     []*HappyModeTitleConfig `protobuf:"bytes,4,rep,name=title_config,json=titleConfig,proto3" json:"title_config,omitempty"`
	RaceTimeConfig  *RaceTimeConfig         `protobuf:"bytes,5,opt,name=race_time_config,json=raceTimeConfig,proto3" json:"race_time_config,omitempty"`
}

func (x *HappyModeConfig) Reset() {
	*x = HappyModeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyModeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyModeConfig) ProtoMessage() {}

func (x *HappyModeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyModeConfig.ProtoReflect.Descriptor instead.
func (*HappyModeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{135}
}

func (x *HappyModeConfig) GetHappycoinList() []*HappycoinConfig {
	if x != nil {
		return x.HappycoinList
	}
	return nil
}

func (x *HappyModeConfig) GetLowIncomeConfig() *LowIncomeConfig {
	if x != nil {
		return x.LowIncomeConfig
	}
	return nil
}

func (x *HappyModeConfig) GetRaceConfig() []*HappyModeRace {
	if x != nil {
		return x.RaceConfig
	}
	return nil
}

func (x *HappyModeConfig) GetTitleConfig() []*HappyModeTitleConfig {
	if x != nil {
		return x.TitleConfig
	}
	return nil
}

func (x *HappyModeConfig) GetRaceTimeConfig() *RaceTimeConfig {
	if x != nil {
		return x.RaceTimeConfig
	}
	return nil
}

// ai_config_v3 start
type StarSnakeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime      int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SkinId         int32  `protobuf:"varint,3,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Nickname       string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	KsId           int32  `protobuf:"varint,5,opt,name=ks_id,json=ksId,proto3" json:"ks_id,omitempty"`
	UseProbability int32  `protobuf:"varint,6,opt,name=use_probability,json=useProbability,proto3" json:"use_probability,omitempty"`
	LimitVersion   string `protobuf:"bytes,7,opt,name=limit_version,json=limitVersion,proto3" json:"limit_version,omitempty"`
}

func (x *StarSnakeItem) Reset() {
	*x = StarSnakeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarSnakeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarSnakeItem) ProtoMessage() {}

func (x *StarSnakeItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarSnakeItem.ProtoReflect.Descriptor instead.
func (*StarSnakeItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{136}
}

func (x *StarSnakeItem) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StarSnakeItem) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *StarSnakeItem) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *StarSnakeItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *StarSnakeItem) GetKsId() int32 {
	if x != nil {
		return x.KsId
	}
	return 0
}

func (x *StarSnakeItem) GetUseProbability() int32 {
	if x != nil {
		return x.UseProbability
	}
	return 0
}

func (x *StarSnakeItem) GetLimitVersion() string {
	if x != nil {
		return x.LimitVersion
	}
	return ""
}

type StarSnake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRank     int32            `protobuf:"varint,1,opt,name=max_rank,json=maxRank,proto3" json:"max_rank,omitempty"`
	MinRank     int32            `protobuf:"varint,2,opt,name=min_rank,json=minRank,proto3" json:"min_rank,omitempty"`
	Probability int32            `protobuf:"varint,3,opt,name=probability,proto3" json:"probability,omitempty"`
	SnakeNum    int32            `protobuf:"varint,4,opt,name=snake_num,json=snakeNum,proto3" json:"snake_num,omitempty"`
	SnakeList   []*StarSnakeItem `protobuf:"bytes,5,rep,name=snake_list,json=snakeList,proto3" json:"snake_list,omitempty"`
}

func (x *StarSnake) Reset() {
	*x = StarSnake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarSnake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarSnake) ProtoMessage() {}

func (x *StarSnake) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarSnake.ProtoReflect.Descriptor instead.
func (*StarSnake) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{137}
}

func (x *StarSnake) GetMaxRank() int32 {
	if x != nil {
		return x.MaxRank
	}
	return 0
}

func (x *StarSnake) GetMinRank() int32 {
	if x != nil {
		return x.MinRank
	}
	return 0
}

func (x *StarSnake) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *StarSnake) GetSnakeNum() int32 {
	if x != nil {
		return x.SnakeNum
	}
	return 0
}

func (x *StarSnake) GetSnakeList() []*StarSnakeItem {
	if x != nil {
		return x.SnakeList
	}
	return nil
}

type AiWreckNodeScoreRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiBodyNode int32 `protobuf:"varint,1,opt,name=ai_body_node,json=aiBodyNode,proto3" json:"ai_body_node,omitempty"`
	WreckScore int32 `protobuf:"varint,2,opt,name=wreck_score,json=wreckScore,proto3" json:"wreck_score,omitempty"`
}

func (x *AiWreckNodeScoreRange) Reset() {
	*x = AiWreckNodeScoreRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiWreckNodeScoreRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiWreckNodeScoreRange) ProtoMessage() {}

func (x *AiWreckNodeScoreRange) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiWreckNodeScoreRange.ProtoReflect.Descriptor instead.
func (*AiWreckNodeScoreRange) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{138}
}

func (x *AiWreckNodeScoreRange) GetAiBodyNode() int32 {
	if x != nil {
		return x.AiBodyNode
	}
	return 0
}

func (x *AiWreckNodeScoreRange) GetWreckScore() int32 {
	if x != nil {
		return x.WreckScore
	}
	return 0
}

type AiLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                  int32         `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	BorderDisFactor        float32       `protobuf:"fixed32,2,opt,name=border_dis_factor,json=borderDisFactor,proto3" json:"border_dis_factor,omitempty"`
	SnakeDisFactor         float32       `protobuf:"fixed32,3,opt,name=snake_dis_factor,json=snakeDisFactor,proto3" json:"snake_dis_factor,omitempty"`
	WreckDisFactor         float32       `protobuf:"fixed32,4,opt,name=wreck_dis_factor,json=wreckDisFactor,proto3" json:"wreck_dis_factor,omitempty"`
	AiSnakeViewAngle       float32       `protobuf:"fixed32,5,opt,name=ai_snake_view_angle,json=aiSnakeViewAngle,proto3" json:"ai_snake_view_angle,omitempty"`
	FloaterDisFactor       float32       `protobuf:"fixed32,6,opt,name=floater_dis_factor,json=floaterDisFactor,proto3" json:"floater_dis_factor,omitempty"`
	SpeedupRate            float32       `protobuf:"fixed32,7,opt,name=speedup_rate,json=speedupRate,proto3" json:"speedup_rate,omitempty"`
	SpeedupTime            float32       `protobuf:"fixed32,8,opt,name=speedup_time,json=speedupTime,proto3" json:"speedup_time,omitempty"`
	ChangeDirectionRate    float32       `protobuf:"fixed32,9,opt,name=change_direction_rate,json=changeDirectionRate,proto3" json:"change_direction_rate,omitempty"`
	AttackBorderDisFactor  float32       `protobuf:"fixed32,10,opt,name=attack_border_dis_factor,json=attackBorderDisFactor,proto3" json:"attack_border_dis_factor,omitempty"`
	AttackSnakeDisFactor   float32       `protobuf:"fixed32,11,opt,name=attack_snake_dis_factor,json=attackSnakeDisFactor,proto3" json:"attack_snake_dis_factor,omitempty"`
	AttackWreckDisFactor   float32       `protobuf:"fixed32,12,opt,name=attack_wreck_dis_factor,json=attackWreckDisFactor,proto3" json:"attack_wreck_dis_factor,omitempty"`
	AttackAiSnakeViewAngle float32       `protobuf:"fixed32,13,opt,name=attack_ai_snake_view_angle,json=attackAiSnakeViewAngle,proto3" json:"attack_ai_snake_view_angle,omitempty"`
	AttackCircleDisFactor  float32       `protobuf:"fixed32,14,opt,name=attack_circle_dis_factor,json=attackCircleDisFactor,proto3" json:"attack_circle_dis_factor,omitempty"`
	AttackRate             float32       `protobuf:"fixed32,15,opt,name=attack_rate,json=attackRate,proto3" json:"attack_rate,omitempty"`
	AttackingScore         float32       `protobuf:"fixed32,16,opt,name=attacking_score,json=attackingScore,proto3" json:"attacking_score,omitempty"`
	DelayDirectionRate     float32       `protobuf:"fixed32,17,opt,name=delay_direction_rate,json=delayDirectionRate,proto3" json:"delay_direction_rate,omitempty"`
	AttackFloaterDisFactor float32       `protobuf:"fixed32,18,opt,name=attack_floater_dis_factor,json=attackFloaterDisFactor,proto3" json:"attack_floater_dis_factor,omitempty"`
	AttackTimes            []*AttackTime `protobuf:"bytes,19,rep,name=attack_times,json=attackTimes,proto3" json:"attack_times,omitempty"`
	WreckRate              float32       `protobuf:"fixed32,20,opt,name=wreck_rate,json=wreckRate,proto3" json:"wreck_rate,omitempty"`
	WreckBornRate          float32       `protobuf:"fixed32,21,opt,name=wreck_born_rate,json=wreckBornRate,proto3" json:"wreck_born_rate,omitempty"`
	WreckScoreRate         float32       `protobuf:"fixed32,22,opt,name=wreck_score_rate,json=wreckScoreRate,proto3" json:"wreck_score_rate,omitempty"`
}

func (x *AiLevel) Reset() {
	*x = AiLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiLevel) ProtoMessage() {}

func (x *AiLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiLevel.ProtoReflect.Descriptor instead.
func (*AiLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{139}
}

func (x *AiLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AiLevel) GetBorderDisFactor() float32 {
	if x != nil {
		return x.BorderDisFactor
	}
	return 0
}

func (x *AiLevel) GetSnakeDisFactor() float32 {
	if x != nil {
		return x.SnakeDisFactor
	}
	return 0
}

func (x *AiLevel) GetWreckDisFactor() float32 {
	if x != nil {
		return x.WreckDisFactor
	}
	return 0
}

func (x *AiLevel) GetAiSnakeViewAngle() float32 {
	if x != nil {
		return x.AiSnakeViewAngle
	}
	return 0
}

func (x *AiLevel) GetFloaterDisFactor() float32 {
	if x != nil {
		return x.FloaterDisFactor
	}
	return 0
}

func (x *AiLevel) GetSpeedupRate() float32 {
	if x != nil {
		return x.SpeedupRate
	}
	return 0
}

func (x *AiLevel) GetSpeedupTime() float32 {
	if x != nil {
		return x.SpeedupTime
	}
	return 0
}

func (x *AiLevel) GetChangeDirectionRate() float32 {
	if x != nil {
		return x.ChangeDirectionRate
	}
	return 0
}

func (x *AiLevel) GetAttackBorderDisFactor() float32 {
	if x != nil {
		return x.AttackBorderDisFactor
	}
	return 0
}

func (x *AiLevel) GetAttackSnakeDisFactor() float32 {
	if x != nil {
		return x.AttackSnakeDisFactor
	}
	return 0
}

func (x *AiLevel) GetAttackWreckDisFactor() float32 {
	if x != nil {
		return x.AttackWreckDisFactor
	}
	return 0
}

func (x *AiLevel) GetAttackAiSnakeViewAngle() float32 {
	if x != nil {
		return x.AttackAiSnakeViewAngle
	}
	return 0
}

func (x *AiLevel) GetAttackCircleDisFactor() float32 {
	if x != nil {
		return x.AttackCircleDisFactor
	}
	return 0
}

func (x *AiLevel) GetAttackRate() float32 {
	if x != nil {
		return x.AttackRate
	}
	return 0
}

func (x *AiLevel) GetAttackingScore() float32 {
	if x != nil {
		return x.AttackingScore
	}
	return 0
}

func (x *AiLevel) GetDelayDirectionRate() float32 {
	if x != nil {
		return x.DelayDirectionRate
	}
	return 0
}

func (x *AiLevel) GetAttackFloaterDisFactor() float32 {
	if x != nil {
		return x.AttackFloaterDisFactor
	}
	return 0
}

func (x *AiLevel) GetAttackTimes() []*AttackTime {
	if x != nil {
		return x.AttackTimes
	}
	return nil
}

func (x *AiLevel) GetWreckRate() float32 {
	if x != nil {
		return x.WreckRate
	}
	return 0
}

func (x *AiLevel) GetWreckBornRate() float32 {
	if x != nil {
		return x.WreckBornRate
	}
	return 0
}

func (x *AiLevel) GetWreckScoreRate() float32 {
	if x != nil {
		return x.WreckScoreRate
	}
	return 0
}

type AttackTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *AttackTime) Reset() {
	*x = AttackTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackTime) ProtoMessage() {}

func (x *AttackTime) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackTime.ProtoReflect.Descriptor instead.
func (*AttackTime) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{140}
}

func (x *AttackTime) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AttackTime) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type AiLevelWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *AiLevelWeight) Reset() {
	*x = AiLevelWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiLevelWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiLevelWeight) ProtoMessage() {}

func (x *AiLevelWeight) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiLevelWeight.ProtoReflect.Descriptor instead.
func (*AiLevelWeight) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{141}
}

func (x *AiLevelWeight) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AiLevelWeight) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type AiLengthRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLength    int64            `protobuf:"varint,1,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength    int64            `protobuf:"varint,2,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	InitialCount int32            `protobuf:"varint,3,opt,name=initial_count,json=initialCount,proto3" json:"initial_count,omitempty"`
	MaxCount     int32            `protobuf:"varint,4,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	LevelList    []*AiLevelWeight `protobuf:"bytes,5,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
	Weight       int32            `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *AiLengthRange) Reset() {
	*x = AiLengthRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiLengthRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiLengthRange) ProtoMessage() {}

func (x *AiLengthRange) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiLengthRange.ProtoReflect.Descriptor instead.
func (*AiLengthRange) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{142}
}

func (x *AiLengthRange) GetMinLength() int64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *AiLengthRange) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *AiLengthRange) GetInitialCount() int32 {
	if x != nil {
		return x.InitialCount
	}
	return 0
}

func (x *AiLengthRange) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *AiLengthRange) GetLevelList() []*AiLevelWeight {
	if x != nil {
		return x.LevelList
	}
	return nil
}

func (x *AiLengthRange) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type FloaterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BornLen      []int32 `protobuf:"varint,1,rep,packed,name=born_len,json=bornLen,proto3" json:"born_len,omitempty"`
	BornCount    int32   `protobuf:"varint,2,opt,name=born_count,json=bornCount,proto3" json:"born_count,omitempty"`
	BornCountV2  int32   `protobuf:"varint,3,opt,name=born_count_v2,json=bornCountV2,proto3" json:"born_count_v2,omitempty"`
	BornRadius   int32   `protobuf:"varint,4,opt,name=born_radius,json=bornRadius,proto3" json:"born_radius,omitempty"`
	FloaterScore int32   `protobuf:"varint,5,opt,name=floater_score,json=floaterScore,proto3" json:"floater_score,omitempty"`
	IntervalTime int32   `protobuf:"varint,6,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`
	BornLen2     []int64 `protobuf:"varint,7,rep,packed,name=born_len2,json=bornLen2,proto3" json:"born_len2,omitempty"`
	MaxCount     int32   `protobuf:"varint,8,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	Desc         string  `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	SvgaUrl      string  `protobuf:"bytes,10,opt,name=svga_url,json=svgaUrl,proto3" json:"svga_url,omitempty"`
	Imgurl       string  `protobuf:"bytes,11,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	RewardImg    string  `protobuf:"bytes,12,opt,name=reward_img,json=rewardImg,proto3" json:"reward_img,omitempty"`
	RefreshType  int32   `protobuf:"varint,13,opt,name=refresh_type,json=refreshType,proto3" json:"refresh_type,omitempty"`
}

func (x *FloaterConfig) Reset() {
	*x = FloaterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloaterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloaterConfig) ProtoMessage() {}

func (x *FloaterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloaterConfig.ProtoReflect.Descriptor instead.
func (*FloaterConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{143}
}

func (x *FloaterConfig) GetBornLen() []int32 {
	if x != nil {
		return x.BornLen
	}
	return nil
}

func (x *FloaterConfig) GetBornCount() int32 {
	if x != nil {
		return x.BornCount
	}
	return 0
}

func (x *FloaterConfig) GetBornCountV2() int32 {
	if x != nil {
		return x.BornCountV2
	}
	return 0
}

func (x *FloaterConfig) GetBornRadius() int32 {
	if x != nil {
		return x.BornRadius
	}
	return 0
}

func (x *FloaterConfig) GetFloaterScore() int32 {
	if x != nil {
		return x.FloaterScore
	}
	return 0
}

func (x *FloaterConfig) GetIntervalTime() int32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

func (x *FloaterConfig) GetBornLen2() []int64 {
	if x != nil {
		return x.BornLen2
	}
	return nil
}

func (x *FloaterConfig) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *FloaterConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FloaterConfig) GetSvgaUrl() string {
	if x != nil {
		return x.SvgaUrl
	}
	return ""
}

func (x *FloaterConfig) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *FloaterConfig) GetRewardImg() string {
	if x != nil {
		return x.RewardImg
	}
	return ""
}

func (x *FloaterConfig) GetRefreshType() int32 {
	if x != nil {
		return x.RefreshType
	}
	return 0
}

type AiDifficultyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level           int32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	StartScore      float32          `protobuf:"fixed32,2,opt,name=start_score,json=startScore,proto3" json:"start_score,omitempty"`
	EndScore        float32          `protobuf:"fixed32,3,opt,name=end_score,json=endScore,proto3" json:"end_score,omitempty"`
	PromotionLength int64            `protobuf:"varint,4,opt,name=promotion_length,json=promotionLength,proto3" json:"promotion_length,omitempty"`
	AiLengthRange   []*AiLengthRange `protobuf:"bytes,5,rep,name=ai_length_range,json=aiLengthRange,proto3" json:"ai_length_range,omitempty"`
	AiBorn          *AiBorn          `protobuf:"bytes,6,opt,name=ai_born,json=aiBorn,proto3" json:"ai_born,omitempty"`
}

func (x *AiDifficultyConfig) Reset() {
	*x = AiDifficultyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiDifficultyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiDifficultyConfig) ProtoMessage() {}

func (x *AiDifficultyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiDifficultyConfig.ProtoReflect.Descriptor instead.
func (*AiDifficultyConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{144}
}

func (x *AiDifficultyConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AiDifficultyConfig) GetStartScore() float32 {
	if x != nil {
		return x.StartScore
	}
	return 0
}

func (x *AiDifficultyConfig) GetEndScore() float32 {
	if x != nil {
		return x.EndScore
	}
	return 0
}

func (x *AiDifficultyConfig) GetPromotionLength() int64 {
	if x != nil {
		return x.PromotionLength
	}
	return 0
}

func (x *AiDifficultyConfig) GetAiLengthRange() []*AiLengthRange {
	if x != nil {
		return x.AiLengthRange
	}
	return nil
}

func (x *AiDifficultyConfig) GetAiBorn() *AiBorn {
	if x != nil {
		return x.AiBorn
	}
	return nil
}

type AiBornPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MinLength int64            `protobuf:"varint,2,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength int64            `protobuf:"varint,3,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	MaxCount  int32            `protobuf:"varint,4,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	LevelList []*AiLevelWeight `protobuf:"bytes,5,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
}

func (x *AiBornPool) Reset() {
	*x = AiBornPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiBornPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiBornPool) ProtoMessage() {}

func (x *AiBornPool) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiBornPool.ProtoReflect.Descriptor instead.
func (*AiBornPool) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{145}
}

func (x *AiBornPool) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AiBornPool) GetMinLength() int64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *AiBornPool) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *AiBornPool) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *AiBornPool) GetLevelList() []*AiLevelWeight {
	if x != nil {
		return x.LevelList
	}
	return nil
}

type ScorePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinScore int64            `protobuf:"varint,1,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
	MaxScore int64            `protobuf:"varint,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	AiCount  int32            `protobuf:"varint,3,opt,name=ai_count,json=aiCount,proto3" json:"ai_count,omitempty"`
	PoolList []*ScorePoolItem `protobuf:"bytes,4,rep,name=pool_list,json=poolList,proto3" json:"pool_list,omitempty"`
}

func (x *ScorePool) Reset() {
	*x = ScorePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScorePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorePool) ProtoMessage() {}

func (x *ScorePool) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorePool.ProtoReflect.Descriptor instead.
func (*ScorePool) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{146}
}

func (x *ScorePool) GetMinScore() int64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *ScorePool) GetMaxScore() int64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *ScorePool) GetAiCount() int32 {
	if x != nil {
		return x.AiCount
	}
	return 0
}

func (x *ScorePool) GetPoolList() []*ScorePoolItem {
	if x != nil {
		return x.PoolList
	}
	return nil
}

type ScorePoolItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ScorePoolItem) Reset() {
	*x = ScorePoolItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScorePoolItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorePoolItem) ProtoMessage() {}

func (x *ScorePoolItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorePoolItem.ProtoReflect.Descriptor instead.
func (*ScorePoolItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{147}
}

func (x *ScorePoolItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScorePoolItem) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type AiBorn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiBornPools      []*AiBornPool `protobuf:"bytes,1,rep,name=ai_born_pools,json=aiBornPools,proto3" json:"ai_born_pools,omitempty"`
	ScorePools       []*ScorePool  `protobuf:"bytes,2,rep,name=score_pools,json=scorePools,proto3" json:"score_pools,omitempty"`
	ScoreWeight      float32       `protobuf:"fixed32,3,opt,name=score_weight,json=scoreWeight,proto3" json:"score_weight,omitempty"`
	TimeWeight       float32       `protobuf:"fixed32,4,opt,name=time_weight,json=timeWeight,proto3" json:"time_weight,omitempty"`
	GetScoreSpeed    float32       `protobuf:"fixed32,5,opt,name=get_score_speed,json=getScoreSpeed,proto3" json:"get_score_speed,omitempty"`
	ScoreRefreshTime int32         `protobuf:"varint,6,opt,name=score_refresh_time,json=scoreRefreshTime,proto3" json:"score_refresh_time,omitempty"`
	InitLevelScore   float32       `protobuf:"fixed32,7,opt,name=init_level_score,json=initLevelScore,proto3" json:"init_level_score,omitempty"`
	KPow             float32       `protobuf:"fixed32,8,opt,name=k_pow,json=kPow,proto3" json:"k_pow,omitempty"`
	KMinLimit        float32       `protobuf:"fixed32,9,opt,name=k_min_limit,json=kMinLimit,proto3" json:"k_min_limit,omitempty"`
	KMaxLimit        float32       `protobuf:"fixed32,10,opt,name=k_max_limit,json=kMaxLimit,proto3" json:"k_max_limit,omitempty"`
}

func (x *AiBorn) Reset() {
	*x = AiBorn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiBorn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiBorn) ProtoMessage() {}

func (x *AiBorn) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiBorn.ProtoReflect.Descriptor instead.
func (*AiBorn) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{148}
}

func (x *AiBorn) GetAiBornPools() []*AiBornPool {
	if x != nil {
		return x.AiBornPools
	}
	return nil
}

func (x *AiBorn) GetScorePools() []*ScorePool {
	if x != nil {
		return x.ScorePools
	}
	return nil
}

func (x *AiBorn) GetScoreWeight() float32 {
	if x != nil {
		return x.ScoreWeight
	}
	return 0
}

func (x *AiBorn) GetTimeWeight() float32 {
	if x != nil {
		return x.TimeWeight
	}
	return 0
}

func (x *AiBorn) GetGetScoreSpeed() float32 {
	if x != nil {
		return x.GetScoreSpeed
	}
	return 0
}

func (x *AiBorn) GetScoreRefreshTime() int32 {
	if x != nil {
		return x.ScoreRefreshTime
	}
	return 0
}

func (x *AiBorn) GetInitLevelScore() float32 {
	if x != nil {
		return x.InitLevelScore
	}
	return 0
}

func (x *AiBorn) GetKPow() float32 {
	if x != nil {
		return x.KPow
	}
	return 0
}

func (x *AiBorn) GetKMinLimit() float32 {
	if x != nil {
		return x.KMinLimit
	}
	return 0
}

func (x *AiBorn) GetKMaxLimit() float32 {
	if x != nil {
		return x.KMaxLimit
	}
	return 0
}

type BonusTriggerCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreShowProgress int32 `protobuf:"varint,1,opt,name=score_show_progress,json=scoreShowProgress,proto3" json:"score_show_progress,omitempty"`
	ScoreShowDoor     int32 `protobuf:"varint,2,opt,name=score_show_door,json=scoreShowDoor,proto3" json:"score_show_door,omitempty"`
	BonusDuration     int32 `protobuf:"varint,3,opt,name=bonus_duration,json=bonusDuration,proto3" json:"bonus_duration,omitempty"`
	BonusFoodLevel    int32 `protobuf:"varint,4,opt,name=bonus_food_level,json=bonusFoodLevel,proto3" json:"bonus_food_level,omitempty"`
	OpenDoorType      int32 `protobuf:"varint,5,opt,name=open_door_type,json=openDoorType,proto3" json:"open_door_type,omitempty"`
}

func (x *BonusTriggerCondition) Reset() {
	*x = BonusTriggerCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusTriggerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusTriggerCondition) ProtoMessage() {}

func (x *BonusTriggerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusTriggerCondition.ProtoReflect.Descriptor instead.
func (*BonusTriggerCondition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{149}
}

func (x *BonusTriggerCondition) GetScoreShowProgress() int32 {
	if x != nil {
		return x.ScoreShowProgress
	}
	return 0
}

func (x *BonusTriggerCondition) GetScoreShowDoor() int32 {
	if x != nil {
		return x.ScoreShowDoor
	}
	return 0
}

func (x *BonusTriggerCondition) GetBonusDuration() int32 {
	if x != nil {
		return x.BonusDuration
	}
	return 0
}

func (x *BonusTriggerCondition) GetBonusFoodLevel() int32 {
	if x != nil {
		return x.BonusFoodLevel
	}
	return 0
}

func (x *BonusTriggerCondition) GetOpenDoorType() int32 {
	if x != nil {
		return x.OpenDoorType
	}
	return 0
}

type BonusFood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoodType   int32 `protobuf:"varint,1,opt,name=food_type,json=foodType,proto3" json:"food_type,omitempty"`
	FoodScore  int32 `protobuf:"varint,2,opt,name=food_score,json=foodScore,proto3" json:"food_score,omitempty"`
	FoodWeight int32 `protobuf:"varint,3,opt,name=food_weight,json=foodWeight,proto3" json:"food_weight,omitempty"`
	FoodSize   int32 `protobuf:"varint,4,opt,name=food_size,json=foodSize,proto3" json:"food_size,omitempty"`
}

func (x *BonusFood) Reset() {
	*x = BonusFood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusFood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusFood) ProtoMessage() {}

func (x *BonusFood) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusFood.ProtoReflect.Descriptor instead.
func (*BonusFood) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{150}
}

func (x *BonusFood) GetFoodType() int32 {
	if x != nil {
		return x.FoodType
	}
	return 0
}

func (x *BonusFood) GetFoodScore() int32 {
	if x != nil {
		return x.FoodScore
	}
	return 0
}

func (x *BonusFood) GetFoodWeight() int32 {
	if x != nil {
		return x.FoodWeight
	}
	return 0
}

func (x *BonusFood) GetFoodSize() int32 {
	if x != nil {
		return x.FoodSize
	}
	return 0
}

type HoleFood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoodList              []*BonusFood `protobuf:"bytes,1,rep,name=food_list,json=foodList,proto3" json:"food_list,omitempty"`
	FoodAddInterval       int32        `protobuf:"varint,2,opt,name=food_add_interval,json=foodAddInterval,proto3" json:"food_add_interval,omitempty"`
	FoodAddCount          int32        `protobuf:"varint,3,opt,name=food_add_count,json=foodAddCount,proto3" json:"food_add_count,omitempty"`
	FoodPositionMinRadius int32        `protobuf:"varint,4,opt,name=food_position_min_radius,json=foodPositionMinRadius,proto3" json:"food_position_min_radius,omitempty"`
	FoodPositionMaxRadius int32        `protobuf:"varint,5,opt,name=food_position_max_radius,json=foodPositionMaxRadius,proto3" json:"food_position_max_radius,omitempty"`
}

func (x *HoleFood) Reset() {
	*x = HoleFood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoleFood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoleFood) ProtoMessage() {}

func (x *HoleFood) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoleFood.ProtoReflect.Descriptor instead.
func (*HoleFood) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{151}
}

func (x *HoleFood) GetFoodList() []*BonusFood {
	if x != nil {
		return x.FoodList
	}
	return nil
}

func (x *HoleFood) GetFoodAddInterval() int32 {
	if x != nil {
		return x.FoodAddInterval
	}
	return 0
}

func (x *HoleFood) GetFoodAddCount() int32 {
	if x != nil {
		return x.FoodAddCount
	}
	return 0
}

func (x *HoleFood) GetFoodPositionMinRadius() int32 {
	if x != nil {
		return x.FoodPositionMinRadius
	}
	return 0
}

func (x *HoleFood) GetFoodPositionMaxRadius() int32 {
	if x != nil {
		return x.FoodPositionMaxRadius
	}
	return 0
}

type DotFood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Score int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DotFood) Reset() {
	*x = DotFood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DotFood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DotFood) ProtoMessage() {}

func (x *DotFood) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DotFood.ProtoReflect.Descriptor instead.
func (*DotFood) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{152}
}

func (x *DotFood) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DotFood) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type BonusFoodLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    int32     `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	HoleFood *HoleFood `protobuf:"bytes,2,opt,name=hole_food,json=holeFood,proto3" json:"hole_food,omitempty"`
	DotFood  *DotFood  `protobuf:"bytes,3,opt,name=dot_food,json=dotFood,proto3" json:"dot_food,omitempty"`
}

func (x *BonusFoodLevel) Reset() {
	*x = BonusFoodLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusFoodLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusFoodLevel) ProtoMessage() {}

func (x *BonusFoodLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusFoodLevel.ProtoReflect.Descriptor instead.
func (*BonusFoodLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{153}
}

func (x *BonusFoodLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BonusFoodLevel) GetHoleFood() *HoleFood {
	if x != nil {
		return x.HoleFood
	}
	return nil
}

func (x *BonusFoodLevel) GetDotFood() *DotFood {
	if x != nil {
		return x.DotFood
	}
	return nil
}

type BonusLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusLevel       int32            `protobuf:"varint,1,opt,name=bonus_level,json=bonusLevel,proto3" json:"bonus_level,omitempty"`
	BonusAiLevelList []*AiLevelWeight `protobuf:"bytes,2,rep,name=bonus_ai_level_list,json=bonusAiLevelList,proto3" json:"bonus_ai_level_list,omitempty"`
}

func (x *BonusLevel) Reset() {
	*x = BonusLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusLevel) ProtoMessage() {}

func (x *BonusLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusLevel.ProtoReflect.Descriptor instead.
func (*BonusLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{154}
}

func (x *BonusLevel) GetBonusLevel() int32 {
	if x != nil {
		return x.BonusLevel
	}
	return 0
}

func (x *BonusLevel) GetBonusAiLevelList() []*AiLevelWeight {
	if x != nil {
		return x.BonusAiLevelList
	}
	return nil
}

type BonusLevelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseBonusAi        int32         `protobuf:"varint,1,opt,name=use_bonus_ai,json=useBonusAi,proto3" json:"use_bonus_ai,omitempty"`
	DefaultBonusLevel int32         `protobuf:"varint,2,opt,name=default_bonus_level,json=defaultBonusLevel,proto3" json:"default_bonus_level,omitempty"`
	BonusLevels       []*BonusLevel `protobuf:"bytes,3,rep,name=bonus_levels,json=bonusLevels,proto3" json:"bonus_levels,omitempty"`
}

func (x *BonusLevelSettings) Reset() {
	*x = BonusLevelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusLevelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusLevelSettings) ProtoMessage() {}

func (x *BonusLevelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusLevelSettings.ProtoReflect.Descriptor instead.
func (*BonusLevelSettings) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{155}
}

func (x *BonusLevelSettings) GetUseBonusAi() int32 {
	if x != nil {
		return x.UseBonusAi
	}
	return 0
}

func (x *BonusLevelSettings) GetDefaultBonusLevel() int32 {
	if x != nil {
		return x.DefaultBonusLevel
	}
	return 0
}

func (x *BonusLevelSettings) GetBonusLevels() []*BonusLevel {
	if x != nil {
		return x.BonusLevels
	}
	return nil
}

type EndlessBonusNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenBonus                int32                    `protobuf:"varint,1,opt,name=open_bonus,json=openBonus,proto3" json:"open_bonus,omitempty"`
	MapBorder                *MapBorder               `protobuf:"bytes,2,opt,name=map_border,json=mapBorder,proto3" json:"map_border,omitempty"`
	BonusTriggerCondition    []*BonusTriggerCondition `protobuf:"bytes,3,rep,name=bonus_trigger_condition,json=bonusTriggerCondition,proto3" json:"bonus_trigger_condition,omitempty"`
	AiSnakeMaxMoveDistance   int32                    `protobuf:"varint,4,opt,name=ai_snake_max_move_distance,json=aiSnakeMaxMoveDistance,proto3" json:"ai_snake_max_move_distance,omitempty"`
	AiSnakeEnterBonusScore   int32                    `protobuf:"varint,5,opt,name=ai_snake_enter_bonus_score,json=aiSnakeEnterBonusScore,proto3" json:"ai_snake_enter_bonus_score,omitempty"`
	AiSnakeEnterBonusCount   int32                    `protobuf:"varint,6,opt,name=ai_snake_enter_bonus_count,json=aiSnakeEnterBonusCount,proto3" json:"ai_snake_enter_bonus_count,omitempty"`
	AiSnakeEnterBonusTime    int32                    `protobuf:"varint,7,opt,name=ai_snake_enter_bonus_time,json=aiSnakeEnterBonusTime,proto3" json:"ai_snake_enter_bonus_time,omitempty"`
	AiSnakeLeaveBonusMinTime int32                    `protobuf:"varint,8,opt,name=ai_snake_leave_bonus_min_time,json=aiSnakeLeaveBonusMinTime,proto3" json:"ai_snake_leave_bonus_min_time,omitempty"`
	AiSnakeLeaveBonusMaxTime int32                    `protobuf:"varint,9,opt,name=ai_snake_leave_bonus_max_time,json=aiSnakeLeaveBonusMaxTime,proto3" json:"ai_snake_leave_bonus_max_time,omitempty"`
	BonusFoodLevelList       []*BonusFoodLevel        `protobuf:"bytes,10,rep,name=bonus_food_level_list,json=bonusFoodLevelList,proto3" json:"bonus_food_level_list,omitempty"`
	BonusLevelSettings       *BonusLevelSettings      `protobuf:"bytes,11,opt,name=bonus_level_settings,json=bonusLevelSettings,proto3" json:"bonus_level_settings,omitempty"`
}

func (x *EndlessBonusNew) Reset() {
	*x = EndlessBonusNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBonusNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBonusNew) ProtoMessage() {}

func (x *EndlessBonusNew) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBonusNew.ProtoReflect.Descriptor instead.
func (*EndlessBonusNew) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{156}
}

func (x *EndlessBonusNew) GetOpenBonus() int32 {
	if x != nil {
		return x.OpenBonus
	}
	return 0
}

func (x *EndlessBonusNew) GetMapBorder() *MapBorder {
	if x != nil {
		return x.MapBorder
	}
	return nil
}

func (x *EndlessBonusNew) GetBonusTriggerCondition() []*BonusTriggerCondition {
	if x != nil {
		return x.BonusTriggerCondition
	}
	return nil
}

func (x *EndlessBonusNew) GetAiSnakeMaxMoveDistance() int32 {
	if x != nil {
		return x.AiSnakeMaxMoveDistance
	}
	return 0
}

func (x *EndlessBonusNew) GetAiSnakeEnterBonusScore() int32 {
	if x != nil {
		return x.AiSnakeEnterBonusScore
	}
	return 0
}

func (x *EndlessBonusNew) GetAiSnakeEnterBonusCount() int32 {
	if x != nil {
		return x.AiSnakeEnterBonusCount
	}
	return 0
}

func (x *EndlessBonusNew) GetAiSnakeEnterBonusTime() int32 {
	if x != nil {
		return x.AiSnakeEnterBonusTime
	}
	return 0
}

func (x *EndlessBonusNew) GetAiSnakeLeaveBonusMinTime() int32 {
	if x != nil {
		return x.AiSnakeLeaveBonusMinTime
	}
	return 0
}

func (x *EndlessBonusNew) GetAiSnakeLeaveBonusMaxTime() int32 {
	if x != nil {
		return x.AiSnakeLeaveBonusMaxTime
	}
	return 0
}

func (x *EndlessBonusNew) GetBonusFoodLevelList() []*BonusFoodLevel {
	if x != nil {
		return x.BonusFoodLevelList
	}
	return nil
}

func (x *EndlessBonusNew) GetBonusLevelSettings() *BonusLevelSettings {
	if x != nil {
		return x.BonusLevelSettings
	}
	return nil
}

type SpringSugarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64        `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64        `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	FoodList  []*BonusFood `protobuf:"bytes,3,rep,name=food_list,json=foodList,proto3" json:"food_list,omitempty"`
}

func (x *SpringSugarInfo) Reset() {
	*x = SpringSugarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpringSugarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpringSugarInfo) ProtoMessage() {}

func (x *SpringSugarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpringSugarInfo.ProtoReflect.Descriptor instead.
func (*SpringSugarInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{157}
}

func (x *SpringSugarInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SpringSugarInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SpringSugarInfo) GetFoodList() []*BonusFood {
	if x != nil {
		return x.FoodList
	}
	return nil
}

type MapBorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoorOpenAnimationDuration  int32   `protobuf:"varint,1,opt,name=door_open_animation_duration,json=doorOpenAnimationDuration,proto3" json:"door_open_animation_duration,omitempty"`
	DoorCloseAnimationDuration int32   `protobuf:"varint,2,opt,name=door_close_animation_duration,json=doorCloseAnimationDuration,proto3" json:"door_close_animation_duration,omitempty"`
	DoorCloseWarningTime       int32   `protobuf:"varint,3,opt,name=door_close_warning_time,json=doorCloseWarningTime,proto3" json:"door_close_warning_time,omitempty"`
	DoorWidth                  float32 `protobuf:"fixed32,4,opt,name=door_width,json=doorWidth,proto3" json:"door_width,omitempty"`
	MapVisibleDistance         int32   `protobuf:"varint,5,opt,name=map_visible_distance,json=mapVisibleDistance,proto3" json:"map_visible_distance,omitempty"`
	MapInvisibleDuration       int32   `protobuf:"varint,6,opt,name=map_invisible_duration,json=mapInvisibleDuration,proto3" json:"map_invisible_duration,omitempty"`
}

func (x *MapBorder) Reset() {
	*x = MapBorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBorder) ProtoMessage() {}

func (x *MapBorder) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBorder.ProtoReflect.Descriptor instead.
func (*MapBorder) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{158}
}

func (x *MapBorder) GetDoorOpenAnimationDuration() int32 {
	if x != nil {
		return x.DoorOpenAnimationDuration
	}
	return 0
}

func (x *MapBorder) GetDoorCloseAnimationDuration() int32 {
	if x != nil {
		return x.DoorCloseAnimationDuration
	}
	return 0
}

func (x *MapBorder) GetDoorCloseWarningTime() int32 {
	if x != nil {
		return x.DoorCloseWarningTime
	}
	return 0
}

func (x *MapBorder) GetDoorWidth() float32 {
	if x != nil {
		return x.DoorWidth
	}
	return 0
}

func (x *MapBorder) GetMapVisibleDistance() int32 {
	if x != nil {
		return x.MapVisibleDistance
	}
	return 0
}

func (x *MapBorder) GetMapInvisibleDuration() int32 {
	if x != nil {
		return x.MapInvisibleDuration
	}
	return 0
}

type AiNickListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AiNickList []string `protobuf:"bytes,2,rep,name=ai_nick_list,json=aiNickList,proto3" json:"ai_nick_list,omitempty"`
}

func (x *AiNickListItem) Reset() {
	*x = AiNickListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiNickListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiNickListItem) ProtoMessage() {}

func (x *AiNickListItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiNickListItem.ProtoReflect.Descriptor instead.
func (*AiNickListItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{159}
}

func (x *AiNickListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AiNickListItem) GetAiNickList() []string {
	if x != nil {
		return x.AiNickList
	}
	return nil
}

type AiSkinListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AiSkinList []int64 `protobuf:"varint,2,rep,packed,name=ai_skin_list,json=aiSkinList,proto3" json:"ai_skin_list,omitempty"`
}

func (x *AiSkinListItem) Reset() {
	*x = AiSkinListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiSkinListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiSkinListItem) ProtoMessage() {}

func (x *AiSkinListItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiSkinListItem.ProtoReflect.Descriptor instead.
func (*AiSkinListItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{160}
}

func (x *AiSkinListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AiSkinListItem) GetAiSkinList() []int64 {
	if x != nil {
		return x.AiSkinList
	}
	return nil
}

type AiConfigV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarSnake                         *StarSnake               `protobuf:"bytes,1,opt,name=star_snake,json=starSnake,proto3" json:"star_snake,omitempty"`
	MapRate                           float32                  `protobuf:"fixed32,3,opt,name=map_rate,json=mapRate,proto3" json:"map_rate,omitempty"`
	CameraMaxFactor                   float32                  `protobuf:"fixed32,4,opt,name=camera_max_factor,json=cameraMaxFactor,proto3" json:"camera_max_factor,omitempty"`
	CameraMinFactor                   float32                  `protobuf:"fixed32,5,opt,name=camera_min_factor,json=cameraMinFactor,proto3" json:"camera_min_factor,omitempty"`
	EatFoodRateChangeScope            float32                  `protobuf:"fixed32,6,opt,name=eat_food_rate_change_scope,json=eatFoodRateChangeScope,proto3" json:"eat_food_rate_change_scope,omitempty"`
	EatFoodCountForIncreaseNode       float32                  `protobuf:"fixed32,7,opt,name=eat_food_count_for_increase_node,json=eatFoodCountForIncreaseNode,proto3" json:"eat_food_count_for_increase_node,omitempty"`
	PlayerEatFoodRateChangeScope      float32                  `protobuf:"fixed32,8,opt,name=player_eat_food_rate_change_scope,json=playerEatFoodRateChangeScope,proto3" json:"player_eat_food_rate_change_scope,omitempty"`
	PlayerEatFoodCountForIncreaseNode float32                  `protobuf:"fixed32,9,opt,name=player_eat_food_count_for_increase_node,json=playerEatFoodCountForIncreaseNode,proto3" json:"player_eat_food_count_for_increase_node,omitempty"`
	AiBornLengthLimitRate             float32                  `protobuf:"fixed32,10,opt,name=ai_born_length_limit_rate,json=aiBornLengthLimitRate,proto3" json:"ai_born_length_limit_rate,omitempty"`
	AiWreckConvertRate                float32                  `protobuf:"fixed32,11,opt,name=ai_wreck_convert_rate,json=aiWreckConvertRate,proto3" json:"ai_wreck_convert_rate,omitempty"`
	ReviveWeakenPercent               float32                  `protobuf:"fixed32,12,opt,name=revive_weaken_percent,json=reviveWeakenPercent,proto3" json:"revive_weaken_percent,omitempty"`
	LengthCameraParam                 int64                    `protobuf:"varint,14,opt,name=length_camera_param,json=lengthCameraParam,proto3" json:"length_camera_param,omitempty"`
	LengthWidthParam                  int64                    `protobuf:"varint,15,opt,name=length_width_param,json=lengthWidthParam,proto3" json:"length_width_param,omitempty"`
	EatFoodRateChangeScopeLow         float32                  `protobuf:"fixed32,20,opt,name=eat_food_rate_change_scope_low,json=eatFoodRateChangeScopeLow,proto3" json:"eat_food_rate_change_scope_low,omitempty"`
	EatFoodCountForIncreaseNodeLow    float32                  `protobuf:"fixed32,21,opt,name=eat_food_count_for_increase_node_low,json=eatFoodCountForIncreaseNodeLow,proto3" json:"eat_food_count_for_increase_node_low,omitempty"`
	AiWreckNodeScoreRange             []*AiWreckNodeScoreRange `protobuf:"bytes,22,rep,name=ai_wreck_node_score_range,json=aiWreckNodeScoreRange,proto3" json:"ai_wreck_node_score_range,omitempty"`
	AiWreckNodeScoreRangeLow          []*AiWreckNodeScoreRange `protobuf:"bytes,23,rep,name=ai_wreck_node_score_range_low,json=aiWreckNodeScoreRangeLow,proto3" json:"ai_wreck_node_score_range_low,omitempty"`
	AiLevelList                       []*AiLevel               `protobuf:"bytes,24,rep,name=ai_level_list,json=aiLevelList,proto3" json:"ai_level_list,omitempty"`
	AiLengthRange                     []*AiLengthRange         `protobuf:"bytes,25,rep,name=ai_length_range,json=aiLengthRange,proto3" json:"ai_length_range,omitempty"`
	FloaterConfig                     *FloaterConfig           `protobuf:"bytes,26,opt,name=floater_config,json=floaterConfig,proto3" json:"floater_config,omitempty"`
	AiDifficultyConfigList            []*AiDifficultyConfig    `protobuf:"bytes,27,rep,name=ai_difficulty_config_list,json=aiDifficultyConfigList,proto3" json:"ai_difficulty_config_list,omitempty"`
	EndlessBonusNew                   *EndlessBonusNew         `protobuf:"bytes,29,opt,name=endless_bonus_new,json=endlessBonusNew,proto3" json:"endless_bonus_new,omitempty"`
	BornLength                        int64                    `protobuf:"varint,31,opt,name=born_length,json=bornLength,proto3" json:"born_length,omitempty"`
	MinBornKill                       int32                    `protobuf:"varint,32,opt,name=min_born_kill,json=minBornKill,proto3" json:"min_born_kill,omitempty"`
	MaxBornKill                       int32                    `protobuf:"varint,33,opt,name=max_born_kill,json=maxBornKill,proto3" json:"max_born_kill,omitempty"`
	BornKill                          int32                    `protobuf:"varint,34,opt,name=born_kill,json=bornKill,proto3" json:"born_kill,omitempty"`
	SpringSugarInfo                   *SpringSugarInfo         `protobuf:"bytes,35,opt,name=spring_sugar_info,json=springSugarInfo,proto3" json:"spring_sugar_info,omitempty"` // 春节糖果信息
	IsAnchor                          int64                    `protobuf:"varint,36,opt,name=is_anchor,json=isAnchor,proto3" json:"is_anchor,omitempty"`
	AiNickLists                       []*AiNickListItem        `protobuf:"bytes,37,rep,name=ai_nick_lists,json=aiNickLists,proto3" json:"ai_nick_lists,omitempty"`
	AiNickListId                      string                   `protobuf:"bytes,38,opt,name=ai_nick_list_id,json=aiNickListId,proto3" json:"ai_nick_list_id,omitempty"`
	AiNickNum                         int64                    `protobuf:"varint,39,opt,name=ai_nick_num,json=aiNickNum,proto3" json:"ai_nick_num,omitempty"`
	AiSkinLists                       []*AiSkinListItem        `protobuf:"bytes,40,rep,name=ai_skin_lists,json=aiSkinLists,proto3" json:"ai_skin_lists,omitempty"`
	AiSkinListId                      string                   `protobuf:"bytes,41,opt,name=ai_skin_list_id,json=aiSkinListId,proto3" json:"ai_skin_list_id,omitempty"`
	AiSkinNum                         int64                    `protobuf:"varint,42,opt,name=ai_skin_num,json=aiSkinNum,proto3" json:"ai_skin_num,omitempty"`
	DirectionLimit                    int64                    `protobuf:"varint,43,opt,name=direction_limit,json=directionLimit,proto3" json:"direction_limit,omitempty"`
}

func (x *AiConfigV3) Reset() {
	*x = AiConfigV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiConfigV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiConfigV3) ProtoMessage() {}

func (x *AiConfigV3) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiConfigV3.ProtoReflect.Descriptor instead.
func (*AiConfigV3) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{161}
}

func (x *AiConfigV3) GetStarSnake() *StarSnake {
	if x != nil {
		return x.StarSnake
	}
	return nil
}

func (x *AiConfigV3) GetMapRate() float32 {
	if x != nil {
		return x.MapRate
	}
	return 0
}

func (x *AiConfigV3) GetCameraMaxFactor() float32 {
	if x != nil {
		return x.CameraMaxFactor
	}
	return 0
}

func (x *AiConfigV3) GetCameraMinFactor() float32 {
	if x != nil {
		return x.CameraMinFactor
	}
	return 0
}

func (x *AiConfigV3) GetEatFoodRateChangeScope() float32 {
	if x != nil {
		return x.EatFoodRateChangeScope
	}
	return 0
}

func (x *AiConfigV3) GetEatFoodCountForIncreaseNode() float32 {
	if x != nil {
		return x.EatFoodCountForIncreaseNode
	}
	return 0
}

func (x *AiConfigV3) GetPlayerEatFoodRateChangeScope() float32 {
	if x != nil {
		return x.PlayerEatFoodRateChangeScope
	}
	return 0
}

func (x *AiConfigV3) GetPlayerEatFoodCountForIncreaseNode() float32 {
	if x != nil {
		return x.PlayerEatFoodCountForIncreaseNode
	}
	return 0
}

func (x *AiConfigV3) GetAiBornLengthLimitRate() float32 {
	if x != nil {
		return x.AiBornLengthLimitRate
	}
	return 0
}

func (x *AiConfigV3) GetAiWreckConvertRate() float32 {
	if x != nil {
		return x.AiWreckConvertRate
	}
	return 0
}

func (x *AiConfigV3) GetReviveWeakenPercent() float32 {
	if x != nil {
		return x.ReviveWeakenPercent
	}
	return 0
}

func (x *AiConfigV3) GetLengthCameraParam() int64 {
	if x != nil {
		return x.LengthCameraParam
	}
	return 0
}

func (x *AiConfigV3) GetLengthWidthParam() int64 {
	if x != nil {
		return x.LengthWidthParam
	}
	return 0
}

func (x *AiConfigV3) GetEatFoodRateChangeScopeLow() float32 {
	if x != nil {
		return x.EatFoodRateChangeScopeLow
	}
	return 0
}

func (x *AiConfigV3) GetEatFoodCountForIncreaseNodeLow() float32 {
	if x != nil {
		return x.EatFoodCountForIncreaseNodeLow
	}
	return 0
}

func (x *AiConfigV3) GetAiWreckNodeScoreRange() []*AiWreckNodeScoreRange {
	if x != nil {
		return x.AiWreckNodeScoreRange
	}
	return nil
}

func (x *AiConfigV3) GetAiWreckNodeScoreRangeLow() []*AiWreckNodeScoreRange {
	if x != nil {
		return x.AiWreckNodeScoreRangeLow
	}
	return nil
}

func (x *AiConfigV3) GetAiLevelList() []*AiLevel {
	if x != nil {
		return x.AiLevelList
	}
	return nil
}

func (x *AiConfigV3) GetAiLengthRange() []*AiLengthRange {
	if x != nil {
		return x.AiLengthRange
	}
	return nil
}

func (x *AiConfigV3) GetFloaterConfig() *FloaterConfig {
	if x != nil {
		return x.FloaterConfig
	}
	return nil
}

func (x *AiConfigV3) GetAiDifficultyConfigList() []*AiDifficultyConfig {
	if x != nil {
		return x.AiDifficultyConfigList
	}
	return nil
}

func (x *AiConfigV3) GetEndlessBonusNew() *EndlessBonusNew {
	if x != nil {
		return x.EndlessBonusNew
	}
	return nil
}

func (x *AiConfigV3) GetBornLength() int64 {
	if x != nil {
		return x.BornLength
	}
	return 0
}

func (x *AiConfigV3) GetMinBornKill() int32 {
	if x != nil {
		return x.MinBornKill
	}
	return 0
}

func (x *AiConfigV3) GetMaxBornKill() int32 {
	if x != nil {
		return x.MaxBornKill
	}
	return 0
}

func (x *AiConfigV3) GetBornKill() int32 {
	if x != nil {
		return x.BornKill
	}
	return 0
}

func (x *AiConfigV3) GetSpringSugarInfo() *SpringSugarInfo {
	if x != nil {
		return x.SpringSugarInfo
	}
	return nil
}

func (x *AiConfigV3) GetIsAnchor() int64 {
	if x != nil {
		return x.IsAnchor
	}
	return 0
}

func (x *AiConfigV3) GetAiNickLists() []*AiNickListItem {
	if x != nil {
		return x.AiNickLists
	}
	return nil
}

func (x *AiConfigV3) GetAiNickListId() string {
	if x != nil {
		return x.AiNickListId
	}
	return ""
}

func (x *AiConfigV3) GetAiNickNum() int64 {
	if x != nil {
		return x.AiNickNum
	}
	return 0
}

func (x *AiConfigV3) GetAiSkinLists() []*AiSkinListItem {
	if x != nil {
		return x.AiSkinLists
	}
	return nil
}

func (x *AiConfigV3) GetAiSkinListId() string {
	if x != nil {
		return x.AiSkinListId
	}
	return ""
}

func (x *AiConfigV3) GetAiSkinNum() int64 {
	if x != nil {
		return x.AiSkinNum
	}
	return 0
}

func (x *AiConfigV3) GetDirectionLimit() int64 {
	if x != nil {
		return x.DirectionLimit
	}
	return 0
}

type LimitAiConfigV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *AiConfigV3 `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	LimitTime int64       `protobuf:"varint,2,opt,name=limit_time,json=limitTime,proto3" json:"limit_time,omitempty"` // 限制时间
}

func (x *LimitAiConfigV3) Reset() {
	*x = LimitAiConfigV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitAiConfigV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitAiConfigV3) ProtoMessage() {}

func (x *LimitAiConfigV3) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitAiConfigV3.ProtoReflect.Descriptor instead.
func (*LimitAiConfigV3) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{162}
}

func (x *LimitAiConfigV3) GetBase() *AiConfigV3 {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LimitAiConfigV3) GetLimitTime() int64 {
	if x != nil {
		return x.LimitTime
	}
	return 0
}

// =====  system_config start  =======
type GameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetaFlag       int64  `protobuf:"varint,1,opt,name=beta_flag,json=betaFlag,proto3" json:"beta_flag,omitempty"`          // 0:未开启，1:正式开启：2:公测中, 3:入口屏蔽
	ProcessFlag    int64  `protobuf:"varint,2,opt,name=process_flag,json=processFlag,proto3" json:"process_flag,omitempty"` // 0:主进程，1:独立进程
	StartTime      string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`        // 开始时间，格式：01：00
	EndTime        string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`              // 结束时间
	StarLimit      int64  `protobuf:"varint,5,opt,name=star_limit,json=starLimit,proto3" json:"star_limit,omitempty"`
	UseModeVersion int64  `protobuf:"varint,6,opt,name=use_mode_version,json=useModeVersion,proto3" json:"use_mode_version,omitempty"`
	Rate           int64  `protobuf:"varint,7,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{163}
}

func (x *GameConfig) GetBetaFlag() int64 {
	if x != nil {
		return x.BetaFlag
	}
	return 0
}

func (x *GameConfig) GetProcessFlag() int64 {
	if x != nil {
		return x.ProcessFlag
	}
	return 0
}

func (x *GameConfig) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GameConfig) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GameConfig) GetStarLimit() int64 {
	if x != nil {
		return x.StarLimit
	}
	return 0
}

func (x *GameConfig) GetUseModeVersion() int64 {
	if x != nil {
		return x.UseModeVersion
	}
	return 0
}

func (x *GameConfig) GetRate() int64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type SystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigs         map[string]*GameConfig `protobuf:"bytes,1,rep,name=game_configs,json=gameConfigs,proto3" json:"game_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                              // key: game_mode
	EndlessExp          map[string]bool        `protobuf:"bytes,2,rep,name=endless_exp,json=endlessExp,proto3" json:"endless_exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                                // 无尽难度实验白名单
	OlEndlessPk         map[string]bool        `protobuf:"bytes,3,rep,name=ol_endless_pk,json=olEndlessPk,proto3" json:"ol_endless_pk,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                           // 多人无尽比赛模式名单
	VoiceRoomUids       map[string]bool        `protobuf:"bytes,4,rep,name=voice_room_uids,json=voiceRoomUids,proto3" json:"voice_room_uids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                     // 语音房白名单
	TelephoneBlackList  map[string]bool        `protobuf:"bytes,5,rep,name=telephone_black_list,json=telephoneBlackList,proto3" json:"telephone_black_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`      // 手机号黑名单
	IdcardBlackList     map[string]bool        `protobuf:"bytes,6,rep,name=idcard_black_list,json=idcardBlackList,proto3" json:"idcard_black_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`               // 身份证黑名单
	VoiceWhiteOwnerList map[string]bool        `protobuf:"bytes,7,rep,name=voice_white_owner_list,json=voiceWhiteOwnerList,proto3" json:"voice_white_owner_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 主播白名单
	OlEndlessEntrance   map[string]bool        `protobuf:"bytes,8,rep,name=ol_endless_entrance,json=olEndlessEntrance,proto3" json:"ol_endless_entrance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`         // 无尽对决白名单
	IosShake            map[string]bool        `protobuf:"bytes,9,rep,name=ios_shake,json=iosShake,proto3" json:"ios_shake,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                                      // iOS震动白名单
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{164}
}

func (x *SystemConfig) GetGameConfigs() map[string]*GameConfig {
	if x != nil {
		return x.GameConfigs
	}
	return nil
}

func (x *SystemConfig) GetEndlessExp() map[string]bool {
	if x != nil {
		return x.EndlessExp
	}
	return nil
}

func (x *SystemConfig) GetOlEndlessPk() map[string]bool {
	if x != nil {
		return x.OlEndlessPk
	}
	return nil
}

func (x *SystemConfig) GetVoiceRoomUids() map[string]bool {
	if x != nil {
		return x.VoiceRoomUids
	}
	return nil
}

func (x *SystemConfig) GetTelephoneBlackList() map[string]bool {
	if x != nil {
		return x.TelephoneBlackList
	}
	return nil
}

func (x *SystemConfig) GetIdcardBlackList() map[string]bool {
	if x != nil {
		return x.IdcardBlackList
	}
	return nil
}

func (x *SystemConfig) GetVoiceWhiteOwnerList() map[string]bool {
	if x != nil {
		return x.VoiceWhiteOwnerList
	}
	return nil
}

func (x *SystemConfig) GetOlEndlessEntrance() map[string]bool {
	if x != nil {
		return x.OlEndlessEntrance
	}
	return nil
}

func (x *SystemConfig) GetIosShake() map[string]bool {
	if x != nil {
		return x.IosShake
	}
	return nil
}

// ==========  reward_config start  =======
type RewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectlyShareSwitch  int64             `protobuf:"varint,1,opt,name=directly_share_switch,json=directlyShareSwitch,proto3" json:"directly_share_switch,omitempty"`
	InvitePerReward      int64             `protobuf:"varint,2,opt,name=invite_per_reward,json=invitePerReward,proto3" json:"invite_per_reward,omitempty"`
	InviteRewardDayLimit int64             `protobuf:"varint,3,opt,name=invite_reward_day_limit,json=inviteRewardDayLimit,proto3" json:"invite_reward_day_limit,omitempty"`
	InviteTotalReward    int64             `protobuf:"varint,4,opt,name=invite_total_reward,json=inviteTotalReward,proto3" json:"invite_total_reward,omitempty"`
	MoneyRewardContact   string            `protobuf:"bytes,5,opt,name=money_reward_contact,json=moneyRewardContact,proto3" json:"money_reward_contact,omitempty"`
	RegisterReward       []*RegisterReward `protobuf:"bytes,6,rep,name=register_reward,json=registerReward,proto3" json:"register_reward,omitempty"`
	SharePerReward       int64             `protobuf:"varint,7,opt,name=share_per_reward,json=sharePerReward,proto3" json:"share_per_reward,omitempty"`
	ShareRewardDayLimit  int64             `protobuf:"varint,8,opt,name=share_reward_day_limit,json=shareRewardDayLimit,proto3" json:"share_reward_day_limit,omitempty"`
	ShareRewardWeekLimit int64             `protobuf:"varint,9,opt,name=share_reward_week_limit,json=shareRewardWeekLimit,proto3" json:"share_reward_week_limit,omitempty"`
	WechatAppealSwitch   int64             `protobuf:"varint,10,opt,name=wechat_appeal_switch,json=wechatAppealSwitch,proto3" json:"wechat_appeal_switch,omitempty"`
	WechatQrCodeUrl      string            `protobuf:"bytes,11,opt,name=wechat_qr_code_url,json=wechatQrCodeUrl,proto3" json:"wechat_qr_code_url,omitempty"`
	WechatRewardCoin     int64             `protobuf:"varint,12,opt,name=wechat_reward_coin,json=wechatRewardCoin,proto3" json:"wechat_reward_coin,omitempty"`
}

func (x *RewardConfig) Reset() {
	*x = RewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardConfig) ProtoMessage() {}

func (x *RewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardConfig.ProtoReflect.Descriptor instead.
func (*RewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{165}
}

func (x *RewardConfig) GetDirectlyShareSwitch() int64 {
	if x != nil {
		return x.DirectlyShareSwitch
	}
	return 0
}

func (x *RewardConfig) GetInvitePerReward() int64 {
	if x != nil {
		return x.InvitePerReward
	}
	return 0
}

func (x *RewardConfig) GetInviteRewardDayLimit() int64 {
	if x != nil {
		return x.InviteRewardDayLimit
	}
	return 0
}

func (x *RewardConfig) GetInviteTotalReward() int64 {
	if x != nil {
		return x.InviteTotalReward
	}
	return 0
}

func (x *RewardConfig) GetMoneyRewardContact() string {
	if x != nil {
		return x.MoneyRewardContact
	}
	return ""
}

func (x *RewardConfig) GetRegisterReward() []*RegisterReward {
	if x != nil {
		return x.RegisterReward
	}
	return nil
}

func (x *RewardConfig) GetSharePerReward() int64 {
	if x != nil {
		return x.SharePerReward
	}
	return 0
}

func (x *RewardConfig) GetShareRewardDayLimit() int64 {
	if x != nil {
		return x.ShareRewardDayLimit
	}
	return 0
}

func (x *RewardConfig) GetShareRewardWeekLimit() int64 {
	if x != nil {
		return x.ShareRewardWeekLimit
	}
	return 0
}

func (x *RewardConfig) GetWechatAppealSwitch() int64 {
	if x != nil {
		return x.WechatAppealSwitch
	}
	return 0
}

func (x *RewardConfig) GetWechatQrCodeUrl() string {
	if x != nil {
		return x.WechatQrCodeUrl
	}
	return ""
}

func (x *RewardConfig) GetWechatRewardCoin() int64 {
	if x != nil {
		return x.WechatRewardCoin
	}
	return 0
}

type RegisterReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgImg  string `protobuf:"bytes,1,opt,name=bg_img,json=bgImg,proto3" json:"bg_img,omitempty"`
	GifImg string `protobuf:"bytes,2,opt,name=gif_img,json=gifImg,proto3" json:"gif_img,omitempty"`
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *RegisterReward) Reset() {
	*x = RegisterReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReward) ProtoMessage() {}

func (x *RegisterReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReward.ProtoReflect.Descriptor instead.
func (*RegisterReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{166}
}

func (x *RegisterReward) GetBgImg() string {
	if x != nil {
		return x.BgImg
	}
	return ""
}

func (x *RegisterReward) GetGifImg() string {
	if x != nil {
		return x.GifImg
	}
	return ""
}

func (x *RegisterReward) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// ===== interface_expire  start  =======
type InterfaceExpire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityApi  *ActivityAPI  `protobuf:"bytes,1,opt,name=activity_api,json=activityApi,proto3" json:"activity_api,omitempty"`
	ClanApi      *ClanAPI      `protobuf:"bytes,2,opt,name=clan_api,json=clanApi,proto3" json:"clan_api,omitempty"`
	Config       *ExpireConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	EventApi     *EventAPI     `protobuf:"bytes,4,opt,name=event_api,json=eventApi,proto3" json:"event_api,omitempty"`
	FriendApi    *FriendAPI    `protobuf:"bytes,5,opt,name=friend_api,json=friendApi,proto3" json:"friend_api,omitempty"`
	InboxApi     *InboxAPI     `protobuf:"bytes,6,opt,name=inbox_api,json=inboxApi,proto3" json:"inbox_api,omitempty"`
	NearbyApi    *NearbyAPI    `protobuf:"bytes,7,opt,name=nearby_api,json=nearbyApi,proto3" json:"nearby_api,omitempty"`
	ScoreApi     *ScoreAPI     `protobuf:"bytes,8,opt,name=score_api,json=scoreApi,proto3" json:"score_api,omitempty"`
	ShareApi     *ShareAPI     `protobuf:"bytes,9,opt,name=share_api,json=shareApi,proto3" json:"share_api,omitempty"`
	TopListV2    *TopListV2    `protobuf:"bytes,10,opt,name=top_list_v2,json=topListV2,proto3" json:"top_list_v2,omitempty"`
	VoiceRoomApi *VoiceRoomAPI `protobuf:"bytes,11,opt,name=voice_room_api,json=voiceRoomApi,proto3" json:"voice_room_api,omitempty"`
}

func (x *InterfaceExpire) Reset() {
	*x = InterfaceExpire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceExpire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceExpire) ProtoMessage() {}

func (x *InterfaceExpire) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceExpire.ProtoReflect.Descriptor instead.
func (*InterfaceExpire) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{167}
}

func (x *InterfaceExpire) GetActivityApi() *ActivityAPI {
	if x != nil {
		return x.ActivityApi
	}
	return nil
}

func (x *InterfaceExpire) GetClanApi() *ClanAPI {
	if x != nil {
		return x.ClanApi
	}
	return nil
}

func (x *InterfaceExpire) GetConfig() *ExpireConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *InterfaceExpire) GetEventApi() *EventAPI {
	if x != nil {
		return x.EventApi
	}
	return nil
}

func (x *InterfaceExpire) GetFriendApi() *FriendAPI {
	if x != nil {
		return x.FriendApi
	}
	return nil
}

func (x *InterfaceExpire) GetInboxApi() *InboxAPI {
	if x != nil {
		return x.InboxApi
	}
	return nil
}

func (x *InterfaceExpire) GetNearbyApi() *NearbyAPI {
	if x != nil {
		return x.NearbyApi
	}
	return nil
}

func (x *InterfaceExpire) GetScoreApi() *ScoreAPI {
	if x != nil {
		return x.ScoreApi
	}
	return nil
}

func (x *InterfaceExpire) GetShareApi() *ShareAPI {
	if x != nil {
		return x.ShareApi
	}
	return nil
}

func (x *InterfaceExpire) GetTopListV2() *TopListV2 {
	if x != nil {
		return x.TopListV2
	}
	return nil
}

func (x *InterfaceExpire) GetVoiceRoomApi() *VoiceRoomAPI {
	if x != nil {
		return x.VoiceRoomApi
	}
	return nil
}

type ActivityAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetActivityList   int64 `protobuf:"varint,1,opt,name=get_activity_list,json=getActivityList,proto3" json:"get_activity_list,omitempty"`
	GetLatestActivity int64 `protobuf:"varint,2,opt,name=get_latest_activity,json=getLatestActivity,proto3" json:"get_latest_activity,omitempty"`
}

func (x *ActivityAPI) Reset() {
	*x = ActivityAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityAPI) ProtoMessage() {}

func (x *ActivityAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityAPI.ProtoReflect.Descriptor instead.
func (*ActivityAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{168}
}

func (x *ActivityAPI) GetGetActivityList() int64 {
	if x != nil {
		return x.GetActivityList
	}
	return 0
}

func (x *ActivityAPI) GetGetLatestActivity() int64 {
	if x != nil {
		return x.GetLatestActivity
	}
	return 0
}

type ClanAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetClanInfo       int64 `protobuf:"varint,1,opt,name=get_clan_info,json=getClanInfo,proto3" json:"get_clan_info,omitempty"`
	GetClanMemberList int64 `protobuf:"varint,2,opt,name=get_clan_member_list,json=getClanMemberList,proto3" json:"get_clan_member_list,omitempty"`
}

func (x *ClanAPI) Reset() {
	*x = ClanAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanAPI) ProtoMessage() {}

func (x *ClanAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanAPI.ProtoReflect.Descriptor instead.
func (*ClanAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{169}
}

func (x *ClanAPI) GetGetClanInfo() int64 {
	if x != nil {
		return x.GetClanInfo
	}
	return 0
}

func (x *ClanAPI) GetGetClanMemberList() int64 {
	if x != nil {
		return x.GetClanMemberList
	}
	return 0
}

type ExpireConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetBetaState int64 `protobuf:"varint,1,opt,name=get_beta_state,json=getBetaState,proto3" json:"get_beta_state,omitempty"`
}

func (x *ExpireConfig) Reset() {
	*x = ExpireConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireConfig) ProtoMessage() {}

func (x *ExpireConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireConfig.ProtoReflect.Descriptor instead.
func (*ExpireConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{170}
}

func (x *ExpireConfig) GetGetBetaState() int64 {
	if x != nil {
		return x.GetBetaState
	}
	return 0
}

type EventAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetEventList   int64 `protobuf:"varint,1,opt,name=get_event_list,json=getEventList,proto3" json:"get_event_list,omitempty"`
	GetEventListV2 int64 `protobuf:"varint,2,opt,name=get_event_list_v2,json=getEventListV2,proto3" json:"get_event_list_v2,omitempty"`
}

func (x *EventAPI) Reset() {
	*x = EventAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAPI) ProtoMessage() {}

func (x *EventAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAPI.ProtoReflect.Descriptor instead.
func (*EventAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{171}
}

func (x *EventAPI) GetGetEventList() int64 {
	if x != nil {
		return x.GetEventList
	}
	return 0
}

func (x *EventAPI) GetGetEventListV2() int64 {
	if x != nil {
		return x.GetEventListV2
	}
	return 0
}

type FriendAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetFriendList int64 `protobuf:"varint,1,opt,name=get_friend_list,json=getFriendList,proto3" json:"get_friend_list,omitempty"`
}

func (x *FriendAPI) Reset() {
	*x = FriendAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendAPI) ProtoMessage() {}

func (x *FriendAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendAPI.ProtoReflect.Descriptor instead.
func (*FriendAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{172}
}

func (x *FriendAPI) GetGetFriendList() int64 {
	if x != nil {
		return x.GetFriendList
	}
	return 0
}

type InboxAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetMailList int64 `protobuf:"varint,1,opt,name=get_mail_list,json=getMailList,proto3" json:"get_mail_list,omitempty"`
}

func (x *InboxAPI) Reset() {
	*x = InboxAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboxAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxAPI) ProtoMessage() {}

func (x *InboxAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxAPI.ProtoReflect.Descriptor instead.
func (*InboxAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{173}
}

func (x *InboxAPI) GetGetMailList() int64 {
	if x != nil {
		return x.GetMailList
	}
	return 0
}

type NearbyAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetNearby int64 `protobuf:"varint,1,opt,name=get_nearby,json=getNearby,proto3" json:"get_nearby,omitempty"`
}

func (x *NearbyAPI) Reset() {
	*x = NearbyAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearbyAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearbyAPI) ProtoMessage() {}

func (x *NearbyAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearbyAPI.ProtoReflect.Descriptor instead.
func (*NearbyAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{174}
}

func (x *NearbyAPI) GetGetNearby() int64 {
	if x != nil {
		return x.GetNearby
	}
	return 0
}

type ScoreAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetPrimeInfo     int64 `protobuf:"varint,1,opt,name=get_prime_info,json=getPrimeInfo,proto3" json:"get_prime_info,omitempty"`
	GetRank          int64 `protobuf:"varint,2,opt,name=get_rank,json=getRank,proto3" json:"get_rank,omitempty"`
	GetUserScoreInfo int64 `protobuf:"varint,3,opt,name=get_user_score_info,json=getUserScoreInfo,proto3" json:"get_user_score_info,omitempty"`
}

func (x *ScoreAPI) Reset() {
	*x = ScoreAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreAPI) ProtoMessage() {}

func (x *ScoreAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreAPI.ProtoReflect.Descriptor instead.
func (*ScoreAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{175}
}

func (x *ScoreAPI) GetGetPrimeInfo() int64 {
	if x != nil {
		return x.GetPrimeInfo
	}
	return 0
}

func (x *ScoreAPI) GetGetRank() int64 {
	if x != nil {
		return x.GetRank
	}
	return 0
}

func (x *ScoreAPI) GetGetUserScoreInfo() int64 {
	if x != nil {
		return x.GetUserScoreInfo
	}
	return 0
}

type ShareAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetShareInfo int64 `protobuf:"varint,1,opt,name=get_share_info,json=getShareInfo,proto3" json:"get_share_info,omitempty"`
}

func (x *ShareAPI) Reset() {
	*x = ShareAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareAPI) ProtoMessage() {}

func (x *ShareAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareAPI.ProtoReflect.Descriptor instead.
func (*ShareAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{176}
}

func (x *ShareAPI) GetGetShareInfo() int64 {
	if x != nil {
		return x.GetShareInfo
	}
	return 0
}

type TopListV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetClanTopList   int64 `protobuf:"varint,1,opt,name=get_clan_top_list,json=getClanTopList,proto3" json:"get_clan_top_list,omitempty"`
	GetClanTopListV2 int64 `protobuf:"varint,2,opt,name=get_clan_top_list_v2,json=getClanTopListV2,proto3" json:"get_clan_top_list_v2,omitempty"`
	GetExciteTopList int64 `protobuf:"varint,3,opt,name=get_excite_top_list,json=getExciteTopList,proto3" json:"get_excite_top_list,omitempty"`
	GetMarryTopList  int64 `protobuf:"varint,4,opt,name=get_marry_top_list,json=getMarryTopList,proto3" json:"get_marry_top_list,omitempty"`
	GetSkinTopList   int64 `protobuf:"varint,5,opt,name=get_skin_top_list,json=getSkinTopList,proto3" json:"get_skin_top_list,omitempty"`
	GetTopList       int64 `protobuf:"varint,6,opt,name=get_top_list,json=getTopList,proto3" json:"get_top_list,omitempty"`
	GetTopListV2     int64 `protobuf:"varint,7,opt,name=get_top_list_v2,json=getTopListV2,proto3" json:"get_top_list_v2,omitempty"`
}

func (x *TopListV2) Reset() {
	*x = TopListV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopListV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopListV2) ProtoMessage() {}

func (x *TopListV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopListV2.ProtoReflect.Descriptor instead.
func (*TopListV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{177}
}

func (x *TopListV2) GetGetClanTopList() int64 {
	if x != nil {
		return x.GetClanTopList
	}
	return 0
}

func (x *TopListV2) GetGetClanTopListV2() int64 {
	if x != nil {
		return x.GetClanTopListV2
	}
	return 0
}

func (x *TopListV2) GetGetExciteTopList() int64 {
	if x != nil {
		return x.GetExciteTopList
	}
	return 0
}

func (x *TopListV2) GetGetMarryTopList() int64 {
	if x != nil {
		return x.GetMarryTopList
	}
	return 0
}

func (x *TopListV2) GetGetSkinTopList() int64 {
	if x != nil {
		return x.GetSkinTopList
	}
	return 0
}

func (x *TopListV2) GetGetTopList() int64 {
	if x != nil {
		return x.GetTopList
	}
	return 0
}

func (x *TopListV2) GetGetTopListV2() int64 {
	if x != nil {
		return x.GetTopListV2
	}
	return 0
}

type VoiceRoomAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetConfig int64 `protobuf:"varint,1,opt,name=get_config,json=getConfig,proto3" json:"get_config,omitempty"`
}

func (x *VoiceRoomAPI) Reset() {
	*x = VoiceRoomAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceRoomAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceRoomAPI) ProtoMessage() {}

func (x *VoiceRoomAPI) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceRoomAPI.ProtoReflect.Descriptor instead.
func (*VoiceRoomAPI) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{178}
}

func (x *VoiceRoomAPI) GetGetConfig() int64 {
	if x != nil {
		return x.GetConfig
	}
	return 0
}

// =========   ms_config start   ========
type MsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HbRate      int64     `protobuf:"varint,1,opt,name=hb_rate,json=hbRate,proto3" json:"hb_rate,omitempty"`
	LogRelay    []string  `protobuf:"bytes,2,rep,name=log_relay,json=logRelay,proto3" json:"log_relay,omitempty"`
	MsAddr      []*MsAddr `protobuf:"bytes,3,rep,name=ms_addr,json=msAddr,proto3" json:"ms_addr,omitempty"`
	MsAddr2     []*MsAddr `protobuf:"bytes,4,rep,name=ms_addr2,json=msAddr2,proto3" json:"ms_addr2,omitempty"`
	RelayHbRate int64     `protobuf:"varint,5,opt,name=relay_hb_rate,json=relayHbRate,proto3" json:"relay_hb_rate,omitempty"`
}

func (x *MsConfig) Reset() {
	*x = MsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsConfig) ProtoMessage() {}

func (x *MsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsConfig.ProtoReflect.Descriptor instead.
func (*MsConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{179}
}

func (x *MsConfig) GetHbRate() int64 {
	if x != nil {
		return x.HbRate
	}
	return 0
}

func (x *MsConfig) GetLogRelay() []string {
	if x != nil {
		return x.LogRelay
	}
	return nil
}

func (x *MsConfig) GetMsAddr() []*MsAddr {
	if x != nil {
		return x.MsAddr
	}
	return nil
}

func (x *MsConfig) GetMsAddr2() []*MsAddr {
	if x != nil {
		return x.MsAddr2
	}
	return nil
}

func (x *MsConfig) GetRelayHbRate() int64 {
	if x != nil {
		return x.RelayHbRate
	}
	return 0
}

type MsAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port    int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	HostBak string `protobuf:"bytes,3,opt,name=host_bak,json=hostBak,proto3" json:"host_bak,omitempty"`
}

func (x *MsAddr) Reset() {
	*x = MsAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsAddr) ProtoMessage() {}

func (x *MsAddr) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsAddr.ProtoReflect.Descriptor instead.
func (*MsAddr) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{180}
}

func (x *MsAddr) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MsAddr) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MsAddr) GetHostBak() string {
	if x != nil {
		return x.HostBak
	}
	return ""
}

// ==========   province_config start ========
type ProvinceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceList       []string `protobuf:"bytes,1,rep,name=province_list,json=provinceList,proto3" json:"province_list,omitempty"`
	ProvincePinyinList []string `protobuf:"bytes,2,rep,name=province_pinyin_list,json=provincePinyinList,proto3" json:"province_pinyin_list,omitempty"`
}

func (x *ProvinceConfig) Reset() {
	*x = ProvinceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvinceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvinceConfig) ProtoMessage() {}

func (x *ProvinceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvinceConfig.ProtoReflect.Descriptor instead.
func (*ProvinceConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{181}
}

func (x *ProvinceConfig) GetProvinceList() []string {
	if x != nil {
		return x.ProvinceList
	}
	return nil
}

func (x *ProvinceConfig) GetProvincePinyinList() []string {
	if x != nil {
		return x.ProvincePinyinList
	}
	return nil
}

// ========   excite_mode_config  start  ===========
type ExciteModeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdHatPopup    []int64         `protobuf:"varint,1,rep,packed,name=ad_hat_popup,json=adHatPopup,proto3" json:"ad_hat_popup,omitempty"`
	GamePropList  []*GamePropList `protobuf:"bytes,2,rep,name=game_prop_list,json=gamePropList,proto3" json:"game_prop_list,omitempty"`
	GamePropList2 []*GamePropList `protobuf:"bytes,3,rep,name=game_prop_list2,json=gamePropList2,proto3" json:"game_prop_list2,omitempty"`
	ParamConfig   *ParamConfig    `protobuf:"bytes,4,opt,name=param_config,json=paramConfig,proto3" json:"param_config,omitempty"`
	LifeAbTest    int64           `protobuf:"varint,5,opt,name=life_ab_test,json=lifeAbTest,proto3" json:"life_ab_test,omitempty"`
	TextConfig    []string        `protobuf:"bytes,6,rep,name=text_config,json=textConfig,proto3" json:"text_config,omitempty"`
	GameConfig    *ModeGameConfig `protobuf:"bytes,7,opt,name=game_config,json=gameConfig,proto3" json:"game_config,omitempty"`
}

func (x *ExciteModeConfig) Reset() {
	*x = ExciteModeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExciteModeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExciteModeConfig) ProtoMessage() {}

func (x *ExciteModeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExciteModeConfig.ProtoReflect.Descriptor instead.
func (*ExciteModeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{182}
}

func (x *ExciteModeConfig) GetAdHatPopup() []int64 {
	if x != nil {
		return x.AdHatPopup
	}
	return nil
}

func (x *ExciteModeConfig) GetGamePropList() []*GamePropList {
	if x != nil {
		return x.GamePropList
	}
	return nil
}

func (x *ExciteModeConfig) GetGamePropList2() []*GamePropList {
	if x != nil {
		return x.GamePropList2
	}
	return nil
}

func (x *ExciteModeConfig) GetParamConfig() *ParamConfig {
	if x != nil {
		return x.ParamConfig
	}
	return nil
}

func (x *ExciteModeConfig) GetLifeAbTest() int64 {
	if x != nil {
		return x.LifeAbTest
	}
	return 0
}

func (x *ExciteModeConfig) GetTextConfig() []string {
	if x != nil {
		return x.TextConfig
	}
	return nil
}

func (x *ExciteModeConfig) GetGameConfig() *ModeGameConfig {
	if x != nil {
		return x.GameConfig
	}
	return nil
}

type GamePropList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc        string           `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	EffectDesc  string           `protobuf:"bytes,2,opt,name=effect_desc,json=effectDesc,proto3" json:"effect_desc,omitempty"`
	LevelInfo   []*ModeLevelInfo `protobuf:"bytes,3,rep,name=level_info,json=levelInfo,proto3" json:"level_info,omitempty"`
	Name        string           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PropId      int64            `protobuf:"varint,5,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	UpgradeDesc string           `protobuf:"bytes,6,opt,name=upgrade_desc,json=upgradeDesc,proto3" json:"upgrade_desc,omitempty"`
}

func (x *GamePropList) Reset() {
	*x = GamePropList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePropList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePropList) ProtoMessage() {}

func (x *GamePropList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePropList.ProtoReflect.Descriptor instead.
func (*GamePropList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{183}
}

func (x *GamePropList) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GamePropList) GetEffectDesc() string {
	if x != nil {
		return x.EffectDesc
	}
	return ""
}

func (x *GamePropList) GetLevelInfo() []*ModeLevelInfo {
	if x != nil {
		return x.LevelInfo
	}
	return nil
}

func (x *GamePropList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GamePropList) GetPropId() int64 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *GamePropList) GetUpgradeDesc() string {
	if x != nil {
		return x.UpgradeDesc
	}
	return ""
}

type ModeLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGoldcoin int64   `protobuf:"varint,1,opt,name=cost_goldcoin,json=costGoldcoin,proto3" json:"cost_goldcoin,omitempty"`
	Effect       float64 `protobuf:"fixed64,2,opt,name=effect,proto3" json:"effect,omitempty"`
	Level        int64   `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *ModeLevelInfo) Reset() {
	*x = ModeLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeLevelInfo) ProtoMessage() {}

func (x *ModeLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeLevelInfo.ProtoReflect.Descriptor instead.
func (*ModeLevelInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{184}
}

func (x *ModeLevelInfo) GetCostGoldcoin() int64 {
	if x != nil {
		return x.CostGoldcoin
	}
	return 0
}

func (x *ModeLevelInfo) GetEffect() float64 {
	if x != nil {
		return x.Effect
	}
	return 0
}

func (x *ModeLevelInfo) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ParamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InGame      *InGame     `protobuf:"bytes,1,opt,name=in_game,json=inGame,proto3" json:"in_game,omitempty"`
	PropRate    []*PropRate `protobuf:"bytes,2,rep,name=prop_rate,json=propRate,proto3" json:"prop_rate,omitempty"`
	RateConfig  *RateConfig `protobuf:"bytes,3,opt,name=rate_config,json=rateConfig,proto3" json:"rate_config,omitempty"`
	ReliveLimit int64       `protobuf:"varint,4,opt,name=relive_limit,json=reliveLimit,proto3" json:"relive_limit,omitempty"`
}

func (x *ParamConfig) Reset() {
	*x = ParamConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamConfig) ProtoMessage() {}

func (x *ParamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamConfig.ProtoReflect.Descriptor instead.
func (*ParamConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{185}
}

func (x *ParamConfig) GetInGame() *InGame {
	if x != nil {
		return x.InGame
	}
	return nil
}

func (x *ParamConfig) GetPropRate() []*PropRate {
	if x != nil {
		return x.PropRate
	}
	return nil
}

func (x *ParamConfig) GetRateConfig() *RateConfig {
	if x != nil {
		return x.RateConfig
	}
	return nil
}

func (x *ParamConfig) GetReliveLimit() int64 {
	if x != nil {
		return x.ReliveLimit
	}
	return 0
}

type InGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComboInterval int64   `protobuf:"varint,1,opt,name=combo_interval,json=comboInterval,proto3" json:"combo_interval,omitempty"`
	EatEfficiency float64 `protobuf:"fixed64,2,opt,name=eat_efficiency,json=eatEfficiency,proto3" json:"eat_efficiency,omitempty"`
	MaxPropNum    int64   `protobuf:"varint,3,opt,name=max_prop_num,json=maxPropNum,proto3" json:"max_prop_num,omitempty"`
	SpeedUpReduce []int64 `protobuf:"varint,4,rep,packed,name=speed_up_reduce,json=speedUpReduce,proto3" json:"speed_up_reduce,omitempty"`
}

func (x *InGame) Reset() {
	*x = InGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InGame) ProtoMessage() {}

func (x *InGame) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InGame.ProtoReflect.Descriptor instead.
func (*InGame) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{186}
}

func (x *InGame) GetComboInterval() int64 {
	if x != nil {
		return x.ComboInterval
	}
	return 0
}

func (x *InGame) GetEatEfficiency() float64 {
	if x != nil {
		return x.EatEfficiency
	}
	return 0
}

func (x *InGame) GetMaxPropNum() int64 {
	if x != nil {
		return x.MaxPropNum
	}
	return 0
}

func (x *InGame) GetSpeedUpReduce() []int64 {
	if x != nil {
		return x.SpeedUpReduce
	}
	return nil
}

type PropRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AI     int64 `protobuf:"varint,1,opt,name=AI,proto3" json:"AI,omitempty"`
	Map    int64 `protobuf:"varint,2,opt,name=map,proto3" json:"map,omitempty"`
	PropId int64 `protobuf:"varint,3,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	Stone  int64 `protobuf:"varint,4,opt,name=stone,proto3" json:"stone,omitempty"`
}

func (x *PropRate) Reset() {
	*x = PropRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropRate) ProtoMessage() {}

func (x *PropRate) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropRate.ProtoReflect.Descriptor instead.
func (*PropRate) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{187}
}

func (x *PropRate) GetAI() int64 {
	if x != nil {
		return x.AI
	}
	return 0
}

func (x *PropRate) GetMap() int64 {
	if x != nil {
		return x.Map
	}
	return 0
}

func (x *PropRate) GetPropId() int64 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *PropRate) GetStone() int64 {
	if x != nil {
		return x.Stone
	}
	return 0
}

type Ai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K       float64 `protobuf:"fixed64,1,opt,name=K,proto3" json:"K,omitempty"`
	Boss    float64 `protobuf:"fixed64,2,opt,name=boss,proto3" json:"boss,omitempty"`
	Normal  float64 `protobuf:"fixed64,3,opt,name=normal,proto3" json:"normal,omitempty"`
	Special float64 `protobuf:"fixed64,4,opt,name=special,proto3" json:"special,omitempty"`
}

func (x *Ai) Reset() {
	*x = Ai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ai) ProtoMessage() {}

func (x *Ai) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ai.ProtoReflect.Descriptor instead.
func (*Ai) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{188}
}

func (x *Ai) GetK() float64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *Ai) GetBoss() float64 {
	if x != nil {
		return x.Boss
	}
	return 0
}

func (x *Ai) GetNormal() float64 {
	if x != nil {
		return x.Normal
	}
	return 0
}

func (x *Ai) GetSpecial() float64 {
	if x != nil {
		return x.Special
	}
	return 0
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CycleTime int64 `protobuf:"varint,1,opt,name=cycle_time,json=cycleTime,proto3" json:"cycle_time,omitempty"`
	Num       int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{189}
}

func (x *Map) GetCycleTime() int64 {
	if x != nil {
		return x.CycleTime
	}
	return 0
}

func (x *Map) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type Stone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate float64 `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *Stone) Reset() {
	*x = Stone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stone) ProtoMessage() {}

func (x *Stone) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stone.ProtoReflect.Descriptor instead.
func (*Stone) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{190}
}

func (x *Stone) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type RateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AI    *Ai    `protobuf:"bytes,1,opt,name=AI,proto3" json:"AI,omitempty"`
	Map   *Map   `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
	Stone *Stone `protobuf:"bytes,3,opt,name=stone,proto3" json:"stone,omitempty"`
}

func (x *RateConfig) Reset() {
	*x = RateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateConfig) ProtoMessage() {}

func (x *RateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateConfig.ProtoReflect.Descriptor instead.
func (*RateConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{191}
}

func (x *RateConfig) GetAI() *Ai {
	if x != nil {
		return x.AI
	}
	return nil
}

func (x *RateConfig) GetMap() *Map {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *RateConfig) GetStone() *Stone {
	if x != nil {
		return x.Stone
	}
	return nil
}

type ModeGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiLevelList           []*AiLevelList         `protobuf:"bytes,1,rep,name=ai_level_list,json=aiLevelList,proto3" json:"ai_level_list,omitempty"`
	EatEfficiency         float64                `protobuf:"fixed64,2,opt,name=eat_efficiency,json=eatEfficiency,proto3" json:"eat_efficiency,omitempty"`
	FoodCount             int64                  `protobuf:"varint,3,opt,name=food_count,json=foodCount,proto3" json:"food_count,omitempty"`
	HelmetLimitCount      int64                  `protobuf:"varint,4,opt,name=helmet_limit_count,json=helmetLimitCount,proto3" json:"helmet_limit_count,omitempty"`
	MapHeight             int64                  `protobuf:"varint,5,opt,name=map_height,json=mapHeight,proto3" json:"map_height,omitempty"`
	MapWidth              int64                  `protobuf:"varint,6,opt,name=map_width,json=mapWidth,proto3" json:"map_width,omitempty"`
	PropFuryElectricity   int64                  `protobuf:"varint,7,opt,name=prop_fury_electricity,json=propFuryElectricity,proto3" json:"prop_fury_electricity,omitempty"`
	PropKillFury          int64                  `protobuf:"varint,8,opt,name=prop_kill_fury,json=propKillFury,proto3" json:"prop_kill_fury,omitempty"`
	SelfElectricityConfig *SelfElectricityConfig `protobuf:"bytes,9,opt,name=self_electricity_config,json=selfElectricityConfig,proto3" json:"self_electricity_config,omitempty"`
	SelfStartLen          int64                  `protobuf:"varint,10,opt,name=self_start_len,json=selfStartLen,proto3" json:"self_start_len,omitempty"`
	ShockConfig           *ShockConfig           `protobuf:"bytes,11,opt,name=shock_config,json=shockConfig,proto3" json:"shock_config,omitempty"`
	SpeedUpReduce         int64                  `protobuf:"varint,12,opt,name=speed_up_reduce,json=speedUpReduce,proto3" json:"speed_up_reduce,omitempty"`
	StageConfigs          []*StageConfigs        `protobuf:"bytes,13,rep,name=stage_configs,json=stageConfigs,proto3" json:"stage_configs,omitempty"`
	StoneCount            int64                  `protobuf:"varint,14,opt,name=stone_count,json=stoneCount,proto3" json:"stone_count,omitempty"`
	StoneReliveTime       int64                  `protobuf:"varint,15,opt,name=stone_relive_time,json=stoneReliveTime,proto3" json:"stone_relive_time,omitempty"`
}

func (x *ModeGameConfig) Reset() {
	*x = ModeGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeGameConfig) ProtoMessage() {}

func (x *ModeGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeGameConfig.ProtoReflect.Descriptor instead.
func (*ModeGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{192}
}

func (x *ModeGameConfig) GetAiLevelList() []*AiLevelList {
	if x != nil {
		return x.AiLevelList
	}
	return nil
}

func (x *ModeGameConfig) GetEatEfficiency() float64 {
	if x != nil {
		return x.EatEfficiency
	}
	return 0
}

func (x *ModeGameConfig) GetFoodCount() int64 {
	if x != nil {
		return x.FoodCount
	}
	return 0
}

func (x *ModeGameConfig) GetHelmetLimitCount() int64 {
	if x != nil {
		return x.HelmetLimitCount
	}
	return 0
}

func (x *ModeGameConfig) GetMapHeight() int64 {
	if x != nil {
		return x.MapHeight
	}
	return 0
}

func (x *ModeGameConfig) GetMapWidth() int64 {
	if x != nil {
		return x.MapWidth
	}
	return 0
}

func (x *ModeGameConfig) GetPropFuryElectricity() int64 {
	if x != nil {
		return x.PropFuryElectricity
	}
	return 0
}

func (x *ModeGameConfig) GetPropKillFury() int64 {
	if x != nil {
		return x.PropKillFury
	}
	return 0
}

func (x *ModeGameConfig) GetSelfElectricityConfig() *SelfElectricityConfig {
	if x != nil {
		return x.SelfElectricityConfig
	}
	return nil
}

func (x *ModeGameConfig) GetSelfStartLen() int64 {
	if x != nil {
		return x.SelfStartLen
	}
	return 0
}

func (x *ModeGameConfig) GetShockConfig() *ShockConfig {
	if x != nil {
		return x.ShockConfig
	}
	return nil
}

func (x *ModeGameConfig) GetSpeedUpReduce() int64 {
	if x != nil {
		return x.SpeedUpReduce
	}
	return 0
}

func (x *ModeGameConfig) GetStageConfigs() []*StageConfigs {
	if x != nil {
		return x.StageConfigs
	}
	return nil
}

func (x *ModeGameConfig) GetStoneCount() int64 {
	if x != nil {
		return x.StoneCount
	}
	return 0
}

func (x *ModeGameConfig) GetStoneReliveTime() int64 {
	if x != nil {
		return x.StoneReliveTime
	}
	return 0
}

type AiLevelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrainAttackChosenPerFrameRate float64            `protobuf:"fixed64,1,opt,name=brain_attack_chosen_per_frame_rate,json=brainAttackChosenPerFrameRate,proto3" json:"brain_attack_chosen_per_frame_rate,omitempty"`
	BrainAttackCircleInnerRadius  float64            `protobuf:"fixed64,2,opt,name=brain_attack_circle_inner_radius,json=brainAttackCircleInnerRadius,proto3" json:"brain_attack_circle_inner_radius,omitempty"`
	BrainAttackCircleOuterRadius  int64              `protobuf:"varint,3,opt,name=brain_attack_circle_outer_radius,json=brainAttackCircleOuterRadius,proto3" json:"brain_attack_circle_outer_radius,omitempty"`
	BrainAttackTime               []*BrainAttackTime `protobuf:"bytes,4,rep,name=brain_attack_time,json=brainAttackTime,proto3" json:"brain_attack_time,omitempty"`
	BrainVisibleDegree            int64              `protobuf:"varint,5,opt,name=brain_visible_degree,json=brainVisibleDegree,proto3" json:"brain_visible_degree,omitempty"`
	CollisionAiRate               int64              `protobuf:"varint,6,opt,name=collision_ai_rate,json=collisionAiRate,proto3" json:"collision_ai_rate,omitempty"`
	CollisionBorderRate           int64              `protobuf:"varint,7,opt,name=collision_border_rate,json=collisionBorderRate,proto3" json:"collision_border_rate,omitempty"`
	CollisionStoneRate            int64              `protobuf:"varint,8,opt,name=collision_stone_rate,json=collisionStoneRate,proto3" json:"collision_stone_rate,omitempty"`
	CollisionWreckRate            int64              `protobuf:"varint,9,opt,name=collision_wreck_rate,json=collisionWreckRate,proto3" json:"collision_wreck_rate,omitempty"`
	Level                         int64              `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AiLevelList) Reset() {
	*x = AiLevelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiLevelList) ProtoMessage() {}

func (x *AiLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiLevelList.ProtoReflect.Descriptor instead.
func (*AiLevelList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{193}
}

func (x *AiLevelList) GetBrainAttackChosenPerFrameRate() float64 {
	if x != nil {
		return x.BrainAttackChosenPerFrameRate
	}
	return 0
}

func (x *AiLevelList) GetBrainAttackCircleInnerRadius() float64 {
	if x != nil {
		return x.BrainAttackCircleInnerRadius
	}
	return 0
}

func (x *AiLevelList) GetBrainAttackCircleOuterRadius() int64 {
	if x != nil {
		return x.BrainAttackCircleOuterRadius
	}
	return 0
}

func (x *AiLevelList) GetBrainAttackTime() []*BrainAttackTime {
	if x != nil {
		return x.BrainAttackTime
	}
	return nil
}

func (x *AiLevelList) GetBrainVisibleDegree() int64 {
	if x != nil {
		return x.BrainVisibleDegree
	}
	return 0
}

func (x *AiLevelList) GetCollisionAiRate() int64 {
	if x != nil {
		return x.CollisionAiRate
	}
	return 0
}

func (x *AiLevelList) GetCollisionBorderRate() int64 {
	if x != nil {
		return x.CollisionBorderRate
	}
	return 0
}

func (x *AiLevelList) GetCollisionStoneRate() int64 {
	if x != nil {
		return x.CollisionStoneRate
	}
	return 0
}

func (x *AiLevelList) GetCollisionWreckRate() int64 {
	if x != nil {
		return x.CollisionWreckRate
	}
	return 0
}

func (x *AiLevelList) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type BrainAttackTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Weight int64 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *BrainAttackTime) Reset() {
	*x = BrainAttackTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrainAttackTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrainAttackTime) ProtoMessage() {}

func (x *BrainAttackTime) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrainAttackTime.ProtoReflect.Descriptor instead.
func (*BrainAttackTime) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{194}
}

func (x *BrainAttackTime) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BrainAttackTime) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type SelfElectricityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElectricityCdTime                   int64   `protobuf:"varint,1,opt,name=electricity_cd_time,json=electricityCdTime,proto3" json:"electricity_cd_time,omitempty"`
	ElectricityExploreMaxRadius         float64 `protobuf:"fixed64,2,opt,name=electricity_explore_max_radius,json=electricityExploreMaxRadius,proto3" json:"electricity_explore_max_radius,omitempty"`
	ElectricityExploreTime              int64   `protobuf:"varint,3,opt,name=electricity_explore_time,json=electricityExploreTime,proto3" json:"electricity_explore_time,omitempty"`
	ElectricityWarningInductionDistance float64 `protobuf:"fixed64,4,opt,name=electricity_warning_induction_distance,json=electricityWarningInductionDistance,proto3" json:"electricity_warning_induction_distance,omitempty"`
	ElectricityWarningTime              int64   `protobuf:"varint,5,opt,name=electricity_warning_time,json=electricityWarningTime,proto3" json:"electricity_warning_time,omitempty"`
}

func (x *SelfElectricityConfig) Reset() {
	*x = SelfElectricityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfElectricityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfElectricityConfig) ProtoMessage() {}

func (x *SelfElectricityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfElectricityConfig.ProtoReflect.Descriptor instead.
func (*SelfElectricityConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{195}
}

func (x *SelfElectricityConfig) GetElectricityCdTime() int64 {
	if x != nil {
		return x.ElectricityCdTime
	}
	return 0
}

func (x *SelfElectricityConfig) GetElectricityExploreMaxRadius() float64 {
	if x != nil {
		return x.ElectricityExploreMaxRadius
	}
	return 0
}

func (x *SelfElectricityConfig) GetElectricityExploreTime() int64 {
	if x != nil {
		return x.ElectricityExploreTime
	}
	return 0
}

func (x *SelfElectricityConfig) GetElectricityWarningInductionDistance() float64 {
	if x != nil {
		return x.ElectricityWarningInductionDistance
	}
	return 0
}

func (x *SelfElectricityConfig) GetElectricityWarningTime() int64 {
	if x != nil {
		return x.ElectricityWarningTime
	}
	return 0
}

type ShockConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShockExploreMaxRadius float64 `protobuf:"fixed64,1,opt,name=shock_explore_max_radius,json=shockExploreMaxRadius,proto3" json:"shock_explore_max_radius,omitempty"`
	ShockExploreTime      float64 `protobuf:"fixed64,2,opt,name=shock_explore_time,json=shockExploreTime,proto3" json:"shock_explore_time,omitempty"`
}

func (x *ShockConfig) Reset() {
	*x = ShockConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShockConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShockConfig) ProtoMessage() {}

func (x *ShockConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShockConfig.ProtoReflect.Descriptor instead.
func (*ShockConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{196}
}

func (x *ShockConfig) GetShockExploreMaxRadius() float64 {
	if x != nil {
		return x.ShockExploreMaxRadius
	}
	return 0
}

func (x *ShockConfig) GetShockExploreTime() float64 {
	if x != nil {
		return x.ShockExploreTime
	}
	return 0
}

type AiTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiCount       int64   `protobuf:"varint,1,opt,name=ai_count,json=aiCount,proto3" json:"ai_count,omitempty"`
	AiType        int64   `protobuf:"varint,2,opt,name=ai_type,json=aiType,proto3" json:"ai_type,omitempty"`
	AttackerCount int64   `protobuf:"varint,3,opt,name=attacker_count,json=attackerCount,proto3" json:"attacker_count,omitempty"`
	Level         int64   `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	RangeLen      int64   `protobuf:"varint,5,opt,name=range_len,json=rangeLen,proto3" json:"range_len,omitempty"`
	SkinList      []int64 `protobuf:"varint,6,rep,packed,name=skin_list,json=skinList,proto3" json:"skin_list,omitempty"`
	StartLen      int64   `protobuf:"varint,7,opt,name=start_len,json=startLen,proto3" json:"start_len,omitempty"`
}

func (x *AiTypeList) Reset() {
	*x = AiTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiTypeList) ProtoMessage() {}

func (x *AiTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiTypeList.ProtoReflect.Descriptor instead.
func (*AiTypeList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{197}
}

func (x *AiTypeList) GetAiCount() int64 {
	if x != nil {
		return x.AiCount
	}
	return 0
}

func (x *AiTypeList) GetAiType() int64 {
	if x != nil {
		return x.AiType
	}
	return 0
}

func (x *AiTypeList) GetAttackerCount() int64 {
	if x != nil {
		return x.AttackerCount
	}
	return 0
}

func (x *AiTypeList) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AiTypeList) GetRangeLen() int64 {
	if x != nil {
		return x.RangeLen
	}
	return 0
}

func (x *AiTypeList) GetSkinList() []int64 {
	if x != nil {
		return x.SkinList
	}
	return nil
}

func (x *AiTypeList) GetStartLen() int64 {
	if x != nil {
		return x.StartLen
	}
	return 0
}

type ElectricityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElectricityCdTime                   int64   `protobuf:"varint,1,opt,name=electricity_cd_time,json=electricityCdTime,proto3" json:"electricity_cd_time,omitempty"`
	ElectricityExploreMaxRadius         float64 `protobuf:"fixed64,2,opt,name=electricity_explore_max_radius,json=electricityExploreMaxRadius,proto3" json:"electricity_explore_max_radius,omitempty"`
	ElectricityExploreTime              int64   `protobuf:"varint,3,opt,name=electricity_explore_time,json=electricityExploreTime,proto3" json:"electricity_explore_time,omitempty"`
	ElectricityWarningInductionDistance float64 `protobuf:"fixed64,4,opt,name=electricity_warning_induction_distance,json=electricityWarningInductionDistance,proto3" json:"electricity_warning_induction_distance,omitempty"`
	ElectricityWarningTime              int64   `protobuf:"varint,5,opt,name=electricity_warning_time,json=electricityWarningTime,proto3" json:"electricity_warning_time,omitempty"`
}

func (x *ElectricityConfig) Reset() {
	*x = ElectricityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricityConfig) ProtoMessage() {}

func (x *ElectricityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricityConfig.ProtoReflect.Descriptor instead.
func (*ElectricityConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{198}
}

func (x *ElectricityConfig) GetElectricityCdTime() int64 {
	if x != nil {
		return x.ElectricityCdTime
	}
	return 0
}

func (x *ElectricityConfig) GetElectricityExploreMaxRadius() float64 {
	if x != nil {
		return x.ElectricityExploreMaxRadius
	}
	return 0
}

func (x *ElectricityConfig) GetElectricityExploreTime() int64 {
	if x != nil {
		return x.ElectricityExploreTime
	}
	return 0
}

func (x *ElectricityConfig) GetElectricityWarningInductionDistance() float64 {
	if x != nil {
		return x.ElectricityWarningInductionDistance
	}
	return 0
}

func (x *ElectricityConfig) GetElectricityWarningTime() int64 {
	if x != nil {
		return x.ElectricityWarningTime
	}
	return 0
}

type MissileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissileAiDetectDistance         float64 `protobuf:"fixed64,1,opt,name=missile_ai_detect_distance,json=missileAiDetectDistance,proto3" json:"missile_ai_detect_distance,omitempty"`
	MissileCdTime                   int64   `protobuf:"varint,2,opt,name=missile_cd_time,json=missileCdTime,proto3" json:"missile_cd_time,omitempty"`
	MissileExplodeInductionDistance float64 `protobuf:"fixed64,3,opt,name=missile_explode_induction_distance,json=missileExplodeInductionDistance,proto3" json:"missile_explode_induction_distance,omitempty"`
	MissileExplodeRadius            float64 `protobuf:"fixed64,4,opt,name=missile_explode_radius,json=missileExplodeRadius,proto3" json:"missile_explode_radius,omitempty"`
	MissileExplodeTime              float64 `protobuf:"fixed64,5,opt,name=missile_explode_time,json=missileExplodeTime,proto3" json:"missile_explode_time,omitempty"`
	MissileFlyTime                  int64   `protobuf:"varint,6,opt,name=missile_fly_time,json=missileFlyTime,proto3" json:"missile_fly_time,omitempty"`
	MissilePrepareTime              float64 `protobuf:"fixed64,7,opt,name=missile_prepare_time,json=missilePrepareTime,proto3" json:"missile_prepare_time,omitempty"`
	MissileScanningTime             int64   `protobuf:"varint,8,opt,name=missile_scanning_time,json=missileScanningTime,proto3" json:"missile_scanning_time,omitempty"`
	MissileSpeedRate                float64 `protobuf:"fixed64,9,opt,name=missile_speed_rate,json=missileSpeedRate,proto3" json:"missile_speed_rate,omitempty"`
}

func (x *MissileConfig) Reset() {
	*x = MissileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissileConfig) ProtoMessage() {}

func (x *MissileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissileConfig.ProtoReflect.Descriptor instead.
func (*MissileConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{199}
}

func (x *MissileConfig) GetMissileAiDetectDistance() float64 {
	if x != nil {
		return x.MissileAiDetectDistance
	}
	return 0
}

func (x *MissileConfig) GetMissileCdTime() int64 {
	if x != nil {
		return x.MissileCdTime
	}
	return 0
}

func (x *MissileConfig) GetMissileExplodeInductionDistance() float64 {
	if x != nil {
		return x.MissileExplodeInductionDistance
	}
	return 0
}

func (x *MissileConfig) GetMissileExplodeRadius() float64 {
	if x != nil {
		return x.MissileExplodeRadius
	}
	return 0
}

func (x *MissileConfig) GetMissileExplodeTime() float64 {
	if x != nil {
		return x.MissileExplodeTime
	}
	return 0
}

func (x *MissileConfig) GetMissileFlyTime() int64 {
	if x != nil {
		return x.MissileFlyTime
	}
	return 0
}

func (x *MissileConfig) GetMissilePrepareTime() float64 {
	if x != nil {
		return x.MissilePrepareTime
	}
	return 0
}

func (x *MissileConfig) GetMissileScanningTime() int64 {
	if x != nil {
		return x.MissileScanningTime
	}
	return 0
}

func (x *MissileConfig) GetMissileSpeedRate() float64 {
	if x != nil {
		return x.MissileSpeedRate
	}
	return 0
}

type AiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiTypeList        []*AiTypeList      `protobuf:"bytes,1,rep,name=ai_type_list,json=aiTypeList,proto3" json:"ai_type_list,omitempty"`
	ElectricityConfig *ElectricityConfig `protobuf:"bytes,2,opt,name=electricity_config,json=electricityConfig,proto3" json:"electricity_config,omitempty"`
	MissileConfig     *MissileConfig     `protobuf:"bytes,3,opt,name=missile_config,json=missileConfig,proto3" json:"missile_config,omitempty"`
}

func (x *AiConfig) Reset() {
	*x = AiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiConfig) ProtoMessage() {}

func (x *AiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiConfig.ProtoReflect.Descriptor instead.
func (*AiConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{200}
}

func (x *AiConfig) GetAiTypeList() []*AiTypeList {
	if x != nil {
		return x.AiTypeList
	}
	return nil
}

func (x *AiConfig) GetElectricityConfig() *ElectricityConfig {
	if x != nil {
		return x.ElectricityConfig
	}
	return nil
}

func (x *AiConfig) GetMissileConfig() *MissileConfig {
	if x != nil {
		return x.MissileConfig
	}
	return nil
}

type PropBornInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropBornTime    int64 `protobuf:"varint,1,opt,name=prop_born_time,json=propBornTime,proto3" json:"prop_born_time,omitempty"`
	PropCount       int64 `protobuf:"varint,2,opt,name=prop_count,json=propCount,proto3" json:"prop_count,omitempty"`
	PropRefreshTime int64 `protobuf:"varint,3,opt,name=prop_refresh_time,json=propRefreshTime,proto3" json:"prop_refresh_time,omitempty"`
	PropType        int64 `protobuf:"varint,4,opt,name=prop_type,json=propType,proto3" json:"prop_type,omitempty"`
}

func (x *PropBornInfos) Reset() {
	*x = PropBornInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropBornInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropBornInfos) ProtoMessage() {}

func (x *PropBornInfos) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropBornInfos.ProtoReflect.Descriptor instead.
func (*PropBornInfos) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{201}
}

func (x *PropBornInfos) GetPropBornTime() int64 {
	if x != nil {
		return x.PropBornTime
	}
	return 0
}

func (x *PropBornInfos) GetPropCount() int64 {
	if x != nil {
		return x.PropCount
	}
	return 0
}

func (x *PropBornInfos) GetPropRefreshTime() int64 {
	if x != nil {
		return x.PropRefreshTime
	}
	return 0
}

func (x *PropBornInfos) GetPropType() int64 {
	if x != nil {
		return x.PropType
	}
	return 0
}

type PropWeightList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropWeightBattery     int64 `protobuf:"varint,1,opt,name=prop_weight_battery,json=propWeightBattery,proto3" json:"prop_weight_battery,omitempty"`
	PropWeightCoin        int64 `protobuf:"varint,2,opt,name=prop_weight_coin,json=propWeightCoin,proto3" json:"prop_weight_coin,omitempty"`
	PropWeightCordial     int64 `protobuf:"varint,3,opt,name=prop_weight_cordial,json=propWeightCordial,proto3" json:"prop_weight_cordial,omitempty"`
	PropWeightDoubleScore int64 `protobuf:"varint,4,opt,name=prop_weight_double_score,json=propWeightDoubleScore,proto3" json:"prop_weight_double_score,omitempty"`
	PropWeightHamburger   int64 `protobuf:"varint,5,opt,name=prop_weight_hamburger,json=propWeightHamburger,proto3" json:"prop_weight_hamburger,omitempty"`
	PropWeightHelmet      int64 `protobuf:"varint,6,opt,name=prop_weight_helmet,json=propWeightHelmet,proto3" json:"prop_weight_helmet,omitempty"`
	PropWeightInvincible  int64 `protobuf:"varint,7,opt,name=prop_weight_invincible,json=propWeightInvincible,proto3" json:"prop_weight_invincible,omitempty"`
	PropWeightMagnet      int64 `protobuf:"varint,8,opt,name=prop_weight_magnet,json=propWeightMagnet,proto3" json:"prop_weight_magnet,omitempty"`
	PropWeightTime        int64 `protobuf:"varint,9,opt,name=prop_weight_time,json=propWeightTime,proto3" json:"prop_weight_time,omitempty"`
	Type                  int64 `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PropWeightList) Reset() {
	*x = PropWeightList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropWeightList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropWeightList) ProtoMessage() {}

func (x *PropWeightList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropWeightList.ProtoReflect.Descriptor instead.
func (*PropWeightList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{202}
}

func (x *PropWeightList) GetPropWeightBattery() int64 {
	if x != nil {
		return x.PropWeightBattery
	}
	return 0
}

func (x *PropWeightList) GetPropWeightCoin() int64 {
	if x != nil {
		return x.PropWeightCoin
	}
	return 0
}

func (x *PropWeightList) GetPropWeightCordial() int64 {
	if x != nil {
		return x.PropWeightCordial
	}
	return 0
}

func (x *PropWeightList) GetPropWeightDoubleScore() int64 {
	if x != nil {
		return x.PropWeightDoubleScore
	}
	return 0
}

func (x *PropWeightList) GetPropWeightHamburger() int64 {
	if x != nil {
		return x.PropWeightHamburger
	}
	return 0
}

func (x *PropWeightList) GetPropWeightHelmet() int64 {
	if x != nil {
		return x.PropWeightHelmet
	}
	return 0
}

func (x *PropWeightList) GetPropWeightInvincible() int64 {
	if x != nil {
		return x.PropWeightInvincible
	}
	return 0
}

func (x *PropWeightList) GetPropWeightMagnet() int64 {
	if x != nil {
		return x.PropWeightMagnet
	}
	return 0
}

func (x *PropWeightList) GetPropWeightTime() int64 {
	if x != nil {
		return x.PropWeightTime
	}
	return 0
}

func (x *PropWeightList) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type PropConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropBornInfos               []*PropBornInfos  `protobuf:"bytes,1,rep,name=prop_born_infos,json=propBornInfos,proto3" json:"prop_born_infos,omitempty"`
	PropRefreshMaxSurvivalCount int64             `protobuf:"varint,2,opt,name=prop_refresh_max_survival_count,json=propRefreshMaxSurvivalCount,proto3" json:"prop_refresh_max_survival_count,omitempty"`
	PropWeightList              []*PropWeightList `protobuf:"bytes,3,rep,name=prop_weight_list,json=propWeightList,proto3" json:"prop_weight_list,omitempty"`
}

func (x *PropConfig) Reset() {
	*x = PropConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropConfig) ProtoMessage() {}

func (x *PropConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropConfig.ProtoReflect.Descriptor instead.
func (*PropConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{203}
}

func (x *PropConfig) GetPropBornInfos() []*PropBornInfos {
	if x != nil {
		return x.PropBornInfos
	}
	return nil
}

func (x *PropConfig) GetPropRefreshMaxSurvivalCount() int64 {
	if x != nil {
		return x.PropRefreshMaxSurvivalCount
	}
	return 0
}

func (x *PropConfig) GetPropWeightList() []*PropWeightList {
	if x != nil {
		return x.PropWeightList
	}
	return nil
}

type StageConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiConfig       *AiConfig   `protobuf:"bytes,1,opt,name=ai_config,json=aiConfig,proto3" json:"ai_config,omitempty"`
	AiReviveTime   int64       `protobuf:"varint,2,opt,name=ai_revive_time,json=aiReviveTime,proto3" json:"ai_revive_time,omitempty"`
	PropConfig     *PropConfig `protobuf:"bytes,3,opt,name=prop_config,json=propConfig,proto3" json:"prop_config,omitempty"`
	StageEndTime   int64       `protobuf:"varint,4,opt,name=stage_end_time,json=stageEndTime,proto3" json:"stage_end_time,omitempty"`
	StageStartTime int64       `protobuf:"varint,5,opt,name=stage_start_time,json=stageStartTime,proto3" json:"stage_start_time,omitempty"`
	StageType      int64       `protobuf:"varint,6,opt,name=stage_type,json=stageType,proto3" json:"stage_type,omitempty"`
}

func (x *StageConfigs) Reset() {
	*x = StageConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageConfigs) ProtoMessage() {}

func (x *StageConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageConfigs.ProtoReflect.Descriptor instead.
func (*StageConfigs) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{204}
}

func (x *StageConfigs) GetAiConfig() *AiConfig {
	if x != nil {
		return x.AiConfig
	}
	return nil
}

func (x *StageConfigs) GetAiReviveTime() int64 {
	if x != nil {
		return x.AiReviveTime
	}
	return 0
}

func (x *StageConfigs) GetPropConfig() *PropConfig {
	if x != nil {
		return x.PropConfig
	}
	return nil
}

func (x *StageConfigs) GetStageEndTime() int64 {
	if x != nil {
		return x.StageEndTime
	}
	return 0
}

func (x *StageConfigs) GetStageStartTime() int64 {
	if x != nil {
		return x.StageStartTime
	}
	return 0
}

func (x *StageConfigs) GetStageType() int64 {
	if x != nil {
		return x.StageType
	}
	return 0
}

// ========   emulator start  =========
type Emulator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppCheck      []*AppCheck      `protobuf:"bytes,1,rep,name=app_check,json=appCheck,proto3" json:"app_check,omitempty"`
	CheatAppCheck []*CheatAppCheck `protobuf:"bytes,2,rep,name=cheat_app_check,json=cheatAppCheck,proto3" json:"cheat_app_check,omitempty"`
	ShellCheck    []*ShellCheck    `protobuf:"bytes,3,rep,name=shell_check,json=shellCheck,proto3" json:"shell_check,omitempty"`
	WeakCpu       []string         `protobuf:"bytes,4,rep,name=weak_cpu,json=weakCpu,proto3" json:"weak_cpu,omitempty"`
}

func (x *Emulator) Reset() {
	*x = Emulator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emulator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emulator) ProtoMessage() {}

func (x *Emulator) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emulator.ProtoReflect.Descriptor instead.
func (*Emulator) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{205}
}

func (x *Emulator) GetAppCheck() []*AppCheck {
	if x != nil {
		return x.AppCheck
	}
	return nil
}

func (x *Emulator) GetCheatAppCheck() []*CheatAppCheck {
	if x != nil {
		return x.CheatAppCheck
	}
	return nil
}

func (x *Emulator) GetShellCheck() []*ShellCheck {
	if x != nil {
		return x.ShellCheck
	}
	return nil
}

func (x *Emulator) GetWeakCpu() []string {
	if x != nil {
		return x.WeakCpu
	}
	return nil
}

type AppCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmulatorType string   `protobuf:"bytes,1,opt,name=emulator_type,json=emulatorType,proto3" json:"emulator_type,omitempty"`
	PackegeNames []string `protobuf:"bytes,2,rep,name=packege_names,json=packegeNames,proto3" json:"packege_names,omitempty"`
}

func (x *AppCheck) Reset() {
	*x = AppCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCheck) ProtoMessage() {}

func (x *AppCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCheck.ProtoReflect.Descriptor instead.
func (*AppCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{206}
}

func (x *AppCheck) GetEmulatorType() string {
	if x != nil {
		return x.EmulatorType
	}
	return ""
}

func (x *AppCheck) GetPackegeNames() []string {
	if x != nil {
		return x.PackegeNames
	}
	return nil
}

type CheatAppCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheatType    string   `protobuf:"bytes,1,opt,name=cheat_type,json=cheatType,proto3" json:"cheat_type,omitempty"`
	PackageNames []string `protobuf:"bytes,2,rep,name=package_names,json=packageNames,proto3" json:"package_names,omitempty"`
}

func (x *CheatAppCheck) Reset() {
	*x = CheatAppCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheatAppCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheatAppCheck) ProtoMessage() {}

func (x *CheatAppCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheatAppCheck.ProtoReflect.Descriptor instead.
func (*CheatAppCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{207}
}

func (x *CheatAppCheck) GetCheatType() string {
	if x != nil {
		return x.CheatType
	}
	return ""
}

func (x *CheatAppCheck) GetPackageNames() []string {
	if x != nil {
		return x.PackageNames
	}
	return nil
}

type ShellCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	EmulatorType string   `protobuf:"bytes,2,opt,name=emulator_type,json=emulatorType,proto3" json:"emulator_type,omitempty"`
	Features     []string `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *ShellCheck) Reset() {
	*x = ShellCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellCheck) ProtoMessage() {}

func (x *ShellCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellCheck.ProtoReflect.Descriptor instead.
func (*ShellCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{208}
}

func (x *ShellCheck) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *ShellCheck) GetEmulatorType() string {
	if x != nil {
		return x.EmulatorType
	}
	return ""
}

func (x *ShellCheck) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

// ======  little_game start =====
type LittleGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LittleGames map[string]*LittleGameSrc `protobuf:"bytes,1,rep,name=little_games,json=littleGames,proto3" json:"little_games,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LittleGame) Reset() {
	*x = LittleGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LittleGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LittleGame) ProtoMessage() {}

func (x *LittleGame) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LittleGame.ProtoReflect.Descriptor instead.
func (*LittleGame) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{209}
}

func (x *LittleGame) GetLittleGames() map[string]*LittleGameSrc {
	if x != nil {
		return x.LittleGames
	}
	return nil
}

type LittleGameSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*LittleGameSrcItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *LittleGameSrc) Reset() {
	*x = LittleGameSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LittleGameSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LittleGameSrc) ProtoMessage() {}

func (x *LittleGameSrc) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LittleGameSrc.ProtoReflect.Descriptor instead.
func (*LittleGameSrc) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{210}
}

func (x *LittleGameSrc) GetItems() []*LittleGameSrcItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type LittleGameSrcItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId      int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Md5         string `protobuf:"bytes,2,opt,name=md5,proto3" json:"md5,omitempty"`
	Src         string `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	LoadingUrl  string `protobuf:"bytes,4,opt,name=loading_url,json=loadingUrl,proto3" json:"loading_url,omitempty"`
	ExitFlag    int64  `protobuf:"varint,5,opt,name=exit_flag,json=exitFlag,proto3" json:"exit_flag,omitempty"`
	Transparent int64  `protobuf:"varint,6,opt,name=transparent,proto3" json:"transparent,omitempty"`
	UseWeb      int64  `protobuf:"varint,7,opt,name=use_web,json=useWeb,proto3" json:"use_web,omitempty"`
}

func (x *LittleGameSrcItem) Reset() {
	*x = LittleGameSrcItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LittleGameSrcItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LittleGameSrcItem) ProtoMessage() {}

func (x *LittleGameSrcItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LittleGameSrcItem.ProtoReflect.Descriptor instead.
func (*LittleGameSrcItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{211}
}

func (x *LittleGameSrcItem) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *LittleGameSrcItem) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *LittleGameSrcItem) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *LittleGameSrcItem) GetLoadingUrl() string {
	if x != nil {
		return x.LoadingUrl
	}
	return ""
}

func (x *LittleGameSrcItem) GetExitFlag() int64 {
	if x != nil {
		return x.ExitFlag
	}
	return 0
}

func (x *LittleGameSrcItem) GetTransparent() int64 {
	if x != nil {
		return x.Transparent
	}
	return 0
}

func (x *LittleGameSrcItem) GetUseWeb() int64 {
	if x != nil {
		return x.UseWeb
	}
	return 0
}

// ======= review_market  start ======
type ReviewMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviewMarket map[string]string `protobuf:"bytes,1,rep,name=review_market,json=reviewMarket,proto3" json:"review_market,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReviewMarket) Reset() {
	*x = ReviewMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewMarket) ProtoMessage() {}

func (x *ReviewMarket) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewMarket.ProtoReflect.Descriptor instead.
func (*ReviewMarket) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{212}
}

func (x *ReviewMarket) GetReviewMarket() map[string]string {
	if x != nil {
		return x.ReviewMarket
	}
	return nil
}

// ====== little_game_ui_config  start ========
type LittleGameUiConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]*LittleGameUi `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LittleGameUiConf) Reset() {
	*x = LittleGameUiConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LittleGameUiConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LittleGameUiConf) ProtoMessage() {}

func (x *LittleGameUiConf) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LittleGameUiConf.ProtoReflect.Descriptor instead.
func (*LittleGameUiConf) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{213}
}

func (x *LittleGameUiConf) GetConfig() map[string]*LittleGameUi {
	if x != nil {
		return x.Config
	}
	return nil
}

type LittleGameUi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameList         []*GameList `protobuf:"bytes,1,rep,name=game_list,json=gameList,proto3" json:"game_list,omitempty"`
	HomeCornerUrl    string      `protobuf:"bytes,2,opt,name=home_corner_url,json=homeCornerUrl,proto3" json:"home_corner_url,omitempty"`
	HomeTextUrl      string      `protobuf:"bytes,3,opt,name=home_text_url,json=homeTextUrl,proto3" json:"home_text_url,omitempty"`
	RecommendJumpUrl string      `protobuf:"bytes,4,opt,name=recommend_jump_url,json=recommendJumpUrl,proto3" json:"recommend_jump_url,omitempty"`
}

func (x *LittleGameUi) Reset() {
	*x = LittleGameUi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LittleGameUi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LittleGameUi) ProtoMessage() {}

func (x *LittleGameUi) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LittleGameUi.ProtoReflect.Descriptor instead.
func (*LittleGameUi) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{214}
}

func (x *LittleGameUi) GetGameList() []*GameList {
	if x != nil {
		return x.GameList
	}
	return nil
}

func (x *LittleGameUi) GetHomeCornerUrl() string {
	if x != nil {
		return x.HomeCornerUrl
	}
	return ""
}

func (x *LittleGameUi) GetHomeTextUrl() string {
	if x != nil {
		return x.HomeTextUrl
	}
	return ""
}

func (x *LittleGameUi) GetRecommendJumpUrl() string {
	if x != nil {
		return x.RecommendJumpUrl
	}
	return ""
}

type GameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCornerUrl string `protobuf:"bytes,1,opt,name=game_corner_url,json=gameCornerUrl,proto3" json:"game_corner_url,omitempty"`
	GameUrl       string `protobuf:"bytes,2,opt,name=game_url,json=gameUrl,proto3" json:"game_url,omitempty"`
	HomeUrl       string `protobuf:"bytes,3,opt,name=home_url,json=homeUrl,proto3" json:"home_url,omitempty"`
	JumpUrl       string `protobuf:"bytes,4,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	OpenFlag      int64  `protobuf:"varint,5,opt,name=open_flag,json=openFlag,proto3" json:"open_flag,omitempty"`
	TextUrl       string `protobuf:"bytes,6,opt,name=text_url,json=textUrl,proto3" json:"text_url,omitempty"`
}

func (x *GameList) Reset() {
	*x = GameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameList) ProtoMessage() {}

func (x *GameList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameList.ProtoReflect.Descriptor instead.
func (*GameList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{215}
}

func (x *GameList) GetGameCornerUrl() string {
	if x != nil {
		return x.GameCornerUrl
	}
	return ""
}

func (x *GameList) GetGameUrl() string {
	if x != nil {
		return x.GameUrl
	}
	return ""
}

func (x *GameList) GetHomeUrl() string {
	if x != nil {
		return x.HomeUrl
	}
	return ""
}

func (x *GameList) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *GameList) GetOpenFlag() int64 {
	if x != nil {
		return x.OpenFlag
	}
	return 0
}

func (x *GameList) GetTextUrl() string {
	if x != nil {
		return x.TextUrl
	}
	return ""
}

// ============   score_config start  ==========
type ScoreInfoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualifyingDisplayScoreRule *QualifyingDisplayScoreConfig `protobuf:"bytes,1,opt,name=qualifying_display_score_rule,json=qualifyingDisplayScoreRule,proto3" json:"qualifying_display_score_rule,omitempty"`
	QualifyingScoreCoinRule    []*SnakeCoinConfig            `protobuf:"bytes,2,rep,name=qualifying_score_coin_rule,json=qualifyingScoreCoinRule,proto3" json:"qualifying_score_coin_rule,omitempty"`
	EscapeScoreCoinRule        []*SnakeCoinConfig            `protobuf:"bytes,3,rep,name=escape_score_coin_rule,json=escapeScoreCoinRule,proto3" json:"escape_score_coin_rule,omitempty"`
	EscapePointRule            *EscapePointRule              `protobuf:"bytes,4,opt,name=escape_point_rule,json=escapePointRule,proto3" json:"escape_point_rule,omitempty"`
	EscapeCupMap               []*KVInt                      `protobuf:"bytes,5,rep,name=escape_cup_map,json=escapeCupMap,proto3" json:"escape_cup_map,omitempty"`
	SeasonNotify               *SeasonNotifyConfig           `protobuf:"bytes,6,opt,name=season_notify,json=seasonNotify,proto3" json:"season_notify,omitempty"`
	SingleDoubleSnakeCoinRule  []*SingleDoubleSnakeCoin      `protobuf:"bytes,7,rep,name=single_double_snake_coin_rule,json=singleDoubleSnakeCoinRule,proto3" json:"single_double_snake_coin_rule,omitempty"`
	EndlessSnakeCoinRule       []*SnakeCoinCalcConfig        `protobuf:"bytes,8,rep,name=endless_snake_coin_rule,json=endlessSnakeCoinRule,proto3" json:"endless_snake_coin_rule,omitempty"`
	LimitSnakeCoinRule         []*SnakeCoinCalcConfig        `protobuf:"bytes,9,rep,name=limit_snake_coin_rule,json=limitSnakeCoinRule,proto3" json:"limit_snake_coin_rule,omitempty"`
}

func (x *ScoreInfoConfig) Reset() {
	*x = ScoreInfoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreInfoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreInfoConfig) ProtoMessage() {}

func (x *ScoreInfoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreInfoConfig.ProtoReflect.Descriptor instead.
func (*ScoreInfoConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{216}
}

func (x *ScoreInfoConfig) GetQualifyingDisplayScoreRule() *QualifyingDisplayScoreConfig {
	if x != nil {
		return x.QualifyingDisplayScoreRule
	}
	return nil
}

func (x *ScoreInfoConfig) GetQualifyingScoreCoinRule() []*SnakeCoinConfig {
	if x != nil {
		return x.QualifyingScoreCoinRule
	}
	return nil
}

func (x *ScoreInfoConfig) GetEscapeScoreCoinRule() []*SnakeCoinConfig {
	if x != nil {
		return x.EscapeScoreCoinRule
	}
	return nil
}

func (x *ScoreInfoConfig) GetEscapePointRule() *EscapePointRule {
	if x != nil {
		return x.EscapePointRule
	}
	return nil
}

func (x *ScoreInfoConfig) GetEscapeCupMap() []*KVInt {
	if x != nil {
		return x.EscapeCupMap
	}
	return nil
}

func (x *ScoreInfoConfig) GetSeasonNotify() *SeasonNotifyConfig {
	if x != nil {
		return x.SeasonNotify
	}
	return nil
}

func (x *ScoreInfoConfig) GetSingleDoubleSnakeCoinRule() []*SingleDoubleSnakeCoin {
	if x != nil {
		return x.SingleDoubleSnakeCoinRule
	}
	return nil
}

func (x *ScoreInfoConfig) GetEndlessSnakeCoinRule() []*SnakeCoinCalcConfig {
	if x != nil {
		return x.EndlessSnakeCoinRule
	}
	return nil
}

func (x *ScoreInfoConfig) GetLimitSnakeCoinRule() []*SnakeCoinCalcConfig {
	if x != nil {
		return x.LimitSnakeCoinRule
	}
	return nil
}

type QualifyingDisplayScoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthConfig   []*DisplayScoreCalcConfig `protobuf:"bytes,1,rep,name=length_config,json=lengthConfig,proto3" json:"length_config,omitempty"`
	KillConfig     []*DisplayScoreCalcConfig `protobuf:"bytes,2,rep,name=kill_config,json=killConfig,proto3" json:"kill_config,omitempty"`
	EatConfig      []*DisplayScoreCalcConfig `protobuf:"bytes,3,rep,name=eat_config,json=eatConfig,proto3" json:"eat_config,omitempty"`
	KilledConfig   []*DisplayScoreCalcConfig `protobuf:"bytes,4,rep,name=killed_config,json=killedConfig,proto3" json:"killed_config,omitempty"`
	DestroyConfig  []*DisplayScoreCalcConfig `protobuf:"bytes,5,rep,name=destroy_config,json=destroyConfig,proto3" json:"destroy_config,omitempty"`
	BossKillConfig []*DisplayScoreCalcConfig `protobuf:"bytes,6,rep,name=boss_kill_config,json=bossKillConfig,proto3" json:"boss_kill_config,omitempty"`
}

func (x *QualifyingDisplayScoreConfig) Reset() {
	*x = QualifyingDisplayScoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingDisplayScoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingDisplayScoreConfig) ProtoMessage() {}

func (x *QualifyingDisplayScoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingDisplayScoreConfig.ProtoReflect.Descriptor instead.
func (*QualifyingDisplayScoreConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{217}
}

func (x *QualifyingDisplayScoreConfig) GetLengthConfig() []*DisplayScoreCalcConfig {
	if x != nil {
		return x.LengthConfig
	}
	return nil
}

func (x *QualifyingDisplayScoreConfig) GetKillConfig() []*DisplayScoreCalcConfig {
	if x != nil {
		return x.KillConfig
	}
	return nil
}

func (x *QualifyingDisplayScoreConfig) GetEatConfig() []*DisplayScoreCalcConfig {
	if x != nil {
		return x.EatConfig
	}
	return nil
}

func (x *QualifyingDisplayScoreConfig) GetKilledConfig() []*DisplayScoreCalcConfig {
	if x != nil {
		return x.KilledConfig
	}
	return nil
}

func (x *QualifyingDisplayScoreConfig) GetDestroyConfig() []*DisplayScoreCalcConfig {
	if x != nil {
		return x.DestroyConfig
	}
	return nil
}

func (x *QualifyingDisplayScoreConfig) GetBossKillConfig() []*DisplayScoreCalcConfig {
	if x != nil {
		return x.BossKillConfig
	}
	return nil
}

type SnakeCoinConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamRank  int64 `protobuf:"varint,1,opt,name=team_rank,json=teamRank,proto3" json:"team_rank,omitempty"`
	CoinStart int64 `protobuf:"varint,2,opt,name=coin_start,json=coinStart,proto3" json:"coin_start,omitempty"`
	CoinEnd   int64 `protobuf:"varint,3,opt,name=coin_end,json=coinEnd,proto3" json:"coin_end,omitempty"`
}

func (x *SnakeCoinConfig) Reset() {
	*x = SnakeCoinConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeCoinConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeCoinConfig) ProtoMessage() {}

func (x *SnakeCoinConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeCoinConfig.ProtoReflect.Descriptor instead.
func (*SnakeCoinConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{218}
}

func (x *SnakeCoinConfig) GetTeamRank() int64 {
	if x != nil {
		return x.TeamRank
	}
	return 0
}

func (x *SnakeCoinConfig) GetCoinStart() int64 {
	if x != nil {
		return x.CoinStart
	}
	return 0
}

func (x *SnakeCoinConfig) GetCoinEnd() int64 {
	if x != nil {
		return x.CoinEnd
	}
	return 0
}

type EscapePointRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankPoint   []*KVInt `protobuf:"bytes,1,rep,name=rank_point,json=rankPoint,proto3" json:"rank_point,omitempty"`
	ActionPoint []*KVInt `protobuf:"bytes,2,rep,name=action_point,json=actionPoint,proto3" json:"action_point,omitempty"`
	KillPoint   []*KVInt `protobuf:"bytes,3,rep,name=kill_point,json=killPoint,proto3" json:"kill_point,omitempty"`
}

func (x *EscapePointRule) Reset() {
	*x = EscapePointRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EscapePointRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EscapePointRule) ProtoMessage() {}

func (x *EscapePointRule) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EscapePointRule.ProtoReflect.Descriptor instead.
func (*EscapePointRule) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{219}
}

func (x *EscapePointRule) GetRankPoint() []*KVInt {
	if x != nil {
		return x.RankPoint
	}
	return nil
}

func (x *EscapePointRule) GetActionPoint() []*KVInt {
	if x != nil {
		return x.ActionPoint
	}
	return nil
}

func (x *EscapePointRule) GetKillPoint() []*KVInt {
	if x != nil {
		return x.KillPoint
	}
	return nil
}

type KVInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int64 `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *KVInt) Reset() {
	*x = KVInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVInt) ProtoMessage() {}

func (x *KVInt) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVInt.ProtoReflect.Descriptor instead.
func (*KVInt) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{220}
}

func (x *KVInt) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *KVInt) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DisplayScoreCalcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthStart int64   `protobuf:"varint,1,opt,name=length_start,json=lengthStart,proto3" json:"length_start,omitempty"`
	LengthEnd   int64   `protobuf:"varint,2,opt,name=length_end,json=lengthEnd,proto3" json:"length_end,omitempty"`
	Rate        float64 `protobuf:"fixed64,3,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *DisplayScoreCalcConfig) Reset() {
	*x = DisplayScoreCalcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayScoreCalcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayScoreCalcConfig) ProtoMessage() {}

func (x *DisplayScoreCalcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayScoreCalcConfig.ProtoReflect.Descriptor instead.
func (*DisplayScoreCalcConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{221}
}

func (x *DisplayScoreCalcConfig) GetLengthStart() int64 {
	if x != nil {
		return x.LengthStart
	}
	return 0
}

func (x *DisplayScoreCalcConfig) GetLengthEnd() int64 {
	if x != nil {
		return x.LengthEnd
	}
	return 0
}

func (x *DisplayScoreCalcConfig) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type SeasonNotifyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bottom  string   `protobuf:"bytes,1,opt,name=bottom,proto3" json:"bottom,omitempty"`
	Top     []string `protobuf:"bytes,2,rep,name=top,proto3" json:"top,omitempty"`
	Jumpurl string   `protobuf:"bytes,3,opt,name=jumpurl,proto3" json:"jumpurl,omitempty"`
}

func (x *SeasonNotifyConfig) Reset() {
	*x = SeasonNotifyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonNotifyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonNotifyConfig) ProtoMessage() {}

func (x *SeasonNotifyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonNotifyConfig.ProtoReflect.Descriptor instead.
func (*SeasonNotifyConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{222}
}

func (x *SeasonNotifyConfig) GetBottom() string {
	if x != nil {
		return x.Bottom
	}
	return ""
}

func (x *SeasonNotifyConfig) GetTop() []string {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *SeasonNotifyConfig) GetJumpurl() string {
	if x != nil {
		return x.Jumpurl
	}
	return ""
}

type SingleDoubleSnakeCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthStart int64                    `protobuf:"varint,1,opt,name=length_start,json=lengthStart,proto3" json:"length_start,omitempty"`
	LengthEnd   int64                    `protobuf:"varint,2,opt,name=length_end,json=lengthEnd,proto3" json:"length_end,omitempty"`
	RateConfig  []float64                `protobuf:"fixed64,3,rep,packed,name=rate_config,json=rateConfig,proto3" json:"rate_config,omitempty"`
	CalcConfig  []*SnakeCoinAdCalcConfig `protobuf:"bytes,4,rep,name=calc_config,json=calcConfig,proto3" json:"calc_config,omitempty"`
}

func (x *SingleDoubleSnakeCoin) Reset() {
	*x = SingleDoubleSnakeCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDoubleSnakeCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDoubleSnakeCoin) ProtoMessage() {}

func (x *SingleDoubleSnakeCoin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDoubleSnakeCoin.ProtoReflect.Descriptor instead.
func (*SingleDoubleSnakeCoin) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{223}
}

func (x *SingleDoubleSnakeCoin) GetLengthStart() int64 {
	if x != nil {
		return x.LengthStart
	}
	return 0
}

func (x *SingleDoubleSnakeCoin) GetLengthEnd() int64 {
	if x != nil {
		return x.LengthEnd
	}
	return 0
}

func (x *SingleDoubleSnakeCoin) GetRateConfig() []float64 {
	if x != nil {
		return x.RateConfig
	}
	return nil
}

func (x *SingleDoubleSnakeCoin) GetCalcConfig() []*SnakeCoinAdCalcConfig {
	if x != nil {
		return x.CalcConfig
	}
	return nil
}

type SnakeCoinAdCalcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate        float64 `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Probability int64   `protobuf:"varint,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (x *SnakeCoinAdCalcConfig) Reset() {
	*x = SnakeCoinAdCalcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeCoinAdCalcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeCoinAdCalcConfig) ProtoMessage() {}

func (x *SnakeCoinAdCalcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeCoinAdCalcConfig.ProtoReflect.Descriptor instead.
func (*SnakeCoinAdCalcConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{224}
}

func (x *SnakeCoinAdCalcConfig) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *SnakeCoinAdCalcConfig) GetProbability() int64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type SnakeCoinCalcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthStart int64 `protobuf:"varint,1,opt,name=length_start,json=lengthStart,proto3" json:"length_start,omitempty"`
	LengthEnd   int64 `protobuf:"varint,2,opt,name=length_end,json=lengthEnd,proto3" json:"length_end,omitempty"`
	CoinStart   int64 `protobuf:"varint,3,opt,name=coin_start,json=coinStart,proto3" json:"coin_start,omitempty"`
	CoinEnd     int64 `protobuf:"varint,4,opt,name=coin_end,json=coinEnd,proto3" json:"coin_end,omitempty"`
}

func (x *SnakeCoinCalcConfig) Reset() {
	*x = SnakeCoinCalcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeCoinCalcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeCoinCalcConfig) ProtoMessage() {}

func (x *SnakeCoinCalcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeCoinCalcConfig.ProtoReflect.Descriptor instead.
func (*SnakeCoinCalcConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{225}
}

func (x *SnakeCoinCalcConfig) GetLengthStart() int64 {
	if x != nil {
		return x.LengthStart
	}
	return 0
}

func (x *SnakeCoinCalcConfig) GetLengthEnd() int64 {
	if x != nil {
		return x.LengthEnd
	}
	return 0
}

func (x *SnakeCoinCalcConfig) GetCoinStart() int64 {
	if x != nil {
		return x.CoinStart
	}
	return 0
}

func (x *SnakeCoinCalcConfig) GetCoinEnd() int64 {
	if x != nil {
		return x.CoinEnd
	}
	return 0
}

// =======   android_market start  ========
type AndroidMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfficialMarket []string `protobuf:"bytes,1,rep,name=official_market,json=officialMarket,proto3" json:"official_market,omitempty"` // 官方市场列表
	NoAdMarket     []string `protobuf:"bytes,2,rep,name=no_ad_market,json=noAdMarket,proto3" json:"no_ad_market,omitempty"`           // 无广告市场列表
	HideActMarket  []string `protobuf:"bytes,3,rep,name=hide_act_market,json=hideActMarket,proto3" json:"hide_act_market,omitempty"`  // 审核模式隐藏活动入口的市场列表
}

func (x *AndroidMarket) Reset() {
	*x = AndroidMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMarket) ProtoMessage() {}

func (x *AndroidMarket) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMarket.ProtoReflect.Descriptor instead.
func (*AndroidMarket) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{226}
}

func (x *AndroidMarket) GetOfficialMarket() []string {
	if x != nil {
		return x.OfficialMarket
	}
	return nil
}

func (x *AndroidMarket) GetNoAdMarket() []string {
	if x != nil {
		return x.NoAdMarket
	}
	return nil
}

func (x *AndroidMarket) GetHideActMarket() []string {
	if x != nil {
		return x.HideActMarket
	}
	return nil
}

// ==========  simulation  start   ========
type SimulConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultBuildingList []string                `protobuf:"bytes,1,rep,name=default_building_list,json=defaultBuildingList,proto3" json:"default_building_list,omitempty"`
	DefaultRoleList     []string                `protobuf:"bytes,2,rep,name=default_role_list,json=defaultRoleList,proto3" json:"default_role_list,omitempty"`
	DefaultStaffList    []string                `protobuf:"bytes,3,rep,name=default_staff_list,json=defaultStaffList,proto3" json:"default_staff_list,omitempty"`
	DefaultSceneList    []string                `protobuf:"bytes,4,rep,name=default_scene_list,json=defaultSceneList,proto3" json:"default_scene_list,omitempty"`
	DefaultSpecialList  []string                `protobuf:"bytes,5,rep,name=default_special_list,json=defaultSpecialList,proto3" json:"default_special_list,omitempty"`
	TaskList            []*SimulTaskItem        `protobuf:"bytes,6,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	DefaultCoin         int64                   `protobuf:"varint,7,opt,name=default_coin,json=defaultCoin,proto3" json:"default_coin,omitempty"`
	BuildingSet         map[string]*BuildingSet `protobuf:"bytes,8,rep,name=building_set,json=buildingSet,proto3" json:"building_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StaffSet            map[string]*StaffSet    `protobuf:"bytes,9,rep,name=staff_set,json=staffSet,proto3" json:"staff_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RewardConfig        *SimulRewardConfig      `protobuf:"bytes,10,opt,name=reward_config,json=rewardConfig,proto3" json:"reward_config,omitempty"`
	TimedTaskList       []*TimedTaskInfo        `protobuf:"bytes,11,rep,name=timed_task_list,json=timedTaskList,proto3" json:"timed_task_list,omitempty"`
	TimedTaskCoinConfig []*TimedTaskCoinConfig  `protobuf:"bytes,12,rep,name=timed_task_coin_config,json=timedTaskCoinConfig,proto3" json:"timed_task_coin_config,omitempty"`
}

func (x *SimulConfig) Reset() {
	*x = SimulConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulConfig) ProtoMessage() {}

func (x *SimulConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulConfig.ProtoReflect.Descriptor instead.
func (*SimulConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{227}
}

func (x *SimulConfig) GetDefaultBuildingList() []string {
	if x != nil {
		return x.DefaultBuildingList
	}
	return nil
}

func (x *SimulConfig) GetDefaultRoleList() []string {
	if x != nil {
		return x.DefaultRoleList
	}
	return nil
}

func (x *SimulConfig) GetDefaultStaffList() []string {
	if x != nil {
		return x.DefaultStaffList
	}
	return nil
}

func (x *SimulConfig) GetDefaultSceneList() []string {
	if x != nil {
		return x.DefaultSceneList
	}
	return nil
}

func (x *SimulConfig) GetDefaultSpecialList() []string {
	if x != nil {
		return x.DefaultSpecialList
	}
	return nil
}

func (x *SimulConfig) GetTaskList() []*SimulTaskItem {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *SimulConfig) GetDefaultCoin() int64 {
	if x != nil {
		return x.DefaultCoin
	}
	return 0
}

func (x *SimulConfig) GetBuildingSet() map[string]*BuildingSet {
	if x != nil {
		return x.BuildingSet
	}
	return nil
}

func (x *SimulConfig) GetStaffSet() map[string]*StaffSet {
	if x != nil {
		return x.StaffSet
	}
	return nil
}

func (x *SimulConfig) GetRewardConfig() *SimulRewardConfig {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

func (x *SimulConfig) GetTimedTaskList() []*TimedTaskInfo {
	if x != nil {
		return x.TimedTaskList
	}
	return nil
}

func (x *SimulConfig) GetTimedTaskCoinConfig() []*TimedTaskCoinConfig {
	if x != nil {
		return x.TimedTaskCoinConfig
	}
	return nil
}

type SimulRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardCondition *SimulRewardCondition `protobuf:"bytes,1,opt,name=reward_condition,json=rewardCondition,proto3" json:"reward_condition,omitempty"`
	RewardMail      *SimulRewardMail      `protobuf:"bytes,2,opt,name=reward_mail,json=rewardMail,proto3" json:"reward_mail,omitempty"`
}

func (x *SimulRewardConfig) Reset() {
	*x = SimulRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulRewardConfig) ProtoMessage() {}

func (x *SimulRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulRewardConfig.ProtoReflect.Descriptor instead.
func (*SimulRewardConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{228}
}

func (x *SimulRewardConfig) GetRewardCondition() *SimulRewardCondition {
	if x != nil {
		return x.RewardCondition
	}
	return nil
}

func (x *SimulRewardConfig) GetRewardMail() *SimulRewardMail {
	if x != nil {
		return x.RewardMail
	}
	return nil
}

type SimulRewardCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Likes int64 `protobuf:"varint,1,opt,name=likes,proto3" json:"likes,omitempty"`
}

func (x *SimulRewardCondition) Reset() {
	*x = SimulRewardCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulRewardCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulRewardCondition) ProtoMessage() {}

func (x *SimulRewardCondition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulRewardCondition.ProtoReflect.Descriptor instead.
func (*SimulRewardCondition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{229}
}

func (x *SimulRewardCondition) GetLikes() int64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

type SimulRewardMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content    string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	RewardList []*config.RewardConfig `protobuf:"bytes,3,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *SimulRewardMail) Reset() {
	*x = SimulRewardMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulRewardMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulRewardMail) ProtoMessage() {}

func (x *SimulRewardMail) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulRewardMail.ProtoReflect.Descriptor instead.
func (*SimulRewardMail) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{230}
}

func (x *SimulRewardMail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SimulRewardMail) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SimulRewardMail) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type SimulTaskItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string         `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TaskId       string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskCategory int64          `protobuf:"varint,3,opt,name=task_category,json=taskCategory,proto3" json:"task_category,omitempty"`
	TaskType     int64          `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	ObjId        string         `protobuf:"bytes,5,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Process      int64          `protobuf:"varint,6,opt,name=process,proto3" json:"process,omitempty"`
	NeedNum      int64          `protobuf:"varint,7,opt,name=need_num,json=needNum,proto3" json:"need_num,omitempty"`
	Reward       []*SimulReward `protobuf:"bytes,8,rep,name=reward,proto3" json:"reward,omitempty"`
}

func (x *SimulTaskItem) Reset() {
	*x = SimulTaskItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulTaskItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulTaskItem) ProtoMessage() {}

func (x *SimulTaskItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulTaskItem.ProtoReflect.Descriptor instead.
func (*SimulTaskItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{231}
}

func (x *SimulTaskItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SimulTaskItem) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SimulTaskItem) GetTaskCategory() int64 {
	if x != nil {
		return x.TaskCategory
	}
	return 0
}

func (x *SimulTaskItem) GetTaskType() int64 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *SimulTaskItem) GetObjId() string {
	if x != nil {
		return x.ObjId
	}
	return ""
}

func (x *SimulTaskItem) GetProcess() int64 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *SimulTaskItem) GetNeedNum() int64 {
	if x != nil {
		return x.NeedNum
	}
	return 0
}

func (x *SimulTaskItem) GetReward() []*SimulReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

type SimulReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Num  int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *SimulReward) Reset() {
	*x = SimulReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulReward) ProtoMessage() {}

func (x *SimulReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulReward.ProtoReflect.Descriptor instead.
func (*SimulReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{232}
}

func (x *SimulReward) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SimulReward) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type BuildingSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLevel int64     `protobuf:"varint,1,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	Detail   []*Detail `protobuf:"bytes,2,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *BuildingSet) Reset() {
	*x = BuildingSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingSet) ProtoMessage() {}

func (x *BuildingSet) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingSet.ProtoReflect.Descriptor instead.
func (*BuildingSet) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{233}
}

func (x *BuildingSet) GetMaxLevel() int64 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *BuildingSet) GetDetail() []*Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Likes int64 `protobuf:"varint,1,opt,name=likes,proto3" json:"likes,omitempty"`
}

func (x *Detail) Reset() {
	*x = Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{234}
}

func (x *Detail) GetLikes() int64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

type StaffSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLevel int64     `protobuf:"varint,1,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	Detail   []*Detail `protobuf:"bytes,2,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *StaffSet) Reset() {
	*x = StaffSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffSet) ProtoMessage() {}

func (x *StaffSet) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffSet.ProtoReflect.Descriptor instead.
func (*StaffSet) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{235}
}

func (x *StaffSet) GetMaxLevel() int64 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *StaffSet) GetDetail() []*Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type TimedTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TaskCategory int64  `protobuf:"varint,2,opt,name=task_category,json=taskCategory,proto3" json:"task_category,omitempty"`
	TaskType     int64  `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	ObjType      string `protobuf:"bytes,4,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	Index        int64  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Process      int64  `protobuf:"varint,6,opt,name=process,proto3" json:"process,omitempty"`
	NeedNum      int64  `protobuf:"varint,7,opt,name=need_num,json=needNum,proto3" json:"need_num,omitempty"`
	Coin         int64  `protobuf:"varint,8,opt,name=coin,proto3" json:"coin,omitempty"`
	StartTime    int64  `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration     int64  `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	IsValid      int64  `protobuf:"varint,11,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsTaken      int64  `protobuf:"varint,12,opt,name=is_taken,json=isTaken,proto3" json:"is_taken,omitempty"`
}

func (x *TimedTaskInfo) Reset() {
	*x = TimedTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedTaskInfo) ProtoMessage() {}

func (x *TimedTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedTaskInfo.ProtoReflect.Descriptor instead.
func (*TimedTaskInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{236}
}

func (x *TimedTaskInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TimedTaskInfo) GetTaskCategory() int64 {
	if x != nil {
		return x.TaskCategory
	}
	return 0
}

func (x *TimedTaskInfo) GetTaskType() int64 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *TimedTaskInfo) GetObjType() string {
	if x != nil {
		return x.ObjType
	}
	return ""
}

func (x *TimedTaskInfo) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TimedTaskInfo) GetProcess() int64 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *TimedTaskInfo) GetNeedNum() int64 {
	if x != nil {
		return x.NeedNum
	}
	return 0
}

func (x *TimedTaskInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *TimedTaskInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TimedTaskInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TimedTaskInfo) GetIsValid() int64 {
	if x != nil {
		return x.IsValid
	}
	return 0
}

func (x *TimedTaskInfo) GetIsTaken() int64 {
	if x != nil {
		return x.IsTaken
	}
	return 0
}

type TimedTaskCoinConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Likes int64 `protobuf:"varint,1,opt,name=likes,proto3" json:"likes,omitempty"`
	Coins int64 `protobuf:"varint,2,opt,name=coins,proto3" json:"coins,omitempty"`
}

func (x *TimedTaskCoinConfig) Reset() {
	*x = TimedTaskCoinConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedTaskCoinConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedTaskCoinConfig) ProtoMessage() {}

func (x *TimedTaskCoinConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedTaskCoinConfig.ProtoReflect.Descriptor instead.
func (*TimedTaskCoinConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{237}
}

func (x *TimedTaskCoinConfig) GetLikes() int64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *TimedTaskCoinConfig) GetCoins() int64 {
	if x != nil {
		return x.Coins
	}
	return 0
}

// ========   summon_config start   =========
type SummonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiConfig    []*SummonAiConfig `protobuf:"bytes,1,rep,name=aiConfig,proto3" json:"aiConfig,omitempty"`
	EnableDebug int64             `protobuf:"varint,2,opt,name=enableDebug,proto3" json:"enableDebug,omitempty"`
	MapConfig   *MapConfig        `protobuf:"bytes,3,opt,name=mapConfig,proto3" json:"mapConfig,omitempty"`
}

func (x *SummonConfig) Reset() {
	*x = SummonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonConfig) ProtoMessage() {}

func (x *SummonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonConfig.ProtoReflect.Descriptor instead.
func (*SummonConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{238}
}

func (x *SummonConfig) GetAiConfig() []*SummonAiConfig {
	if x != nil {
		return x.AiConfig
	}
	return nil
}

func (x *SummonConfig) GetEnableDebug() int64 {
	if x != nil {
		return x.EnableDebug
	}
	return 0
}

func (x *SummonConfig) GetMapConfig() *MapConfig {
	if x != nil {
		return x.MapConfig
	}
	return nil
}

type SummonAiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config []*SummonConfigItem `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
}

func (x *SummonAiConfig) Reset() {
	*x = SummonAiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummonAiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonAiConfig) ProtoMessage() {}

func (x *SummonAiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonAiConfig.ProtoReflect.Descriptor instead.
func (*SummonAiConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{239}
}

func (x *SummonAiConfig) GetConfig() []*SummonConfigItem {
	if x != nil {
		return x.Config
	}
	return nil
}

type SummonConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Num   int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *SummonConfigItem) Reset() {
	*x = SummonConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummonConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonConfigItem) ProtoMessage() {}

func (x *SummonConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonConfigItem.ProtoReflect.Descriptor instead.
func (*SummonConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{240}
}

func (x *SummonConfigItem) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SummonConfigItem) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type MapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width  int64 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *MapConfig) Reset() {
	*x = MapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapConfig) ProtoMessage() {}

func (x *MapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapConfig.ProtoReflect.Descriptor instead.
func (*MapConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{241}
}

func (x *MapConfig) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MapConfig) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

// ======  ios_patch  start ======
type IosPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path map[string]*IosPatchList `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IosPatch) Reset() {
	*x = IosPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosPatch) ProtoMessage() {}

func (x *IosPatch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosPatch.ProtoReflect.Descriptor instead.
func (*IosPatch) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{242}
}

func (x *IosPatch) GetPath() map[string]*IosPatchList {
	if x != nil {
		return x.Path
	}
	return nil
}

type IosPatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosPatch []*IosPatchItem `protobuf:"bytes,1,rep,name=ios_patch,json=iosPatch,proto3" json:"ios_patch,omitempty"`
}

func (x *IosPatchList) Reset() {
	*x = IosPatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosPatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosPatchList) ProtoMessage() {}

func (x *IosPatchList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosPatchList.ProtoReflect.Descriptor instead.
func (*IosPatchList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{243}
}

func (x *IosPatchList) GetIosPatch() []*IosPatchItem {
	if x != nil {
		return x.IosPatch
	}
	return nil
}

type IosPatchItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsVersion    []string `protobuf:"bytes,1,rep,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	DeviceName   []string `protobuf:"bytes,2,rep,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceId     []string `protobuf:"bytes,3,rep,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Patch        string   `protobuf:"bytes,4,opt,name=patch,proto3" json:"patch,omitempty"`
	PatchVersion string   `protobuf:"bytes,5,opt,name=patch_version,json=patchVersion,proto3" json:"patch_version,omitempty"`
	Enable       int64    `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *IosPatchItem) Reset() {
	*x = IosPatchItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosPatchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosPatchItem) ProtoMessage() {}

func (x *IosPatchItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosPatchItem.ProtoReflect.Descriptor instead.
func (*IosPatchItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{244}
}

func (x *IosPatchItem) GetOsVersion() []string {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *IosPatchItem) GetDeviceName() []string {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *IosPatchItem) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *IosPatchItem) GetPatch() string {
	if x != nil {
		return x.Patch
	}
	return ""
}

func (x *IosPatchItem) GetPatchVersion() string {
	if x != nil {
		return x.PatchVersion
	}
	return ""
}

func (x *IosPatchItem) GetEnable() int64 {
	if x != nil {
		return x.Enable
	}
	return 0
}

// ===== unity_assets  start ======
type UnityAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions map[string]*AssetMap `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnityAssets) Reset() {
	*x = UnityAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityAssets) ProtoMessage() {}

func (x *UnityAssets) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityAssets.ProtoReflect.Descriptor instead.
func (*UnityAssets) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{245}
}

func (x *UnityAssets) GetVersions() map[string]*AssetMap {
	if x != nil {
		return x.Versions
	}
	return nil
}

type AssetMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platforms map[string]*Asset `protobuf:"bytes,1,rep,name=platforms,proto3" json:"platforms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AssetMap) Reset() {
	*x = AssetMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetMap) ProtoMessage() {}

func (x *AssetMap) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetMap.ProtoReflect.Descriptor instead.
func (*AssetMap) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{246}
}

func (x *AssetMap) GetPlatforms() map[string]*Asset {
	if x != nil {
		return x.Platforms
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*AssetItem `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{247}
}

func (x *Asset) GetAssets() []*AssetItem {
	if x != nil {
		return x.Assets
	}
	return nil
}

type AssetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Src  string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Md5  string `protobuf:"bytes,3,opt,name=md5,proto3" json:"md5,omitempty"`
	Hmac string `protobuf:"bytes,4,opt,name=hmac,proto3" json:"hmac,omitempty"`
}

func (x *AssetItem) Reset() {
	*x = AssetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetItem) ProtoMessage() {}

func (x *AssetItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetItem.ProtoReflect.Descriptor instead.
func (*AssetItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{248}
}

func (x *AssetItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetItem) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *AssetItem) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *AssetItem) GetHmac() string {
	if x != nil {
		return x.Hmac
	}
	return ""
}

type TeamEndlessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch             bool                        `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Desc               string                      `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Guide              *TeamEndlessConfig_Guide    `protobuf:"bytes,3,opt,name=guide,proto3" json:"guide,omitempty"`
	Seasons            []*TeamEndlessConfig_Season `protobuf:"bytes,4,rep,name=seasons,proto3" json:"seasons,omitempty"` // 赛季配置
	Rank               *TeamEndlessConfig_Rank     `protobuf:"bytes,5,opt,name=rank,proto3" json:"rank,omitempty"`
	AndroidUnlockTip   string                      `protobuf:"bytes,6,opt,name=android_unlock_tip,json=androidUnlockTip,proto3" json:"android_unlock_tip,omitempty"`        // 安卓解锁提示
	IosUnlockTip       string                      `protobuf:"bytes,7,opt,name=ios_unlock_tip,json=iosUnlockTip,proto3" json:"ios_unlock_tip,omitempty"`                    // ios解锁提示
	Boss               int32                       `protobuf:"varint,18,opt,name=boss,proto3" json:"boss,omitempty"`                                                        // 是否开启boss功能，0: 未开启 1: 开启
	CoupleSkinActivity *CoupleSkinActivity         `protobuf:"bytes,19,opt,name=couple_skin_activity,json=coupleSkinActivity,proto3" json:"couple_skin_activity,omitempty"` // cp皮肤直售活动
}

func (x *TeamEndlessConfig) Reset() {
	*x = TeamEndlessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessConfig) ProtoMessage() {}

func (x *TeamEndlessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessConfig.ProtoReflect.Descriptor instead.
func (*TeamEndlessConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{249}
}

func (x *TeamEndlessConfig) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

func (x *TeamEndlessConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TeamEndlessConfig) GetGuide() *TeamEndlessConfig_Guide {
	if x != nil {
		return x.Guide
	}
	return nil
}

func (x *TeamEndlessConfig) GetSeasons() []*TeamEndlessConfig_Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

func (x *TeamEndlessConfig) GetRank() *TeamEndlessConfig_Rank {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *TeamEndlessConfig) GetAndroidUnlockTip() string {
	if x != nil {
		return x.AndroidUnlockTip
	}
	return ""
}

func (x *TeamEndlessConfig) GetIosUnlockTip() string {
	if x != nil {
		return x.IosUnlockTip
	}
	return ""
}

func (x *TeamEndlessConfig) GetBoss() int32 {
	if x != nil {
		return x.Boss
	}
	return 0
}

func (x *TeamEndlessConfig) GetCoupleSkinActivity() *CoupleSkinActivity {
	if x != nil {
		return x.CoupleSkinActivity
	}
	return nil
}

type CoupleSkinActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	StartTime  int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	JumpUrl    string `protobuf:"bytes,4,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
}

func (x *CoupleSkinActivity) Reset() {
	*x = CoupleSkinActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoupleSkinActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoupleSkinActivity) ProtoMessage() {}

func (x *CoupleSkinActivity) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoupleSkinActivity.ProtoReflect.Descriptor instead.
func (*CoupleSkinActivity) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{250}
}

func (x *CoupleSkinActivity) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *CoupleSkinActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CoupleSkinActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CoupleSkinActivity) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

type NativeQualifyAIPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                         int32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Comment                       string  `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	BorderDisFactor               float64 `protobuf:"fixed64,3,opt,name=border_dis_factor,json=borderDisFactor,proto3" json:"border_dis_factor,omitempty"`
	SnakeDisFactor                float64 `protobuf:"fixed64,4,opt,name=snake_dis_factor,json=snakeDisFactor,proto3" json:"snake_dis_factor,omitempty"`
	WreckDisFactor                float64 `protobuf:"fixed64,5,opt,name=wreck_dis_factor,json=wreckDisFactor,proto3" json:"wreck_dis_factor,omitempty"`
	FloaterDisFactor              float64 `protobuf:"fixed64,6,opt,name=floater_dis_factor,json=floaterDisFactor,proto3" json:"floater_dis_factor,omitempty"`
	PropsDisFactor                float64 `protobuf:"fixed64,7,opt,name=props_dis_factor,json=propsDisFactor,proto3" json:"props_dis_factor,omitempty"`
	AiSnakeViewAngle              float64 `protobuf:"fixed64,8,opt,name=ai_snake_view_angle,json=aiSnakeViewAngle,proto3" json:"ai_snake_view_angle,omitempty"`
	AttackBorderDisFactor         float64 `protobuf:"fixed64,9,opt,name=attack_border_dis_factor,json=attackBorderDisFactor,proto3" json:"attack_border_dis_factor,omitempty"`
	AttackSnakeDisFactor          float64 `protobuf:"fixed64,10,opt,name=attack_snake_dis_factor,json=attackSnakeDisFactor,proto3" json:"attack_snake_dis_factor,omitempty"`
	AttackWreckDisFactor          float64 `protobuf:"fixed64,11,opt,name=attack_wreck_dis_factor,json=attackWreckDisFactor,proto3" json:"attack_wreck_dis_factor,omitempty"`
	AttackAiSnakeViewAngle        float64 `protobuf:"fixed64,12,opt,name=attack_ai_snake_view_angle,json=attackAiSnakeViewAngle,proto3" json:"attack_ai_snake_view_angle,omitempty"`
	AttackFloaterDisFactor        float64 `protobuf:"fixed64,13,opt,name=attack_floater_dis_factor,json=attackFloaterDisFactor,proto3" json:"attack_floater_dis_factor,omitempty"`
	AttackPropsDisFactor          float64 `protobuf:"fixed64,14,opt,name=attack_props_dis_factor,json=attackPropsDisFactor,proto3" json:"attack_props_dis_factor,omitempty"`
	AttackCircleDisFactor         float64 `protobuf:"fixed64,15,opt,name=attack_circle_dis_factor,json=attackCircleDisFactor,proto3" json:"attack_circle_dis_factor,omitempty"`
	AttackRate                    float64 `protobuf:"fixed64,16,opt,name=attack_rate,json=attackRate,proto3" json:"attack_rate,omitempty"`
	ChangeDirectionRate           float64 `protobuf:"fixed64,17,opt,name=change_direction_rate,json=changeDirectionRate,proto3" json:"change_direction_rate,omitempty"`
	DelayDirectionRate            float64 `protobuf:"fixed64,18,opt,name=delay_direction_rate,json=delayDirectionRate,proto3" json:"delay_direction_rate,omitempty"`
	AttackTimes                   []int64 `protobuf:"varint,19,rep,packed,name=attack_times,json=attackTimes,proto3" json:"attack_times,omitempty"`
	AttackWeights                 []int64 `protobuf:"varint,20,rep,packed,name=attack_weights,json=attackWeights,proto3" json:"attack_weights,omitempty"`
	SpeedupRate                   float64 `protobuf:"fixed64,21,opt,name=speedup_rate,json=speedupRate,proto3" json:"speedup_rate,omitempty"`
	SpeedupTime                   float64 `protobuf:"fixed64,22,opt,name=speedup_time,json=speedupTime,proto3" json:"speedup_time,omitempty"`
	AiSnakeViewRadiusFactor       float64 `protobuf:"fixed64,23,opt,name=ai_snake_view_radius_factor,json=aiSnakeViewRadiusFactor,proto3" json:"ai_snake_view_radius_factor,omitempty"`
	AttackAiSnakeViewRadiusFactor float64 `protobuf:"fixed64,24,opt,name=attack_ai_snake_view_radius_factor,json=attackAiSnakeViewRadiusFactor,proto3" json:"attack_ai_snake_view_radius_factor,omitempty"`
}

func (x *NativeQualifyAIPool) Reset() {
	*x = NativeQualifyAIPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeQualifyAIPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeQualifyAIPool) ProtoMessage() {}

func (x *NativeQualifyAIPool) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeQualifyAIPool.ProtoReflect.Descriptor instead.
func (*NativeQualifyAIPool) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{251}
}

func (x *NativeQualifyAIPool) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *NativeQualifyAIPool) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NativeQualifyAIPool) GetBorderDisFactor() float64 {
	if x != nil {
		return x.BorderDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetSnakeDisFactor() float64 {
	if x != nil {
		return x.SnakeDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetWreckDisFactor() float64 {
	if x != nil {
		return x.WreckDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetFloaterDisFactor() float64 {
	if x != nil {
		return x.FloaterDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetPropsDisFactor() float64 {
	if x != nil {
		return x.PropsDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAiSnakeViewAngle() float64 {
	if x != nil {
		return x.AiSnakeViewAngle
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackBorderDisFactor() float64 {
	if x != nil {
		return x.AttackBorderDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackSnakeDisFactor() float64 {
	if x != nil {
		return x.AttackSnakeDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackWreckDisFactor() float64 {
	if x != nil {
		return x.AttackWreckDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackAiSnakeViewAngle() float64 {
	if x != nil {
		return x.AttackAiSnakeViewAngle
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackFloaterDisFactor() float64 {
	if x != nil {
		return x.AttackFloaterDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackPropsDisFactor() float64 {
	if x != nil {
		return x.AttackPropsDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackCircleDisFactor() float64 {
	if x != nil {
		return x.AttackCircleDisFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackRate() float64 {
	if x != nil {
		return x.AttackRate
	}
	return 0
}

func (x *NativeQualifyAIPool) GetChangeDirectionRate() float64 {
	if x != nil {
		return x.ChangeDirectionRate
	}
	return 0
}

func (x *NativeQualifyAIPool) GetDelayDirectionRate() float64 {
	if x != nil {
		return x.DelayDirectionRate
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackTimes() []int64 {
	if x != nil {
		return x.AttackTimes
	}
	return nil
}

func (x *NativeQualifyAIPool) GetAttackWeights() []int64 {
	if x != nil {
		return x.AttackWeights
	}
	return nil
}

func (x *NativeQualifyAIPool) GetSpeedupRate() float64 {
	if x != nil {
		return x.SpeedupRate
	}
	return 0
}

func (x *NativeQualifyAIPool) GetSpeedupTime() float64 {
	if x != nil {
		return x.SpeedupTime
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAiSnakeViewRadiusFactor() float64 {
	if x != nil {
		return x.AiSnakeViewRadiusFactor
	}
	return 0
}

func (x *NativeQualifyAIPool) GetAttackAiSnakeViewRadiusFactor() float64 {
	if x != nil {
		return x.AttackAiSnakeViewRadiusFactor
	}
	return 0
}

type BannerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannerId       int32            `protobuf:"varint,1,opt,name=banner_id,json=bannerId,proto3" json:"banner_id,omitempty"`
	BtnType        string           `protobuf:"bytes,2,opt,name=btn_type,json=btnType,proto3" json:"btn_type,omitempty"`
	BtnLink        string           `protobuf:"bytes,3,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
	BtnLinkDev     string           `protobuf:"bytes,4,opt,name=btn_link_dev,json=btnLinkDev,proto3" json:"btn_link_dev,omitempty"`
	BtnText        string           `protobuf:"bytes,5,opt,name=btn_text,json=btnText,proto3" json:"btn_text,omitempty"`
	Extra          *BannerExtraInfo `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	Imgurl         string           `protobuf:"bytes,7,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Imgurl2        string           `protobuf:"bytes,8,opt,name=imgurl2,proto3" json:"imgurl2,omitempty"`
	Title          string           `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Type           int32            `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	ShowLimitation int32            `protobuf:"varint,11,opt,name=show_limitation,json=showLimitation,proto3" json:"show_limitation,omitempty"`
	ShowLimit      int32            `protobuf:"varint,12,opt,name=show_limit,json=showLimit,proto3" json:"show_limit,omitempty"`
	Notify         int32            `protobuf:"varint,13,opt,name=notify,proto3" json:"notify,omitempty"`
	InitNotify     int32            `protobuf:"varint,14,opt,name=init_notify,json=initNotify,proto3" json:"init_notify,omitempty"`
	StaySecond     int32            `protobuf:"varint,15,opt,name=stay_second,json=staySecond,proto3" json:"stay_second,omitempty"`
	TotalLimit     int32            `protobuf:"varint,16,opt,name=total_limit,json=totalLimit,proto3" json:"total_limit,omitempty"`
	PureFlag       int32            `protobuf:"varint,17,opt,name=pure_flag,json=pureFlag,proto3" json:"pure_flag,omitempty"`
	CartonBgUrl    string           `protobuf:"bytes,18,opt,name=carton_bg_url,json=cartonBgUrl,proto3" json:"carton_bg_url,omitempty"`
	CartonList     []*CartonList    `protobuf:"bytes,19,rep,name=carton_list,json=cartonList,proto3" json:"carton_list,omitempty"`
	Status         int32            `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`
	Sort           int32            `protobuf:"varint,21,opt,name=sort,proto3" json:"sort,omitempty"`
	DirectJump     int32            `protobuf:"varint,22,opt,name=direct_jump,json=directJump,proto3" json:"direct_jump,omitempty"`
	IsMajorBanner  bool             `protobuf:"varint,23,opt,name=is_major_banner,json=isMajorBanner,proto3" json:"is_major_banner,omitempty"`
	HomepageSort   int32            `protobuf:"varint,24,opt,name=homepage_sort,json=homepageSort,proto3" json:"homepage_sort,omitempty"`
	HomePosition   int32            `protobuf:"varint,25,opt,name=home_position,json=homePosition,proto3" json:"home_position,omitempty"`
}

func (x *BannerInfo) Reset() {
	*x = BannerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerInfo) ProtoMessage() {}

func (x *BannerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerInfo.ProtoReflect.Descriptor instead.
func (*BannerInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{252}
}

func (x *BannerInfo) GetBannerId() int32 {
	if x != nil {
		return x.BannerId
	}
	return 0
}

func (x *BannerInfo) GetBtnType() string {
	if x != nil {
		return x.BtnType
	}
	return ""
}

func (x *BannerInfo) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *BannerInfo) GetBtnLinkDev() string {
	if x != nil {
		return x.BtnLinkDev
	}
	return ""
}

func (x *BannerInfo) GetBtnText() string {
	if x != nil {
		return x.BtnText
	}
	return ""
}

func (x *BannerInfo) GetExtra() *BannerExtraInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *BannerInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *BannerInfo) GetImgurl2() string {
	if x != nil {
		return x.Imgurl2
	}
	return ""
}

func (x *BannerInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BannerInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BannerInfo) GetShowLimitation() int32 {
	if x != nil {
		return x.ShowLimitation
	}
	return 0
}

func (x *BannerInfo) GetShowLimit() int32 {
	if x != nil {
		return x.ShowLimit
	}
	return 0
}

func (x *BannerInfo) GetNotify() int32 {
	if x != nil {
		return x.Notify
	}
	return 0
}

func (x *BannerInfo) GetInitNotify() int32 {
	if x != nil {
		return x.InitNotify
	}
	return 0
}

func (x *BannerInfo) GetStaySecond() int32 {
	if x != nil {
		return x.StaySecond
	}
	return 0
}

func (x *BannerInfo) GetTotalLimit() int32 {
	if x != nil {
		return x.TotalLimit
	}
	return 0
}

func (x *BannerInfo) GetPureFlag() int32 {
	if x != nil {
		return x.PureFlag
	}
	return 0
}

func (x *BannerInfo) GetCartonBgUrl() string {
	if x != nil {
		return x.CartonBgUrl
	}
	return ""
}

func (x *BannerInfo) GetCartonList() []*CartonList {
	if x != nil {
		return x.CartonList
	}
	return nil
}

func (x *BannerInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BannerInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BannerInfo) GetDirectJump() int32 {
	if x != nil {
		return x.DirectJump
	}
	return 0
}

func (x *BannerInfo) GetIsMajorBanner() bool {
	if x != nil {
		return x.IsMajorBanner
	}
	return false
}

func (x *BannerInfo) GetHomepageSort() int32 {
	if x != nil {
		return x.HomepageSort
	}
	return 0
}

func (x *BannerInfo) GetHomePosition() int32 {
	if x != nil {
		return x.HomePosition
	}
	return 0
}

type CartonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl  string `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	BtnType string `protobuf:"bytes,2,opt,name=btn_type,json=btnType,proto3" json:"btn_type,omitempty"`
	BtnLink string `protobuf:"bytes,3,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
}

func (x *CartonList) Reset() {
	*x = CartonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CartonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartonList) ProtoMessage() {}

func (x *CartonList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartonList.ProtoReflect.Descriptor instead.
func (*CartonList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{253}
}

func (x *CartonList) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *CartonList) GetBtnType() string {
	if x != nil {
		return x.BtnType
	}
	return ""
}

func (x *CartonList) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

type BannerExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedLogin        string   `protobuf:"bytes,1,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	AbleMarket       []string `protobuf:"bytes,2,rep,name=able_market,json=ableMarket,proto3" json:"able_market,omitempty"`
	DisableMarket    []string `protobuf:"bytes,3,rep,name=disable_market,json=disableMarket,proto3" json:"disable_market,omitempty"`
	VersionOperator  string   `protobuf:"bytes,4,opt,name=version_operator,json=versionOperator,proto3" json:"version_operator,omitempty"`
	Version          string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	VersionOperator2 string   `protobuf:"bytes,6,opt,name=version_operator2,json=versionOperator2,proto3" json:"version_operator2,omitempty"`
	Version2         string   `protobuf:"bytes,7,opt,name=version2,proto3" json:"version2,omitempty"`
	Start            int32    `protobuf:"varint,8,opt,name=start,proto3" json:"start,omitempty"`
	Finish           int32    `protobuf:"varint,9,opt,name=finish,proto3" json:"finish,omitempty"`
	LimitType        string   `protobuf:"bytes,10,opt,name=limit_type,json=limitType,proto3" json:"limit_type,omitempty"`
}

func (x *BannerExtraInfo) Reset() {
	*x = BannerExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerExtraInfo) ProtoMessage() {}

func (x *BannerExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerExtraInfo.ProtoReflect.Descriptor instead.
func (*BannerExtraInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{254}
}

func (x *BannerExtraInfo) GetNeedLogin() string {
	if x != nil {
		return x.NeedLogin
	}
	return ""
}

func (x *BannerExtraInfo) GetAbleMarket() []string {
	if x != nil {
		return x.AbleMarket
	}
	return nil
}

func (x *BannerExtraInfo) GetDisableMarket() []string {
	if x != nil {
		return x.DisableMarket
	}
	return nil
}

func (x *BannerExtraInfo) GetVersionOperator() string {
	if x != nil {
		return x.VersionOperator
	}
	return ""
}

func (x *BannerExtraInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BannerExtraInfo) GetVersionOperator2() string {
	if x != nil {
		return x.VersionOperator2
	}
	return ""
}

func (x *BannerExtraInfo) GetVersion2() string {
	if x != nil {
		return x.Version2
	}
	return ""
}

func (x *BannerExtraInfo) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *BannerExtraInfo) GetFinish() int32 {
	if x != nil {
		return x.Finish
	}
	return 0
}

func (x *BannerExtraInfo) GetLimitType() string {
	if x != nil {
		return x.LimitType
	}
	return ""
}

type TeamEndlessConfig_Guide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCount          int64    `protobuf:"varint,1,opt,name=game_count,json=gameCount,proto3" json:"game_count,omitempty"`                              // 需要的单人无尽游戏局数
	HighestScore       int64    `protobuf:"varint,2,opt,name=highest_score,json=highestScore,proto3" json:"highest_score,omitempty"`                     // 单人无尽最高分数要求
	InstructionTexts   []string `protobuf:"bytes,3,rep,name=instruction_texts,json=instructionTexts,proto3" json:"instruction_texts,omitempty"`          // 引导文案
	BackGameCount      int64    `protobuf:"varint,4,opt,name=back_game_count,json=backGameCount,proto3" json:"back_game_count,omitempty"`                // 回流用户需要游戏的局数
	RegisterDay        int32    `protobuf:"varint,5,opt,name=register_day,json=registerDay,proto3" json:"register_day,omitempty"`                        // 需要注册天数>=x天
	BeforeRegisterTime int64    `protobuf:"varint,6,opt,name=before_register_time,json=beforeRegisterTime,proto3" json:"before_register_time,omitempty"` // 需要注册的时间戳 <=x
}

func (x *TeamEndlessConfig_Guide) Reset() {
	*x = TeamEndlessConfig_Guide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessConfig_Guide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessConfig_Guide) ProtoMessage() {}

func (x *TeamEndlessConfig_Guide) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessConfig_Guide.ProtoReflect.Descriptor instead.
func (*TeamEndlessConfig_Guide) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{249, 0}
}

func (x *TeamEndlessConfig_Guide) GetGameCount() int64 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *TeamEndlessConfig_Guide) GetHighestScore() int64 {
	if x != nil {
		return x.HighestScore
	}
	return 0
}

func (x *TeamEndlessConfig_Guide) GetInstructionTexts() []string {
	if x != nil {
		return x.InstructionTexts
	}
	return nil
}

func (x *TeamEndlessConfig_Guide) GetBackGameCount() int64 {
	if x != nil {
		return x.BackGameCount
	}
	return 0
}

func (x *TeamEndlessConfig_Guide) GetRegisterDay() int32 {
	if x != nil {
		return x.RegisterDay
	}
	return 0
}

func (x *TeamEndlessConfig_Guide) GetBeforeRegisterTime() int64 {
	if x != nil {
		return x.BeforeRegisterTime
	}
	return 0
}

// 赛季配置
type TeamEndlessConfig_SeasonRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId     int32          `protobuf:"varint,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`            // 大段位id
	RewardList []*CRewardItem `protobuf:"bytes,2,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"` // 奖励列表
}

func (x *TeamEndlessConfig_SeasonRewardItem) Reset() {
	*x = TeamEndlessConfig_SeasonRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessConfig_SeasonRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessConfig_SeasonRewardItem) ProtoMessage() {}

func (x *TeamEndlessConfig_SeasonRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessConfig_SeasonRewardItem.ProtoReflect.Descriptor instead.
func (*TeamEndlessConfig_SeasonRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{249, 1}
}

func (x *TeamEndlessConfig_SeasonRewardItem) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *TeamEndlessConfig_SeasonRewardItem) GetRewardList() []*CRewardItem {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type TeamEndlessConfig_Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 赛季id
	StartTime  int64                                 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`   // 赛季开始时间
	EndTime    int64                                 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`         // 赛季结束时间
	RewardList []*TeamEndlessConfig_SeasonRewardItem `protobuf:"bytes,4,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"` // 奖励列表
}

func (x *TeamEndlessConfig_Season) Reset() {
	*x = TeamEndlessConfig_Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessConfig_Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessConfig_Season) ProtoMessage() {}

func (x *TeamEndlessConfig_Season) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessConfig_Season.ProtoReflect.Descriptor instead.
func (*TeamEndlessConfig_Season) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{249, 2}
}

func (x *TeamEndlessConfig_Season) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamEndlessConfig_Season) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TeamEndlessConfig_Season) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TeamEndlessConfig_Season) GetRewardList() []*TeamEndlessConfig_SeasonRewardItem {
	if x != nil {
		return x.RewardList
	}
	return nil
}

// 段位配置
type TeamEndlessConfig_BigRankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 大段位id
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // 大段位名称
}

func (x *TeamEndlessConfig_BigRankItem) Reset() {
	*x = TeamEndlessConfig_BigRankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessConfig_BigRankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessConfig_BigRankItem) ProtoMessage() {}

func (x *TeamEndlessConfig_BigRankItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessConfig_BigRankItem.ProtoReflect.Descriptor instead.
func (*TeamEndlessConfig_BigRankItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{249, 3}
}

func (x *TeamEndlessConfig_BigRankItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamEndlessConfig_BigRankItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TeamEndlessConfig_SmallRankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 小段位id
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // 小段位名称
	Min  int64  `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`  // 小段位分数区间最小值
	Max  int64  `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`  // 小段位分数区间最大值
}

func (x *TeamEndlessConfig_SmallRankItem) Reset() {
	*x = TeamEndlessConfig_SmallRankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessConfig_SmallRankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessConfig_SmallRankItem) ProtoMessage() {}

func (x *TeamEndlessConfig_SmallRankItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessConfig_SmallRankItem.ProtoReflect.Descriptor instead.
func (*TeamEndlessConfig_SmallRankItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{249, 4}
}

func (x *TeamEndlessConfig_SmallRankItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamEndlessConfig_SmallRankItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamEndlessConfig_SmallRankItem) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *TeamEndlessConfig_SmallRankItem) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type TeamEndlessConfig_Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigRank   []*TeamEndlessConfig_BigRankItem   `protobuf:"bytes,1,rep,name=big_rank,json=bigRank,proto3" json:"big_rank,omitempty"`       // 大段位列表
	SmallRank []*TeamEndlessConfig_SmallRankItem `protobuf:"bytes,2,rep,name=small_rank,json=smallRank,proto3" json:"small_rank,omitempty"` // 小段位列表
	RankDesc  string                             `protobuf:"bytes,3,opt,name=rank_desc,json=rankDesc,proto3" json:"rank_desc,omitempty"`    // 段位说明
}

func (x *TeamEndlessConfig_Rank) Reset() {
	*x = TeamEndlessConfig_Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessConfig_Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessConfig_Rank) ProtoMessage() {}

func (x *TeamEndlessConfig_Rank) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessConfig_Rank.ProtoReflect.Descriptor instead.
func (*TeamEndlessConfig_Rank) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{249, 5}
}

func (x *TeamEndlessConfig_Rank) GetBigRank() []*TeamEndlessConfig_BigRankItem {
	if x != nil {
		return x.BigRank
	}
	return nil
}

func (x *TeamEndlessConfig_Rank) GetSmallRank() []*TeamEndlessConfig_SmallRankItem {
	if x != nil {
		return x.SmallRank
	}
	return nil
}

func (x *TeamEndlessConfig_Rank) GetRankDesc() string {
	if x != nil {
		return x.RankDesc
	}
	return ""
}

var File_snakecommon_project_config_proto protoreflect.FileDescriptor

var file_snakecommon_project_config_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a,
	0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x53, 0x4b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a,
	0x38, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x17, 0x45, 0x6e, 0x64,
	0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x45,
	0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xbe, 0x01,
	0x0a, 0x0f, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x22, 0x7e,
	0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf3,
	0x0b, 0x0a, 0x0c, 0x4f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x6b, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x42, 0x6f, 0x73, 0x73, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x57, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x70, 0x12, 0x2f,
	0x0a, 0x14, 0x68, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x68, 0x63,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x14, 0x6e, 0x6f, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6e,
	0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x6c,
	0x55, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x65,
	0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x36, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x6e, 0x6f, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x1a, 0x6e, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x19,
	0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x65, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3a,
	0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x75, 0x69, 0x74, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x12, 0x45,
	0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65,
	0x6c, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4a, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x12, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65,
	0x77, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x32, 0x0a, 0x09, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70,
	0x49, 0x63, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x15,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x72, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x22, 0x5e, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x61, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39,
	0x0a, 0x09, 0x47, 0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x75, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x75, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x4b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x61,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x49, 0x70, 0x61,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x70, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x6f, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6c, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x95, 0x05, 0x0a, 0x10, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x56, 0x32,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69,
	0x70, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x55, 0x72, 0x6c, 0x73, 0x49, 0x70, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x32, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x49,
	0x70, 0x61, 0x64, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x63, 0x70, 0x5f, 0x76,
	0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4b, 0x63, 0x70, 0x56,
	0x32, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x76,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x74,
	0x79, 0x56, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x76, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x32, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x6b,
	0x63, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x4b, 0x63, 0x70,
	0x22, 0x71, 0x0a, 0x10, 0x52, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55,
	0x72, 0x6c, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x49,
	0x63, 0x6f, 0x6e, 0x22, 0x83, 0x08, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x08, 0x72, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72,
	0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a,
	0x10, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x16, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x70,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x43, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x75, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x65, 0x62,
	0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x56, 0x32, 0x1a, 0x5e, 0x0a, 0x13, 0x43, 0x6c, 0x61,
	0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x02, 0x0a, 0x08, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x70, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x15, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x63, 0x65, 0x43, 0x75,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x65, 0x0a, 0x0e, 0x52, 0x61, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x65,
	0x65, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x65,
	0x65, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x22, 0x96, 0x04, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x4b,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x6c, 0x0a, 0x0a, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0xf7, 0x03, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1a, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x71, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x79, 0x51, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x38, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x65,
	0x77, 0x5f, 0x77, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x57, 0x78,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x54, 0x0a,
	0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x75, 0x61,
	0x69, 0x73, 0x68, 0x6f, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x75, 0x61,
	0x69, 0x73, 0x68, 0x6f, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x65,
	0x69, 0x62, 0x6f, 0x22, 0x74, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x67, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x71, 0x5f, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x71, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x71, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x22, 0x67, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x69, 0x61, 0x6f, 0x6d, 0x69, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x69, 0x61, 0x6f, 0x6d, 0x69, 0x49, 0x6d, 0x67, 0x22,
	0xd1, 0x07, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x36, 0x0a, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f,
	0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x77, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x56, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61,
	0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x56, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x6f,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x56, 0x6f, 0x77, 0x46, 0x6f, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x72, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61,
	0x72, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x56,
	0x32, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0a, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x22, 0x78, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x22, 0x7e, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x89, 0x01,
	0x0a, 0x0f, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x36, 0x0a, 0x03, 0x69, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x03, 0x69, 0x6f, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x07, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x84,
	0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x45,
	0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x45, 0x78, 0x70, 0x22,
	0x81, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x22, 0xfb, 0x05, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x70, 0x70,
	0x79, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x74, 0x61, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4c,
	0x0a, 0x13, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69,
	0x6b, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x67, 0x69, 0x66, 0x74,
	0x4c, 0x69, 0x6b, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x16,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x61, 0x69, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x14, 0x61, 0x69, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x52, 0x14, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f,
	0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0xe9, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43,
	0x6c, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x52, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x6f, 0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x10,
	0x09, 0x22, 0x34, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x9d, 0x0a, 0x0a, 0x0a, 0x55, 0x69, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x33, 0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x49,
	0x63, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x43, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x09,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x11, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x75, 0x67, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x48, 0x75, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x67, 0x75, 0x72, 0x6c,
	0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x67, 0x75, 0x79, 0x73, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0c,
	0x66, 0x61, 0x6c, 0x6c, 0x67, 0x75, 0x79, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x35, 0x32,
	0x37, 0x35, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x35, 0x32, 0x37, 0x35, 0x49, 0x63, 0x6f,
	0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42,
	0x67, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x68,
	0x61, 0x6d, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0xb0, 0x04, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x48, 0x69, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x45, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x4c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x69, 0x64, 0x44, 0x65, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x69,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x69, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0x75, 0x0a, 0x06, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x62, 0x69,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x22, 0xff, 0x02, 0x0a,
	0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6e, 0x69, 0x6d, 0x53, 0x72, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x67, 0x5f,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6b,
	0x69, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x2f, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x62, 0x67,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x6b, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x70,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x67, 0x22, 0xb6,
	0x03, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x50,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0c,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x30, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xc6, 0x0f, 0x0a, 0x0c, 0x53, 0x68,
	0x6f, 0x77, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0e, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a,
	0x13, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x11, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69,
	0x6e, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x69, 0x72, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x64,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x75, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x55, 0x69, 0x12, 0x3b, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x64,
	0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x61, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x54, 0x0a, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x5f,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x15, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x62, 0x5f, 0x61, 0x64,
	0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x61, 0x62, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x1a, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x18, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x12, 0x66, 0x0a, 0x1f, 0x6e, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x1c, 0x6e, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x59, 0x0a, 0x18, 0x6d, 0x65,
	0x6c, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x16, 0x6d,
	0x65, 0x6c, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x10, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x13, 0x62,
	0x75, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x79, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x75,
	0x79, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x41, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x61, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x75, 0x79, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x54, 0x6f,
	0x61, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x61, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x64, 0x41, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x61,
	0x0a, 0x14, 0x61, 0x62, 0x5f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x62, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x61, 0x62, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x61, 0x0a, 0x16, 0x41, 0x62, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x69, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa8, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6f, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x0e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x70, 0x75, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x62,
	0x69, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x72, 0x69, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x68,
	0x0a, 0x15, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x13, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x62, 0x0a, 0x18, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a,
	0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69,
	0x6d, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x41,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63,
	0x6f, 0x69, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75,
	0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x61, 0x70, 0x70, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x61, 0x70, 0x70, 0x70, 0x61, 0x79, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x45,
	0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12,
	0x4b, 0x0a, 0x12, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63,
	0x6b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x69, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x19, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x0e, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x79,
	0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0d,
	0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c,
	0x61, 0x6e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x56, 0x32, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x25, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x63, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x70, 0x43, 0x64, 0x53, 0x65, 0x63, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77,
	0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x3a, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xed, 0x02, 0x0a,
	0x0f, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68,
	0x75, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x22, 0x42, 0x0a, 0x0d,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x63, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xcb, 0x13, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0e,
	0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x7a, 0x68, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x7a, 0x68, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x72, 0x6c, 0x32, 0x12, 0x34, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x64,
	0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x11, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x37, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x70, 0x5f, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x41, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b,
	0x69, 0x64, 0x66, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x66, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x64, 0x66, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x76, 0x65, 0x64, 0x69, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x56, 0x65, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x56, 0x32,
	0x12, 0x35, 0x0a, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x32, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x56, 0x32, 0x22, 0x0c, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x68, 0x69, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x69, 0x64,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x0c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e,
	0x65, 0x65, 0x64, 0x22, 0xd2, 0x11, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6f, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61,
	0x6e, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x74,
	0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x47, 0x6f, 0x74, 0x6f, 0x55,
	0x6e, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x6c, 0x64,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0e, 0x73, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x69, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x67, 0x45, 0x6e, 0x64, 0x55,
	0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6d, 0x6f, 0x62, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x69, 0x67,
	0x6d, 0x6f, 0x62, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x2b, 0x0a, 0x12, 0x67, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b,
	0x69, 0x6f, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x69, 0x6f, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x48, 0x6f,
	0x6d, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x70, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x69, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x76, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x32,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x25, 0x6a, 0x73, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x6a, 0x73, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x70,
	0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x70, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x6f, 0x70, 0x70, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x77, 0x65, 0x62, 0x76, 0x65, 0x69, 0x77, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x76, 0x65, 0x69, 0x77, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x24, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13,
	0x79, 0x79, 0x62, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x79, 0x79, 0x62, 0x54, 0x6f,
	0x62, 0x69, 0x64, 0x41, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x66, 0x61, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x32, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x56, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x61, 0x70, 0x69, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50,
	0x61, 0x79, 0x41, 0x70, 0x69, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x56, 0x32, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x67, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x67, 0x6d, 0x12,
	0x37, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x67, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x67, 0x6d, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x67, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x70,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x67, 0x6d, 0x12, 0x40, 0x0a, 0x1d, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x5f, 0x6c, 0x6f,
	0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x6f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x4c, 0x6f, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x62, 0x69, 0x64, 0x41, 0x64, 0x12, 0x31,
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x67, 0x69, 0x66, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x4e, 0x65, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe1, 0x03,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x6f, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x64,
	0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x4a,
	0x0a, 0x11, 0x6f, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x6b, 0x68, 0x74, 0x74, 0x70,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x6e, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5f, 0x0a,
	0x10, 0x4f, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x67, 0x62, 0x35, 0x36, 0x35, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x67, 0x4f, 0x70, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61,
	0x6e, 0x69, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x6d, 0x4c, 0x65, 0x61, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x22, 0x40, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x43, 0x6c, 0x75, 0x62, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6c, 0x75, 0x62,
	0x12, 0x47, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x27, 0x0a, 0x0f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x3e, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6c, 0x75, 0x62,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x40, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x6b, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x78, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0x97,
	0x04, 0x0a, 0x0d, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3b, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61,
	0x66, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x67, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x11, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x64, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x6c, 0x0a, 0x0a, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6c, 0x61, 0x6e, 0x22, 0x3b, 0x0a, 0x0b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x6e, 0x66, 0x61, 0x6e, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x0a, 0x49, 0x64, 0x66,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x50, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x48, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e,
	0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x71, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49,
	0x64, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x71, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x2a,
	0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xab, 0x06, 0x0a, 0x0d, 0x4e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x21,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x27, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x61,
	0x74, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x65, 0x61, 0x74,
	0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65,
	0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1b, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x64, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x62,
	0x69, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x45, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x41, 0x0a,
	0x0c, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x53, 0x6b, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x77, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x22, 0xea, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x64,
	0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2d, 0x0a, 0x13, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x69,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x9e,
	0x03, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x6e, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76,
	0x67, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76,
	0x67, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x76, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x70,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xbc, 0x08, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a,
	0x0a, 0x1a, 0x69, 0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6f,
	0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x43, 0x0a, 0x1f, 0x69, 0x6f, 0x73, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1a, 0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x43, 0x0a, 0x1f, 0x69,
	0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32,
	0x12, 0x42, 0x0a, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x31, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x6f, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x6f,
	0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x6f,
	0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x6f, 0x73, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x31, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x6f, 0x73, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x32, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x31, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x32, 0x12, 0x47, 0x0a, 0x21, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x47, 0x0a,
	0x21, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x22, 0x69, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x22, 0x7d, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x22, 0x4e, 0x0a, 0x11, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x22, 0x7f, 0x0a, 0x0f, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x77, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0d, 0x77, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x85, 0x0c, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x67, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x65,
	0x65, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x77, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x74, 0x77, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x77, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x77, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x61, 0x62, 0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x62,
	0x31, 0x12, 0x58, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x62, 0x32, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x62, 0x32, 0x12, 0x4f, 0x0a, 0x14, 0x65,
	0x78, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x13,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x69, 0x5f, 0x76,
	0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x41, 0x69, 0x56, 0x33,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65,
	0x77, 0x4b, 0x69, 0x6c, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6c, 0x64, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6c, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x77, 0x69, 0x6c,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x12, 0x4c, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66,
	0x50, 0x72, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x68, 0x61, 0x70, 0x5f, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6e, 0x74, 0x68,
	0x61, 0x70, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x5f, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x6f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x22, 0xe6, 0x03, 0x0a, 0x10, 0x4d, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58,
	0x0a, 0x17, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x15, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x6f, 0x6e, 0x64,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x64, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x61, 0x0a, 0x18, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x48, 0x6f, 0x75, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x70,
	0x65, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x13, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x45, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x7b,
	0x0a, 0x17, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x6f, 0x6e, 0x64,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x22, 0xa2, 0x01, 0x0a, 0x12,
	0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x22, 0x44, 0x0a, 0x1a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0x79, 0x0a, 0x09, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x72,
	0x6c, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x92, 0x03, 0x0a, 0x0d, 0x57, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x55, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x78,
	0x0a, 0x0f, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0c, 0x57, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x70, 0x70,
	0x79, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x48, 0x61, 0x70, 0x70, 0x79, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x44,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22,
	0x35, 0x0a, 0x09, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x0d, 0x48, 0x61, 0x70, 0x70, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x77,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x3b, 0x0a, 0x0d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x65, 0x65, 0x52, 0x0c,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x4c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70,
	0x79, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x76, 0x0a, 0x14, 0x48, 0x61, 0x70, 0x70, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xea, 0x02,
	0x0a, 0x0f, 0x48, 0x61, 0x70, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x43, 0x0a, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x63,
	0x65, 0x52, 0x0a, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a,
	0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72, 0x61, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6b,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x73, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbb,
	0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x15,
	0x41, 0x69, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x69, 0x42,
	0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x72, 0x65, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x72,
	0x65, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xf6, 0x07, 0x0a, 0x07, 0x41, 0x69, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x77, 0x72, 0x65, 0x63,
	0x6b, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x69,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x72, 0x65, 0x63,
	0x6b, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x44,
	0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x41, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x65, 0x77, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x42,
	0x6f, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x72, 0x65, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x22, 0x38, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x41,
	0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x0d, 0x41,
	0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x09, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x9b, 0x03, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x6e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62,
	0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x67, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x67, 0x61,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x02,
	0x0a, 0x12, 0x41, 0x69, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x61, 0x69, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x62, 0x6f,
	0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x42, 0x6f, 0x72, 0x6e, 0x52, 0x06, 0x61,
	0x69, 0x42, 0x6f, 0x72, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x41, 0x69, 0x42, 0x6f, 0x72, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x6f,
	0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x97, 0x03, 0x0a, 0x06, 0x41, 0x69, 0x42, 0x6f, 0x72, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x69,
	0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x69, 0x42, 0x6f, 0x72, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x69, 0x42, 0x6f,
	0x72, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x67,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x5f, 0x70, 0x6f, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x6b, 0x50, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6b, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6b, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x15, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x46, 0x6f, 0x6f, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x6f, 0x6f, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x08, 0x48,
	0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x6f,
	0x6f, 0x64, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x6f, 0x6f, 0x64, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x66, 0x6f, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x66, 0x6f, 0x6f, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x6f, 0x6f, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x22, 0x35, 0x0a, 0x07, 0x44, 0x6f, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x46, 0x6f, 0x6f, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x32, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x48, 0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x65,
	0x46, 0x6f, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x07, 0x64, 0x6f,
	0x74, 0x46, 0x6f, 0x6f, 0x64, 0x22, 0x78, 0x0a, 0x0a, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61, 0x69,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x10, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x41, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xa2, 0x01, 0x0a, 0x12, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x69, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x22, 0xd6, 0x05, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5a,
	0x0a, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x15, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x69,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x78, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61, 0x69, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x19, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x61, 0x69, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x61, 0x69, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x6f, 0x6f,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x6f, 0x6f,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x80, 0x01,
	0x0a, 0x0f, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x66,
	0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xcd, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x1c, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x1d, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x64, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x6f,
	0x72, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64,
	0x6f, 0x6f, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x42, 0x0a, 0x0e, 0x41, 0x69, 0x4e, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x69, 0x4e, 0x69, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x0e, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x69,
	0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb6, 0x0f, 0x0a, 0x0a, 0x41, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x33, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x78, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x3a, 0x0a, 0x1a, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x20, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65,
	0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x52, 0x0a,
	0x27, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x19, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x69, 0x42, 0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x61,
	0x69, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x69, 0x57, 0x72,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x57, 0x69, 0x64, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x41, 0x0a, 0x1e, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6c,
	0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6f,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x4c, 0x6f, 0x77, 0x12, 0x4c, 0x0a, 0x24, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1e, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x77, 0x12, 0x5c, 0x0a, 0x19, 0x61, 0x69, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x61, 0x69, 0x57, 0x72, 0x65, 0x63,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x63, 0x0a, 0x1d, 0x61, 0x69, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x77,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x61, 0x69, 0x57, 0x72,
	0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x0b, 0x61, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x0f, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0d, 0x61, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x19, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x61, 0x69, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x6f, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x62, 0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x42, 0x6f, 0x72, 0x6e, 0x4b, 0x69, 0x6c, 0x6c,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x72, 0x6e,
	0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x4b, 0x69, 0x6c,
	0x6c, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x67, 0x61,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x67, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x67, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69,
	0x4e, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x69,
	0x4e, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x61, 0x69, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x69, 0x4e, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x69, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x69, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0f, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x69, 0x53, 0x6b,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x69, 0x5f, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x69, 0x53, 0x6b, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x5d, 0x0a, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x33, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x33, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x91, 0x0b, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x78,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45,
	0x78, 0x70, 0x12, 0x4e, 0x0a, 0x0d, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x6b,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x50, 0x6b, 0x12, 0x54, 0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x55, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x11, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x16, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x60, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x6c, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6f, 0x73, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x69, 0x6f, 0x73, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x1a, 0x57, 0x0a, 0x10, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x78,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4f, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55,
	0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x49,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x46, 0x0a, 0x18, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4f, 0x6c, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x49, 0x6f, 0x73, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x04, 0x0a, 0x0c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x71, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x58, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x67, 0x49, 0x6d, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x5f, 0x69, 0x6d,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x66, 0x49, 0x6d, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xe9, 0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x50, 0x49, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x50, 0x49,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69,
	0x12, 0x35, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x50, 0x49, 0x52, 0x09, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x50,
	0x49, 0x52, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x70, 0x69, 0x12, 0x35, 0x0a, 0x0a, 0x6e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x41, 0x50, 0x49, 0x52, 0x09, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x41,
	0x70, 0x69, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x50, 0x49, 0x52, 0x08, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x41, 0x70, 0x69, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x50, 0x49,
	0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x70, 0x69, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x6f,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x32, 0x12, 0x3f, 0x0a, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x61, 0x70, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x41, 0x50, 0x49, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x41, 0x70, 0x69, 0x22, 0x69, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x50, 0x49, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x5e,
	0x0a, 0x07, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a,
	0x14, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34,
	0x0a, 0x0c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x42, 0x65, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49,
	0x12, 0x24, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x32, 0x22, 0x33, 0x0a, 0x09, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x50, 0x49, 0x12, 0x26,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x08, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x41,
	0x50, 0x49, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x4d, 0x61,
	0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x09, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79,
	0x41, 0x50, 0x49, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x62,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x22, 0x7a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x50, 0x49, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x2d, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30,
	0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x50, 0x49, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xb6, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x12, 0x29,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x6e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x14, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e,
	0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x65, 0x74, 0x45, 0x78, 0x63, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x72, 0x79, 0x54, 0x6f,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x69,
	0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x67, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x22, 0x2d, 0x0a, 0x0c, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x50, 0x49, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x4d, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x62, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x6d,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x06, 0x6d, 0x73, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x07, 0x6d, 0x73, 0x41, 0x64, 0x64, 0x72, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x68, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x62, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a,
	0x06, 0x4d, 0x73, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6b, 0x22, 0x67, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x69,
	0x6e, 0x79, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x5f, 0x68,
	0x61, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x64, 0x48, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x32, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0d, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x12, 0x3b,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6c,
	0x69, 0x66, 0x65, 0x5f, 0x61, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x41, 0x62, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c,
	0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xce, 0x01, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0x62, 0x0a,
	0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xa0, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x61, 0x74, 0x45,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x41, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x41, 0x49, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x22, 0x58, 0x0a, 0x02, 0x41, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x4b, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x36, 0x0a, 0x03, 0x4d, 0x61,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x22, 0x1b, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22,
	0x7b, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a,
	0x02, 0x41, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x52, 0x02, 0x41, 0x49, 0x12, 0x22,
	0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d,
	0x61, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x22, 0xcc, 0x05, 0x0a,
	0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3c, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0b, 0x61, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x61, 0x74, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x65, 0x6c, 0x6d, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x68, 0x65, 0x6c, 0x6d, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x75, 0x72, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x70, 0x46, 0x75, 0x72, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x66,
	0x75, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x4b,
	0x69, 0x6c, 0x6c, 0x46, 0x75, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x73, 0x65,
	0x6c, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x6c,
	0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x0b,
	0x41, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x22, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1c, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x46,
	0x0a, 0x20, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x69, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x6e, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x65,
	0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3d, 0x0a, 0x0f,
	0x42, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd5, 0x02, 0x0a, 0x15,
	0x53, 0x65, 0x6c, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x26, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x41, 0x69,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x69, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x6e,
	0x22, 0xd1, 0x02, 0x0a, 0x11, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x26, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xe7, 0x03, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c,
	0x65, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6c, 0x65, 0x41, 0x69, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6c, 0x65, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c,
	0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6c, 0x65, 0x46, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0xd7,
	0x01, 0x0a, 0x08, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0c, 0x61,
	0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x69, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x70, 0x42, 0x6f, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x6f, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x72, 0x64, 0x69, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61,
	0x6d, 0x62, 0x75, 0x72, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6d, 0x62, 0x75, 0x72, 0x67,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x65, 0x6c, 0x6d, 0x65, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x6e, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x6e, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61,
	0x67, 0x6e, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x42, 0x6f, 0x72,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x6f, 0x72, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b,
	0x70, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x78, 0x53, 0x75,
	0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x61,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x69, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x61, 0x69, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x08, 0x45, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x61, 0x74,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0d, 0x63, 0x68,
	0x65, 0x61, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x65, 0x61, 0x6b, 0x5f, 0x63, 0x70,
	0x75, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x61, 0x6b, 0x43, 0x70, 0x75,
	0x22, 0x54, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x61, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x61, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0a, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x0a, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x10, 0x4c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x72, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x0d, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x72, 0x63, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x72, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x72, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64,
	0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x57, 0x65, 0x62, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x54, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x69, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6d, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x8b, 0x06, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x1d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1a, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x13, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0f, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x0e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x56, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x43, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x64, 0x0a, 0x1d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x19, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x53, 0x0a, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x1c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x44, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0d, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4d, 0x0a, 0x10, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x62, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x68,
	0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x45, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b,
	0x56, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x56, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x56, 0x49, 0x6e, 0x74, 0x52, 0x09,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x05, 0x4b, 0x56, 0x49,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x16, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x75,
	0x6d, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d,
	0x70, 0x75, 0x72, 0x6c, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64,
	0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4d, 0x0a, 0x15, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x61, 0x64, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x41, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x68, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0xf8,
	0x06, 0x0a, 0x0b, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x53, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x42, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x58, 0x0a, 0x10, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x66, 0x66, 0x53, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x53, 0x65, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4c, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c,
	0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x0a, 0x14,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xfe, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x30,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x22, 0x33, 0x0a, 0x0b, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x57, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x1e,
	0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x22, 0x54,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x66, 0x66, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xd2, 0x02, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0x41, 0x0a, 0x13, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a,
	0x08, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x61, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47,
	0x0a, 0x0e, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3a, 0x0a, 0x10, 0x53, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x22, 0x39, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x93,
	0x01, 0x0a, 0x08, 0x49, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x1a, 0x52, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6f, 0x73,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0c, 0x49, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x69, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x22, 0xbe, 0x01, 0x0a,
	0x0c, 0x49, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x52, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x1a, 0x50, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x22, 0x57, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x22, 0xfd, 0x09, 0x0a, 0x11, 0x54,
	0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x05,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6f, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6f, 0x73, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x63, 0x6f,
	0x75, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x6b, 0x69,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x70, 0x6c,
	0x65, 0x53, 0x6b, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0xf5, 0x01,
	0x0a, 0x05, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x66, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xa4, 0x01,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x31, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x57, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x1a, 0xb7, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x08, 0x62, 0x69, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x69, 0x67, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x62, 0x69, 0x67, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x22, 0xfa, 0x08, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x41, 0x49, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x64,
	0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x69,
	0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x69, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x57,
	0x72, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x1a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x61,
	0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x69, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xa9, 0x06, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x74,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x68,
	0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x67,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x74,
	0x6f, 0x6e, 0x42, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5a, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xd3, 0x02, 0x0a,
	0x0f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakecommon_project_config_proto_rawDescOnce sync.Once
	file_snakecommon_project_config_proto_rawDescData = file_snakecommon_project_config_proto_rawDesc
)

func file_snakecommon_project_config_proto_rawDescGZIP() []byte {
	file_snakecommon_project_config_proto_rawDescOnce.Do(func() {
		file_snakecommon_project_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecommon_project_config_proto_rawDescData)
	})
	return file_snakecommon_project_config_proto_rawDescData
}

var file_snakecommon_project_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_snakecommon_project_config_proto_msgTypes = make([]protoimpl.MessageInfo, 284)
var file_snakecommon_project_config_proto_goTypes = []interface{}{
	(ShortCutConfig_SceneType)(0),              // 0: snakecommon.ShortCutConfig.SceneType
	(*ConfigVersionInfo)(nil),                  // 1: snakecommon.ConfigVersionInfo
	(*EndLessBuffPropConfigV2)(nil),            // 2: snakecommon.EndLessBuffPropConfigV2
	(*EndLessBuffPropInfo)(nil),                // 3: snakecommon.EndLessBuffPropInfo
	(*RandomPropInfo)(nil),                     // 4: snakecommon.RandomPropInfo
	(*HuaweiHighlight)(nil),                    // 5: snakecommon.HuaweiHighlight
	(*HighLightInfo)(nil),                      // 6: snakecommon.HighLightInfo
	(*OlGameConfig)(nil),                       // 7: snakecommon.OlGameConfig
	(*JumpIcon)(nil),                           // 8: snakecommon.JumpIcon
	(*MatchBackgroundConfig)(nil),              // 9: snakecommon.MatchBackgroundConfig
	(*GameStatusTrack)(nil),                    // 10: snakecommon.GameStatusTrack
	(*GrassConfig)(nil),                        // 11: snakecommon.GrassConfig
	(*GrassInfo)(nil),                          // 12: snakecommon.GrassInfo
	(*TeamSuit)(nil),                           // 13: snakecommon.TeamSuit
	(*TeamSuitNewSuitInfo)(nil),                // 14: snakecommon.TeamSuitNewSuitInfo
	(*TeamKillConfig)(nil),                     // 15: snakecommon.TeamKillConfig
	(*TeamMeleeConfig)(nil),                    // 16: snakecommon.TeamMeleeConfig
	(*QualifyingConfig)(nil),                   // 17: snakecommon.QualifyingConfig
	(*RaceNormalConfig)(nil),                   // 18: snakecommon.RaceNormalConfig
	(*TeamKillProp)(nil),                       // 19: snakecommon.TeamKillProp
	(*ClanConfig)(nil),                         // 20: snakecommon.ClanConfig
	(*RuleDesc)(nil),                           // 21: snakecommon.RuleDesc
	(*ActivePointAddition)(nil),                // 22: snakecommon.ActivePointAddition
	(*RaceTimeConfig)(nil),                     // 23: snakecommon.RaceTimeConfig
	(*ClanRaceReward)(nil),                     // 24: snakecommon.ClanRaceReward
	(*ClanLevelInfo)(nil),                      // 25: snakecommon.ClanLevelInfo
	(*NewClanRewardItem)(nil),                  // 26: snakecommon.NewClanRewardItem
	(*RankConfig)(nil),                         // 27: snakecommon.RankConfig
	(*RankReward)(nil),                         // 28: snakecommon.RankReward
	(*RankLevel)(nil),                          // 29: snakecommon.RankLevel
	(*SeasonInfo)(nil),                         // 30: snakecommon.SeasonInfo
	(*ShareConfig)(nil),                        // 31: snakecommon.ShareConfig
	(*ShareTag)(nil),                           // 32: snakecommon.ShareTag
	(*ClipBoardCheck)(nil),                     // 33: snakecommon.ClipBoardCheck
	(*VideoShareIcon)(nil),                     // 34: snakecommon.VideoShareIcon
	(*ChannelConfig)(nil),                      // 35: snakecommon.ChannelConfig
	(*GameInvite)(nil),                         // 36: snakecommon.GameInvite
	(*SocialConfig)(nil),                       // 37: snakecommon.SocialConfig
	(*CharmTopConfig)(nil),                     // 38: snakecommon.CharmTopConfig
	(*CharmLevelItem)(nil),                     // 39: snakecommon.CharmLevelItem
	(*SocialThreshold)(nil),                    // 40: snakecommon.SocialThreshold
	(*SocialThresholdPlatform)(nil),            // 41: snakecommon.SocialThresholdPlatform
	(*CharmExpConfig)(nil),                     // 42: snakecommon.CharmExpConfig
	(*CharmExpRank)(nil),                       // 43: snakecommon.CharmExpRank
	(*CharmPrivilegeItem)(nil),                 // 44: snakecommon.CharmPrivilegeItem
	(*TextConfig)(nil),                         // 45: snakecommon.TextConfig
	(*GiftLikeTextList)(nil),                   // 46: snakecommon.GiftLikeTextList
	(*ShortCutConfig)(nil),                     // 47: snakecommon.ShortCutConfig
	(*ReportBehavior)(nil),                     // 48: snakecommon.ReportBehavior
	(*UiConfigV3)(nil),                         // 49: snakecommon.UiConfigV3
	(*GameIcon)(nil),                           // 50: snakecommon.GameIcon
	(*LittleGameIcon)(nil),                     // 51: snakecommon.LittleGameIcon
	(*Bubble)(nil),                             // 52: snakecommon.Bubble
	(*NewbieCondition)(nil),                    // 53: snakecommon.NewbieCondition
	(*HomeBackground)(nil),                     // 54: snakecommon.HomeBackground
	(*PingConfig)(nil),                         // 55: snakecommon.PingConfig
	(*RewardMarkConfig)(nil),                   // 56: snakecommon.RewardMarkConfig
	(*RewardMark)(nil),                         // 57: snakecommon.RewardMark
	(*ShowAdConfig)(nil),                       // 58: snakecommon.ShowAdConfig
	(*CrossPromotions)(nil),                    // 59: snakecommon.CrossPromotions
	(*CrossPromotionsSource)(nil),              // 60: snakecommon.CrossPromotionsSource
	(*EndlessBuff)(nil),                        // 61: snakecommon.EndlessBuff
	(*PopupPosition)(nil),                      // 62: snakecommon.PopupPosition
	(*AdPopupsConfig)(nil),                     // 63: snakecommon.AdPopupsConfig
	(*EndlessAdRecommend)(nil),                 // 64: snakecommon.EndlessAdRecommend
	(*AdRewardModel)(nil),                      // 65: snakecommon.AdRewardModel
	(*AdGoodsItem)(nil),                        // 66: snakecommon.AdGoodsItem
	(*OrderConfig)(nil),                        // 67: snakecommon.OrderConfig
	(*AlipayDiscount)(nil),                     // 68: snakecommon.AlipayDiscount
	(*FirstChargePopup)(nil),                   // 69: snakecommon.FirstChargePopup
	(*RandomDoubleClientInfo)(nil),             // 70: snakecommon.RandomDoubleClientInfo
	(*UnityQualifyingOpenConfig)(nil),          // 71: snakecommon.UnityQualifyingOpenConfig
	(*TopListConfig)(nil),                      // 72: snakecommon.TopListConfig
	(*ShowConfig)(nil),                         // 73: snakecommon.ShowConfig
	(*ShowPackItem)(nil),                       // 74: snakecommon.ShowPackItem
	(*ShowIconStyle)(nil),                      // 75: snakecommon.ShowIconStyle
	(*ShowLevelConfig)(nil),                    // 76: snakecommon.ShowLevelConfig
	(*ShowSkillName)(nil),                      // 77: snakecommon.ShowSkillName
	(*ShowSkillBuff)(nil),                      // 78: snakecommon.ShowSkillBuff
	(*UserConfig)(nil),                         // 79: snakecommon.UserConfig
	(*UnityFlags)(nil),                         // 80: snakecommon.UnityFlags
	(*MinorLimit)(nil),                         // 81: snakecommon.MinorLimit
	(*OrderCurator)(nil),                       // 82: snakecommon.OrderCurator
	(*FlagsConfig)(nil),                        // 83: snakecommon.FlagsConfig
	(*FeedbackConfig)(nil),                     // 84: snakecommon.FeedbackConfig
	(*SettingConfig)(nil),                      // 85: snakecommon.SettingConfig
	(*DocVersion)(nil),                         // 86: snakecommon.DocVersion
	(*NetworkCheck)(nil),                       // 87: snakecommon.NetworkCheck
	(*Prometheus)(nil),                         // 88: snakecommon.Prometheus
	(*OkhttpDispatcher)(nil),                   // 89: snakecommon.OkhttpDispatcher
	(*MemSwitch)(nil),                          // 90: snakecommon.MemSwitch
	(*BindConfig)(nil),                         // 91: snakecommon.BindConfig
	(*RenamePopupRule)(nil),                    // 92: snakecommon.RenamePopupRule
	(*QualifyingMatch)(nil),                    // 93: snakecommon.QualifyingMatch
	(*NewbieClub)(nil),                         // 94: snakecommon.NewbieClub
	(*GameEndSkin)(nil),                        // 95: snakecommon.GameEndSkin
	(*DeviceConfig)(nil),                       // 96: snakecommon.DeviceConfig
	(*AntiAddiction)(nil),                      // 97: snakecommon.AntiAddiction
	(*Notify)(nil),                             // 98: snakecommon.Notify
	(*CertifyGameConfig)(nil),                  // 99: snakecommon.CertifyGameConfig
	(*MinorNotify)(nil),                        // 100: snakecommon.MinorNotify
	(*PayNotify)(nil),                          // 101: snakecommon.PayNotify
	(*SocialDesc)(nil),                         // 102: snakecommon.SocialDesc
	(*IdentityAge)(nil),                        // 103: snakecommon.IdentityAge
	(*CertifyNotify)(nil),                      // 104: snakecommon.CertifyNotify
	(*IdfaConfig)(nil),                         // 105: snakecommon.IdfaConfig
	(*CommentConfig)(nil),                      // 106: snakecommon.CommentConfig
	(*RegisterSurvey)(nil),                     // 107: snakecommon.RegisterSurvey
	(*RecruitPopup)(nil),                       // 108: snakecommon.RecruitPopup
	(*NewUserConfig)(nil),                      // 109: snakecommon.NewUserConfig
	(*ReviveConfigItem)(nil),                   // 110: snakecommon.ReviveConfigItem
	(*SingleGameAiConfigItem)(nil),             // 111: snakecommon.SingleGameAiConfigItem
	(*FloaterConfigOld)(nil),                   // 112: snakecommon.FloaterConfigOld
	(*ActivityMapConfig)(nil),                  // 113: snakecommon.ActivityMapConfig
	(*EndlessLimitConfig)(nil),                 // 114: snakecommon.EndlessLimitConfig
	(*EndlessBubbleConfig)(nil),                // 115: snakecommon.EndlessBubbleConfig
	(*EndlessTrackConfig)(nil),                 // 116: snakecommon.EndlessTrackConfig
	(*WildStormListItem)(nil),                  // 117: snakecommon.WildStormListItem
	(*WildStormConfig)(nil),                    // 118: snakecommon.WildStormConfig
	(*OfflineGameConfig)(nil),                  // 119: snakecommon.OfflineGameConfig
	(*MentorshipConfig)(nil),                   // 120: snakecommon.MentorshipConfig
	(*MentorPrivilegeInfo)(nil),                // 121: snakecommon.MentorPrivilegeInfo
	(*PrivilegeDetailInfo)(nil),                // 122: snakecommon.PrivilegeDetailInfo
	(*MentorshipBondTitleItem)(nil),            // 123: snakecommon.MentorshipBondTitleItem
	(*MentorFinishReward)(nil),                 // 124: snakecommon.MentorFinishReward
	(*MasterPrenticeStrategyItem)(nil),         // 125: snakecommon.MasterPrenticeStrategyItem
	(*HotConfig)(nil),                          // 126: snakecommon.HotConfig
	(*ProductConfig)(nil),                      // 127: snakecommon.ProductConfig
	(*WeddingConfig)(nil),                      // 128: snakecommon.WeddingConfig
	(*WeddingTemplate)(nil),                    // 129: snakecommon.WeddingTemplate
	(*WeddingMusic)(nil),                       // 130: snakecommon.WeddingMusic
	(*HappycoinConfig)(nil),                    // 131: snakecommon.HappycoinConfig
	(*LengthFee)(nil),                          // 132: snakecommon.LengthFee
	(*HappyModeRace)(nil),                      // 133: snakecommon.HappyModeRace
	(*LowIncomeConfig)(nil),                    // 134: snakecommon.LowIncomeConfig
	(*HappyModeTitleConfig)(nil),               // 135: snakecommon.HappyModeTitleConfig
	(*HappyModeConfig)(nil),                    // 136: snakecommon.HappyModeConfig
	(*StarSnakeItem)(nil),                      // 137: snakecommon.StarSnakeItem
	(*StarSnake)(nil),                          // 138: snakecommon.StarSnake
	(*AiWreckNodeScoreRange)(nil),              // 139: snakecommon.AiWreckNodeScoreRange
	(*AiLevel)(nil),                            // 140: snakecommon.AiLevel
	(*AttackTime)(nil),                         // 141: snakecommon.AttackTime
	(*AiLevelWeight)(nil),                      // 142: snakecommon.AiLevelWeight
	(*AiLengthRange)(nil),                      // 143: snakecommon.AiLengthRange
	(*FloaterConfig)(nil),                      // 144: snakecommon.FloaterConfig
	(*AiDifficultyConfig)(nil),                 // 145: snakecommon.AiDifficultyConfig
	(*AiBornPool)(nil),                         // 146: snakecommon.AiBornPool
	(*ScorePool)(nil),                          // 147: snakecommon.ScorePool
	(*ScorePoolItem)(nil),                      // 148: snakecommon.ScorePoolItem
	(*AiBorn)(nil),                             // 149: snakecommon.AiBorn
	(*BonusTriggerCondition)(nil),              // 150: snakecommon.BonusTriggerCondition
	(*BonusFood)(nil),                          // 151: snakecommon.BonusFood
	(*HoleFood)(nil),                           // 152: snakecommon.HoleFood
	(*DotFood)(nil),                            // 153: snakecommon.DotFood
	(*BonusFoodLevel)(nil),                     // 154: snakecommon.BonusFoodLevel
	(*BonusLevel)(nil),                         // 155: snakecommon.BonusLevel
	(*BonusLevelSettings)(nil),                 // 156: snakecommon.BonusLevelSettings
	(*EndlessBonusNew)(nil),                    // 157: snakecommon.EndlessBonusNew
	(*SpringSugarInfo)(nil),                    // 158: snakecommon.SpringSugarInfo
	(*MapBorder)(nil),                          // 159: snakecommon.MapBorder
	(*AiNickListItem)(nil),                     // 160: snakecommon.AiNickListItem
	(*AiSkinListItem)(nil),                     // 161: snakecommon.AiSkinListItem
	(*AiConfigV3)(nil),                         // 162: snakecommon.AiConfigV3
	(*LimitAiConfigV3)(nil),                    // 163: snakecommon.LimitAiConfigV3
	(*GameConfig)(nil),                         // 164: snakecommon.GameConfig
	(*SystemConfig)(nil),                       // 165: snakecommon.SystemConfig
	(*RewardConfig)(nil),                       // 166: snakecommon.RewardConfig
	(*RegisterReward)(nil),                     // 167: snakecommon.RegisterReward
	(*InterfaceExpire)(nil),                    // 168: snakecommon.InterfaceExpire
	(*ActivityAPI)(nil),                        // 169: snakecommon.ActivityAPI
	(*ClanAPI)(nil),                            // 170: snakecommon.ClanAPI
	(*ExpireConfig)(nil),                       // 171: snakecommon.ExpireConfig
	(*EventAPI)(nil),                           // 172: snakecommon.EventAPI
	(*FriendAPI)(nil),                          // 173: snakecommon.FriendAPI
	(*InboxAPI)(nil),                           // 174: snakecommon.InboxAPI
	(*NearbyAPI)(nil),                          // 175: snakecommon.NearbyAPI
	(*ScoreAPI)(nil),                           // 176: snakecommon.ScoreAPI
	(*ShareAPI)(nil),                           // 177: snakecommon.ShareAPI
	(*TopListV2)(nil),                          // 178: snakecommon.TopListV2
	(*VoiceRoomAPI)(nil),                       // 179: snakecommon.VoiceRoomAPI
	(*MsConfig)(nil),                           // 180: snakecommon.MsConfig
	(*MsAddr)(nil),                             // 181: snakecommon.MsAddr
	(*ProvinceConfig)(nil),                     // 182: snakecommon.ProvinceConfig
	(*ExciteModeConfig)(nil),                   // 183: snakecommon.ExciteModeConfig
	(*GamePropList)(nil),                       // 184: snakecommon.GamePropList
	(*ModeLevelInfo)(nil),                      // 185: snakecommon.ModeLevelInfo
	(*ParamConfig)(nil),                        // 186: snakecommon.ParamConfig
	(*InGame)(nil),                             // 187: snakecommon.InGame
	(*PropRate)(nil),                           // 188: snakecommon.PropRate
	(*Ai)(nil),                                 // 189: snakecommon.Ai
	(*Map)(nil),                                // 190: snakecommon.Map
	(*Stone)(nil),                              // 191: snakecommon.Stone
	(*RateConfig)(nil),                         // 192: snakecommon.RateConfig
	(*ModeGameConfig)(nil),                     // 193: snakecommon.ModeGameConfig
	(*AiLevelList)(nil),                        // 194: snakecommon.AiLevelList
	(*BrainAttackTime)(nil),                    // 195: snakecommon.BrainAttackTime
	(*SelfElectricityConfig)(nil),              // 196: snakecommon.SelfElectricityConfig
	(*ShockConfig)(nil),                        // 197: snakecommon.ShockConfig
	(*AiTypeList)(nil),                         // 198: snakecommon.AiTypeList
	(*ElectricityConfig)(nil),                  // 199: snakecommon.ElectricityConfig
	(*MissileConfig)(nil),                      // 200: snakecommon.MissileConfig
	(*AiConfig)(nil),                           // 201: snakecommon.AiConfig
	(*PropBornInfos)(nil),                      // 202: snakecommon.PropBornInfos
	(*PropWeightList)(nil),                     // 203: snakecommon.PropWeightList
	(*PropConfig)(nil),                         // 204: snakecommon.PropConfig
	(*StageConfigs)(nil),                       // 205: snakecommon.StageConfigs
	(*Emulator)(nil),                           // 206: snakecommon.Emulator
	(*AppCheck)(nil),                           // 207: snakecommon.AppCheck
	(*CheatAppCheck)(nil),                      // 208: snakecommon.CheatAppCheck
	(*ShellCheck)(nil),                         // 209: snakecommon.ShellCheck
	(*LittleGame)(nil),                         // 210: snakecommon.LittleGame
	(*LittleGameSrc)(nil),                      // 211: snakecommon.LittleGameSrc
	(*LittleGameSrcItem)(nil),                  // 212: snakecommon.LittleGameSrcItem
	(*ReviewMarket)(nil),                       // 213: snakecommon.ReviewMarket
	(*LittleGameUiConf)(nil),                   // 214: snakecommon.LittleGameUiConf
	(*LittleGameUi)(nil),                       // 215: snakecommon.LittleGameUi
	(*GameList)(nil),                           // 216: snakecommon.GameList
	(*ScoreInfoConfig)(nil),                    // 217: snakecommon.ScoreInfoConfig
	(*QualifyingDisplayScoreConfig)(nil),       // 218: snakecommon.QualifyingDisplayScoreConfig
	(*SnakeCoinConfig)(nil),                    // 219: snakecommon.SnakeCoinConfig
	(*EscapePointRule)(nil),                    // 220: snakecommon.EscapePointRule
	(*KVInt)(nil),                              // 221: snakecommon.KVInt
	(*DisplayScoreCalcConfig)(nil),             // 222: snakecommon.DisplayScoreCalcConfig
	(*SeasonNotifyConfig)(nil),                 // 223: snakecommon.SeasonNotifyConfig
	(*SingleDoubleSnakeCoin)(nil),              // 224: snakecommon.SingleDoubleSnakeCoin
	(*SnakeCoinAdCalcConfig)(nil),              // 225: snakecommon.SnakeCoinAdCalcConfig
	(*SnakeCoinCalcConfig)(nil),                // 226: snakecommon.SnakeCoinCalcConfig
	(*AndroidMarket)(nil),                      // 227: snakecommon.AndroidMarket
	(*SimulConfig)(nil),                        // 228: snakecommon.SimulConfig
	(*SimulRewardConfig)(nil),                  // 229: snakecommon.SimulRewardConfig
	(*SimulRewardCondition)(nil),               // 230: snakecommon.SimulRewardCondition
	(*SimulRewardMail)(nil),                    // 231: snakecommon.SimulRewardMail
	(*SimulTaskItem)(nil),                      // 232: snakecommon.SimulTaskItem
	(*SimulReward)(nil),                        // 233: snakecommon.SimulReward
	(*BuildingSet)(nil),                        // 234: snakecommon.BuildingSet
	(*Detail)(nil),                             // 235: snakecommon.Detail
	(*StaffSet)(nil),                           // 236: snakecommon.StaffSet
	(*TimedTaskInfo)(nil),                      // 237: snakecommon.TimedTaskInfo
	(*TimedTaskCoinConfig)(nil),                // 238: snakecommon.TimedTaskCoinConfig
	(*SummonConfig)(nil),                       // 239: snakecommon.SummonConfig
	(*SummonAiConfig)(nil),                     // 240: snakecommon.SummonAiConfig
	(*SummonConfigItem)(nil),                   // 241: snakecommon.SummonConfigItem
	(*MapConfig)(nil),                          // 242: snakecommon.MapConfig
	(*IosPatch)(nil),                           // 243: snakecommon.IosPatch
	(*IosPatchList)(nil),                       // 244: snakecommon.IosPatchList
	(*IosPatchItem)(nil),                       // 245: snakecommon.IosPatchItem
	(*UnityAssets)(nil),                        // 246: snakecommon.UnityAssets
	(*AssetMap)(nil),                           // 247: snakecommon.AssetMap
	(*Asset)(nil),                              // 248: snakecommon.Asset
	(*AssetItem)(nil),                          // 249: snakecommon.AssetItem
	(*TeamEndlessConfig)(nil),                  // 250: snakecommon.TeamEndlessConfig
	(*CoupleSkinActivity)(nil),                 // 251: snakecommon.CoupleSkinActivity
	(*NativeQualifyAIPool)(nil),                // 252: snakecommon.NativeQualifyAIPool
	(*BannerInfo)(nil),                         // 253: snakecommon.BannerInfo
	(*CartonList)(nil),                         // 254: snakecommon.CartonList
	(*BannerExtraInfo)(nil),                    // 255: snakecommon.BannerExtraInfo
	nil,                                        // 256: snakecommon.ConfigVersionInfo.FlagsEntry
	nil,                                        // 257: snakecommon.ClanConfig.ClanRaceRewardEntry
	nil,                                        // 258: snakecommon.PingConfig.PingIpListEntry
	nil,                                        // 259: snakecommon.ShowAdConfig.AdPercentEntry
	nil,                                        // 260: snakecommon.ShowAdConfig.AbAdPopupsConfigsEntry
	nil,                                        // 261: snakecommon.AdPopupsConfig.PopupPositionConfigEntry
	nil,                                        // 262: snakecommon.SystemConfig.GameConfigsEntry
	nil,                                        // 263: snakecommon.SystemConfig.EndlessExpEntry
	nil,                                        // 264: snakecommon.SystemConfig.OlEndlessPkEntry
	nil,                                        // 265: snakecommon.SystemConfig.VoiceRoomUidsEntry
	nil,                                        // 266: snakecommon.SystemConfig.TelephoneBlackListEntry
	nil,                                        // 267: snakecommon.SystemConfig.IdcardBlackListEntry
	nil,                                        // 268: snakecommon.SystemConfig.VoiceWhiteOwnerListEntry
	nil,                                        // 269: snakecommon.SystemConfig.OlEndlessEntranceEntry
	nil,                                        // 270: snakecommon.SystemConfig.IosShakeEntry
	nil,                                        // 271: snakecommon.LittleGame.LittleGamesEntry
	nil,                                        // 272: snakecommon.ReviewMarket.ReviewMarketEntry
	nil,                                        // 273: snakecommon.LittleGameUiConf.ConfigEntry
	nil,                                        // 274: snakecommon.SimulConfig.BuildingSetEntry
	nil,                                        // 275: snakecommon.SimulConfig.StaffSetEntry
	nil,                                        // 276: snakecommon.IosPatch.PathEntry
	nil,                                        // 277: snakecommon.UnityAssets.VersionsEntry
	nil,                                        // 278: snakecommon.AssetMap.PlatformsEntry
	(*TeamEndlessConfig_Guide)(nil),            // 279: snakecommon.TeamEndlessConfig.Guide
	(*TeamEndlessConfig_SeasonRewardItem)(nil), // 280: snakecommon.TeamEndlessConfig.SeasonRewardItem
	(*TeamEndlessConfig_Season)(nil),           // 281: snakecommon.TeamEndlessConfig.Season
	(*TeamEndlessConfig_BigRankItem)(nil),      // 282: snakecommon.TeamEndlessConfig.BigRankItem
	(*TeamEndlessConfig_SmallRankItem)(nil),    // 283: snakecommon.TeamEndlessConfig.SmallRankItem
	(*TeamEndlessConfig_Rank)(nil),             // 284: snakecommon.TeamEndlessConfig.Rank
	(*CPriceInfo)(nil),                         // 285: snakecommon.CPriceInfo
	(*config.RewardConfig)(nil),                // 286: SnakeMain.Config.RewardConfig
	(*RMBPackGoodsInfo)(nil),                   // 287: snakecommon.RMBPackGoodsInfo
	(*config.PackModel)(nil),                   // 288: SnakeMain.Config.PackModel
	(*config.Property)(nil),                    // 289: SnakeMain.Config.Property
	(*config.CurrencyStore)(nil),               // 290: SnakeMain.Config.CurrencyStore
	(*config.MiddleItem)(nil),                  // 291: SnakeMain.Config.MiddleItem
	(*config.DrawCardGuideConfig)(nil),         // 292: SnakeMain.Config.DrawCardGuideConfig
	(*config.StoreConfig)(nil),                 // 293: SnakeMain.Config.StoreConfig
	(*CRewardItem)(nil),                        // 294: snakecommon.CRewardItem
}
var file_snakecommon_project_config_proto_depIdxs = []int32{
	256, // 0: snakecommon.ConfigVersionInfo.flags:type_name -> snakecommon.ConfigVersionInfo.FlagsEntry
	3,   // 1: snakecommon.EndLessBuffPropConfigV2.list:type_name -> snakecommon.EndLessBuffPropInfo
	285, // 2: snakecommon.EndLessBuffPropInfo.price_list:type_name -> snakecommon.CPriceInfo
	4,   // 3: snakecommon.EndLessBuffPropInfo.prop_list:type_name -> snakecommon.RandomPropInfo
	6,   // 4: snakecommon.HuaweiHighlight.highlight_list:type_name -> snakecommon.HighLightInfo
	10,  // 5: snakecommon.OlGameConfig.game_status_track:type_name -> snakecommon.GameStatusTrack
	11,  // 6: snakecommon.OlGameConfig.grass_config:type_name -> snakecommon.GrassConfig
	13,  // 7: snakecommon.OlGameConfig.team_suit:type_name -> snakecommon.TeamSuit
	15,  // 8: snakecommon.OlGameConfig.team_kill_config:type_name -> snakecommon.TeamKillConfig
	16,  // 9: snakecommon.OlGameConfig.team_melee_config:type_name -> snakecommon.TeamMeleeConfig
	17,  // 10: snakecommon.OlGameConfig.qualifying_config:type_name -> snakecommon.QualifyingConfig
	18,  // 11: snakecommon.OlGameConfig.race_normal_config:type_name -> snakecommon.RaceNormalConfig
	19,  // 12: snakecommon.OlGameConfig.team_kill_prop:type_name -> snakecommon.TeamKillProp
	9,   // 13: snakecommon.OlGameConfig.match_background:type_name -> snakecommon.MatchBackgroundConfig
	8,   // 14: snakecommon.OlGameConfig.jump_icon:type_name -> snakecommon.JumpIcon
	12,  // 15: snakecommon.GrassConfig.grass:type_name -> snakecommon.GrassInfo
	14,  // 16: snakecommon.TeamSuit.new_suit:type_name -> snakecommon.TeamSuitNewSuitInfo
	285, // 17: snakecommon.TeamKillProp.price_list:type_name -> snakecommon.CPriceInfo
	286, // 18: snakecommon.TeamKillProp.prop_list:type_name -> SnakeMain.Config.RewardConfig
	21,  // 19: snakecommon.ClanConfig.rule_desc:type_name -> snakecommon.RuleDesc
	23,  // 20: snakecommon.ClanConfig.race_time_config:type_name -> snakecommon.RaceTimeConfig
	257, // 21: snakecommon.ClanConfig.clan_race_reward:type_name -> snakecommon.ClanConfig.ClanRaceRewardEntry
	25,  // 22: snakecommon.ClanConfig.level_config:type_name -> snakecommon.ClanLevelInfo
	26,  // 23: snakecommon.ClanConfig.reward_config:type_name -> snakecommon.NewClanRewardItem
	26,  // 24: snakecommon.ClanConfig.reward_explain_config:type_name -> snakecommon.NewClanRewardItem
	22,  // 25: snakecommon.RuleDesc.active_point_addition:type_name -> snakecommon.ActivePointAddition
	286, // 26: snakecommon.NewClanRewardItem.reward:type_name -> SnakeMain.Config.RewardConfig
	29,  // 27: snakecommon.RankConfig.level:type_name -> snakecommon.RankLevel
	28,  // 28: snakecommon.RankConfig.rank_reward:type_name -> snakecommon.RankReward
	286, // 29: snakecommon.RankReward.reward_list:type_name -> SnakeMain.Config.RewardConfig
	35,  // 30: snakecommon.ShareConfig.channel_config:type_name -> snakecommon.ChannelConfig
	36,  // 31: snakecommon.ShareConfig.game_invite:type_name -> snakecommon.GameInvite
	34,  // 32: snakecommon.ShareConfig.video_share_icon:type_name -> snakecommon.VideoShareIcon
	33,  // 33: snakecommon.ShareConfig.clipboard_check:type_name -> snakecommon.ClipBoardCheck
	32,  // 34: snakecommon.ShareConfig.share_tag:type_name -> snakecommon.ShareTag
	39,  // 35: snakecommon.SocialConfig.charm_level:type_name -> snakecommon.CharmLevelItem
	38,  // 36: snakecommon.SocialConfig.charm_top_config:type_name -> snakecommon.CharmTopConfig
	286, // 37: snakecommon.SocialConfig.marry_rewards:type_name -> SnakeMain.Config.RewardConfig
	40,  // 38: snakecommon.SocialConfig.unlock_send_gift:type_name -> snakecommon.SocialThreshold
	40,  // 39: snakecommon.SocialConfig.unlock_clan:type_name -> snakecommon.SocialThreshold
	40,  // 40: snakecommon.SocialConfig.unlock_world_chat:type_name -> snakecommon.SocialThreshold
	41,  // 41: snakecommon.SocialThreshold.ios:type_name -> snakecommon.SocialThresholdPlatform
	41,  // 42: snakecommon.SocialThreshold.android:type_name -> snakecommon.SocialThresholdPlatform
	43,  // 43: snakecommon.CharmExpConfig.charm_exp_ranks:type_name -> snakecommon.CharmExpRank
	44,  // 44: snakecommon.CharmExpConfig.privilege_config:type_name -> snakecommon.CharmPrivilegeItem
	46,  // 45: snakecommon.TextConfig.gift_like_text_list:type_name -> snakecommon.GiftLikeTextList
	47,  // 46: snakecommon.TextConfig.quick_phrase_text_list:type_name -> snakecommon.ShortCutConfig
	48,  // 47: snakecommon.TextConfig.report_behavior_list:type_name -> snakecommon.ReportBehavior
	48,  // 48: snakecommon.TextConfig.ad_report_behavior_list:type_name -> snakecommon.ReportBehavior
	50,  // 49: snakecommon.UiConfigV3.endless_icon_v2:type_name -> snakecommon.GameIcon
	50,  // 50: snakecommon.UiConfigV3.qualifying_icon_v2:type_name -> snakecommon.GameIcon
	50,  // 51: snakecommon.UiConfigV3.left_corner:type_name -> snakecommon.GameIcon
	50,  // 52: snakecommon.UiConfigV3.right_corner:type_name -> snakecommon.GameIcon
	50,  // 53: snakecommon.UiConfigV3.more_game:type_name -> snakecommon.GameIcon
	53,  // 54: snakecommon.UiConfigV3.newbie_condition:type_name -> snakecommon.NewbieCondition
	50,  // 55: snakecommon.UiConfigV3.endless_huge_icon:type_name -> snakecommon.GameIcon
	50,  // 56: snakecommon.UiConfigV3.game_slide_list:type_name -> snakecommon.GameIcon
	50,  // 57: snakecommon.UiConfigV3.endless_icon:type_name -> snakecommon.GameIcon
	50,  // 58: snakecommon.UiConfigV3.qualifying_icon:type_name -> snakecommon.GameIcon
	54,  // 59: snakecommon.UiConfigV3.home_background:type_name -> snakecommon.HomeBackground
	50,  // 60: snakecommon.UiConfigV3.ar_icon:type_name -> snakecommon.GameIcon
	50,  // 61: snakecommon.UiConfigV3.plant_icon:type_name -> snakecommon.GameIcon
	50,  // 62: snakecommon.UiConfigV3.fallguys_icon:type_name -> snakecommon.GameIcon
	51,  // 63: snakecommon.UiConfigV3.little_game_icon:type_name -> snakecommon.LittleGameIcon
	50,  // 64: snakecommon.UiConfigV3.compose:type_name -> snakecommon.GameIcon
	50,  // 65: snakecommon.UiConfigV3.couple_passcheck:type_name -> snakecommon.GameIcon
	50,  // 66: snakecommon.UiConfigV3.points_champ_icon:type_name -> snakecommon.GameIcon
	52,  // 67: snakecommon.GameIcon.bubble:type_name -> snakecommon.Bubble
	50,  // 68: snakecommon.LittleGameIcon.game_icon:type_name -> snakecommon.GameIcon
	258, // 69: snakecommon.PingConfig.ping_ip_list:type_name -> snakecommon.PingConfig.PingIpListEntry
	57,  // 70: snakecommon.RewardMarkConfig.reward_marks:type_name -> snakecommon.RewardMark
	65,  // 71: snakecommon.ShowAdConfig.snake_coin_ad_config:type_name -> snakecommon.AdRewardModel
	65,  // 72: snakecommon.ShowAdConfig.coupon_ad_config:type_name -> snakecommon.AdRewardModel
	65,  // 73: snakecommon.ShowAdConfig.happycoin_ad_config:type_name -> snakecommon.AdRewardModel
	66,  // 74: snakecommon.ShowAdConfig.goods_list:type_name -> snakecommon.AdGoodsItem
	61,  // 75: snakecommon.ShowAdConfig.endless_buff:type_name -> snakecommon.EndlessBuff
	63,  // 76: snakecommon.ShowAdConfig.ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	63,  // 77: snakecommon.ShowAdConfig.android_ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	63,  // 78: snakecommon.ShowAdConfig.ab_ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	64,  // 79: snakecommon.ShowAdConfig.endless_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	64,  // 80: snakecommon.ShowAdConfig.noad_endless_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	64,  // 81: snakecommon.ShowAdConfig.melee_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	259, // 82: snakecommon.ShowAdConfig.ad_percent:type_name -> snakecommon.ShowAdConfig.AdPercentEntry
	59,  // 83: snakecommon.ShowAdConfig.cross_promotions:type_name -> snakecommon.CrossPromotions
	260, // 84: snakecommon.ShowAdConfig.ab_ad_popups_configs:type_name -> snakecommon.ShowAdConfig.AbAdPopupsConfigsEntry
	60,  // 85: snakecommon.CrossPromotions.source:type_name -> snakecommon.CrossPromotionsSource
	261, // 86: snakecommon.AdPopupsConfig.popup_position_config:type_name -> snakecommon.AdPopupsConfig.PopupPositionConfigEntry
	287, // 87: snakecommon.OrderConfig.pack_goods_list:type_name -> snakecommon.RMBPackGoodsInfo
	287, // 88: snakecommon.OrderConfig.diamond_goods_list:type_name -> snakecommon.RMBPackGoodsInfo
	69,  // 89: snakecommon.OrderConfig.first_charge_popup:type_name -> snakecommon.FirstChargePopup
	287, // 90: snakecommon.OrderConfig.red_pack_goods_list:type_name -> snakecommon.RMBPackGoodsInfo
	70,  // 91: snakecommon.OrderConfig.random_double_client_info:type_name -> snakecommon.RandomDoubleClientInfo
	68,  // 92: snakecommon.OrderConfig.alipay_discount:type_name -> snakecommon.AlipayDiscount
	76,  // 93: snakecommon.ShowConfig.level_config:type_name -> snakecommon.ShowLevelConfig
	77,  // 94: snakecommon.ShowConfig.skill_name:type_name -> snakecommon.ShowSkillName
	75,  // 95: snakecommon.ShowConfig.icon_style:type_name -> snakecommon.ShowIconStyle
	74,  // 96: snakecommon.ShowConfig.pack_config:type_name -> snakecommon.ShowPackItem
	288, // 97: snakecommon.ShowPackItem.pack_info:type_name -> SnakeMain.Config.PackModel
	286, // 98: snakecommon.ShowLevelConfig.reward:type_name -> SnakeMain.Config.RewardConfig
	78,  // 99: snakecommon.ShowLevelConfig.game_skill_list:type_name -> snakecommon.ShowSkillBuff
	96,  // 100: snakecommon.UserConfig.abnormal_store:type_name -> snakecommon.DeviceConfig
	97,  // 101: snakecommon.UserConfig.anti_addiction:type_name -> snakecommon.AntiAddiction
	95,  // 102: snakecommon.UserConfig.game_end_skin:type_name -> snakecommon.GameEndSkin
	92,  // 103: snakecommon.UserConfig.rename_popup_rule:type_name -> snakecommon.RenamePopupRule
	91,  // 104: snakecommon.UserConfig.bind_config:type_name -> snakecommon.BindConfig
	85,  // 105: snakecommon.UserConfig.setting_conf:type_name -> snakecommon.SettingConfig
	84,  // 106: snakecommon.UserConfig.feedback:type_name -> snakecommon.FeedbackConfig
	83,  // 107: snakecommon.UserConfig.flags:type_name -> snakecommon.FlagsConfig
	286, // 108: snakecommon.UserConfig.certify_reward:type_name -> SnakeMain.Config.RewardConfig
	107, // 109: snakecommon.UserConfig.register_survey:type_name -> snakecommon.RegisterSurvey
	108, // 110: snakecommon.UserConfig.recruit_popup:type_name -> snakecommon.RecruitPopup
	81,  // 111: snakecommon.UserConfig.minor_limit:type_name -> snakecommon.MinorLimit
	109, // 112: snakecommon.UserConfig.new_user_config:type_name -> snakecommon.NewUserConfig
	106, // 113: snakecommon.UserConfig.comment_config:type_name -> snakecommon.CommentConfig
	80,  // 114: snakecommon.UserConfig.unity_flags:type_name -> snakecommon.UnityFlags
	105, // 115: snakecommon.UserConfig.idfa_config:type_name -> snakecommon.IdfaConfig
	286, // 116: snakecommon.UserConfig.certify_reward_v2:type_name -> SnakeMain.Config.RewardConfig
	82,  // 117: snakecommon.MinorLimit.order_curator:type_name -> snakecommon.OrderCurator
	86,  // 118: snakecommon.SettingConfig.doc_version:type_name -> snakecommon.DocVersion
	87,  // 119: snakecommon.SettingConfig.network_check:type_name -> snakecommon.NetworkCheck
	88,  // 120: snakecommon.SettingConfig.prometheus:type_name -> snakecommon.Prometheus
	89,  // 121: snakecommon.SettingConfig.okhttp_dispatcher:type_name -> snakecommon.OkhttpDispatcher
	90,  // 122: snakecommon.SettingConfig.mem_switch:type_name -> snakecommon.MemSwitch
	94,  // 123: snakecommon.RenamePopupRule.newbie_club:type_name -> snakecommon.NewbieClub
	93,  // 124: snakecommon.RenamePopupRule.qualifying_match:type_name -> snakecommon.QualifyingMatch
	98,  // 125: snakecommon.AntiAddiction.notify:type_name -> snakecommon.Notify
	100, // 126: snakecommon.AntiAddiction.minor_notify:type_name -> snakecommon.MinorNotify
	101, // 127: snakecommon.AntiAddiction.pay_notify:type_name -> snakecommon.PayNotify
	102, // 128: snakecommon.AntiAddiction.social_desc:type_name -> snakecommon.SocialDesc
	103, // 129: snakecommon.AntiAddiction.identity_age:type_name -> snakecommon.IdentityAge
	104, // 130: snakecommon.AntiAddiction.certify_notify:type_name -> snakecommon.CertifyNotify
	100, // 131: snakecommon.AntiAddiction.infant_notify:type_name -> snakecommon.MinorNotify
	99,  // 132: snakecommon.Notify.uncertified:type_name -> snakecommon.CertifyGameConfig
	99,  // 133: snakecommon.Notify.minor:type_name -> snakecommon.CertifyGameConfig
	286, // 134: snakecommon.IdfaConfig.reward:type_name -> SnakeMain.Config.RewardConfig
	286, // 135: snakecommon.RegisterSurvey.reward:type_name -> SnakeMain.Config.RewardConfig
	286, // 136: snakecommon.NewUserConfig.guide_reward:type_name -> SnakeMain.Config.RewardConfig
	117, // 137: snakecommon.WildStormConfig.wild_storm_list:type_name -> snakecommon.WildStormListItem
	110, // 138: snakecommon.OfflineGameConfig.endless_revive_config:type_name -> snakecommon.ReviveConfigItem
	110, // 139: snakecommon.OfflineGameConfig.endless_revive_config_ab1:type_name -> snakecommon.ReviveConfigItem
	110, // 140: snakecommon.OfflineGameConfig.endless_revive_config_ab2:type_name -> snakecommon.ReviveConfigItem
	110, // 141: snakecommon.OfflineGameConfig.excite_revive_config:type_name -> snakecommon.ReviveConfigItem
	110, // 142: snakecommon.OfflineGameConfig.limit_revive_config:type_name -> snakecommon.ReviveConfigItem
	112, // 143: snakecommon.OfflineGameConfig.floater_config:type_name -> snakecommon.FloaterConfigOld
	114, // 144: snakecommon.OfflineGameConfig.endless_limit_config:type_name -> snakecommon.EndlessLimitConfig
	113, // 145: snakecommon.OfflineGameConfig.activity_map_config:type_name -> snakecommon.ActivityMapConfig
	115, // 146: snakecommon.OfflineGameConfig.endless_bubble:type_name -> snakecommon.EndlessBubbleConfig
	116, // 147: snakecommon.OfflineGameConfig.endless_track:type_name -> snakecommon.EndlessTrackConfig
	118, // 148: snakecommon.OfflineGameConfig.wild_storm:type_name -> snakecommon.WildStormConfig
	3,   // 149: snakecommon.OfflineGameConfig.endless_buff_prop:type_name -> snakecommon.EndLessBuffPropInfo
	121, // 150: snakecommon.MentorshipConfig.master_privilege_config:type_name -> snakecommon.MentorPrivilegeInfo
	123, // 151: snakecommon.MentorshipConfig.bond_title_config:type_name -> snakecommon.MentorshipBondTitleItem
	124, // 152: snakecommon.MentorshipConfig.finish_reward:type_name -> snakecommon.MentorFinishReward
	125, // 153: snakecommon.MentorshipConfig.master_prentice_strategy:type_name -> snakecommon.MasterPrenticeStrategyItem
	122, // 154: snakecommon.MentorPrivilegeInfo.privilege:type_name -> snakecommon.PrivilegeDetailInfo
	286, // 155: snakecommon.MentorPrivilegeInfo.reward_list:type_name -> SnakeMain.Config.RewardConfig
	286, // 156: snakecommon.MentorFinishReward.master_reward:type_name -> SnakeMain.Config.RewardConfig
	286, // 157: snakecommon.MentorFinishReward.prentice_reward:type_name -> SnakeMain.Config.RewardConfig
	289, // 158: snakecommon.ProductConfig.property:type_name -> SnakeMain.Config.Property
	290, // 159: snakecommon.ProductConfig.currency_store:type_name -> SnakeMain.Config.CurrencyStore
	291, // 160: snakecommon.ProductConfig.middle_item_list:type_name -> SnakeMain.Config.MiddleItem
	292, // 161: snakecommon.ProductConfig.draw_card_guide_config:type_name -> SnakeMain.Config.DrawCardGuideConfig
	293, // 162: snakecommon.ProductConfig.store_config:type_name -> SnakeMain.Config.StoreConfig
	129, // 163: snakecommon.WeddingConfig.template_list:type_name -> snakecommon.WeddingTemplate
	129, // 164: snakecommon.WeddingConfig.limited_template_list:type_name -> snakecommon.WeddingTemplate
	130, // 165: snakecommon.WeddingConfig.music_list:type_name -> snakecommon.WeddingMusic
	132, // 166: snakecommon.HappyModeRace.length_config:type_name -> snakecommon.LengthFee
	131, // 167: snakecommon.HappyModeConfig.happycoin_list:type_name -> snakecommon.HappycoinConfig
	134, // 168: snakecommon.HappyModeConfig.low_income_config:type_name -> snakecommon.LowIncomeConfig
	133, // 169: snakecommon.HappyModeConfig.race_config:type_name -> snakecommon.HappyModeRace
	135, // 170: snakecommon.HappyModeConfig.title_config:type_name -> snakecommon.HappyModeTitleConfig
	23,  // 171: snakecommon.HappyModeConfig.race_time_config:type_name -> snakecommon.RaceTimeConfig
	137, // 172: snakecommon.StarSnake.snake_list:type_name -> snakecommon.StarSnakeItem
	141, // 173: snakecommon.AiLevel.attack_times:type_name -> snakecommon.AttackTime
	142, // 174: snakecommon.AiLengthRange.level_list:type_name -> snakecommon.AiLevelWeight
	143, // 175: snakecommon.AiDifficultyConfig.ai_length_range:type_name -> snakecommon.AiLengthRange
	149, // 176: snakecommon.AiDifficultyConfig.ai_born:type_name -> snakecommon.AiBorn
	142, // 177: snakecommon.AiBornPool.level_list:type_name -> snakecommon.AiLevelWeight
	148, // 178: snakecommon.ScorePool.pool_list:type_name -> snakecommon.ScorePoolItem
	146, // 179: snakecommon.AiBorn.ai_born_pools:type_name -> snakecommon.AiBornPool
	147, // 180: snakecommon.AiBorn.score_pools:type_name -> snakecommon.ScorePool
	151, // 181: snakecommon.HoleFood.food_list:type_name -> snakecommon.BonusFood
	152, // 182: snakecommon.BonusFoodLevel.hole_food:type_name -> snakecommon.HoleFood
	153, // 183: snakecommon.BonusFoodLevel.dot_food:type_name -> snakecommon.DotFood
	142, // 184: snakecommon.BonusLevel.bonus_ai_level_list:type_name -> snakecommon.AiLevelWeight
	155, // 185: snakecommon.BonusLevelSettings.bonus_levels:type_name -> snakecommon.BonusLevel
	159, // 186: snakecommon.EndlessBonusNew.map_border:type_name -> snakecommon.MapBorder
	150, // 187: snakecommon.EndlessBonusNew.bonus_trigger_condition:type_name -> snakecommon.BonusTriggerCondition
	154, // 188: snakecommon.EndlessBonusNew.bonus_food_level_list:type_name -> snakecommon.BonusFoodLevel
	156, // 189: snakecommon.EndlessBonusNew.bonus_level_settings:type_name -> snakecommon.BonusLevelSettings
	151, // 190: snakecommon.SpringSugarInfo.food_list:type_name -> snakecommon.BonusFood
	138, // 191: snakecommon.AiConfigV3.star_snake:type_name -> snakecommon.StarSnake
	139, // 192: snakecommon.AiConfigV3.ai_wreck_node_score_range:type_name -> snakecommon.AiWreckNodeScoreRange
	139, // 193: snakecommon.AiConfigV3.ai_wreck_node_score_range_low:type_name -> snakecommon.AiWreckNodeScoreRange
	140, // 194: snakecommon.AiConfigV3.ai_level_list:type_name -> snakecommon.AiLevel
	143, // 195: snakecommon.AiConfigV3.ai_length_range:type_name -> snakecommon.AiLengthRange
	144, // 196: snakecommon.AiConfigV3.floater_config:type_name -> snakecommon.FloaterConfig
	145, // 197: snakecommon.AiConfigV3.ai_difficulty_config_list:type_name -> snakecommon.AiDifficultyConfig
	157, // 198: snakecommon.AiConfigV3.endless_bonus_new:type_name -> snakecommon.EndlessBonusNew
	158, // 199: snakecommon.AiConfigV3.spring_sugar_info:type_name -> snakecommon.SpringSugarInfo
	160, // 200: snakecommon.AiConfigV3.ai_nick_lists:type_name -> snakecommon.AiNickListItem
	161, // 201: snakecommon.AiConfigV3.ai_skin_lists:type_name -> snakecommon.AiSkinListItem
	162, // 202: snakecommon.LimitAiConfigV3.base:type_name -> snakecommon.AiConfigV3
	262, // 203: snakecommon.SystemConfig.game_configs:type_name -> snakecommon.SystemConfig.GameConfigsEntry
	263, // 204: snakecommon.SystemConfig.endless_exp:type_name -> snakecommon.SystemConfig.EndlessExpEntry
	264, // 205: snakecommon.SystemConfig.ol_endless_pk:type_name -> snakecommon.SystemConfig.OlEndlessPkEntry
	265, // 206: snakecommon.SystemConfig.voice_room_uids:type_name -> snakecommon.SystemConfig.VoiceRoomUidsEntry
	266, // 207: snakecommon.SystemConfig.telephone_black_list:type_name -> snakecommon.SystemConfig.TelephoneBlackListEntry
	267, // 208: snakecommon.SystemConfig.idcard_black_list:type_name -> snakecommon.SystemConfig.IdcardBlackListEntry
	268, // 209: snakecommon.SystemConfig.voice_white_owner_list:type_name -> snakecommon.SystemConfig.VoiceWhiteOwnerListEntry
	269, // 210: snakecommon.SystemConfig.ol_endless_entrance:type_name -> snakecommon.SystemConfig.OlEndlessEntranceEntry
	270, // 211: snakecommon.SystemConfig.ios_shake:type_name -> snakecommon.SystemConfig.IosShakeEntry
	167, // 212: snakecommon.RewardConfig.register_reward:type_name -> snakecommon.RegisterReward
	169, // 213: snakecommon.InterfaceExpire.activity_api:type_name -> snakecommon.ActivityAPI
	170, // 214: snakecommon.InterfaceExpire.clan_api:type_name -> snakecommon.ClanAPI
	171, // 215: snakecommon.InterfaceExpire.config:type_name -> snakecommon.ExpireConfig
	172, // 216: snakecommon.InterfaceExpire.event_api:type_name -> snakecommon.EventAPI
	173, // 217: snakecommon.InterfaceExpire.friend_api:type_name -> snakecommon.FriendAPI
	174, // 218: snakecommon.InterfaceExpire.inbox_api:type_name -> snakecommon.InboxAPI
	175, // 219: snakecommon.InterfaceExpire.nearby_api:type_name -> snakecommon.NearbyAPI
	176, // 220: snakecommon.InterfaceExpire.score_api:type_name -> snakecommon.ScoreAPI
	177, // 221: snakecommon.InterfaceExpire.share_api:type_name -> snakecommon.ShareAPI
	178, // 222: snakecommon.InterfaceExpire.top_list_v2:type_name -> snakecommon.TopListV2
	179, // 223: snakecommon.InterfaceExpire.voice_room_api:type_name -> snakecommon.VoiceRoomAPI
	181, // 224: snakecommon.MsConfig.ms_addr:type_name -> snakecommon.MsAddr
	181, // 225: snakecommon.MsConfig.ms_addr2:type_name -> snakecommon.MsAddr
	184, // 226: snakecommon.ExciteModeConfig.game_prop_list:type_name -> snakecommon.GamePropList
	184, // 227: snakecommon.ExciteModeConfig.game_prop_list2:type_name -> snakecommon.GamePropList
	186, // 228: snakecommon.ExciteModeConfig.param_config:type_name -> snakecommon.ParamConfig
	193, // 229: snakecommon.ExciteModeConfig.game_config:type_name -> snakecommon.ModeGameConfig
	185, // 230: snakecommon.GamePropList.level_info:type_name -> snakecommon.ModeLevelInfo
	187, // 231: snakecommon.ParamConfig.in_game:type_name -> snakecommon.InGame
	188, // 232: snakecommon.ParamConfig.prop_rate:type_name -> snakecommon.PropRate
	192, // 233: snakecommon.ParamConfig.rate_config:type_name -> snakecommon.RateConfig
	189, // 234: snakecommon.RateConfig.AI:type_name -> snakecommon.Ai
	190, // 235: snakecommon.RateConfig.map:type_name -> snakecommon.Map
	191, // 236: snakecommon.RateConfig.stone:type_name -> snakecommon.Stone
	194, // 237: snakecommon.ModeGameConfig.ai_level_list:type_name -> snakecommon.AiLevelList
	196, // 238: snakecommon.ModeGameConfig.self_electricity_config:type_name -> snakecommon.SelfElectricityConfig
	197, // 239: snakecommon.ModeGameConfig.shock_config:type_name -> snakecommon.ShockConfig
	205, // 240: snakecommon.ModeGameConfig.stage_configs:type_name -> snakecommon.StageConfigs
	195, // 241: snakecommon.AiLevelList.brain_attack_time:type_name -> snakecommon.BrainAttackTime
	198, // 242: snakecommon.AiConfig.ai_type_list:type_name -> snakecommon.AiTypeList
	199, // 243: snakecommon.AiConfig.electricity_config:type_name -> snakecommon.ElectricityConfig
	200, // 244: snakecommon.AiConfig.missile_config:type_name -> snakecommon.MissileConfig
	202, // 245: snakecommon.PropConfig.prop_born_infos:type_name -> snakecommon.PropBornInfos
	203, // 246: snakecommon.PropConfig.prop_weight_list:type_name -> snakecommon.PropWeightList
	201, // 247: snakecommon.StageConfigs.ai_config:type_name -> snakecommon.AiConfig
	204, // 248: snakecommon.StageConfigs.prop_config:type_name -> snakecommon.PropConfig
	207, // 249: snakecommon.Emulator.app_check:type_name -> snakecommon.AppCheck
	208, // 250: snakecommon.Emulator.cheat_app_check:type_name -> snakecommon.CheatAppCheck
	209, // 251: snakecommon.Emulator.shell_check:type_name -> snakecommon.ShellCheck
	271, // 252: snakecommon.LittleGame.little_games:type_name -> snakecommon.LittleGame.LittleGamesEntry
	212, // 253: snakecommon.LittleGameSrc.items:type_name -> snakecommon.LittleGameSrcItem
	272, // 254: snakecommon.ReviewMarket.review_market:type_name -> snakecommon.ReviewMarket.ReviewMarketEntry
	273, // 255: snakecommon.LittleGameUiConf.config:type_name -> snakecommon.LittleGameUiConf.ConfigEntry
	216, // 256: snakecommon.LittleGameUi.game_list:type_name -> snakecommon.GameList
	218, // 257: snakecommon.ScoreInfoConfig.qualifying_display_score_rule:type_name -> snakecommon.QualifyingDisplayScoreConfig
	219, // 258: snakecommon.ScoreInfoConfig.qualifying_score_coin_rule:type_name -> snakecommon.SnakeCoinConfig
	219, // 259: snakecommon.ScoreInfoConfig.escape_score_coin_rule:type_name -> snakecommon.SnakeCoinConfig
	220, // 260: snakecommon.ScoreInfoConfig.escape_point_rule:type_name -> snakecommon.EscapePointRule
	221, // 261: snakecommon.ScoreInfoConfig.escape_cup_map:type_name -> snakecommon.KVInt
	223, // 262: snakecommon.ScoreInfoConfig.season_notify:type_name -> snakecommon.SeasonNotifyConfig
	224, // 263: snakecommon.ScoreInfoConfig.single_double_snake_coin_rule:type_name -> snakecommon.SingleDoubleSnakeCoin
	226, // 264: snakecommon.ScoreInfoConfig.endless_snake_coin_rule:type_name -> snakecommon.SnakeCoinCalcConfig
	226, // 265: snakecommon.ScoreInfoConfig.limit_snake_coin_rule:type_name -> snakecommon.SnakeCoinCalcConfig
	222, // 266: snakecommon.QualifyingDisplayScoreConfig.length_config:type_name -> snakecommon.DisplayScoreCalcConfig
	222, // 267: snakecommon.QualifyingDisplayScoreConfig.kill_config:type_name -> snakecommon.DisplayScoreCalcConfig
	222, // 268: snakecommon.QualifyingDisplayScoreConfig.eat_config:type_name -> snakecommon.DisplayScoreCalcConfig
	222, // 269: snakecommon.QualifyingDisplayScoreConfig.killed_config:type_name -> snakecommon.DisplayScoreCalcConfig
	222, // 270: snakecommon.QualifyingDisplayScoreConfig.destroy_config:type_name -> snakecommon.DisplayScoreCalcConfig
	222, // 271: snakecommon.QualifyingDisplayScoreConfig.boss_kill_config:type_name -> snakecommon.DisplayScoreCalcConfig
	221, // 272: snakecommon.EscapePointRule.rank_point:type_name -> snakecommon.KVInt
	221, // 273: snakecommon.EscapePointRule.action_point:type_name -> snakecommon.KVInt
	221, // 274: snakecommon.EscapePointRule.kill_point:type_name -> snakecommon.KVInt
	225, // 275: snakecommon.SingleDoubleSnakeCoin.calc_config:type_name -> snakecommon.SnakeCoinAdCalcConfig
	232, // 276: snakecommon.SimulConfig.task_list:type_name -> snakecommon.SimulTaskItem
	274, // 277: snakecommon.SimulConfig.building_set:type_name -> snakecommon.SimulConfig.BuildingSetEntry
	275, // 278: snakecommon.SimulConfig.staff_set:type_name -> snakecommon.SimulConfig.StaffSetEntry
	229, // 279: snakecommon.SimulConfig.reward_config:type_name -> snakecommon.SimulRewardConfig
	237, // 280: snakecommon.SimulConfig.timed_task_list:type_name -> snakecommon.TimedTaskInfo
	238, // 281: snakecommon.SimulConfig.timed_task_coin_config:type_name -> snakecommon.TimedTaskCoinConfig
	230, // 282: snakecommon.SimulRewardConfig.reward_condition:type_name -> snakecommon.SimulRewardCondition
	231, // 283: snakecommon.SimulRewardConfig.reward_mail:type_name -> snakecommon.SimulRewardMail
	286, // 284: snakecommon.SimulRewardMail.reward_list:type_name -> SnakeMain.Config.RewardConfig
	233, // 285: snakecommon.SimulTaskItem.reward:type_name -> snakecommon.SimulReward
	235, // 286: snakecommon.BuildingSet.detail:type_name -> snakecommon.Detail
	235, // 287: snakecommon.StaffSet.detail:type_name -> snakecommon.Detail
	240, // 288: snakecommon.SummonConfig.aiConfig:type_name -> snakecommon.SummonAiConfig
	242, // 289: snakecommon.SummonConfig.mapConfig:type_name -> snakecommon.MapConfig
	241, // 290: snakecommon.SummonAiConfig.config:type_name -> snakecommon.SummonConfigItem
	276, // 291: snakecommon.IosPatch.path:type_name -> snakecommon.IosPatch.PathEntry
	245, // 292: snakecommon.IosPatchList.ios_patch:type_name -> snakecommon.IosPatchItem
	277, // 293: snakecommon.UnityAssets.versions:type_name -> snakecommon.UnityAssets.VersionsEntry
	278, // 294: snakecommon.AssetMap.platforms:type_name -> snakecommon.AssetMap.PlatformsEntry
	249, // 295: snakecommon.Asset.assets:type_name -> snakecommon.AssetItem
	279, // 296: snakecommon.TeamEndlessConfig.guide:type_name -> snakecommon.TeamEndlessConfig.Guide
	281, // 297: snakecommon.TeamEndlessConfig.seasons:type_name -> snakecommon.TeamEndlessConfig.Season
	284, // 298: snakecommon.TeamEndlessConfig.rank:type_name -> snakecommon.TeamEndlessConfig.Rank
	251, // 299: snakecommon.TeamEndlessConfig.couple_skin_activity:type_name -> snakecommon.CoupleSkinActivity
	255, // 300: snakecommon.BannerInfo.extra:type_name -> snakecommon.BannerExtraInfo
	254, // 301: snakecommon.BannerInfo.carton_list:type_name -> snakecommon.CartonList
	24,  // 302: snakecommon.ClanConfig.ClanRaceRewardEntry.value:type_name -> snakecommon.ClanRaceReward
	63,  // 303: snakecommon.ShowAdConfig.AbAdPopupsConfigsEntry.value:type_name -> snakecommon.AdPopupsConfig
	62,  // 304: snakecommon.AdPopupsConfig.PopupPositionConfigEntry.value:type_name -> snakecommon.PopupPosition
	164, // 305: snakecommon.SystemConfig.GameConfigsEntry.value:type_name -> snakecommon.GameConfig
	211, // 306: snakecommon.LittleGame.LittleGamesEntry.value:type_name -> snakecommon.LittleGameSrc
	215, // 307: snakecommon.LittleGameUiConf.ConfigEntry.value:type_name -> snakecommon.LittleGameUi
	234, // 308: snakecommon.SimulConfig.BuildingSetEntry.value:type_name -> snakecommon.BuildingSet
	236, // 309: snakecommon.SimulConfig.StaffSetEntry.value:type_name -> snakecommon.StaffSet
	244, // 310: snakecommon.IosPatch.PathEntry.value:type_name -> snakecommon.IosPatchList
	247, // 311: snakecommon.UnityAssets.VersionsEntry.value:type_name -> snakecommon.AssetMap
	248, // 312: snakecommon.AssetMap.PlatformsEntry.value:type_name -> snakecommon.Asset
	294, // 313: snakecommon.TeamEndlessConfig.SeasonRewardItem.reward_list:type_name -> snakecommon.CRewardItem
	280, // 314: snakecommon.TeamEndlessConfig.Season.reward_list:type_name -> snakecommon.TeamEndlessConfig.SeasonRewardItem
	282, // 315: snakecommon.TeamEndlessConfig.Rank.big_rank:type_name -> snakecommon.TeamEndlessConfig.BigRankItem
	283, // 316: snakecommon.TeamEndlessConfig.Rank.small_rank:type_name -> snakecommon.TeamEndlessConfig.SmallRankItem
	317, // [317:317] is the sub-list for method output_type
	317, // [317:317] is the sub-list for method input_type
	317, // [317:317] is the sub-list for extension type_name
	317, // [317:317] is the sub-list for extension extendee
	0,   // [0:317] is the sub-list for field type_name
}

func init() { file_snakecommon_project_config_proto_init() }
func file_snakecommon_project_config_proto_init() {
	if File_snakecommon_project_config_proto != nil {
		return
	}
	file_snakecommon_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snakecommon_project_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLessBuffPropConfigV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLessBuffPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighLightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OlGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JumpIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchBackgroundConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatusTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrassConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuitNewSuitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamKillConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMeleeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceNormalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamKillProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePointAddition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceTimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanRaceReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewClanRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClipBoardCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoShareIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTopConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmLevelItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialThresholdPlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmExpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmExpRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmPrivilegeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftLikeTextList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiConfigV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LittleGameIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBackground); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardMarkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossPromotions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossPromotionsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopupPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdPopupsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessAdRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdRewardModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdGoodsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayDiscount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstChargePopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomDoubleClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityQualifyingOpenConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopListConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIconStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowLevelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSkillName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSkillBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinorLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCurator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prometheus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkhttpDispatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenamePopupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieClub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiAddiction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifyGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinorNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdfaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitPopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviveConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleGameAiConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloaterConfigOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityMapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBubbleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessTrackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildStormListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildStormConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorshipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorPrivilegeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorshipBondTitleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorFinishReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterPrenticeStrategyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingMusic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappycoinConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LengthFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyModeRace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LowIncomeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyModeTitleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyModeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarSnakeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarSnake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiWreckNodeScoreRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiLevelWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiLengthRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloaterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiDifficultyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiBornPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScorePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScorePoolItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiBorn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusTriggerCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusFood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoleFood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DotFood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusFoodLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusLevelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBonusNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpringSugarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiNickListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiSkinListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiConfigV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitAiConfigV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceExpire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboxAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearbyAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopListV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceRoomAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvinceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExciteModeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePropList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiLevelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrainAttackTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfElectricityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShockConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectricityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropBornInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropWeightList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emulator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheatAppCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LittleGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LittleGameSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LittleGameSrcItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LittleGameUiConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LittleGameUi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreInfoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingDisplayScoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeCoinConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EscapePointRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayScoreCalcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonNotifyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDoubleSnakeCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeCoinAdCalcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeCoinCalcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulRewardCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulRewardMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulTaskItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedTaskCoinConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummonAiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummonConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosPatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosPatchItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoupleSkinActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeQualifyAIPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CartonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessConfig_Guide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessConfig_SeasonRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessConfig_Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessConfig_BigRankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessConfig_SmallRankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessConfig_Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecommon_project_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   284,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakecommon_project_config_proto_goTypes,
		DependencyIndexes: file_snakecommon_project_config_proto_depIdxs,
		EnumInfos:         file_snakecommon_project_config_proto_enumTypes,
		MessageInfos:      file_snakecommon_project_config_proto_msgTypes,
	}.Build()
	File_snakecommon_project_config_proto = out.File
	file_snakecommon_project_config_proto_rawDesc = nil
	file_snakecommon_project_config_proto_goTypes = nil
	file_snakecommon_project_config_proto_depIdxs = nil
}
