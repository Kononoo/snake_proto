// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakecommon/project_config.proto

package snakecommon

import (
	config "git.17zjh.com/snake/snake_proto/snakeapi/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShortCutConfig_SceneType int32

const (
	ShortCutConfig_invalidStatus    ShortCutConfig_SceneType = 0
	ShortCutConfig_SceneFriend      ShortCutConfig_SceneType = 1
	ShortCutConfig_SceneWorld       ShortCutConfig_SceneType = 2
	ShortCutConfig_SceneMatch       ShortCutConfig_SceneType = 3
	ShortCutConfig_SceneClan        ShortCutConfig_SceneType = 5
	ShortCutConfig_SceneCoupleMatch ShortCutConfig_SceneType = 7
	ShortCutConfig_SceneRaceRoom    ShortCutConfig_SceneType = 8
	ShortCutConfig_SceneGoatGame    ShortCutConfig_SceneType = 9
)

// Enum value maps for ShortCutConfig_SceneType.
var (
	ShortCutConfig_SceneType_name = map[int32]string{
		0: "invalidStatus",
		1: "SceneFriend",
		2: "SceneWorld",
		3: "SceneMatch",
		5: "SceneClan",
		7: "SceneCoupleMatch",
		8: "SceneRaceRoom",
		9: "SceneGoatGame",
	}
	ShortCutConfig_SceneType_value = map[string]int32{
		"invalidStatus":    0,
		"SceneFriend":      1,
		"SceneWorld":       2,
		"SceneMatch":       3,
		"SceneClan":        5,
		"SceneCoupleMatch": 7,
		"SceneRaceRoom":    8,
		"SceneGoatGame":    9,
	}
)

func (x ShortCutConfig_SceneType) Enum() *ShortCutConfig_SceneType {
	p := new(ShortCutConfig_SceneType)
	*p = x
	return p
}

func (x ShortCutConfig_SceneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShortCutConfig_SceneType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakecommon_project_config_proto_enumTypes[0].Descriptor()
}

func (ShortCutConfig_SceneType) Type() protoreflect.EnumType {
	return &file_snakecommon_project_config_proto_enumTypes[0]
}

func (x ShortCutConfig_SceneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShortCutConfig_SceneType.Descriptor instead.
func (ShortCutConfig_SceneType) EnumDescriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{43, 0}
}

type ConfigVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags map[string]string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigVersionInfo) Reset() {
	*x = ConfigVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigVersionInfo) ProtoMessage() {}

func (x *ConfigVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigVersionInfo.ProtoReflect.Descriptor instead.
func (*ConfigVersionInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigVersionInfo) GetFlags() map[string]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

// === endless_buff_prop begin ======================================
type EndLessBuffPropConfigV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*EndLessBuffPropInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EndLessBuffPropConfigV2) Reset() {
	*x = EndLessBuffPropConfigV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLessBuffPropConfigV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLessBuffPropConfigV2) ProtoMessage() {}

func (x *EndLessBuffPropConfigV2) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLessBuffPropConfigV2.ProtoReflect.Descriptor instead.
func (*EndLessBuffPropConfigV2) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{1}
}

func (x *EndLessBuffPropConfigV2) GetList() []*EndLessBuffPropInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type EndLessBuffPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffType  int32             `protobuf:"varint,1,opt,name=buff_type,json=buffType,proto3" json:"buff_type,omitempty"`
	FreeTimes int32             `protobuf:"varint,2,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	PriceList []*CPriceInfo     `protobuf:"bytes,3,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PropList  []*RandomPropInfo `protobuf:"bytes,4,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
}

func (x *EndLessBuffPropInfo) Reset() {
	*x = EndLessBuffPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLessBuffPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLessBuffPropInfo) ProtoMessage() {}

func (x *EndLessBuffPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLessBuffPropInfo.ProtoReflect.Descriptor instead.
func (*EndLessBuffPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{2}
}

func (x *EndLessBuffPropInfo) GetBuffType() int32 {
	if x != nil {
		return x.BuffType
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *EndLessBuffPropInfo) GetPriceList() []*CPriceInfo {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *EndLessBuffPropInfo) GetPropList() []*RandomPropInfo {
	if x != nil {
		return x.PropList
	}
	return nil
}

type RandomPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Num    int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl string `protobuf:"bytes,5,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
}

func (x *RandomPropInfo) Reset() {
	*x = RandomPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPropInfo) ProtoMessage() {}

func (x *RandomPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPropInfo.ProtoReflect.Descriptor instead.
func (*RandomPropInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{3}
}

func (x *RandomPropInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RandomPropInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RandomPropInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RandomPropInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RandomPropInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

// === huawei_highlight begin ======================================
type HuaweiHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighlightList   []*HighLightInfo `protobuf:"bytes,1,rep,name=highlight_list,json=highlightList,proto3" json:"highlight_list,omitempty"`
	Open            int32            `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	TemplateIdThree string           `protobuf:"bytes,3,opt,name=template_id_three,json=templateIdThree,proto3" json:"template_id_three,omitempty"`
	TemplateIdFour  string           `protobuf:"bytes,4,opt,name=template_id_four,json=templateIdFour,proto3" json:"template_id_four,omitempty"`
}

func (x *HuaweiHighlight) Reset() {
	*x = HuaweiHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiHighlight) ProtoMessage() {}

func (x *HuaweiHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiHighlight.ProtoReflect.Descriptor instead.
func (*HuaweiHighlight) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{4}
}

func (x *HuaweiHighlight) GetHighlightList() []*HighLightInfo {
	if x != nil {
		return x.HighlightList
	}
	return nil
}

func (x *HuaweiHighlight) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *HuaweiHighlight) GetTemplateIdThree() string {
	if x != nil {
		return x.TemplateIdThree
	}
	return ""
}

func (x *HuaweiHighlight) GetTemplateIdFour() string {
	if x != nil {
		return x.TemplateIdFour
	}
	return ""
}

type HighLightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Obj       int32 `protobuf:"varint,2,opt,name=obj,proto3" json:"obj,omitempty"`
	Time      int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	DelayTime int32 `protobuf:"varint,4,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	Level     int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *HighLightInfo) Reset() {
	*x = HighLightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighLightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighLightInfo) ProtoMessage() {}

func (x *HighLightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighLightInfo.ProtoReflect.Descriptor instead.
func (*HighLightInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{5}
}

func (x *HighLightInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HighLightInfo) GetObj() int32 {
	if x != nil {
		return x.Obj
	}
	return 0
}

func (x *HighLightInfo) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HighLightInfo) GetDelayTime() int32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *HighLightInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// === ol_game_config start ======================================
type OlGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamBossSkinId               int32                 `protobuf:"varint,1,opt,name=team_boss_skin_id,json=teamBossSkinId,proto3" json:"team_boss_skin_id,omitempty"`
	GameStatusTrack              *GameStatusTrack      `protobuf:"bytes,2,opt,name=game_status_track,json=gameStatusTrack,proto3" json:"game_status_track,omitempty"`
	TeamSuitTextConfig           string                `protobuf:"bytes,3,opt,name=team_suit_text_config,json=teamSuitTextConfig,proto3" json:"team_suit_text_config,omitempty"` // 团战队服说明文案
	GrassConfig                  *GrassConfig          `protobuf:"bytes,4,opt,name=grass_config,json=grassConfig,proto3" json:"grass_config,omitempty"`                          // 草场配置，应该已废弃
	ShowFriendGameWillEndTimeGap int32                 `protobuf:"varint,5,opt,name=show_friend_game_will_end_time_gap,json=showFriendGameWillEndTimeGap,proto3" json:"show_friend_game_will_end_time_gap,omitempty"`
	HcMatchCancelTime            []int32               `protobuf:"varint,6,rep,packed,name=hc_match_cancel_time,json=hcMatchCancelTime,proto3" json:"hc_match_cancel_time,omitempty"`
	NoTeamSkinIdList             []int32               `protobuf:"varint,7,rep,packed,name=no_team_skin_id_list,json=noTeamSkinIdList,proto3" json:"no_team_skin_id_list,omitempty"`
	OlUpActionDouble             int32                 `protobuf:"varint,8,opt,name=ol_up_action_double,json=olUpActionDouble,proto3" json:"ol_up_action_double,omitempty"`
	TeamModeWinLength            int32                 `protobuf:"varint,9,opt,name=team_mode_win_length,json=teamModeWinLength,proto3" json:"team_mode_win_length,omitempty"`
	OlGameOfflineTipTime         int32                 `protobuf:"varint,10,opt,name=ol_game_offline_tip_time,json=olGameOfflineTipTime,proto3" json:"ol_game_offline_tip_time,omitempty"`
	NoTeamSecondHeadPointSkins   []int32               `protobuf:"varint,11,rep,packed,name=no_team_second_head_point_skins,json=noTeamSecondHeadPointSkins,proto3" json:"no_team_second_head_point_skins,omitempty"`
	OlGameStableTurnCount        float64               `protobuf:"fixed64,12,opt,name=ol_game_stable_turn_count,json=olGameStableTurnCount,proto3" json:"ol_game_stable_turn_count,omitempty"`
	TeamNeckUrls                 []string              `protobuf:"bytes,13,rep,name=team_neck_urls,json=teamNeckUrls,proto3" json:"team_neck_urls,omitempty"`
	FlyFoodUrl                   string                `protobuf:"bytes,14,opt,name=fly_food_url,json=flyFoodUrl,proto3" json:"fly_food_url,omitempty"`
	OlGamePredictDataCount       int32                 `protobuf:"varint,15,opt,name=ol_game_predict_data_count,json=olGamePredictDataCount,proto3" json:"ol_game_predict_data_count,omitempty"`
	TeamSuit                     *TeamSuit             `protobuf:"bytes,16,opt,name=team_suit,json=teamSuit,proto3" json:"team_suit,omitempty"`
	TeamKillConfig               *TeamKillConfig       `protobuf:"bytes,17,opt,name=team_kill_config,json=teamKillConfig,proto3" json:"team_kill_config,omitempty"`
	TeamMeleeConfig              *TeamMeleeConfig      `protobuf:"bytes,18,opt,name=team_melee_config,json=teamMeleeConfig,proto3" json:"team_melee_config,omitempty"`
	QualifyingConfig             *QualifyingConfig     `protobuf:"bytes,19,opt,name=qualifying_config,json=qualifyingConfig,proto3" json:"qualifying_config,omitempty"`
	RaceNormalConfig             *RaceNormalConfig     `protobuf:"bytes,20,opt,name=race_normal_config,json=raceNormalConfig,proto3" json:"race_normal_config,omitempty"`
	TeamKillProp                 *TeamKillProp         `protobuf:"bytes,21,opt,name=team_kill_prop,json=teamKillProp,proto3" json:"team_kill_prop,omitempty"`
	ExitButtonPlan               int32                 `protobuf:"varint,22,opt,name=exit_button_plan,json=exitButtonPlan,proto3" json:"exit_button_plan,omitempty"`  // 4.3.28新增,中途退出按钮状态方案
	QualifyingGuide              int32                 `protobuf:"varint,23,opt,name=qualifying_guide,json=qualifyingGuide,proto3" json:"qualifying_guide,omitempty"` //1:强引导，2：弱引导
	OlGamePredictDataCountNew    int32                 `protobuf:"varint,24,opt,name=ol_game_predict_data_count_new,json=olGamePredictDataCountNew,proto3" json:"ol_game_predict_data_count_new,omitempty"`
	MatchBackgroud               *MatchBackgroudConfig `protobuf:"bytes,25,opt,name=match_backgroud,json=matchBackgroud,proto3" json:"match_backgroud,omitempty"`
}

func (x *OlGameConfig) Reset() {
	*x = OlGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OlGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OlGameConfig) ProtoMessage() {}

func (x *OlGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OlGameConfig.ProtoReflect.Descriptor instead.
func (*OlGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{6}
}

func (x *OlGameConfig) GetTeamBossSkinId() int32 {
	if x != nil {
		return x.TeamBossSkinId
	}
	return 0
}

func (x *OlGameConfig) GetGameStatusTrack() *GameStatusTrack {
	if x != nil {
		return x.GameStatusTrack
	}
	return nil
}

func (x *OlGameConfig) GetTeamSuitTextConfig() string {
	if x != nil {
		return x.TeamSuitTextConfig
	}
	return ""
}

func (x *OlGameConfig) GetGrassConfig() *GrassConfig {
	if x != nil {
		return x.GrassConfig
	}
	return nil
}

func (x *OlGameConfig) GetShowFriendGameWillEndTimeGap() int32 {
	if x != nil {
		return x.ShowFriendGameWillEndTimeGap
	}
	return 0
}

func (x *OlGameConfig) GetHcMatchCancelTime() []int32 {
	if x != nil {
		return x.HcMatchCancelTime
	}
	return nil
}

func (x *OlGameConfig) GetNoTeamSkinIdList() []int32 {
	if x != nil {
		return x.NoTeamSkinIdList
	}
	return nil
}

func (x *OlGameConfig) GetOlUpActionDouble() int32 {
	if x != nil {
		return x.OlUpActionDouble
	}
	return 0
}

func (x *OlGameConfig) GetTeamModeWinLength() int32 {
	if x != nil {
		return x.TeamModeWinLength
	}
	return 0
}

func (x *OlGameConfig) GetOlGameOfflineTipTime() int32 {
	if x != nil {
		return x.OlGameOfflineTipTime
	}
	return 0
}

func (x *OlGameConfig) GetNoTeamSecondHeadPointSkins() []int32 {
	if x != nil {
		return x.NoTeamSecondHeadPointSkins
	}
	return nil
}

func (x *OlGameConfig) GetOlGameStableTurnCount() float64 {
	if x != nil {
		return x.OlGameStableTurnCount
	}
	return 0
}

func (x *OlGameConfig) GetTeamNeckUrls() []string {
	if x != nil {
		return x.TeamNeckUrls
	}
	return nil
}

func (x *OlGameConfig) GetFlyFoodUrl() string {
	if x != nil {
		return x.FlyFoodUrl
	}
	return ""
}

func (x *OlGameConfig) GetOlGamePredictDataCount() int32 {
	if x != nil {
		return x.OlGamePredictDataCount
	}
	return 0
}

func (x *OlGameConfig) GetTeamSuit() *TeamSuit {
	if x != nil {
		return x.TeamSuit
	}
	return nil
}

func (x *OlGameConfig) GetTeamKillConfig() *TeamKillConfig {
	if x != nil {
		return x.TeamKillConfig
	}
	return nil
}

func (x *OlGameConfig) GetTeamMeleeConfig() *TeamMeleeConfig {
	if x != nil {
		return x.TeamMeleeConfig
	}
	return nil
}

func (x *OlGameConfig) GetQualifyingConfig() *QualifyingConfig {
	if x != nil {
		return x.QualifyingConfig
	}
	return nil
}

func (x *OlGameConfig) GetRaceNormalConfig() *RaceNormalConfig {
	if x != nil {
		return x.RaceNormalConfig
	}
	return nil
}

func (x *OlGameConfig) GetTeamKillProp() *TeamKillProp {
	if x != nil {
		return x.TeamKillProp
	}
	return nil
}

func (x *OlGameConfig) GetExitButtonPlan() int32 {
	if x != nil {
		return x.ExitButtonPlan
	}
	return 0
}

func (x *OlGameConfig) GetQualifyingGuide() int32 {
	if x != nil {
		return x.QualifyingGuide
	}
	return 0
}

func (x *OlGameConfig) GetOlGamePredictDataCountNew() int32 {
	if x != nil {
		return x.OlGamePredictDataCountNew
	}
	return 0
}

func (x *OlGameConfig) GetMatchBackgroud() *MatchBackgroudConfig {
	if x != nil {
		return x.MatchBackgroud
	}
	return nil
}

type MatchBackgroudConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType     int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimSrc      string `protobuf:"bytes,2,opt,name=anim_src,json=animSrc,proto3" json:"anim_src,omitempty"`
	StaticImgurl string `protobuf:"bytes,3,opt,name=static_imgurl,json=staticImgurl,proto3" json:"static_imgurl,omitempty"`
}

func (x *MatchBackgroudConfig) Reset() {
	*x = MatchBackgroudConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchBackgroudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBackgroudConfig) ProtoMessage() {}

func (x *MatchBackgroudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBackgroudConfig.ProtoReflect.Descriptor instead.
func (*MatchBackgroudConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{7}
}

func (x *MatchBackgroudConfig) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *MatchBackgroudConfig) GetAnimSrc() string {
	if x != nil {
		return x.AnimSrc
	}
	return ""
}

func (x *MatchBackgroudConfig) GetStaticImgurl() string {
	if x != nil {
		return x.StaticImgurl
	}
	return ""
}

type GameStatusTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameMinDelay int32 `protobuf:"varint,1,opt,name=frame_min_delay,json=frameMinDelay,proto3" json:"frame_min_delay,omitempty"`
	PingInterval  int32 `protobuf:"varint,2,opt,name=ping_interval,json=pingInterval,proto3" json:"ping_interval,omitempty"`
}

func (x *GameStatusTrack) Reset() {
	*x = GameStatusTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatusTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatusTrack) ProtoMessage() {}

func (x *GameStatusTrack) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatusTrack.ProtoReflect.Descriptor instead.
func (*GameStatusTrack) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{8}
}

func (x *GameStatusTrack) GetFrameMinDelay() int32 {
	if x != nil {
		return x.FrameMinDelay
	}
	return 0
}

func (x *GameStatusTrack) GetPingInterval() int32 {
	if x != nil {
		return x.PingInterval
	}
	return 0
}

type GrassConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grass     []*GrassInfo `protobuf:"bytes,1,rep,name=grass,proto3" json:"grass,omitempty"`
	GridCount int32        `protobuf:"varint,2,opt,name=grid_count,json=gridCount,proto3" json:"grid_count,omitempty"`
}

func (x *GrassConfig) Reset() {
	*x = GrassConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrassConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrassConfig) ProtoMessage() {}

func (x *GrassConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrassConfig.ProtoReflect.Descriptor instead.
func (*GrassConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{9}
}

func (x *GrassConfig) GetGrass() []*GrassInfo {
	if x != nil {
		return x.Grass
	}
	return nil
}

func (x *GrassConfig) GetGridCount() int32 {
	if x != nil {
		return x.GridCount
	}
	return 0
}

type GrassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position []int32 `protobuf:"varint,1,rep,packed,name=position,proto3" json:"position,omitempty"`
	Url      string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GrassInfo) Reset() {
	*x = GrassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrassInfo) ProtoMessage() {}

func (x *GrassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrassInfo.ProtoReflect.Descriptor instead.
func (*GrassInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{10}
}

func (x *GrassInfo) GetPosition() []int32 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GrassInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TeamSuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head       []string               `protobuf:"bytes,1,rep,name=head,proto3" json:"head,omitempty"`
	Body       []string               `protobuf:"bytes,2,rep,name=body,proto3" json:"body,omitempty"`
	RepeatRate []int32                `protobuf:"varint,3,rep,packed,name=repeat_rate,json=repeatRate,proto3" json:"repeat_rate,omitempty"`
	Imgurl     string                 `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name       string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NewSuit    []*TeamSuitNewSuitInfo `protobuf:"bytes,6,rep,name=new_suit,json=newSuit,proto3" json:"new_suit,omitempty"`
}

func (x *TeamSuit) Reset() {
	*x = TeamSuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuit) ProtoMessage() {}

func (x *TeamSuit) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuit.ProtoReflect.Descriptor instead.
func (*TeamSuit) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{11}
}

func (x *TeamSuit) GetHead() []string {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TeamSuit) GetBody() []string {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *TeamSuit) GetRepeatRate() []int32 {
	if x != nil {
		return x.RepeatRate
	}
	return nil
}

func (x *TeamSuit) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *TeamSuit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamSuit) GetNewSuit() []*TeamSuitNewSuitInfo {
	if x != nil {
		return x.NewSuit
	}
	return nil
}

type TeamSuitNewSuitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinIds []int32 `protobuf:"varint,1,rep,packed,name=skin_ids,json=skinIds,proto3" json:"skin_ids,omitempty"`
	Id      int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Imgurl  string  `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name    string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TeamSuitNewSuitInfo) Reset() {
	*x = TeamSuitNewSuitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuitNewSuitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuitNewSuitInfo) ProtoMessage() {}

func (x *TeamSuitNewSuitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuitNewSuitInfo.ProtoReflect.Descriptor instead.
func (*TeamSuitNewSuitInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{12}
}

func (x *TeamSuitNewSuitInfo) GetSkinIds() []int32 {
	if x != nil {
		return x.SkinIds
	}
	return nil
}

func (x *TeamSuitNewSuitInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamSuitNewSuitInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *TeamSuitNewSuitInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TeamKillConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstBloodSoundEffect int32    `protobuf:"varint,1,opt,name=first_blood_sound_effect,json=firstBloodSoundEffect,proto3" json:"first_blood_sound_effect,omitempty"`
	ClanPointRule         string   `protobuf:"bytes,2,opt,name=clan_point_rule,json=clanPointRule,proto3" json:"clan_point_rule,omitempty"`
	IntroUrls             []string `protobuf:"bytes,3,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	IntroUrlsIpad         []string `protobuf:"bytes,4,rep,name=intro_urls_ipad,json=introUrlsIpad,proto3" json:"intro_urls_ipad,omitempty"`
	TopRewardDesc         string   `protobuf:"bytes,5,opt,name=top_reward_desc,json=topRewardDesc,proto3" json:"top_reward_desc,omitempty"`
	TopIntro              string   `protobuf:"bytes,6,opt,name=top_intro,json=topIntro,proto3" json:"top_intro,omitempty"`
	TopFirstIntro         string   `protobuf:"bytes,7,opt,name=top_first_intro,json=topFirstIntro,proto3" json:"top_first_intro,omitempty"`
	UseSeasonScore        int32    `protobuf:"varint,8,opt,name=use_season_score,json=useSeasonScore,proto3" json:"use_season_score,omitempty"`
}

func (x *TeamKillConfig) Reset() {
	*x = TeamKillConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamKillConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamKillConfig) ProtoMessage() {}

func (x *TeamKillConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamKillConfig.ProtoReflect.Descriptor instead.
func (*TeamKillConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{13}
}

func (x *TeamKillConfig) GetFirstBloodSoundEffect() int32 {
	if x != nil {
		return x.FirstBloodSoundEffect
	}
	return 0
}

func (x *TeamKillConfig) GetClanPointRule() string {
	if x != nil {
		return x.ClanPointRule
	}
	return ""
}

func (x *TeamKillConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *TeamKillConfig) GetIntroUrlsIpad() []string {
	if x != nil {
		return x.IntroUrlsIpad
	}
	return nil
}

func (x *TeamKillConfig) GetTopRewardDesc() string {
	if x != nil {
		return x.TopRewardDesc
	}
	return ""
}

func (x *TeamKillConfig) GetTopIntro() string {
	if x != nil {
		return x.TopIntro
	}
	return ""
}

func (x *TeamKillConfig) GetTopFirstIntro() string {
	if x != nil {
		return x.TopFirstIntro
	}
	return ""
}

func (x *TeamKillConfig) GetUseSeasonScore() int32 {
	if x != nil {
		return x.UseSeasonScore
	}
	return 0
}

type TeamMeleeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamMeleeRule string   `protobuf:"bytes,1,opt,name=team_melee_rule,json=teamMeleeRule,proto3" json:"team_melee_rule,omitempty"`
	GameRule      string   `protobuf:"bytes,2,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`
	ClanPointRule string   `protobuf:"bytes,3,opt,name=clan_point_rule,json=clanPointRule,proto3" json:"clan_point_rule,omitempty"`
	IntroUrls     []string `protobuf:"bytes,4,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	ShowFeedback  int32    `protobuf:"varint,5,opt,name=show_feedback,json=showFeedback,proto3" json:"show_feedback,omitempty"`
	FeedbackUrl   string   `protobuf:"bytes,6,opt,name=feedback_url,json=feedbackUrl,proto3" json:"feedback_url,omitempty"`
	ShowGradeInfo int32    `protobuf:"varint,7,opt,name=show_grade_info,json=showGradeInfo,proto3" json:"show_grade_info,omitempty"`
}

func (x *TeamMeleeConfig) Reset() {
	*x = TeamMeleeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMeleeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMeleeConfig) ProtoMessage() {}

func (x *TeamMeleeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMeleeConfig.ProtoReflect.Descriptor instead.
func (*TeamMeleeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{14}
}

func (x *TeamMeleeConfig) GetTeamMeleeRule() string {
	if x != nil {
		return x.TeamMeleeRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetGameRule() string {
	if x != nil {
		return x.GameRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetClanPointRule() string {
	if x != nil {
		return x.ClanPointRule
	}
	return ""
}

func (x *TeamMeleeConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *TeamMeleeConfig) GetShowFeedback() int32 {
	if x != nil {
		return x.ShowFeedback
	}
	return 0
}

func (x *TeamMeleeConfig) GetFeedbackUrl() string {
	if x != nil {
		return x.FeedbackUrl
	}
	return ""
}

func (x *TeamMeleeConfig) GetShowGradeInfo() int32 {
	if x != nil {
		return x.ShowGradeInfo
	}
	return 0
}

type QualifyingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntroUrls       []string `protobuf:"bytes,1,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
	IntroUrlsV2     []string `protobuf:"bytes,2,rep,name=intro_urls_v2,json=introUrlsV2,proto3" json:"intro_urls_v2,omitempty"`
	IntroUrlsIpad   []string `protobuf:"bytes,3,rep,name=intro_urls_ipad,json=introUrlsIpad,proto3" json:"intro_urls_ipad,omitempty"`
	IntroUrlsIpadV2 []string `protobuf:"bytes,4,rep,name=intro_urls_ipad_v2,json=introUrlsIpadV2,proto3" json:"intro_urls_ipad_v2,omitempty"`
	UnlockTip       string   `protobuf:"bytes,5,opt,name=unlock_tip,json=unlockTip,proto3" json:"unlock_tip,omitempty"`     // 解锁提示"无尽模式达到***分解锁"
	GameRule        string   `protobuf:"bytes,6,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`        // 结算页点赞说明
	ForceGuide      int32    `protobuf:"varint,7,opt,name=force_guide,json=forceGuide,proto3" json:"force_guide,omitempty"` //1有引导 // 对于未玩过团战的玩家,无尽模式以高于一定分数的成绩结束后是否出现强制团战引导
	PrettyPage      int32    `protobuf:"varint,8,opt,name=pretty_page,json=prettyPage,proto3" json:"pretty_page,omitempty"`
	BannerUrl       string   `protobuf:"bytes,9,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	BannerLink      string   `protobuf:"bytes,10,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	UseKcpV2        int32    `protobuf:"varint,11,opt,name=use_kcp_v2,json=useKcpV2,proto3" json:"use_kcp_v2,omitempty"`
	UseNettyV2      int32    `protobuf:"varint,12,opt,name=use_netty_v2,json=useNettyV2,proto3" json:"use_netty_v2,omitempty"`
	UseNetty        int32    `protobuf:"varint,13,opt,name=use_netty,json=useNetty,proto3" json:"use_netty,omitempty"`
	NetworkSurvey   int32    `protobuf:"varint,14,opt,name=network_survey,json=networkSurvey,proto3" json:"network_survey,omitempty"`
	UseRenderOffset int32    `protobuf:"varint,15,opt,name=use_render_offset,json=useRenderOffset,proto3" json:"use_render_offset,omitempty"`
	NetworkSurveyV2 int32    `protobuf:"varint,16,opt,name=network_survey_v2,json=networkSurveyV2,proto3" json:"network_survey_v2,omitempty"`
	IconLink        string   `protobuf:"bytes,17,opt,name=icon_link,json=iconLink,proto3" json:"icon_link,omitempty"`
	IconUrl         string   `protobuf:"bytes,18,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	UseKcp          int32    `protobuf:"varint,19,opt,name=use_kcp,json=useKcp,proto3" json:"use_kcp,omitempty"`
}

func (x *QualifyingConfig) Reset() {
	*x = QualifyingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingConfig) ProtoMessage() {}

func (x *QualifyingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingConfig.ProtoReflect.Descriptor instead.
func (*QualifyingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{15}
}

func (x *QualifyingConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsV2() []string {
	if x != nil {
		return x.IntroUrlsV2
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsIpad() []string {
	if x != nil {
		return x.IntroUrlsIpad
	}
	return nil
}

func (x *QualifyingConfig) GetIntroUrlsIpadV2() []string {
	if x != nil {
		return x.IntroUrlsIpadV2
	}
	return nil
}

func (x *QualifyingConfig) GetUnlockTip() string {
	if x != nil {
		return x.UnlockTip
	}
	return ""
}

func (x *QualifyingConfig) GetGameRule() string {
	if x != nil {
		return x.GameRule
	}
	return ""
}

func (x *QualifyingConfig) GetForceGuide() int32 {
	if x != nil {
		return x.ForceGuide
	}
	return 0
}

func (x *QualifyingConfig) GetPrettyPage() int32 {
	if x != nil {
		return x.PrettyPage
	}
	return 0
}

func (x *QualifyingConfig) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *QualifyingConfig) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *QualifyingConfig) GetUseKcpV2() int32 {
	if x != nil {
		return x.UseKcpV2
	}
	return 0
}

func (x *QualifyingConfig) GetUseNettyV2() int32 {
	if x != nil {
		return x.UseNettyV2
	}
	return 0
}

func (x *QualifyingConfig) GetUseNetty() int32 {
	if x != nil {
		return x.UseNetty
	}
	return 0
}

func (x *QualifyingConfig) GetNetworkSurvey() int32 {
	if x != nil {
		return x.NetworkSurvey
	}
	return 0
}

func (x *QualifyingConfig) GetUseRenderOffset() int32 {
	if x != nil {
		return x.UseRenderOffset
	}
	return 0
}

func (x *QualifyingConfig) GetNetworkSurveyV2() int32 {
	if x != nil {
		return x.NetworkSurveyV2
	}
	return 0
}

func (x *QualifyingConfig) GetIconLink() string {
	if x != nil {
		return x.IconLink
	}
	return ""
}

func (x *QualifyingConfig) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *QualifyingConfig) GetUseKcp() int32 {
	if x != nil {
		return x.UseKcp
	}
	return 0
}

type RaceNormalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannerUrl  string   `protobuf:"bytes,1,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	BannerLink string   `protobuf:"bytes,2,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	IntroUrls  []string `protobuf:"bytes,3,rep,name=intro_urls,json=introUrls,proto3" json:"intro_urls,omitempty"`
}

func (x *RaceNormalConfig) Reset() {
	*x = RaceNormalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceNormalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceNormalConfig) ProtoMessage() {}

func (x *RaceNormalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceNormalConfig.ProtoReflect.Descriptor instead.
func (*RaceNormalConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{16}
}

func (x *RaceNormalConfig) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *RaceNormalConfig) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *RaceNormalConfig) GetIntroUrls() []string {
	if x != nil {
		return x.IntroUrls
	}
	return nil
}

type TeamKillProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceList []*CPriceInfo          `protobuf:"bytes,1,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	PropList  []*config.RewardConfig `protobuf:"bytes,2,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
	GameFree  int32                  `protobuf:"varint,3,opt,name=game_free,json=gameFree,proto3" json:"game_free,omitempty"`
	ShowIcon  int32                  `protobuf:"varint,4,opt,name=show_icon,json=showIcon,proto3" json:"show_icon,omitempty"`
}

func (x *TeamKillProp) Reset() {
	*x = TeamKillProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamKillProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamKillProp) ProtoMessage() {}

func (x *TeamKillProp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamKillProp.ProtoReflect.Descriptor instead.
func (*TeamKillProp) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{17}
}

func (x *TeamKillProp) GetPriceList() []*CPriceInfo {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *TeamKillProp) GetPropList() []*config.RewardConfig {
	if x != nil {
		return x.PropList
	}
	return nil
}

func (x *TeamKillProp) GetGameFree() int32 {
	if x != nil {
		return x.GameFree
	}
	return 0
}

func (x *TeamKillProp) GetShowIcon() int32 {
	if x != nil {
		return x.ShowIcon
	}
	return 0
}

// === clan_config begin =======================================
type ClanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleDesc               *RuleDesc                 `protobuf:"bytes,1,opt,name=rule_desc,json=ruleDesc,proto3" json:"rule_desc,omitempty"` // 战队赛增加活跃点规则
	RaceTimeConfig         []*RaceTimeConfig         `protobuf:"bytes,2,rep,name=race_time_config,json=raceTimeConfig,proto3" json:"race_time_config,omitempty"`
	ClanRaceReward         map[int32]*ClanRaceReward `protobuf:"bytes,3,rep,name=clan_race_reward,json=clanRaceReward,proto3" json:"clan_race_reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LevelConfig            []*ClanLevelInfo          `protobuf:"bytes,4,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty"`
	ClanRewardTips         string                    `protobuf:"bytes,5,opt,name=clan_reward_tips,json=clanRewardTips,proto3" json:"clan_reward_tips,omitempty"`
	QrcodeFormat           string                    `protobuf:"bytes,6,opt,name=qrcode_format,json=qrcodeFormat,proto3" json:"qrcode_format,omitempty"`
	UnlockStar             int32                     `protobuf:"varint,7,opt,name=unlock_star,json=unlockStar,proto3" json:"unlock_star,omitempty"`
	RewardPartition        []int32                   `protobuf:"varint,8,rep,packed,name=reward_partition,json=rewardPartition,proto3" json:"reward_partition,omitempty"`                        // 这是老的，结算的时候用，[0]为高，[1]为中，[2]为低
	RewardExplainPartition []int32                   `protobuf:"varint,9,rep,packed,name=reward_explain_partition,json=rewardExplainPartition,proto3" json:"reward_explain_partition,omitempty"` // 这是新的，预览的时候用，[0]为高，[1]为中，[2]为低
	PermissionImgurl       string                    `protobuf:"bytes,10,opt,name=permission_imgurl,json=permissionImgurl,proto3" json:"permission_imgurl,omitempty"`
	AddCupRule             string                    `protobuf:"bytes,11,opt,name=add_cup_rule,json=addCupRule,proto3" json:"add_cup_rule,omitempty"`
	TeamAddCupRule         string                    `protobuf:"bytes,12,opt,name=team_add_cup_rule,json=teamAddCupRule,proto3" json:"team_add_cup_rule,omitempty"`
	CreateClanCostDiamond  int32                     `protobuf:"varint,13,opt,name=create_clan_cost_diamond,json=createClanCostDiamond,proto3" json:"create_clan_cost_diamond,omitempty"`
	SeasonCupUrl           string                    `protobuf:"bytes,14,opt,name=season_cup_url,json=seasonCupUrl,proto3" json:"season_cup_url,omitempty"`
	RewardWeb              string                    `protobuf:"bytes,15,opt,name=reward_web,json=rewardWeb,proto3" json:"reward_web,omitempty"`
	RewardConfig           []*NewClanRewardItem      `protobuf:"bytes,16,rep,name=reward_config,json=rewardConfig,proto3" json:"reward_config,omitempty"`                        // 这是老的，结算的时候用，服务器返回从大到小的顺序，客户端从小到大展示
	RewardExplainConfig    []*NewClanRewardItem      `protobuf:"bytes,17,rep,name=reward_explain_config,json=rewardExplainConfig,proto3" json:"reward_explain_config,omitempty"` // 这是新的，预览的时候用，服务器返回从大到小的顺序，客户端从小到大展示
	DescUrlV2              string                    `protobuf:"bytes,18,opt,name=desc_url_v2,json=descUrlV2,proto3" json:"desc_url_v2,omitempty"`
}

func (x *ClanConfig) Reset() {
	*x = ClanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanConfig) ProtoMessage() {}

func (x *ClanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanConfig.ProtoReflect.Descriptor instead.
func (*ClanConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{18}
}

func (x *ClanConfig) GetRuleDesc() *RuleDesc {
	if x != nil {
		return x.RuleDesc
	}
	return nil
}

func (x *ClanConfig) GetRaceTimeConfig() []*RaceTimeConfig {
	if x != nil {
		return x.RaceTimeConfig
	}
	return nil
}

func (x *ClanConfig) GetClanRaceReward() map[int32]*ClanRaceReward {
	if x != nil {
		return x.ClanRaceReward
	}
	return nil
}

func (x *ClanConfig) GetLevelConfig() []*ClanLevelInfo {
	if x != nil {
		return x.LevelConfig
	}
	return nil
}

func (x *ClanConfig) GetClanRewardTips() string {
	if x != nil {
		return x.ClanRewardTips
	}
	return ""
}

func (x *ClanConfig) GetQrcodeFormat() string {
	if x != nil {
		return x.QrcodeFormat
	}
	return ""
}

func (x *ClanConfig) GetUnlockStar() int32 {
	if x != nil {
		return x.UnlockStar
	}
	return 0
}

func (x *ClanConfig) GetRewardPartition() []int32 {
	if x != nil {
		return x.RewardPartition
	}
	return nil
}

func (x *ClanConfig) GetRewardExplainPartition() []int32 {
	if x != nil {
		return x.RewardExplainPartition
	}
	return nil
}

func (x *ClanConfig) GetPermissionImgurl() string {
	if x != nil {
		return x.PermissionImgurl
	}
	return ""
}

func (x *ClanConfig) GetAddCupRule() string {
	if x != nil {
		return x.AddCupRule
	}
	return ""
}

func (x *ClanConfig) GetTeamAddCupRule() string {
	if x != nil {
		return x.TeamAddCupRule
	}
	return ""
}

func (x *ClanConfig) GetCreateClanCostDiamond() int32 {
	if x != nil {
		return x.CreateClanCostDiamond
	}
	return 0
}

func (x *ClanConfig) GetSeasonCupUrl() string {
	if x != nil {
		return x.SeasonCupUrl
	}
	return ""
}

func (x *ClanConfig) GetRewardWeb() string {
	if x != nil {
		return x.RewardWeb
	}
	return ""
}

func (x *ClanConfig) GetRewardConfig() []*NewClanRewardItem {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

func (x *ClanConfig) GetRewardExplainConfig() []*NewClanRewardItem {
	if x != nil {
		return x.RewardExplainConfig
	}
	return nil
}

func (x *ClanConfig) GetDescUrlV2() string {
	if x != nil {
		return x.DescUrlV2
	}
	return ""
}

type RuleDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamAddCupRule      string                 `protobuf:"bytes,1,opt,name=team_add_cup_rule,json=teamAddCupRule,proto3" json:"team_add_cup_rule,omitempty"`              //战队赛增加活跃点规则
	AddCupRule          string                 `protobuf:"bytes,2,opt,name=add_cup_rule,json=addCupRule,proto3" json:"add_cup_rule,omitempty"`                            //团战增加活跃点规则
	FormalMemberCup     int32                  `protobuf:"varint,3,opt,name=formal_member_cup,json=formalMemberCup,proto3" json:"formal_member_cup,omitempty"`            //候补队员转正提示
	LevelExplainUrl     string                 `protobuf:"bytes,4,opt,name=level_explain_url,json=levelExplainUrl,proto3" json:"level_explain_url,omitempty"`             //战队等级介绍 url
	ActivePointAddition []*ActivePointAddition `protobuf:"bytes,5,rep,name=active_point_addition,json=activePointAddition,proto3" json:"active_point_addition,omitempty"` //排位赛战队成员组队加成
	RaceCupRate         int32                  `protobuf:"varint,6,opt,name=race_cup_rate,json=raceCupRate,proto3" json:"race_cup_rate,omitempty"`                        //战队赛倍数
}

func (x *RuleDesc) Reset() {
	*x = RuleDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDesc) ProtoMessage() {}

func (x *RuleDesc) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDesc.ProtoReflect.Descriptor instead.
func (*RuleDesc) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{19}
}

func (x *RuleDesc) GetTeamAddCupRule() string {
	if x != nil {
		return x.TeamAddCupRule
	}
	return ""
}

func (x *RuleDesc) GetAddCupRule() string {
	if x != nil {
		return x.AddCupRule
	}
	return ""
}

func (x *RuleDesc) GetFormalMemberCup() int32 {
	if x != nil {
		return x.FormalMemberCup
	}
	return 0
}

func (x *RuleDesc) GetLevelExplainUrl() string {
	if x != nil {
		return x.LevelExplainUrl
	}
	return ""
}

func (x *RuleDesc) GetActivePointAddition() []*ActivePointAddition {
	if x != nil {
		return x.ActivePointAddition
	}
	return nil
}

func (x *RuleDesc) GetRaceCupRate() int32 {
	if x != nil {
		return x.RaceCupRate
	}
	return 0
}

type ActivePointAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member int32  `protobuf:"varint,1,opt,name=member,proto3" json:"member,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ActivePointAddition) Reset() {
	*x = ActivePointAddition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePointAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePointAddition) ProtoMessage() {}

func (x *ActivePointAddition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePointAddition.ProtoReflect.Descriptor instead.
func (*ActivePointAddition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{20}
}

func (x *ActivePointAddition) GetMember() int32 {
	if x != nil {
		return x.Member
	}
	return 0
}

func (x *ActivePointAddition) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RaceTimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeekDay   int32  `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`      // 星期日为7
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 格式24:00:00
	EndTime   string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 格式24:00:00
}

func (x *RaceTimeConfig) Reset() {
	*x = RaceTimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceTimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceTimeConfig) ProtoMessage() {}

func (x *RaceTimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceTimeConfig.ProtoReflect.Descriptor instead.
func (*RaceTimeConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{21}
}

func (x *RaceTimeConfig) GetWeekDay() int32 {
	if x != nil {
		return x.WeekDay
	}
	return 0
}

func (x *RaceTimeConfig) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *RaceTimeConfig) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type ClanRaceReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value    int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Desc     string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Progress string `protobuf:"bytes,4,opt,name=progress,proto3" json:"progress,omitempty"`
	State    int32  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ClanRaceReward) Reset() {
	*x = ClanRaceReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanRaceReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanRaceReward) ProtoMessage() {}

func (x *ClanRaceReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanRaceReward.ProtoReflect.Descriptor instead.
func (*ClanRaceReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{22}
}

func (x *ClanRaceReward) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ClanRaceReward) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ClanRaceReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ClanRaceReward) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *ClanRaceReward) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type ClanLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberNum int32  `protobuf:"varint,1,opt,name=member_num,json=memberNum,proto3" json:"member_num,omitempty"`
	CupStart  int32  `protobuf:"varint,2,opt,name=cup_start,json=cupStart,proto3" json:"cup_start,omitempty"`
	Level     int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	IconUrl   string `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	EliteNum  int32  `protobuf:"varint,6,opt,name=elite_num,json=eliteNum,proto3" json:"elite_num,omitempty"`
}

func (x *ClanLevelInfo) Reset() {
	*x = ClanLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanLevelInfo) ProtoMessage() {}

func (x *ClanLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanLevelInfo.ProtoReflect.Descriptor instead.
func (*ClanLevelInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{23}
}

func (x *ClanLevelInfo) GetMemberNum() int32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *ClanLevelInfo) GetCupStart() int32 {
	if x != nil {
		return x.CupStart
	}
	return 0
}

func (x *ClanLevelInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ClanLevelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClanLevelInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *ClanLevelInfo) GetEliteNum() int32 {
	if x != nil {
		return x.EliteNum
	}
	return 0
}

type NewClanRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // 只代表id，不代表等级的高低
	BadgeImgurl  string                 `protobuf:"bytes,2,opt,name=badge_imgurl,json=badgeImgurl,proto3" json:"badge_imgurl,omitempty"`
	Grade        string                 `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	BorderImgurl string                 `protobuf:"bytes,4,opt,name=border_imgurl,json=borderImgurl,proto3" json:"border_imgurl,omitempty"`
	Rank         int32                  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	Diamond      int32                  `protobuf:"varint,6,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Reward       []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward,proto3" json:"reward,omitempty"`
	CupStart     int32                  `protobuf:"varint,8,opt,name=cup_start,json=cupStart,proto3" json:"cup_start,omitempty"`
	RewardId     int32                  `protobuf:"varint,9,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// 下一个不同 grade 的 rank 位置
	NextRank int32 `protobuf:"varint,10,opt,name=nextRank,proto3" json:"nextRank,omitempty"`
	Degree   int32 `protobuf:"varint,11,opt,name=degree,proto3" json:"degree,omitempty"` // 依据服务器返回来的等级列表位置，小的一定等级低，最低等级为0；0,1,2,3...n-1 中间没有空位
}

func (x *NewClanRewardItem) Reset() {
	*x = NewClanRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClanRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClanRewardItem) ProtoMessage() {}

func (x *NewClanRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClanRewardItem.ProtoReflect.Descriptor instead.
func (*NewClanRewardItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{24}
}

func (x *NewClanRewardItem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NewClanRewardItem) GetBadgeImgurl() string {
	if x != nil {
		return x.BadgeImgurl
	}
	return ""
}

func (x *NewClanRewardItem) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *NewClanRewardItem) GetBorderImgurl() string {
	if x != nil {
		return x.BorderImgurl
	}
	return ""
}

func (x *NewClanRewardItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *NewClanRewardItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *NewClanRewardItem) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *NewClanRewardItem) GetCupStart() int32 {
	if x != nil {
		return x.CupStart
	}
	return 0
}

func (x *NewClanRewardItem) GetRewardId() int32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *NewClanRewardItem) GetNextRank() int32 {
	if x != nil {
		return x.NextRank
	}
	return 0
}

func (x *NewClanRewardItem) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

// === rank_config begin ======================================
type RankConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime          int64         `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64         `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SeasonName         string        `protobuf:"bytes,3,opt,name=season_name,json=seasonName,proto3" json:"season_name,omitempty"`
	SeasonIntroduceUrl string        `protobuf:"bytes,4,opt,name=season_introduce_url,json=seasonIntroduceUrl,proto3" json:"season_introduce_url,omitempty"`
	Title              string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Imgurl             string        `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Height             int32         `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Width              int32         `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	SeasonId           int32         `protobuf:"varint,9,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	SkinId             int32         `protobuf:"varint,10,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	PrimeKingRange     int32         `protobuf:"varint,11,opt,name=prime_king_range,json=primeKingRange,proto3" json:"prime_king_range,omitempty"` //最强王者数目
	PrimeTopUrls       []string      `protobuf:"bytes,12,rep,name=prime_top_urls,json=primeTopUrls,proto3" json:"prime_top_urls,omitempty"`
	Level              []*RankLevel  `protobuf:"bytes,13,rep,name=level,proto3" json:"level,omitempty"`
	RankReward         []*RankReward `protobuf:"bytes,14,rep,name=rank_reward,json=rankReward,proto3" json:"rank_reward,omitempty"`
	PrimeKingRangeText string        `protobuf:"bytes,15,opt,name=prime_king_range_text,json=primeKingRangeText,proto3" json:"prime_king_range_text,omitempty"`
}

func (x *RankConfig) Reset() {
	*x = RankConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankConfig) ProtoMessage() {}

func (x *RankConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankConfig.ProtoReflect.Descriptor instead.
func (*RankConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{25}
}

func (x *RankConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RankConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RankConfig) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *RankConfig) GetSeasonIntroduceUrl() string {
	if x != nil {
		return x.SeasonIntroduceUrl
	}
	return ""
}

func (x *RankConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RankConfig) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RankConfig) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RankConfig) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RankConfig) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *RankConfig) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RankConfig) GetPrimeKingRange() int32 {
	if x != nil {
		return x.PrimeKingRange
	}
	return 0
}

func (x *RankConfig) GetPrimeTopUrls() []string {
	if x != nil {
		return x.PrimeTopUrls
	}
	return nil
}

func (x *RankConfig) GetLevel() []*RankLevel {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *RankConfig) GetRankReward() []*RankReward {
	if x != nil {
		return x.RankReward
	}
	return nil
}

func (x *RankConfig) GetPrimeKingRangeText() string {
	if x != nil {
		return x.PrimeKingRangeText
	}
	return ""
}

type RankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "star_range": [0, 3],
	StarRange []int32 `protobuf:"varint,1,rep,packed,name=star_range,json=starRange,proto3" json:"star_range,omitempty"`
	// "reward_list": [通用奖励数组]
	RewardList []*config.RewardConfig `protobuf:"bytes,2,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *RankReward) Reset() {
	*x = RankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankReward) ProtoMessage() {}

func (x *RankReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankReward.ProtoReflect.Descriptor instead.
func (*RankReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{26}
}

func (x *RankReward) GetStarRange() []int32 {
	if x != nil {
		return x.StarRange
	}
	return nil
}

func (x *RankReward) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type RankLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarStartNum int32   `protobuf:"varint,1,opt,name=star_start_num,json=starStartNum,proto3" json:"star_start_num,omitempty"`
	Rule         []int32 `protobuf:"varint,2,rep,packed,name=rule,proto3" json:"rule,omitempty"`
	StarEndNum   int32   `protobuf:"varint,3,opt,name=star_end_num,json=starEndNum,proto3" json:"star_end_num,omitempty"`
	Url          string  `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Name         string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Mvp          int32   `protobuf:"varint,6,opt,name=mvp,proto3" json:"mvp,omitempty"`
	SpriteName   string  `protobuf:"bytes,7,opt,name=sprite_name,json=spriteName,proto3" json:"sprite_name,omitempty"`
}

func (x *RankLevel) Reset() {
	*x = RankLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankLevel) ProtoMessage() {}

func (x *RankLevel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankLevel.ProtoReflect.Descriptor instead.
func (*RankLevel) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{27}
}

func (x *RankLevel) GetStarStartNum() int32 {
	if x != nil {
		return x.StarStartNum
	}
	return 0
}

func (x *RankLevel) GetRule() []int32 {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *RankLevel) GetStarEndNum() int32 {
	if x != nil {
		return x.StarEndNum
	}
	return 0
}

func (x *RankLevel) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RankLevel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RankLevel) GetMvp() int32 {
	if x != nil {
		return x.Mvp
	}
	return 0
}

func (x *RankLevel) GetSpriteName() string {
	if x != nil {
		return x.SpriteName
	}
	return ""
}

type SeasonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime          int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SeasonName         string `protobuf:"bytes,3,opt,name=season_name,json=seasonName,proto3" json:"season_name,omitempty"`
	SeasonIntroduceUrl string `protobuf:"bytes,4,opt,name=season_introduce_url,json=seasonIntroduceUrl,proto3" json:"season_introduce_url,omitempty"`
	Title              string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Imgurl             string `protobuf:"bytes,6,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Height             int32  `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Width              int32  `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	SeasonId           int32  `protobuf:"varint,9,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	SkinId             int32  `protobuf:"varint,10,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
}

func (x *SeasonInfo) Reset() {
	*x = SeasonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonInfo) ProtoMessage() {}

func (x *SeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonInfo.ProtoReflect.Descriptor instead.
func (*SeasonInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{28}
}

func (x *SeasonInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeasonInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SeasonInfo) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *SeasonInfo) GetSeasonIntroduceUrl() string {
	if x != nil {
		return x.SeasonIntroduceUrl
	}
	return ""
}

func (x *SeasonInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SeasonInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *SeasonInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SeasonInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SeasonInfo) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

// === share_config begin ======================================
type ShareConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareUrl           string            `protobuf:"bytes,1,opt,name=share_url,json=shareUrl,proto3" json:"share_url,omitempty"`
	ShareTitle         string            `protobuf:"bytes,2,opt,name=share_title,json=shareTitle,proto3" json:"share_title,omitempty"`
	ShareText          string            `protobuf:"bytes,3,opt,name=share_text,json=shareText,proto3" json:"share_text,omitempty"`
	MyQrUrl            string            `protobuf:"bytes,4,opt,name=my_qr_url,json=myQrUrl,proto3" json:"my_qr_url,omitempty"`
	ChannelConfig      *ChannelConfig    `protobuf:"bytes,5,opt,name=channel_config,json=channelConfig,proto3" json:"channel_config,omitempty"`
	GameInvite         *GameInvite       `protobuf:"bytes,6,opt,name=game_invite,json=gameInvite,proto3" json:"game_invite,omitempty"`
	VideoShareIcon     []*VideoShareIcon `protobuf:"bytes,7,rep,name=video_share_icon,json=videoShareIcon,proto3" json:"video_share_icon,omitempty"`
	ClipboardCheck     []*ClipBoardCheck `protobuf:"bytes,8,rep,name=clipboard_check,json=clipboardCheck,proto3" json:"clipboard_check,omitempty"`
	ShareTag           *ShareTag         `protobuf:"bytes,9,opt,name=share_tag,json=shareTag,proto3" json:"share_tag,omitempty"`
	NewWxUniversalLink int32             `protobuf:"varint,10,opt,name=new_wx_universal_link,json=newWxUniversalLink,proto3" json:"new_wx_universal_link,omitempty"`
}

func (x *ShareConfig) Reset() {
	*x = ShareConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareConfig) ProtoMessage() {}

func (x *ShareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareConfig.ProtoReflect.Descriptor instead.
func (*ShareConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{29}
}

func (x *ShareConfig) GetShareUrl() string {
	if x != nil {
		return x.ShareUrl
	}
	return ""
}

func (x *ShareConfig) GetShareTitle() string {
	if x != nil {
		return x.ShareTitle
	}
	return ""
}

func (x *ShareConfig) GetShareText() string {
	if x != nil {
		return x.ShareText
	}
	return ""
}

func (x *ShareConfig) GetMyQrUrl() string {
	if x != nil {
		return x.MyQrUrl
	}
	return ""
}

func (x *ShareConfig) GetChannelConfig() *ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

func (x *ShareConfig) GetGameInvite() *GameInvite {
	if x != nil {
		return x.GameInvite
	}
	return nil
}

func (x *ShareConfig) GetVideoShareIcon() []*VideoShareIcon {
	if x != nil {
		return x.VideoShareIcon
	}
	return nil
}

func (x *ShareConfig) GetClipboardCheck() []*ClipBoardCheck {
	if x != nil {
		return x.ClipboardCheck
	}
	return nil
}

func (x *ShareConfig) GetShareTag() *ShareTag {
	if x != nil {
		return x.ShareTag
	}
	return nil
}

func (x *ShareConfig) GetNewWxUniversalLink() int32 {
	if x != nil {
		return x.NewWxUniversalLink
	}
	return 0
}

type ShareTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kuaishou string `protobuf:"bytes,1,opt,name=kuaishou,proto3" json:"kuaishou,omitempty"`
	Douyin   string `protobuf:"bytes,2,opt,name=douyin,proto3" json:"douyin,omitempty"`
	Weibo    string `protobuf:"bytes,3,opt,name=weibo,proto3" json:"weibo,omitempty"`
}

func (x *ShareTag) Reset() {
	*x = ShareTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareTag) ProtoMessage() {}

func (x *ShareTag) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareTag.ProtoReflect.Descriptor instead.
func (*ShareTag) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{30}
}

func (x *ShareTag) GetKuaishou() string {
	if x != nil {
		return x.Kuaishou
	}
	return ""
}

func (x *ShareTag) GetDouyin() string {
	if x != nil {
		return x.Douyin
	}
	return ""
}

func (x *ShareTag) GetWeibo() string {
	if x != nil {
		return x.Weibo
	}
	return ""
}

type ClipBoardCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Act        string `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty"`
	Reg        string `protobuf:"bytes,4,opt,name=reg,proto3" json:"reg,omitempty"`
}

func (x *ClipBoardCheck) Reset() {
	*x = ClipBoardCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClipBoardCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClipBoardCheck) ProtoMessage() {}

func (x *ClipBoardCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClipBoardCheck.ProtoReflect.Descriptor instead.
func (*ClipBoardCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{31}
}

func (x *ClipBoardCheck) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ClipBoardCheck) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *ClipBoardCheck) GetAct() string {
	if x != nil {
		return x.Act
	}
	return ""
}

func (x *ClipBoardCheck) GetReg() string {
	if x != nil {
		return x.Reg
	}
	return ""
}

type VideoShareIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	StartTime  int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Imgurl     string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Link       string `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *VideoShareIcon) Reset() {
	*x = VideoShareIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoShareIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoShareIcon) ProtoMessage() {}

func (x *VideoShareIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoShareIcon.ProtoReflect.Descriptor instead.
func (*VideoShareIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{32}
}

func (x *VideoShareIcon) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VideoShareIcon) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VideoShareIcon) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *VideoShareIcon) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *VideoShareIcon) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WechatFriend int32 `protobuf:"varint,1,opt,name=wechat_friend,json=wechatFriend,proto3" json:"wechat_friend,omitempty"`
	WechatCircle int32 `protobuf:"varint,2,opt,name=wechat_circle,json=wechatCircle,proto3" json:"wechat_circle,omitempty"`
	QqCircle     int32 `protobuf:"varint,3,opt,name=qq_circle,json=qqCircle,proto3" json:"qq_circle,omitempty"`
	QqFriend     int32 `protobuf:"varint,4,opt,name=qq_friend,json=qqFriend,proto3" json:"qq_friend,omitempty"`
	Weibo        int32 `protobuf:"varint,5,opt,name=weibo,proto3" json:"weibo,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{33}
}

func (x *ChannelConfig) GetWechatFriend() int32 {
	if x != nil {
		return x.WechatFriend
	}
	return 0
}

func (x *ChannelConfig) GetWechatCircle() int32 {
	if x != nil {
		return x.WechatCircle
	}
	return 0
}

func (x *ChannelConfig) GetQqCircle() int32 {
	if x != nil {
		return x.QqCircle
	}
	return 0
}

func (x *ChannelConfig) GetQqFriend() int32 {
	if x != nil {
		return x.QqFriend
	}
	return 0
}

func (x *ChannelConfig) GetWeibo() int32 {
	if x != nil {
		return x.Weibo
	}
	return 0
}

type GameInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XiaomiImg string `protobuf:"bytes,4,opt,name=xiaomi_img,json=xiaomiImg,proto3" json:"xiaomi_img,omitempty"`
}

func (x *GameInvite) Reset() {
	*x = GameInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInvite) ProtoMessage() {}

func (x *GameInvite) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInvite.ProtoReflect.Descriptor instead.
func (*GameInvite) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{34}
}

func (x *GameInvite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GameInvite) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GameInvite) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GameInvite) GetXiaomiImg() string {
	if x != nil {
		return x.XiaomiImg
	}
	return ""
}

// === social_config begin ======================================
type SocialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastIntervalTime  int32                  `protobuf:"varint,1,opt,name=broadcast_interval_time,json=broadcastIntervalTime,proto3" json:"broadcast_interval_time,omitempty"` // 广播刷新时间
	CharmLevel             []*CharmLevelItem      `protobuf:"bytes,2,rep,name=charm_level,json=charmLevel,proto3" json:"charm_level,omitempty"`
	CharmTopConfig         *CharmTopConfig        `protobuf:"bytes,3,opt,name=charm_top_config,json=charmTopConfig,proto3" json:"charm_top_config,omitempty"`
	MarryPoint             int32                  `protobuf:"varint,4,opt,name=marry_point,json=marryPoint,proto3" json:"marry_point,omitempty"`
	MarriageVowHead        string                 `protobuf:"bytes,5,opt,name=marriage_vow_head,json=marriageVowHead,proto3" json:"marriage_vow_head,omitempty"`
	MarriageVowContent     string                 `protobuf:"bytes,6,opt,name=marriage_vow_content,json=marriageVowContent,proto3" json:"marriage_vow_content,omitempty"`
	MarriageVowFoot        string                 `protobuf:"bytes,7,opt,name=marriage_vow_foot,json=marriageVowFoot,proto3" json:"marriage_vow_foot,omitempty"`
	MarryRewardMailTitle   string                 `protobuf:"bytes,8,opt,name=marry_reward_mail_title,json=marryRewardMailTitle,proto3" json:"marry_reward_mail_title,omitempty"`
	MarryRewardMailContent string                 `protobuf:"bytes,9,opt,name=marry_reward_mail_content,json=marryRewardMailContent,proto3" json:"marry_reward_mail_content,omitempty"`
	MarryRewards           []*config.RewardConfig `protobuf:"bytes,10,rep,name=marry_rewards,json=marryRewards,proto3" json:"marry_rewards,omitempty"`
	WorldSpeakIntervalTime int32                  `protobuf:"varint,11,opt,name=world_speak_interval_time,json=worldSpeakIntervalTime,proto3" json:"world_speak_interval_time,omitempty"`
	WorldSpeakMinStar      int32                  `protobuf:"varint,12,opt,name=world_speak_min_star,json=worldSpeakMinStar,proto3" json:"world_speak_min_star,omitempty"`         // 世界发言最低星数
	WorldSpeakMinStarV2    int32                  `protobuf:"varint,13,opt,name=world_speak_min_star_v2,json=worldSpeakMinStarV2,proto3" json:"world_speak_min_star_v2,omitempty"` // 查看世界发言最低星数
	GroupSpeakMinStar      int32                  `protobuf:"varint,14,opt,name=group_speak_min_star,json=groupSpeakMinStar,proto3" json:"group_speak_min_star,omitempty"`
}

func (x *SocialConfig) Reset() {
	*x = SocialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialConfig) ProtoMessage() {}

func (x *SocialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialConfig.ProtoReflect.Descriptor instead.
func (*SocialConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{35}
}

func (x *SocialConfig) GetBroadcastIntervalTime() int32 {
	if x != nil {
		return x.BroadcastIntervalTime
	}
	return 0
}

func (x *SocialConfig) GetCharmLevel() []*CharmLevelItem {
	if x != nil {
		return x.CharmLevel
	}
	return nil
}

func (x *SocialConfig) GetCharmTopConfig() *CharmTopConfig {
	if x != nil {
		return x.CharmTopConfig
	}
	return nil
}

func (x *SocialConfig) GetMarryPoint() int32 {
	if x != nil {
		return x.MarryPoint
	}
	return 0
}

func (x *SocialConfig) GetMarriageVowHead() string {
	if x != nil {
		return x.MarriageVowHead
	}
	return ""
}

func (x *SocialConfig) GetMarriageVowContent() string {
	if x != nil {
		return x.MarriageVowContent
	}
	return ""
}

func (x *SocialConfig) GetMarriageVowFoot() string {
	if x != nil {
		return x.MarriageVowFoot
	}
	return ""
}

func (x *SocialConfig) GetMarryRewardMailTitle() string {
	if x != nil {
		return x.MarryRewardMailTitle
	}
	return ""
}

func (x *SocialConfig) GetMarryRewardMailContent() string {
	if x != nil {
		return x.MarryRewardMailContent
	}
	return ""
}

func (x *SocialConfig) GetMarryRewards() []*config.RewardConfig {
	if x != nil {
		return x.MarryRewards
	}
	return nil
}

func (x *SocialConfig) GetWorldSpeakIntervalTime() int32 {
	if x != nil {
		return x.WorldSpeakIntervalTime
	}
	return 0
}

func (x *SocialConfig) GetWorldSpeakMinStar() int32 {
	if x != nil {
		return x.WorldSpeakMinStar
	}
	return 0
}

func (x *SocialConfig) GetWorldSpeakMinStarV2() int32 {
	if x != nil {
		return x.WorldSpeakMinStarV2
	}
	return 0
}

func (x *SocialConfig) GetGroupSpeakMinStar() int32 {
	if x != nil {
		return x.GroupSpeakMinStar
	}
	return 0
}

type CharmTopConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncreaseDesc string `protobuf:"bytes,1,opt,name=increase_desc,json=increaseDesc,proto3" json:"increase_desc,omitempty"`
	ListCount    int32  `protobuf:"varint,2,opt,name=list_count,json=listCount,proto3" json:"list_count,omitempty"`
	UserShowDay  int32  `protobuf:"varint,3,opt,name=user_show_day,json=userShowDay,proto3" json:"user_show_day,omitempty"`
}

func (x *CharmTopConfig) Reset() {
	*x = CharmTopConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmTopConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmTopConfig) ProtoMessage() {}

func (x *CharmTopConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmTopConfig.ProtoReflect.Descriptor instead.
func (*CharmTopConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{36}
}

func (x *CharmTopConfig) GetIncreaseDesc() string {
	if x != nil {
		return x.IncreaseDesc
	}
	return ""
}

func (x *CharmTopConfig) GetListCount() int32 {
	if x != nil {
		return x.ListCount
	}
	return 0
}

func (x *CharmTopConfig) GetUserShowDay() int32 {
	if x != nil {
		return x.UserShowDay
	}
	return 0
}

type CharmLevelItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmStart int32  `protobuf:"varint,1,opt,name=charm_start,json=charmStart,proto3" json:"charm_start,omitempty"`
	IconUrl    string `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	IconUrlV2  string `protobuf:"bytes,3,opt,name=icon_url_v2,json=iconUrlV2,proto3" json:"icon_url_v2,omitempty"`
	Num        int32  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *CharmLevelItem) Reset() {
	*x = CharmLevelItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmLevelItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmLevelItem) ProtoMessage() {}

func (x *CharmLevelItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmLevelItem.ProtoReflect.Descriptor instead.
func (*CharmLevelItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{37}
}

func (x *CharmLevelItem) GetCharmStart() int32 {
	if x != nil {
		return x.CharmStart
	}
	return 0
}

func (x *CharmLevelItem) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CharmLevelItem) GetIconUrlV2() string {
	if x != nil {
		return x.IconUrlV2
	}
	return ""
}

func (x *CharmLevelItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// === charm_exp_config begin ======================================
type CharmExpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmExpRanks   []*CharmExpRank       `protobuf:"bytes,1,rep,name=charm_exp_ranks,json=charmExpRanks,proto3" json:"charm_exp_ranks,omitempty"`     // 魅力勋章等级配置
	PrivilegeConfig []*CharmPrivilegeItem `protobuf:"bytes,2,rep,name=privilege_config,json=privilegeConfig,proto3" json:"privilege_config,omitempty"` // 特权配置
	RuleUrl         string                `protobuf:"bytes,3,opt,name=rule_url,json=ruleUrl,proto3" json:"rule_url,omitempty"`                         // 规则说明url
	PrivilegeDesc   string                `protobuf:"bytes,4,opt,name=privilege_desc,json=privilegeDesc,proto3" json:"privilege_desc,omitempty"`       // 特权说明
	CharmDetail     string                `protobuf:"bytes,5,opt,name=charm_detail,json=charmDetail,proto3" json:"charm_detail,omitempty"`             // 魅力勋章详情页
}

func (x *CharmExpConfig) Reset() {
	*x = CharmExpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmExpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmExpConfig) ProtoMessage() {}

func (x *CharmExpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmExpConfig.ProtoReflect.Descriptor instead.
func (*CharmExpConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{38}
}

func (x *CharmExpConfig) GetCharmExpRanks() []*CharmExpRank {
	if x != nil {
		return x.CharmExpRanks
	}
	return nil
}

func (x *CharmExpConfig) GetPrivilegeConfig() []*CharmPrivilegeItem {
	if x != nil {
		return x.PrivilegeConfig
	}
	return nil
}

func (x *CharmExpConfig) GetRuleUrl() string {
	if x != nil {
		return x.RuleUrl
	}
	return ""
}

func (x *CharmExpConfig) GetPrivilegeDesc() string {
	if x != nil {
		return x.PrivilegeDesc
	}
	return ""
}

func (x *CharmExpConfig) GetCharmDetail() string {
	if x != nil {
		return x.CharmDetail
	}
	return ""
}

type CharmExpRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        int32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon         string  `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	NeedExp      int32   `protobuf:"varint,4,opt,name=need_exp,json=needExp,proto3" json:"need_exp,omitempty"`
	PrivilegeIds []int32 `protobuf:"varint,5,rep,packed,name=privilege_ids,json=privilegeIds,proto3" json:"privilege_ids,omitempty"`
	TextBgUrl    string  `protobuf:"bytes,6,opt,name=text_bg_url,json=textBgUrl,proto3" json:"text_bg_url,omitempty"` // 首页魅力勋章背景图
	KeepExp      int32   `protobuf:"varint,7,opt,name=keep_exp,json=keepExp,proto3" json:"keep_exp,omitempty"`        // 勋章保留经验值，用于计算勋章升级
}

func (x *CharmExpRank) Reset() {
	*x = CharmExpRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmExpRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmExpRank) ProtoMessage() {}

func (x *CharmExpRank) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmExpRank.ProtoReflect.Descriptor instead.
func (*CharmExpRank) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{39}
}

func (x *CharmExpRank) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharmExpRank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharmExpRank) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CharmExpRank) GetNeedExp() int32 {
	if x != nil {
		return x.NeedExp
	}
	return 0
}

func (x *CharmExpRank) GetPrivilegeIds() []int32 {
	if x != nil {
		return x.PrivilegeIds
	}
	return nil
}

func (x *CharmExpRank) GetTextBgUrl() string {
	if x != nil {
		return x.TextBgUrl
	}
	return ""
}

func (x *CharmExpRank) GetKeepExp() int32 {
	if x != nil {
		return x.KeepExp
	}
	return 0
}

type CharmPrivilegeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl   string `protobuf:"bytes,3,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	MinLevel int32  `protobuf:"varint,4,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	Desc     string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *CharmPrivilegeItem) Reset() {
	*x = CharmPrivilegeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharmPrivilegeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharmPrivilegeItem) ProtoMessage() {}

func (x *CharmPrivilegeItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharmPrivilegeItem.ProtoReflect.Descriptor instead.
func (*CharmPrivilegeItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{40}
}

func (x *CharmPrivilegeItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharmPrivilegeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharmPrivilegeItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *CharmPrivilegeItem) GetMinLevel() int32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *CharmPrivilegeItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// === text_config begin ======================================
type TextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharmStar            string            `protobuf:"bytes,1,opt,name=charm_star,json=charmStar,proto3" json:"charm_star,omitempty"`
	HappycoinTitle       string            `protobuf:"bytes,2,opt,name=happycoin_title,json=happycoinTitle,proto3" json:"happycoin_title,omitempty"`
	CoinDealNotify       string            `protobuf:"bytes,3,opt,name=coin_deal_notify,json=coinDealNotify,proto3" json:"coin_deal_notify,omitempty"`
	ShareTextList        []string          `protobuf:"bytes,4,rep,name=share_text_list,json=shareTextList,proto3" json:"share_text_list,omitempty"`
	QualifyingBetaRule   string            `protobuf:"bytes,5,opt,name=qualifying_beta_rule,json=qualifyingBetaRule,proto3" json:"qualifying_beta_rule,omitempty"`
	GiftRule             string            `protobuf:"bytes,6,opt,name=gift_rule,json=giftRule,proto3" json:"gift_rule,omitempty"`
	EndlessTips          string            `protobuf:"bytes,7,opt,name=endless_tips,json=endlessTips,proto3" json:"endless_tips,omitempty"`
	GiftLikeTextList     *GiftLikeTextList `protobuf:"bytes,8,opt,name=gift_like_text_list,json=giftLikeTextList,proto3" json:"gift_like_text_list,omitempty"`
	QuickPhraseTextList  []*ShortCutConfig `protobuf:"bytes,9,rep,name=quick_phrase_text_list,json=quickPhraseTextList,proto3" json:"quick_phrase_text_list,omitempty"`
	AiAnchorNicknameList []string          `protobuf:"bytes,10,rep,name=ai_anchor_nickname_list,json=aiAnchorNicknameList,proto3" json:"ai_anchor_nickname_list,omitempty"`
	ReportBehaviorList   []*ReportBehavior `protobuf:"bytes,11,rep,name=report_behavior_list,json=reportBehaviorList,proto3" json:"report_behavior_list,omitempty"`
}

func (x *TextConfig) Reset() {
	*x = TextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextConfig) ProtoMessage() {}

func (x *TextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextConfig.ProtoReflect.Descriptor instead.
func (*TextConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{41}
}

func (x *TextConfig) GetCharmStar() string {
	if x != nil {
		return x.CharmStar
	}
	return ""
}

func (x *TextConfig) GetHappycoinTitle() string {
	if x != nil {
		return x.HappycoinTitle
	}
	return ""
}

func (x *TextConfig) GetCoinDealNotify() string {
	if x != nil {
		return x.CoinDealNotify
	}
	return ""
}

func (x *TextConfig) GetShareTextList() []string {
	if x != nil {
		return x.ShareTextList
	}
	return nil
}

func (x *TextConfig) GetQualifyingBetaRule() string {
	if x != nil {
		return x.QualifyingBetaRule
	}
	return ""
}

func (x *TextConfig) GetGiftRule() string {
	if x != nil {
		return x.GiftRule
	}
	return ""
}

func (x *TextConfig) GetEndlessTips() string {
	if x != nil {
		return x.EndlessTips
	}
	return ""
}

func (x *TextConfig) GetGiftLikeTextList() *GiftLikeTextList {
	if x != nil {
		return x.GiftLikeTextList
	}
	return nil
}

func (x *TextConfig) GetQuickPhraseTextList() []*ShortCutConfig {
	if x != nil {
		return x.QuickPhraseTextList
	}
	return nil
}

func (x *TextConfig) GetAiAnchorNicknameList() []string {
	if x != nil {
		return x.AiAnchorNicknameList
	}
	return nil
}

func (x *TextConfig) GetReportBehaviorList() []*ReportBehavior {
	if x != nil {
		return x.ReportBehaviorList
	}
	return nil
}

type GiftLikeTextList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enemy   []string `protobuf:"bytes,1,rep,name=enemy,proto3" json:"enemy,omitempty"`
	Partner []string `protobuf:"bytes,2,rep,name=partner,proto3" json:"partner,omitempty"`
}

func (x *GiftLikeTextList) Reset() {
	*x = GiftLikeTextList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftLikeTextList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftLikeTextList) ProtoMessage() {}

func (x *GiftLikeTextList) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftLikeTextList.ProtoReflect.Descriptor instead.
func (*GiftLikeTextList) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{42}
}

func (x *GiftLikeTextList) GetEnemy() []string {
	if x != nil {
		return x.Enemy
	}
	return nil
}

func (x *GiftLikeTextList) GetPartner() []string {
	if x != nil {
		return x.Partner
	}
	return nil
}

type ShortCutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShortCutConfig) Reset() {
	*x = ShortCutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCutConfig) ProtoMessage() {}

func (x *ShortCutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCutConfig.ProtoReflect.Descriptor instead.
func (*ShortCutConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{43}
}

func (x *ShortCutConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ShortCutConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortCutConfig) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type ReportBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ReportBehavior) Reset() {
	*x = ReportBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBehavior) ProtoMessage() {}

func (x *ReportBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBehavior.ProtoReflect.Descriptor instead.
func (*ReportBehavior) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{44}
}

func (x *ReportBehavior) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReportBehavior) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// === ui_config_v3 start =======================================
type UiConfigV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndlessIconV2        *GameIcon        `protobuf:"bytes,1,opt,name=endless_icon_v2,json=endlessIconV2,proto3" json:"endless_icon_v2,omitempty"`
	QualifyingIconV2     *GameIcon        `protobuf:"bytes,2,opt,name=qualifying_icon_v2,json=qualifyingIconV2,proto3" json:"qualifying_icon_v2,omitempty"`
	LeftCorner           *GameIcon        `protobuf:"bytes,3,opt,name=left_corner,json=leftCorner,proto3" json:"left_corner,omitempty"`
	RightCorner          *GameIcon        `protobuf:"bytes,4,opt,name=right_corner,json=rightCorner,proto3" json:"right_corner,omitempty"`
	MoreGame             []*GameIcon      `protobuf:"bytes,5,rep,name=more_game,json=moreGame,proto3" json:"more_game,omitempty"`
	NewbieCondition      *NewbieCondition `protobuf:"bytes,6,opt,name=newbie_condition,json=newbieCondition,proto3" json:"newbie_condition,omitempty"`
	EndlessHugeIcon      *GameIcon        `protobuf:"bytes,7,opt,name=endless_huge_icon,json=endlessHugeIcon,proto3" json:"endless_huge_icon,omitempty"`
	GameSlideIntervalSec int64            `protobuf:"varint,8,opt,name=game_slide_interval_sec,json=gameSlideIntervalSec,proto3" json:"game_slide_interval_sec,omitempty"`
	GameSlideList        []*GameIcon      `protobuf:"bytes,9,rep,name=game_slide_list,json=gameSlideList,proto3" json:"game_slide_list,omitempty"`
	EndlessIcon          *GameIcon        `protobuf:"bytes,10,opt,name=endless_icon,json=endlessIcon,proto3" json:"endless_icon,omitempty"`
	QualifyingIcon       *GameIcon        `protobuf:"bytes,11,opt,name=qualifying_icon,json=qualifyingIcon,proto3" json:"qualifying_icon,omitempty"`
	HomeBackground       *HomeBackground  `protobuf:"bytes,12,opt,name=home_background,json=homeBackground,proto3" json:"home_background,omitempty"`
	ArIcon               *GameIcon        `protobuf:"bytes,13,opt,name=ar_icon,json=arIcon,proto3" json:"ar_icon,omitempty"`
	PlantIcon            *GameIcon        `protobuf:"bytes,14,opt,name=plant_icon,json=plantIcon,proto3" json:"plant_icon,omitempty"`
	MoreGameBgurl        string           `protobuf:"bytes,15,opt,name=more_game_bgurl,json=moreGameBgurl,proto3" json:"more_game_bgurl,omitempty"`
	FallguysIcon         *GameIcon        `protobuf:"bytes,16,opt,name=fallguys_icon,json=fallguysIcon,proto3" json:"fallguys_icon,omitempty"`
}

func (x *UiConfigV3) Reset() {
	*x = UiConfigV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiConfigV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiConfigV3) ProtoMessage() {}

func (x *UiConfigV3) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiConfigV3.ProtoReflect.Descriptor instead.
func (*UiConfigV3) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{45}
}

func (x *UiConfigV3) GetEndlessIconV2() *GameIcon {
	if x != nil {
		return x.EndlessIconV2
	}
	return nil
}

func (x *UiConfigV3) GetQualifyingIconV2() *GameIcon {
	if x != nil {
		return x.QualifyingIconV2
	}
	return nil
}

func (x *UiConfigV3) GetLeftCorner() *GameIcon {
	if x != nil {
		return x.LeftCorner
	}
	return nil
}

func (x *UiConfigV3) GetRightCorner() *GameIcon {
	if x != nil {
		return x.RightCorner
	}
	return nil
}

func (x *UiConfigV3) GetMoreGame() []*GameIcon {
	if x != nil {
		return x.MoreGame
	}
	return nil
}

func (x *UiConfigV3) GetNewbieCondition() *NewbieCondition {
	if x != nil {
		return x.NewbieCondition
	}
	return nil
}

func (x *UiConfigV3) GetEndlessHugeIcon() *GameIcon {
	if x != nil {
		return x.EndlessHugeIcon
	}
	return nil
}

func (x *UiConfigV3) GetGameSlideIntervalSec() int64 {
	if x != nil {
		return x.GameSlideIntervalSec
	}
	return 0
}

func (x *UiConfigV3) GetGameSlideList() []*GameIcon {
	if x != nil {
		return x.GameSlideList
	}
	return nil
}

func (x *UiConfigV3) GetEndlessIcon() *GameIcon {
	if x != nil {
		return x.EndlessIcon
	}
	return nil
}

func (x *UiConfigV3) GetQualifyingIcon() *GameIcon {
	if x != nil {
		return x.QualifyingIcon
	}
	return nil
}

func (x *UiConfigV3) GetHomeBackground() *HomeBackground {
	if x != nil {
		return x.HomeBackground
	}
	return nil
}

func (x *UiConfigV3) GetArIcon() *GameIcon {
	if x != nil {
		return x.ArIcon
	}
	return nil
}

func (x *UiConfigV3) GetPlantIcon() *GameIcon {
	if x != nil {
		return x.PlantIcon
	}
	return nil
}

func (x *UiConfigV3) GetMoreGameBgurl() string {
	if x != nil {
		return x.MoreGameBgurl
	}
	return ""
}

func (x *UiConfigV3) GetFallguysIcon() *GameIcon {
	if x != nil {
		return x.FallguysIcon
	}
	return nil
}

type GameIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url            string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	LockUrl        string  `protobuf:"bytes,2,opt,name=lock_url,json=lockUrl,proto3" json:"lock_url,omitempty"`
	Link           string  `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Bubble         *Bubble `protobuf:"bytes,4,opt,name=bubble,proto3" json:"bubble,omitempty"`
	SupportVersion string  `protobuf:"bytes,5,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"`
	TextImgurl     string  `protobuf:"bytes,6,opt,name=text_imgurl,json=textImgurl,proto3" json:"text_imgurl,omitempty"` // 文字底图
	AnimUrl        string  `protobuf:"bytes,7,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`          // icon 动效，引导动效
	AnimType       int32   `protobuf:"varint,8,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`      // 动效类型
	VapUrl         string  `protobuf:"bytes,9,opt,name=vap_url,json=vapUrl,proto3" json:"vap_url,omitempty"`
	ReviewHide     int32   `protobuf:"varint,10,opt,name=review_hide,json=reviewHide,proto3" json:"review_hide,omitempty"` // 审核模式是否隐藏
	NewbieHide     int32   `protobuf:"varint,11,opt,name=newbie_hide,json=newbieHide,proto3" json:"newbie_hide,omitempty"` // 对新手是否隐藏，1是，0否
	ModelHide      int32   `protobuf:"varint,12,opt,name=model_hide,json=modelHide,proto3" json:"model_hide,omitempty"`    // 0 全关 1 客户端判断机型
	SizeType       int32   `protobuf:"varint,13,opt,name=size_type,json=sizeType,proto3" json:"size_type,omitempty"`       // 大图0
	GameMode       int32   `protobuf:"varint,14,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	OpenDayStart   string  `protobuf:"bytes,15,opt,name=open_day_start,json=openDayStart,proto3" json:"open_day_start,omitempty"`
	OpenDayEnd     string  `protobuf:"bytes,16,opt,name=open_day_end,json=openDayEnd,proto3" json:"open_day_end,omitempty"`
	StartTime      int64   `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64   `protobuf:"varint,18,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GameIcon) Reset() {
	*x = GameIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameIcon) ProtoMessage() {}

func (x *GameIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameIcon.ProtoReflect.Descriptor instead.
func (*GameIcon) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{46}
}

func (x *GameIcon) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GameIcon) GetLockUrl() string {
	if x != nil {
		return x.LockUrl
	}
	return ""
}

func (x *GameIcon) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *GameIcon) GetBubble() *Bubble {
	if x != nil {
		return x.Bubble
	}
	return nil
}

func (x *GameIcon) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

func (x *GameIcon) GetTextImgurl() string {
	if x != nil {
		return x.TextImgurl
	}
	return ""
}

func (x *GameIcon) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *GameIcon) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *GameIcon) GetVapUrl() string {
	if x != nil {
		return x.VapUrl
	}
	return ""
}

func (x *GameIcon) GetReviewHide() int32 {
	if x != nil {
		return x.ReviewHide
	}
	return 0
}

func (x *GameIcon) GetNewbieHide() int32 {
	if x != nil {
		return x.NewbieHide
	}
	return 0
}

func (x *GameIcon) GetModelHide() int32 {
	if x != nil {
		return x.ModelHide
	}
	return 0
}

func (x *GameIcon) GetSizeType() int32 {
	if x != nil {
		return x.SizeType
	}
	return 0
}

func (x *GameIcon) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *GameIcon) GetOpenDayStart() string {
	if x != nil {
		return x.OpenDayStart
	}
	return ""
}

func (x *GameIcon) GetOpenDayEnd() string {
	if x != nil {
		return x.OpenDayEnd
	}
	return ""
}

func (x *GameIcon) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GameIcon) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type Bubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                                  // 动画/图片链接
	StaySecond int32  `protobuf:"varint,2,opt,name=stay_second,json=staySecond,proto3" json:"stay_second,omitempty"` // 动画展示秒数
	ShowStart  int64  `protobuf:"varint,3,opt,name=show_start,json=showStart,proto3" json:"show_start,omitempty"`
	ShowEnd    int64  `protobuf:"varint,4,opt,name=show_end,json=showEnd,proto3" json:"show_end,omitempty"`
}

func (x *Bubble) Reset() {
	*x = Bubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bubble) ProtoMessage() {}

func (x *Bubble) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bubble.ProtoReflect.Descriptor instead.
func (*Bubble) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{47}
}

func (x *Bubble) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Bubble) GetStaySecond() int32 {
	if x != nil {
		return x.StaySecond
	}
	return 0
}

func (x *Bubble) GetShowStart() int64 {
	if x != nil {
		return x.ShowStart
	}
	return 0
}

func (x *Bubble) GetShowEnd() int64 {
	if x != nil {
		return x.ShowEnd
	}
	return 0
}

type NewbieCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterDay int32 `protobuf:"varint,1,opt,name=register_day,json=registerDay,proto3" json:"register_day,omitempty"`
	SingleLen   int64 `protobuf:"varint,2,opt,name=single_len,json=singleLen,proto3" json:"single_len,omitempty"`
}

func (x *NewbieCondition) Reset() {
	*x = NewbieCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieCondition) ProtoMessage() {}

func (x *NewbieCondition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieCondition.ProtoReflect.Descriptor instead.
func (*NewbieCondition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{48}
}

func (x *NewbieCondition) GetRegisterDay() int32 {
	if x != nil {
		return x.RegisterDay
	}
	return 0
}

func (x *NewbieCondition) GetSingleLen() int64 {
	if x != nil {
		return x.SingleLen
	}
	return 0
}

type HomeBackground struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType           int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimSrc            string `protobuf:"bytes,2,opt,name=anim_src,json=animSrc,proto3" json:"anim_src,omitempty"`
	StaticImgurl       string `protobuf:"bytes,3,opt,name=static_imgurl,json=staticImgurl,proto3" json:"static_imgurl,omitempty"`
	BottomShadowImgurl string `protobuf:"bytes,4,opt,name=bottom_shadow_imgurl,json=bottomShadowImgurl,proto3" json:"bottom_shadow_imgurl,omitempty"`
	SkinLightBgImgurl  string `protobuf:"bytes,5,opt,name=skin_light_bg_imgurl,json=skinLightBgImgurl,proto3" json:"skin_light_bg_imgurl,omitempty"`
	SkinFloorBgImgurl  string `protobuf:"bytes,6,opt,name=skin_floor_bg_imgurl,json=skinFloorBgImgurl,proto3" json:"skin_floor_bg_imgurl,omitempty"`
	TopShadowImgurl    string `protobuf:"bytes,7,opt,name=top_shadow_imgurl,json=topShadowImgurl,proto3" json:"top_shadow_imgurl,omitempty"`
	LeftShadowImgurl   string `protobuf:"bytes,8,opt,name=left_shadow_imgurl,json=leftShadowImgurl,proto3" json:"left_shadow_imgurl,omitempty"`
}

func (x *HomeBackground) Reset() {
	*x = HomeBackground{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBackground) ProtoMessage() {}

func (x *HomeBackground) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBackground.ProtoReflect.Descriptor instead.
func (*HomeBackground) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{49}
}

func (x *HomeBackground) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *HomeBackground) GetAnimSrc() string {
	if x != nil {
		return x.AnimSrc
	}
	return ""
}

func (x *HomeBackground) GetStaticImgurl() string {
	if x != nil {
		return x.StaticImgurl
	}
	return ""
}

func (x *HomeBackground) GetBottomShadowImgurl() string {
	if x != nil {
		return x.BottomShadowImgurl
	}
	return ""
}

func (x *HomeBackground) GetSkinLightBgImgurl() string {
	if x != nil {
		return x.SkinLightBgImgurl
	}
	return ""
}

func (x *HomeBackground) GetSkinFloorBgImgurl() string {
	if x != nil {
		return x.SkinFloorBgImgurl
	}
	return ""
}

func (x *HomeBackground) GetTopShadowImgurl() string {
	if x != nil {
		return x.TopShadowImgurl
	}
	return ""
}

func (x *HomeBackground) GetLeftShadowImgurl() string {
	if x != nil {
		return x.LeftShadowImgurl
	}
	return ""
}

// === ping_config start =======================================
type PingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingStrategy       int32             `protobuf:"varint,1,opt,name=ping_strategy,json=pingStrategy,proto3" json:"ping_strategy,omitempty"`
	NewPingCount       int32             `protobuf:"varint,2,opt,name=new_ping_count,json=newPingCount,proto3" json:"new_ping_count,omitempty"`
	PingLossRate       float64           `protobuf:"fixed64,3,opt,name=ping_loss_rate,json=pingLossRate,proto3" json:"ping_loss_rate,omitempty"`
	PingIntervalTime   int32             `protobuf:"varint,4,opt,name=ping_interval_time,json=pingIntervalTime,proto3" json:"ping_interval_time,omitempty"`
	PingIntervalCount  int32             `protobuf:"varint,5,opt,name=ping_interval_count,json=pingIntervalCount,proto3" json:"ping_interval_count,omitempty"`
	PingIpList         map[string]string `protobuf:"bytes,6,rep,name=ping_ip_list,json=pingIpList,proto3" json:"ping_ip_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PingCount          int32             `protobuf:"varint,7,opt,name=ping_count,json=pingCount,proto3" json:"ping_count,omitempty"`
	PingIntervalSwitch bool              `protobuf:"varint,8,opt,name=ping_interval_switch,json=pingIntervalSwitch,proto3" json:"ping_interval_switch,omitempty"`
}

func (x *PingConfig) Reset() {
	*x = PingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingConfig) ProtoMessage() {}

func (x *PingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingConfig.ProtoReflect.Descriptor instead.
func (*PingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{50}
}

func (x *PingConfig) GetPingStrategy() int32 {
	if x != nil {
		return x.PingStrategy
	}
	return 0
}

func (x *PingConfig) GetNewPingCount() int32 {
	if x != nil {
		return x.NewPingCount
	}
	return 0
}

func (x *PingConfig) GetPingLossRate() float64 {
	if x != nil {
		return x.PingLossRate
	}
	return 0
}

func (x *PingConfig) GetPingIntervalTime() int32 {
	if x != nil {
		return x.PingIntervalTime
	}
	return 0
}

func (x *PingConfig) GetPingIntervalCount() int32 {
	if x != nil {
		return x.PingIntervalCount
	}
	return 0
}

func (x *PingConfig) GetPingIpList() map[string]string {
	if x != nil {
		return x.PingIpList
	}
	return nil
}

func (x *PingConfig) GetPingCount() int32 {
	if x != nil {
		return x.PingCount
	}
	return 0
}

func (x *PingConfig) GetPingIntervalSwitch() bool {
	if x != nil {
		return x.PingIntervalSwitch
	}
	return false
}

// === reward_config start =======================================
type RewardMarkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardMarks []*RewardMark `protobuf:"bytes,1,rep,name=reward_marks,json=rewardMarks,proto3" json:"reward_marks,omitempty"`
}

func (x *RewardMarkConfig) Reset() {
	*x = RewardMarkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardMarkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardMarkConfig) ProtoMessage() {}

func (x *RewardMarkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardMarkConfig.ProtoReflect.Descriptor instead.
func (*RewardMarkConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{51}
}

func (x *RewardMarkConfig) GetRewardMarks() []*RewardMark {
	if x != nil {
		return x.RewardMarks
	}
	return nil
}

type RewardMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 角标id
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"` // 角标图片
}

func (x *RewardMark) Reset() {
	*x = RewardMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardMark) ProtoMessage() {}

func (x *RewardMark) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardMark.ProtoReflect.Descriptor instead.
func (*RewardMark) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{52}
}

func (x *RewardMark) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RewardMark) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// === show_ad_config start =======================================
type ShowAdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnakeCoinAdConfig            []*AdRewardModel      `protobuf:"bytes,1,rep,name=snake_coin_ad_config,json=snakeCoinAdConfig,proto3" json:"snake_coin_ad_config,omitempty"`
	CouponAdConfig               []*AdRewardModel      `protobuf:"bytes,2,rep,name=coupon_ad_config,json=couponAdConfig,proto3" json:"coupon_ad_config,omitempty"`
	HappycoinAdConfig            []*AdRewardModel      `protobuf:"bytes,3,rep,name=happycoin_ad_config,json=happycoinAdConfig,proto3" json:"happycoin_ad_config,omitempty"`
	GoodsList                    []*AdGoodsItem        `protobuf:"bytes,4,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	IronSourceSwitch             int32                 `protobuf:"varint,5,opt,name=iron_source_switch,json=ironSourceSwitch,proto3" json:"iron_source_switch,omitempty"`
	AdDiamondState               int32                 `protobuf:"varint,6,opt,name=ad_diamond_state,json=adDiamondState,proto3" json:"ad_diamond_state,omitempty"`
	AdReliveState                int32                 `protobuf:"varint,7,opt,name=ad_relive_state,json=adReliveState,proto3" json:"ad_relive_state,omitempty"`
	Times                        int32                 `protobuf:"varint,8,opt,name=times,proto3" json:"times,omitempty"`
	FirstTimes                   int32                 `protobuf:"varint,9,opt,name=first_times,json=firstTimes,proto3" json:"first_times,omitempty"`
	AdChestReduceTime            int32                 `protobuf:"varint,10,opt,name=ad_chest_reduce_time,json=adChestReduceTime,proto3" json:"ad_chest_reduce_time,omitempty"`
	AdSnakeCoinState             int32                 `protobuf:"varint,11,opt,name=ad_snake_coin_state,json=adSnakeCoinState,proto3" json:"ad_snake_coin_state,omitempty"`
	DoubleSnakeCoinState         int32                 `protobuf:"varint,12,opt,name=double_snake_coin_state,json=doubleSnakeCoinState,proto3" json:"double_snake_coin_state,omitempty"`
	SingleAddBuffUi              string                `protobuf:"bytes,13,opt,name=single_add_buff_ui,json=singleAddBuffUi,proto3" json:"single_add_buff_ui,omitempty"`
	EndlessBuff                  *EndlessBuff          `protobuf:"bytes,14,opt,name=endless_buff,json=endlessBuff,proto3" json:"endless_buff,omitempty"`
	AdPopupsConfig               *AdPopupsConfig       `protobuf:"bytes,15,opt,name=ad_popups_config,json=adPopupsConfig,proto3" json:"ad_popups_config,omitempty"`
	AndroidAdPopupsConfig        *AdPopupsConfig       `protobuf:"bytes,16,opt,name=android_ad_popups_config,json=androidAdPopupsConfig,proto3" json:"android_ad_popups_config,omitempty"`
	AbAdPopupsConfig             *AdPopupsConfig       `protobuf:"bytes,17,opt,name=ab_ad_popups_config,json=abAdPopupsConfig,proto3" json:"ab_ad_popups_config,omitempty"`
	EndlessCheckoutRecommend     []*EndlessAdRecommend `protobuf:"bytes,18,rep,name=endless_checkout_recommend,json=endlessCheckoutRecommend,proto3" json:"endless_checkout_recommend,omitempty"`
	NoadEndlessCheckoutRecommend []*EndlessAdRecommend `protobuf:"bytes,19,rep,name=noad_endless_checkout_recommend,json=noadEndlessCheckoutRecommend,proto3" json:"noad_endless_checkout_recommend,omitempty"`
	MeleeCheckoutRecommend       []*EndlessAdRecommend `protobuf:"bytes,20,rep,name=melee_checkout_recommend,json=meleeCheckoutRecommend,proto3" json:"melee_checkout_recommend,omitempty"`
	AdPercent                    map[string]int32      `protobuf:"bytes,21,rep,name=ad_percent,json=adPercent,proto3" json:"ad_percent,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CrossPromotions              *CrossPromotions      `protobuf:"bytes,22,opt,name=cross_promotions,json=crossPromotions,proto3" json:"cross_promotions,omitempty"`
	OpenBuyLink                  bool                  `protobuf:"varint,23,opt,name=open_buy_link,json=openBuyLink,proto3" json:"open_buy_link,omitempty"`                 // 是否开启购买链接
	BuyMonthCardLink             string                `protobuf:"bytes,24,opt,name=buy_month_card_link,json=buyMonthCardLink,proto3" json:"buy_month_card_link,omitempty"` // 购买月卡弹窗链接
	BuyAdCardLink                string                `protobuf:"bytes,25,opt,name=buy_ad_card_link,json=buyAdCardLink,proto3" json:"buy_ad_card_link,omitempty"`          // 购买广告券弹窗链接
}

func (x *ShowAdConfig) Reset() {
	*x = ShowAdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAdConfig) ProtoMessage() {}

func (x *ShowAdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAdConfig.ProtoReflect.Descriptor instead.
func (*ShowAdConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{53}
}

func (x *ShowAdConfig) GetSnakeCoinAdConfig() []*AdRewardModel {
	if x != nil {
		return x.SnakeCoinAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetCouponAdConfig() []*AdRewardModel {
	if x != nil {
		return x.CouponAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetHappycoinAdConfig() []*AdRewardModel {
	if x != nil {
		return x.HappycoinAdConfig
	}
	return nil
}

func (x *ShowAdConfig) GetGoodsList() []*AdGoodsItem {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *ShowAdConfig) GetIronSourceSwitch() int32 {
	if x != nil {
		return x.IronSourceSwitch
	}
	return 0
}

func (x *ShowAdConfig) GetAdDiamondState() int32 {
	if x != nil {
		return x.AdDiamondState
	}
	return 0
}

func (x *ShowAdConfig) GetAdReliveState() int32 {
	if x != nil {
		return x.AdReliveState
	}
	return 0
}

func (x *ShowAdConfig) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *ShowAdConfig) GetFirstTimes() int32 {
	if x != nil {
		return x.FirstTimes
	}
	return 0
}

func (x *ShowAdConfig) GetAdChestReduceTime() int32 {
	if x != nil {
		return x.AdChestReduceTime
	}
	return 0
}

func (x *ShowAdConfig) GetAdSnakeCoinState() int32 {
	if x != nil {
		return x.AdSnakeCoinState
	}
	return 0
}

func (x *ShowAdConfig) GetDoubleSnakeCoinState() int32 {
	if x != nil {
		return x.DoubleSnakeCoinState
	}
	return 0
}

func (x *ShowAdConfig) GetSingleAddBuffUi() string {
	if x != nil {
		return x.SingleAddBuffUi
	}
	return ""
}

func (x *ShowAdConfig) GetEndlessBuff() *EndlessBuff {
	if x != nil {
		return x.EndlessBuff
	}
	return nil
}

func (x *ShowAdConfig) GetAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetAndroidAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AndroidAdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetAbAdPopupsConfig() *AdPopupsConfig {
	if x != nil {
		return x.AbAdPopupsConfig
	}
	return nil
}

func (x *ShowAdConfig) GetEndlessCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.EndlessCheckoutRecommend
	}
	return nil
}

func (x *ShowAdConfig) GetNoadEndlessCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.NoadEndlessCheckoutRecommend
	}
	return nil
}

func (x *ShowAdConfig) GetMeleeCheckoutRecommend() []*EndlessAdRecommend {
	if x != nil {
		return x.MeleeCheckoutRecommend
	}
	return nil
}

func (x *ShowAdConfig) GetAdPercent() map[string]int32 {
	if x != nil {
		return x.AdPercent
	}
	return nil
}

func (x *ShowAdConfig) GetCrossPromotions() *CrossPromotions {
	if x != nil {
		return x.CrossPromotions
	}
	return nil
}

func (x *ShowAdConfig) GetOpenBuyLink() bool {
	if x != nil {
		return x.OpenBuyLink
	}
	return false
}

func (x *ShowAdConfig) GetBuyMonthCardLink() string {
	if x != nil {
		return x.BuyMonthCardLink
	}
	return ""
}

func (x *ShowAdConfig) GetBuyAdCardLink() string {
	if x != nil {
		return x.BuyAdCardLink
	}
	return ""
}

type CrossPromotions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy []int32                  `protobuf:"varint,1,rep,packed,name=strategy,proto3" json:"strategy,omitempty"`
	Source   []*CrossPromotionsSource `protobuf:"bytes,2,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *CrossPromotions) Reset() {
	*x = CrossPromotions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossPromotions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossPromotions) ProtoMessage() {}

func (x *CrossPromotions) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossPromotions.ProtoReflect.Descriptor instead.
func (*CrossPromotions) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{54}
}

func (x *CrossPromotions) GetStrategy() []int32 {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *CrossPromotions) GetSource() []*CrossPromotionsSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type CrossPromotionsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Desc     string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Download string `protobuf:"bytes,3,opt,name=download,proto3" json:"download,omitempty"`
	Id       string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Rate     string `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`
	Show     string `protobuf:"bytes,6,opt,name=show,proto3" json:"show,omitempty"`
	Url      string `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CrossPromotionsSource) Reset() {
	*x = CrossPromotionsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossPromotionsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossPromotionsSource) ProtoMessage() {}

func (x *CrossPromotionsSource) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossPromotionsSource.ProtoReflect.Descriptor instead.
func (*CrossPromotionsSource) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{55}
}

func (x *CrossPromotionsSource) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CrossPromotionsSource) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CrossPromotionsSource) GetDownload() string {
	if x != nil {
		return x.Download
	}
	return ""
}

func (x *CrossPromotionsSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CrossPromotionsSource) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *CrossPromotionsSource) GetShow() string {
	if x != nil {
		return x.Show
	}
	return ""
}

func (x *CrossPromotionsSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EndlessBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times         int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	IntervalTimes int32 `protobuf:"varint,2,opt,name=interval_times,json=intervalTimes,proto3" json:"interval_times,omitempty"`
	ProtectTimes  int32 `protobuf:"varint,3,opt,name=protect_times,json=protectTimes,proto3" json:"protect_times,omitempty"`
}

func (x *EndlessBuff) Reset() {
	*x = EndlessBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBuff) ProtoMessage() {}

func (x *EndlessBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBuff.ProtoReflect.Descriptor instead.
func (*EndlessBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{56}
}

func (x *EndlessBuff) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *EndlessBuff) GetIntervalTimes() int32 {
	if x != nil {
		return x.IntervalTimes
	}
	return 0
}

func (x *EndlessBuff) GetProtectTimes() int32 {
	if x != nil {
		return x.ProtectTimes
	}
	return 0
}

type PopupPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times         int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`                                      //首次弹出的局数
	IntervalTimes int32 `protobuf:"varint,2,opt,name=interval_times,json=intervalTimes,proto3" json:"interval_times,omitempty"` //弹出间隔局数
	ShowLimit     int32 `protobuf:"varint,3,opt,name=show_limit,json=showLimit,proto3" json:"show_limit,omitempty"`             //每日展示上限
	Threshold     int32 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	IncrTimes     int32 `protobuf:"varint,5,opt,name=incr_times,json=incrTimes,proto3" json:"incr_times,omitempty"`
}

func (x *PopupPosition) Reset() {
	*x = PopupPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopupPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopupPosition) ProtoMessage() {}

func (x *PopupPosition) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopupPosition.ProtoReflect.Descriptor instead.
func (*PopupPosition) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{57}
}

func (x *PopupPosition) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *PopupPosition) GetIntervalTimes() int32 {
	if x != nil {
		return x.IntervalTimes
	}
	return 0
}

func (x *PopupPosition) GetShowLimit() int32 {
	if x != nil {
		return x.ShowLimit
	}
	return 0
}

func (x *PopupPosition) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *PopupPosition) GetIncrTimes() int32 {
	if x != nil {
		return x.IncrTimes
	}
	return 0
}

type AdPopupsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopupsTotalLimit    int32                     `protobuf:"varint,1,opt,name=popups_total_limit,json=popupsTotalLimit,proto3" json:"popups_total_limit,omitempty"`
	PopusOrder          []string                  `protobuf:"bytes,2,rep,name=popus_order,json=popusOrder,proto3" json:"popus_order,omitempty"` //重来时皮肤与buff都满足触发条件，优先顺序可配（默认皮肤优先）
	EndPopupCount       int32                     `protobuf:"varint,3,opt,name=end_popup_count,json=endPopupCount,proto3" json:"end_popup_count,omitempty"`
	EndPopupOrder       []string                  `protobuf:"bytes,4,rep,name=end_popup_order,json=endPopupOrder,proto3" json:"end_popup_order,omitempty"`
	NewEndPopupOrder1   []string                  `protobuf:"bytes,5,rep,name=new_end_popup_order1,json=newEndPopupOrder1,proto3" json:"new_end_popup_order1,omitempty"`
	NewEndPopupOrder2   []string                  `protobuf:"bytes,6,rep,name=new_end_popup_order2,json=newEndPopupOrder2,proto3" json:"new_end_popup_order2,omitempty"`
	NewbieProtectDay    int32                     `protobuf:"varint,7,opt,name=newbie_protect_day,json=newbieProtectDay,proto3" json:"newbie_protect_day,omitempty"`
	TrioGameCount       int32                     `protobuf:"varint,8,opt,name=trio_game_count,json=trioGameCount,proto3" json:"trio_game_count,omitempty"` //新用户首次允许弹出弹窗的局数（新手保护）
	PopupPositionConfig map[string]*PopupPosition `protobuf:"bytes,9,rep,name=popup_position_config,json=popupPositionConfig,proto3" json:"popup_position_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AdPopupsConfig) Reset() {
	*x = AdPopupsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdPopupsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdPopupsConfig) ProtoMessage() {}

func (x *AdPopupsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdPopupsConfig.ProtoReflect.Descriptor instead.
func (*AdPopupsConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{58}
}

func (x *AdPopupsConfig) GetPopupsTotalLimit() int32 {
	if x != nil {
		return x.PopupsTotalLimit
	}
	return 0
}

func (x *AdPopupsConfig) GetPopusOrder() []string {
	if x != nil {
		return x.PopusOrder
	}
	return nil
}

func (x *AdPopupsConfig) GetEndPopupCount() int32 {
	if x != nil {
		return x.EndPopupCount
	}
	return 0
}

func (x *AdPopupsConfig) GetEndPopupOrder() []string {
	if x != nil {
		return x.EndPopupOrder
	}
	return nil
}

func (x *AdPopupsConfig) GetNewEndPopupOrder1() []string {
	if x != nil {
		return x.NewEndPopupOrder1
	}
	return nil
}

func (x *AdPopupsConfig) GetNewEndPopupOrder2() []string {
	if x != nil {
		return x.NewEndPopupOrder2
	}
	return nil
}

func (x *AdPopupsConfig) GetNewbieProtectDay() int32 {
	if x != nil {
		return x.NewbieProtectDay
	}
	return 0
}

func (x *AdPopupsConfig) GetTrioGameCount() int32 {
	if x != nil {
		return x.TrioGameCount
	}
	return 0
}

func (x *AdPopupsConfig) GetPopupPositionConfig() map[string]*PopupPosition {
	if x != nil {
		return x.PopupPositionConfig
	}
	return nil
}

type EndlessAdRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId      int32  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`       //id
	AnimType    int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"` //通用动画类型,1:图片,5:视频
	AnimUrl     string `protobuf:"bytes,3,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`     //动画链接
	Link        string `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`                          //通用跳转链接
	Probability int32  `protobuf:"varint,5,opt,name=probability,proto3" json:"probability,omitempty"`           //权重
}

func (x *EndlessAdRecommend) Reset() {
	*x = EndlessAdRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessAdRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessAdRecommend) ProtoMessage() {}

func (x *EndlessAdRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessAdRecommend.ProtoReflect.Descriptor instead.
func (*EndlessAdRecommend) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{59}
}

func (x *EndlessAdRecommend) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *EndlessAdRecommend) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *EndlessAdRecommend) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *EndlessAdRecommend) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *EndlessAdRecommend) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type AdRewardModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColdTime  int32 `protobuf:"varint,1,opt,name=cold_time,json=coldTime,proto3" json:"cold_time,omitempty"`
	Index     int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Num       int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Type      int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` //货币类型
	Happycoin int32 `protobuf:"varint,5,opt,name=happycoin,proto3" json:"happycoin,omitempty"`
}

func (x *AdRewardModel) Reset() {
	*x = AdRewardModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdRewardModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdRewardModel) ProtoMessage() {}

func (x *AdRewardModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdRewardModel.ProtoReflect.Descriptor instead.
func (*AdRewardModel) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{60}
}

func (x *AdRewardModel) GetColdTime() int32 {
	if x != nil {
		return x.ColdTime
	}
	return 0
}

func (x *AdRewardModel) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AdRewardModel) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AdRewardModel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdRewardModel) GetHappycoin() int32 {
	if x != nil {
		return x.Happycoin
	}
	return 0
}

type AdGoodsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diamond        int32  `protobuf:"varint,1,opt,name=diamond,proto3" json:"diamond,omitempty"`
	AppleProductId string `protobuf:"bytes,2,opt,name=apple_product_id,json=appleProductId,proto3" json:"apple_product_id,omitempty"`
	GoodsId        int32  `protobuf:"varint,3,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	GoodsPrice     int32  `protobuf:"varint,4,opt,name=goods_price,json=goodsPrice,proto3" json:"goods_price,omitempty"`
	GoodsName      string `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
}

func (x *AdGoodsItem) Reset() {
	*x = AdGoodsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdGoodsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdGoodsItem) ProtoMessage() {}

func (x *AdGoodsItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdGoodsItem.ProtoReflect.Descriptor instead.
func (*AdGoodsItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{61}
}

func (x *AdGoodsItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *AdGoodsItem) GetAppleProductId() string {
	if x != nil {
		return x.AppleProductId
	}
	return ""
}

func (x *AdGoodsItem) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *AdGoodsItem) GetGoodsPrice() int32 {
	if x != nil {
		return x.GoodsPrice
	}
	return 0
}

func (x *AdGoodsItem) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

// === order_config start =======================================
type OrderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlivePopupOrder        []int32                 `protobuf:"varint,1,rep,packed,name=alive_popup_order,json=alivePopupOrder,proto3" json:"alive_popup_order,omitempty"`
	IapppaySwitch          int32                   `protobuf:"varint,2,opt,name=iapppay_switch,json=iapppaySwitch,proto3" json:"iapppay_switch,omitempty"`
	ServiceContact         string                  `protobuf:"bytes,3,opt,name=service_contact,json=serviceContact,proto3" json:"service_contact,omitempty"`
	PackGoodsList          []*RMBPackGoodsInfo     `protobuf:"bytes,4,rep,name=pack_goods_list,json=packGoodsList,proto3" json:"pack_goods_list,omitempty"`
	AlivePackPopup         []int32                 `protobuf:"varint,5,rep,packed,name=alive_pack_popup,json=alivePackPopup,proto3" json:"alive_pack_popup,omitempty"`
	DiamondGoodsList       []*RMBPackGoodsInfo     `protobuf:"bytes,6,rep,name=diamond_goods_list,json=diamondGoodsList,proto3" json:"diamond_goods_list,omitempty"`
	FirstChargePopup       *FirstChargePopup       `protobuf:"bytes,7,opt,name=first_charge_popup,json=firstChargePopup,proto3" json:"first_charge_popup,omitempty"`
	RedPackGoodsList       []*RMBPackGoodsInfo     `protobuf:"bytes,8,rep,name=red_pack_goods_list,json=redPackGoodsList,proto3" json:"red_pack_goods_list,omitempty"`
	ExcitePopupOrder       []int32                 `protobuf:"varint,9,rep,packed,name=excite_popup_order,json=excitePopupOrder,proto3" json:"excite_popup_order,omitempty"`
	NeedBind               int32                   `protobuf:"varint,10,opt,name=need_bind,json=needBind,proto3" json:"need_bind,omitempty"`
	RandomDoubleClientInfo *RandomDoubleClientInfo `protobuf:"bytes,11,opt,name=random_double_client_info,json=randomDoubleClientInfo,proto3" json:"random_double_client_info,omitempty"` // 需要返回给客户端的数据
}

func (x *OrderConfig) Reset() {
	*x = OrderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderConfig) ProtoMessage() {}

func (x *OrderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderConfig.ProtoReflect.Descriptor instead.
func (*OrderConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{62}
}

func (x *OrderConfig) GetAlivePopupOrder() []int32 {
	if x != nil {
		return x.AlivePopupOrder
	}
	return nil
}

func (x *OrderConfig) GetIapppaySwitch() int32 {
	if x != nil {
		return x.IapppaySwitch
	}
	return 0
}

func (x *OrderConfig) GetServiceContact() string {
	if x != nil {
		return x.ServiceContact
	}
	return ""
}

func (x *OrderConfig) GetPackGoodsList() []*RMBPackGoodsInfo {
	if x != nil {
		return x.PackGoodsList
	}
	return nil
}

func (x *OrderConfig) GetAlivePackPopup() []int32 {
	if x != nil {
		return x.AlivePackPopup
	}
	return nil
}

func (x *OrderConfig) GetDiamondGoodsList() []*RMBPackGoodsInfo {
	if x != nil {
		return x.DiamondGoodsList
	}
	return nil
}

func (x *OrderConfig) GetFirstChargePopup() *FirstChargePopup {
	if x != nil {
		return x.FirstChargePopup
	}
	return nil
}

func (x *OrderConfig) GetRedPackGoodsList() []*RMBPackGoodsInfo {
	if x != nil {
		return x.RedPackGoodsList
	}
	return nil
}

func (x *OrderConfig) GetExcitePopupOrder() []int32 {
	if x != nil {
		return x.ExcitePopupOrder
	}
	return nil
}

func (x *OrderConfig) GetNeedBind() int32 {
	if x != nil {
		return x.NeedBind
	}
	return 0
}

func (x *OrderConfig) GetRandomDoubleClientInfo() *RandomDoubleClientInfo {
	if x != nil {
		return x.RandomDoubleClientInfo
	}
	return nil
}

type FirstChargePopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range int32 `protobuf:"varint,1,opt,name=range,proto3" json:"range,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FirstChargePopup) Reset() {
	*x = FirstChargePopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstChargePopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstChargePopup) ProtoMessage() {}

func (x *FirstChargePopup) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstChargePopup.ProtoReflect.Descriptor instead.
func (*FirstChargePopup) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{63}
}

func (x *FirstChargePopup) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *FirstChargePopup) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RandomDoubleClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleImgurl string `protobuf:"bytes,5,opt,name=title_imgurl,json=titleImgurl,proto3" json:"title_imgurl,omitempty"`
}

func (x *RandomDoubleClientInfo) Reset() {
	*x = RandomDoubleClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomDoubleClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomDoubleClientInfo) ProtoMessage() {}

func (x *RandomDoubleClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomDoubleClientInfo.ProtoReflect.Descriptor instead.
func (*RandomDoubleClientInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{64}
}

func (x *RandomDoubleClientInfo) GetTitleImgurl() string {
	if x != nil {
		return x.TitleImgurl
	}
	return ""
}

// === unity_qualifying_open_config start =======================================
type UnityQualifyingOpenConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekdays     []int32  `protobuf:"varint,1,rep,packed,name=weekdays,proto3" json:"weekdays,omitempty"`
	DayStartTime string   `protobuf:"bytes,2,opt,name=day_start_time,json=dayStartTime,proto3" json:"day_start_time,omitempty"`
	DayEndTime   string   `protobuf:"bytes,3,opt,name=day_end_time,json=dayEndTime,proto3" json:"day_end_time,omitempty"`
	Markets      []string `protobuf:"bytes,4,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *UnityQualifyingOpenConfig) Reset() {
	*x = UnityQualifyingOpenConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityQualifyingOpenConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityQualifyingOpenConfig) ProtoMessage() {}

func (x *UnityQualifyingOpenConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityQualifyingOpenConfig.ProtoReflect.Descriptor instead.
func (*UnityQualifyingOpenConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{65}
}

func (x *UnityQualifyingOpenConfig) GetWeekdays() []int32 {
	if x != nil {
		return x.Weekdays
	}
	return nil
}

func (x *UnityQualifyingOpenConfig) GetDayStartTime() string {
	if x != nil {
		return x.DayStartTime
	}
	return ""
}

func (x *UnityQualifyingOpenConfig) GetDayEndTime() string {
	if x != nil {
		return x.DayEndTime
	}
	return ""
}

func (x *UnityQualifyingOpenConfig) GetMarkets() []string {
	if x != nil {
		return x.Markets
	}
	return nil
}

// === top_list_config start =======================================
type TopListConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceList               []string `protobuf:"bytes,1,rep,name=province_list,json=provinceList,proto3" json:"province_list,omitempty"`
	UserTopListResetTips       string   `protobuf:"bytes,2,opt,name=user_top_list_reset_tips,json=userTopListResetTips,proto3" json:"user_top_list_reset_tips,omitempty"`
	ClanTopListResetTips       string   `protobuf:"bytes,3,opt,name=clan_top_list_reset_tips,json=clanTopListResetTips,proto3" json:"clan_top_list_reset_tips,omitempty"`
	QualifyingTopListResetTips string   `protobuf:"bytes,4,opt,name=qualifying_top_list_reset_tips,json=qualifyingTopListResetTips,proto3" json:"qualifying_top_list_reset_tips,omitempty"`
}

func (x *TopListConfig) Reset() {
	*x = TopListConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopListConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopListConfig) ProtoMessage() {}

func (x *TopListConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopListConfig.ProtoReflect.Descriptor instead.
func (*TopListConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{66}
}

func (x *TopListConfig) GetProvinceList() []string {
	if x != nil {
		return x.ProvinceList
	}
	return nil
}

func (x *TopListConfig) GetUserTopListResetTips() string {
	if x != nil {
		return x.UserTopListResetTips
	}
	return ""
}

func (x *TopListConfig) GetClanTopListResetTips() string {
	if x != nil {
		return x.ClanTopListResetTips
	}
	return ""
}

func (x *TopListConfig) GetQualifyingTopListResetTips() string {
	if x != nil {
		return x.QualifyingTopListResetTips
	}
	return ""
}

// === show_config begin ======================================
type ShowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelConfig   []*ShowLevelConfig `protobuf:"bytes,1,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty"`
	SkillName     []*ShowSkillName   `protobuf:"bytes,2,rep,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	IntroV2       string             `protobuf:"bytes,3,opt,name=intro_v2,json=introV2,proto3" json:"intro_v2,omitempty"`
	AdditionIntro string             `protobuf:"bytes,4,opt,name=addition_intro,json=additionIntro,proto3" json:"addition_intro,omitempty"`
	Intro         string             `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	IconStyle     []*ShowIconStyle   `protobuf:"bytes,6,rep,name=icon_style,json=iconStyle,proto3" json:"icon_style,omitempty"`
	PackConfig    []*ShowPackItem    `protobuf:"bytes,7,rep,name=pack_config,json=packConfig,proto3" json:"pack_config,omitempty"`
	PackPopCdSec  int32              `protobuf:"varint,8,opt,name=pack_pop_cd_sec,json=packPopCdSec,proto3" json:"pack_pop_cd_sec,omitempty"`
}

func (x *ShowConfig) Reset() {
	*x = ShowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowConfig) ProtoMessage() {}

func (x *ShowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowConfig.ProtoReflect.Descriptor instead.
func (*ShowConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{67}
}

func (x *ShowConfig) GetLevelConfig() []*ShowLevelConfig {
	if x != nil {
		return x.LevelConfig
	}
	return nil
}

func (x *ShowConfig) GetSkillName() []*ShowSkillName {
	if x != nil {
		return x.SkillName
	}
	return nil
}

func (x *ShowConfig) GetIntroV2() string {
	if x != nil {
		return x.IntroV2
	}
	return ""
}

func (x *ShowConfig) GetAdditionIntro() string {
	if x != nil {
		return x.AdditionIntro
	}
	return ""
}

func (x *ShowConfig) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *ShowConfig) GetIconStyle() []*ShowIconStyle {
	if x != nil {
		return x.IconStyle
	}
	return nil
}

func (x *ShowConfig) GetPackConfig() []*ShowPackItem {
	if x != nil {
		return x.PackConfig
	}
	return nil
}

func (x *ShowConfig) GetPackPopCdSec() int32 {
	if x != nil {
		return x.PackPopCdSec
	}
	return 0
}

type ShowPackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowLevel int32             `protobuf:"varint,1,opt,name=show_level,json=showLevel,proto3" json:"show_level,omitempty"`
	EffectSec int32             `protobuf:"varint,2,opt,name=effect_sec,json=effectSec,proto3" json:"effect_sec,omitempty"`
	PackInfo  *config.PackModel `protobuf:"bytes,3,opt,name=pack_info,json=packInfo,proto3" json:"pack_info,omitempty"`
}

func (x *ShowPackItem) Reset() {
	*x = ShowPackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPackItem) ProtoMessage() {}

func (x *ShowPackItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPackItem.ProtoReflect.Descriptor instead.
func (*ShowPackItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{68}
}

func (x *ShowPackItem) GetShowLevel() int32 {
	if x != nil {
		return x.ShowLevel
	}
	return 0
}

func (x *ShowPackItem) GetEffectSec() int32 {
	if x != nil {
		return x.EffectSec
	}
	return 0
}

func (x *ShowPackItem) GetPackInfo() *config.PackModel {
	if x != nil {
		return x.PackInfo
	}
	return nil
}

type ShowIconStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num    int32  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ImgUrl string `protobuf:"bytes,2,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
}

func (x *ShowIconStyle) Reset() {
	*x = ShowIconStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowIconStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowIconStyle) ProtoMessage() {}

func (x *ShowIconStyle) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowIconStyle.ProtoReflect.Descriptor instead.
func (*ShowIconStyle) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{69}
}

func (x *ShowIconStyle) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ShowIconStyle) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

type ShowLevelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSkill     string                 `protobuf:"bytes,1,opt,name=game_skill,json=gameSkill,proto3" json:"game_skill,omitempty"`
	Reward        []*config.RewardConfig `protobuf:"bytes,2,rep,name=reward,proto3" json:"reward,omitempty"`
	Thumbnail     string                 `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ThumAnimUrl   string                 `protobuf:"bytes,4,opt,name=thum_anim_url,json=thumAnimUrl,proto3" json:"thum_anim_url,omitempty"`
	IconUrl       string                 `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	AnimUrl       string                 `protobuf:"bytes,6,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	TotalShow     int32                  `protobuf:"varint,7,opt,name=total_show,json=totalShow,proto3" json:"total_show,omitempty"`
	Level         int32                  `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	GameSkillList []*ShowSkillBuff       `protobuf:"bytes,9,rep,name=game_skill_list,json=gameSkillList,proto3" json:"game_skill_list,omitempty"` // 不返回客户端
	Show          string                 `protobuf:"bytes,10,opt,name=show,proto3" json:"show,omitempty"`
}

func (x *ShowLevelConfig) Reset() {
	*x = ShowLevelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowLevelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowLevelConfig) ProtoMessage() {}

func (x *ShowLevelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowLevelConfig.ProtoReflect.Descriptor instead.
func (*ShowLevelConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{70}
}

func (x *ShowLevelConfig) GetGameSkill() string {
	if x != nil {
		return x.GameSkill
	}
	return ""
}

func (x *ShowLevelConfig) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ShowLevelConfig) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ShowLevelConfig) GetThumAnimUrl() string {
	if x != nil {
		return x.ThumAnimUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *ShowLevelConfig) GetTotalShow() int32 {
	if x != nil {
		return x.TotalShow
	}
	return 0
}

func (x *ShowLevelConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ShowLevelConfig) GetGameSkillList() []*ShowSkillBuff {
	if x != nil {
		return x.GameSkillList
	}
	return nil
}

func (x *ShowLevelConfig) GetShow() string {
	if x != nil {
		return x.Show
	}
	return ""
}

type ShowSkillName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillType int32  `protobuf:"varint,1,opt,name=skill_type,json=skillType,proto3" json:"skill_type,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ShowSkillName) Reset() {
	*x = ShowSkillName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSkillName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSkillName) ProtoMessage() {}

func (x *ShowSkillName) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSkillName.ProtoReflect.Descriptor instead.
func (*ShowSkillName) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{71}
}

func (x *ShowSkillName) GetSkillType() int32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *ShowSkillName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ShowSkillBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillType int32  `protobuf:"varint,1,opt,name=skill_type,json=skillType,proto3" json:"skill_type,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValueText string `protobuf:"bytes,3,opt,name=value_text,json=valueText,proto3" json:"value_text,omitempty"`
}

func (x *ShowSkillBuff) Reset() {
	*x = ShowSkillBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSkillBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSkillBuff) ProtoMessage() {}

func (x *ShowSkillBuff) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSkillBuff.ProtoReflect.Descriptor instead.
func (*ShowSkillBuff) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{72}
}

func (x *ShowSkillBuff) GetSkillType() int32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *ShowSkillBuff) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ShowSkillBuff) GetValueText() string {
	if x != nil {
		return x.ValueText
	}
	return ""
}

// === user_config begin ======================================
type UserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenderCost               int32                  `protobuf:"varint,1,opt,name=gender_cost,json=genderCost,proto3" json:"gender_cost,omitempty"`                                //性别修改需要的苹果数量
	CertifyUrl               string                 `protobuf:"bytes,2,opt,name=certify_url,json=certifyUrl,proto3" json:"certify_url,omitempty"`                                 // 实名认证 url 地址
	CacheCleanSwitch         int32                  `protobuf:"varint,3,opt,name=cache_clean_switch,json=cacheCleanSwitch,proto3" json:"cache_clean_switch,omitempty"`            //1开2关
	SnakeCoinLimit           int32                  `protobuf:"varint,4,opt,name=snake_coin_limit,json=snakeCoinLimit,proto3" json:"snake_coin_limit,omitempty"`                  // 彩豆周上限
	SingleTextConfig         string                 `protobuf:"bytes,5,opt,name=single_text_config,json=singleTextConfig,proto3" json:"single_text_config,omitempty"`             // 单机右上角文案说明
	QualifyingTextConfig     string                 `protobuf:"bytes,6,opt,name=qualifying_text_config,json=qualifyingTextConfig,proto3" json:"qualifying_text_config,omitempty"` // 团战右上角文案说明
	ClanTextConfig           string                 `protobuf:"bytes,7,opt,name=clan_text_config,json=clanTextConfig,proto3" json:"clan_text_config,omitempty"`                   // 战队赛结算右上角文案说明
	AbnormalStore            []*DeviceConfig        `protobuf:"bytes,8,rep,name=abnormal_store,json=abnormalStore,proto3" json:"abnormal_store,omitempty"`
	ZhiTokenUrl2             string                 `protobuf:"bytes,9,opt,name=zhi_token_url2,json=zhiTokenUrl2,proto3" json:"zhi_token_url2,omitempty"`                            // 吱口令
	SendRedPackNeedCare      int32                  `protobuf:"varint,10,opt,name=send_red_pack_need_care,json=sendRedPackNeedCare,proto3" json:"send_red_pack_need_care,omitempty"` // 红包守护值
	UploadAvatarTips         string                 `protobuf:"bytes,11,opt,name=upload_avatar_tips,json=uploadAvatarTips,proto3" json:"upload_avatar_tips,omitempty"`               // 上传头像奖励
	StartEndlessFlag         int32                  `protobuf:"varint,12,opt,name=start_endless_flag,json=startEndlessFlag,proto3" json:"start_endless_flag,omitempty"`              // 是否首页直接进无尽，0否1是
	HomeLoginDays            []int32                `protobuf:"varint,13,rep,packed,name=home_login_days,json=homeLoginDays,proto3" json:"home_login_days,omitempty"`                //新用户第多少天登录 首次回首页后弹登录
	NicknameHomeCount        int32                  `protobuf:"varint,14,opt,name=nickname_home_count,json=nicknameHomeCount,proto3" json:"nickname_home_count,omitempty"`           //新用户第三天登录 多少次回首页后弹改名
	AntiAddiction            *AntiAddiction         `protobuf:"bytes,16,opt,name=anti_addiction,json=antiAddiction,proto3" json:"anti_addiction,omitempty"`
	OnlineIntervalSeconds    int32                  `protobuf:"varint,17,opt,name=online_interval_seconds,json=onlineIntervalSeconds,proto3" json:"online_interval_seconds,omitempty"`
	GameEndSkin              *GameEndSkin           `protobuf:"bytes,18,opt,name=game_end_skin,json=gameEndSkin,proto3" json:"game_end_skin,omitempty"`
	WorkdayList              []string               `protobuf:"bytes,19,rep,name=workday_list,json=workdayList,proto3" json:"workday_list,omitempty"`
	HolidayList              []string               `protobuf:"bytes,20,rep,name=holiday_list,json=holidayList,proto3" json:"holiday_list,omitempty"`
	RenamePopupRule          *RenamePopupRule       `protobuf:"bytes,21,opt,name=rename_popup_rule,json=renamePopupRule,proto3" json:"rename_popup_rule,omitempty"`
	BindConfig               *BindConfig            `protobuf:"bytes,22,opt,name=bind_config,json=bindConfig,proto3" json:"bind_config,omitempty"`
	SettingConf              *SettingConfig         `protobuf:"bytes,23,opt,name=setting_conf,json=settingConf,proto3" json:"setting_conf,omitempty"`
	Feedback                 *FeedbackConfig        `protobuf:"bytes,24,opt,name=feedback,proto3" json:"feedback,omitempty"`
	Flags                    *FlagsConfig           `protobuf:"bytes,25,opt,name=flags,proto3" json:"flags,omitempty"`
	CertifyReward            []*config.RewardConfig `protobuf:"bytes,26,rep,name=certify_reward,json=certifyReward,proto3" json:"certify_reward,omitempty"`
	RegisterSurvey           *RegisterSurvey        `protobuf:"bytes,27,opt,name=register_survey,json=registerSurvey,proto3" json:"register_survey,omitempty"`
	RecruitPopup             *RecruitPopup          `protobuf:"bytes,28,opt,name=recruit_popup,json=recruitPopup,proto3" json:"recruit_popup,omitempty"`
	MinorLimit               *MinorLimit            `protobuf:"bytes,29,opt,name=minor_limit,json=minorLimit,proto3" json:"minor_limit,omitempty"`
	LoginLimitMsg            string                 `protobuf:"bytes,30,opt,name=login_limit_msg,json=loginLimitMsg,proto3" json:"login_limit_msg,omitempty"`
	AgeTipsText              string                 `protobuf:"bytes,31,opt,name=age_tips_text,json=ageTipsText,proto3" json:"age_tips_text,omitempty"`
	CertifyRewardImage       string                 `protobuf:"bytes,32,opt,name=certify_reward_image,json=certifyRewardImage,proto3" json:"certify_reward_image,omitempty"`
	NewUserConfig            *NewUserConfig         `protobuf:"bytes,33,opt,name=new_user_config,json=newUserConfig,proto3" json:"new_user_config,omitempty"`
	OpenCpButton             int32                  `protobuf:"varint,34,opt,name=open_cp_button,json=openCpButton,proto3" json:"open_cp_button,omitempty"` // 是否开启cp背景更换按钮，1为开
	AlipayCertify            int32                  `protobuf:"varint,35,opt,name=alipay_certify,json=alipayCertify,proto3" json:"alipay_certify,omitempty"`
	ChannelLoginFlag         int32                  `protobuf:"varint,36,opt,name=channel_login_flag,json=channelLoginFlag,proto3" json:"channel_login_flag,omitempty"`
	CommentConfig            *CommentConfig         `protobuf:"bytes,37,opt,name=comment_config,json=commentConfig,proto3" json:"comment_config,omitempty"` // 评论配置
	LoginPageFlag            int32                  `protobuf:"varint,38,opt,name=login_page_flag,json=loginPageFlag,proto3" json:"login_page_flag,omitempty"`
	ContactText              string                 `protobuf:"bytes,39,opt,name=contact_text,json=contactText,proto3" json:"contact_text,omitempty"`
	LoginHomeCount           int32                  `protobuf:"varint,40,opt,name=login_home_count,json=loginHomeCount,proto3" json:"login_home_count,omitempty"`
	UnityFlags               *UnityFlags            `protobuf:"bytes,41,opt,name=unity_flags,json=unityFlags,proto3" json:"unity_flags,omitempty"`
	UseTopon                 int32                  `protobuf:"varint,42,opt,name=use_topon,json=useTopon,proto3" json:"use_topon,omitempty"`
	IdfaConfig               *IdfaConfig            `protobuf:"bytes,43,opt,name=idfa_config,json=idfaConfig,proto3" json:"idfa_config,omitempty"` // ios idfa 弹窗配置
	VisitorFlag              int32                  `protobuf:"varint,44,opt,name=visitor_flag,json=visitorFlag,proto3" json:"visitor_flag,omitempty"`
	ThirdFailedVisitorFlag   int32                  `protobuf:"varint,45,opt,name=third_failed_visitor_flag,json=thirdFailedVisitorFlag,proto3" json:"third_failed_visitor_flag,omitempty"`
	ThirdFailedVisitorMarket []string               `protobuf:"bytes,46,rep,name=third_failed_visitor_market,json=thirdFailedVisitorMarket,proto3" json:"third_failed_visitor_market,omitempty"`
	RelivePackAutoPopCount   int32                  `protobuf:"varint,47,opt,name=relive_pack_auto_pop_count,json=relivePackAutoPopCount,proto3" json:"relive_pack_auto_pop_count,omitempty"`
}

func (x *UserConfig) Reset() {
	*x = UserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConfig) ProtoMessage() {}

func (x *UserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConfig.ProtoReflect.Descriptor instead.
func (*UserConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{73}
}

func (x *UserConfig) GetGenderCost() int32 {
	if x != nil {
		return x.GenderCost
	}
	return 0
}

func (x *UserConfig) GetCertifyUrl() string {
	if x != nil {
		return x.CertifyUrl
	}
	return ""
}

func (x *UserConfig) GetCacheCleanSwitch() int32 {
	if x != nil {
		return x.CacheCleanSwitch
	}
	return 0
}

func (x *UserConfig) GetSnakeCoinLimit() int32 {
	if x != nil {
		return x.SnakeCoinLimit
	}
	return 0
}

func (x *UserConfig) GetSingleTextConfig() string {
	if x != nil {
		return x.SingleTextConfig
	}
	return ""
}

func (x *UserConfig) GetQualifyingTextConfig() string {
	if x != nil {
		return x.QualifyingTextConfig
	}
	return ""
}

func (x *UserConfig) GetClanTextConfig() string {
	if x != nil {
		return x.ClanTextConfig
	}
	return ""
}

func (x *UserConfig) GetAbnormalStore() []*DeviceConfig {
	if x != nil {
		return x.AbnormalStore
	}
	return nil
}

func (x *UserConfig) GetZhiTokenUrl2() string {
	if x != nil {
		return x.ZhiTokenUrl2
	}
	return ""
}

func (x *UserConfig) GetSendRedPackNeedCare() int32 {
	if x != nil {
		return x.SendRedPackNeedCare
	}
	return 0
}

func (x *UserConfig) GetUploadAvatarTips() string {
	if x != nil {
		return x.UploadAvatarTips
	}
	return ""
}

func (x *UserConfig) GetStartEndlessFlag() int32 {
	if x != nil {
		return x.StartEndlessFlag
	}
	return 0
}

func (x *UserConfig) GetHomeLoginDays() []int32 {
	if x != nil {
		return x.HomeLoginDays
	}
	return nil
}

func (x *UserConfig) GetNicknameHomeCount() int32 {
	if x != nil {
		return x.NicknameHomeCount
	}
	return 0
}

func (x *UserConfig) GetAntiAddiction() *AntiAddiction {
	if x != nil {
		return x.AntiAddiction
	}
	return nil
}

func (x *UserConfig) GetOnlineIntervalSeconds() int32 {
	if x != nil {
		return x.OnlineIntervalSeconds
	}
	return 0
}

func (x *UserConfig) GetGameEndSkin() *GameEndSkin {
	if x != nil {
		return x.GameEndSkin
	}
	return nil
}

func (x *UserConfig) GetWorkdayList() []string {
	if x != nil {
		return x.WorkdayList
	}
	return nil
}

func (x *UserConfig) GetHolidayList() []string {
	if x != nil {
		return x.HolidayList
	}
	return nil
}

func (x *UserConfig) GetRenamePopupRule() *RenamePopupRule {
	if x != nil {
		return x.RenamePopupRule
	}
	return nil
}

func (x *UserConfig) GetBindConfig() *BindConfig {
	if x != nil {
		return x.BindConfig
	}
	return nil
}

func (x *UserConfig) GetSettingConf() *SettingConfig {
	if x != nil {
		return x.SettingConf
	}
	return nil
}

func (x *UserConfig) GetFeedback() *FeedbackConfig {
	if x != nil {
		return x.Feedback
	}
	return nil
}

func (x *UserConfig) GetFlags() *FlagsConfig {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *UserConfig) GetCertifyReward() []*config.RewardConfig {
	if x != nil {
		return x.CertifyReward
	}
	return nil
}

func (x *UserConfig) GetRegisterSurvey() *RegisterSurvey {
	if x != nil {
		return x.RegisterSurvey
	}
	return nil
}

func (x *UserConfig) GetRecruitPopup() *RecruitPopup {
	if x != nil {
		return x.RecruitPopup
	}
	return nil
}

func (x *UserConfig) GetMinorLimit() *MinorLimit {
	if x != nil {
		return x.MinorLimit
	}
	return nil
}

func (x *UserConfig) GetLoginLimitMsg() string {
	if x != nil {
		return x.LoginLimitMsg
	}
	return ""
}

func (x *UserConfig) GetAgeTipsText() string {
	if x != nil {
		return x.AgeTipsText
	}
	return ""
}

func (x *UserConfig) GetCertifyRewardImage() string {
	if x != nil {
		return x.CertifyRewardImage
	}
	return ""
}

func (x *UserConfig) GetNewUserConfig() *NewUserConfig {
	if x != nil {
		return x.NewUserConfig
	}
	return nil
}

func (x *UserConfig) GetOpenCpButton() int32 {
	if x != nil {
		return x.OpenCpButton
	}
	return 0
}

func (x *UserConfig) GetAlipayCertify() int32 {
	if x != nil {
		return x.AlipayCertify
	}
	return 0
}

func (x *UserConfig) GetChannelLoginFlag() int32 {
	if x != nil {
		return x.ChannelLoginFlag
	}
	return 0
}

func (x *UserConfig) GetCommentConfig() *CommentConfig {
	if x != nil {
		return x.CommentConfig
	}
	return nil
}

func (x *UserConfig) GetLoginPageFlag() int32 {
	if x != nil {
		return x.LoginPageFlag
	}
	return 0
}

func (x *UserConfig) GetContactText() string {
	if x != nil {
		return x.ContactText
	}
	return ""
}

func (x *UserConfig) GetLoginHomeCount() int32 {
	if x != nil {
		return x.LoginHomeCount
	}
	return 0
}

func (x *UserConfig) GetUnityFlags() *UnityFlags {
	if x != nil {
		return x.UnityFlags
	}
	return nil
}

func (x *UserConfig) GetUseTopon() int32 {
	if x != nil {
		return x.UseTopon
	}
	return 0
}

func (x *UserConfig) GetIdfaConfig() *IdfaConfig {
	if x != nil {
		return x.IdfaConfig
	}
	return nil
}

func (x *UserConfig) GetVisitorFlag() int32 {
	if x != nil {
		return x.VisitorFlag
	}
	return 0
}

func (x *UserConfig) GetThirdFailedVisitorFlag() int32 {
	if x != nil {
		return x.ThirdFailedVisitorFlag
	}
	return 0
}

func (x *UserConfig) GetThirdFailedVisitorMarket() []string {
	if x != nil {
		return x.ThirdFailedVisitorMarket
	}
	return nil
}

func (x *UserConfig) GetRelivePackAutoPopCount() int32 {
	if x != nil {
		return x.RelivePackAutoPopCount
	}
	return 0
}

type UnityFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnityFlags) Reset() {
	*x = UnityFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityFlags) ProtoMessage() {}

func (x *UnityFlags) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityFlags.ProtoReflect.Descriptor instead.
func (*UnityFlags) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{74}
}

type MinorLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAge         int32         `protobuf:"varint,1,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`                           //小于这个18值的是未成年
	HideGameVoice  int32         `protobuf:"varint,2,opt,name=hide_game_voice,json=hideGameVoice,proto3" json:"hide_game_voice,omitempty"`    //1隐藏
	HideFriendRank int32         `protobuf:"varint,3,opt,name=hide_friend_rank,json=hideFriendRank,proto3" json:"hide_friend_rank,omitempty"` //1隐藏
	OrderCurator   *OrderCurator `protobuf:"bytes,4,opt,name=order_curator,json=orderCurator,proto3" json:"order_curator,omitempty"`
}

func (x *MinorLimit) Reset() {
	*x = MinorLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinorLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinorLimit) ProtoMessage() {}

func (x *MinorLimit) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinorLimit.ProtoReflect.Descriptor instead.
func (*MinorLimit) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{75}
}

func (x *MinorLimit) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *MinorLimit) GetHideGameVoice() int32 {
	if x != nil {
		return x.HideGameVoice
	}
	return 0
}

func (x *MinorLimit) GetHideFriendRank() int32 {
	if x != nil {
		return x.HideFriendRank
	}
	return 0
}

func (x *MinorLimit) GetOrderCurator() *OrderCurator {
	if x != nil {
		return x.OrderCurator
	}
	return nil
}

type OrderCurator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Need int32  `protobuf:"varint,2,opt,name=need,proto3" json:"need,omitempty"` //1要弹
}

func (x *OrderCurator) Reset() {
	*x = OrderCurator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCurator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCurator) ProtoMessage() {}

func (x *OrderCurator) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCurator.ProtoReflect.Descriptor instead.
func (*OrderCurator) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{76}
}

func (x *OrderCurator) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *OrderCurator) GetNeed() int32 {
	if x != nil {
		return x.Need
	}
	return 0
}

type FlagsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisitorFlag                       int32 `protobuf:"varint,1,opt,name=visitor_flag,json=visitorFlag,proto3" json:"visitor_flag,omitempty"`
	DeleteArrayOes                    int32 `protobuf:"varint,2,opt,name=delete_array_oes,json=deleteArrayOes,proto3" json:"delete_array_oes,omitempty"`
	FirstBloodSoundEffect             int32 `protobuf:"varint,3,opt,name=first_blood_sound_effect,json=firstBloodSoundEffect,proto3" json:"first_blood_sound_effect,omitempty"` //1是新音效，0默认音效
	OpenWeddingListAnim               int32 `protobuf:"varint,4,opt,name=open_wedding_list_anim,json=openWeddingListAnim,proto3" json:"open_wedding_list_anim,omitempty"`       // 是否开启教堂婚礼列表动画
	TcpPushStash                      int32 `protobuf:"varint,5,opt,name=tcp_push_stash,json=tcpPushStash,proto3" json:"tcp_push_stash,omitempty"`                              //是否开启暂存
	OpenGotoUnityEndless              int32 `protobuf:"varint,6,opt,name=open_goto_unity_endless,json=openGotoUnityEndless,proto3" json:"open_goto_unity_endless,omitempty"`
	OldSingleGameSettle               int32 `protobuf:"varint,7,opt,name=old_single_game_settle,json=oldSingleGameSettle,proto3" json:"old_single_game_settle,omitempty"`
	SgEndUiFlag                       int32 `protobuf:"varint,8,opt,name=sg_end_ui_flag,json=sgEndUiFlag,proto3" json:"sg_end_ui_flag,omitempty"`
	SigmobDelay                       int32 `protobuf:"varint,9,opt,name=sigmob_delay,json=sigmobDelay,proto3" json:"sigmob_delay,omitempty"`
	CloseOffScreenRendering           int32 `protobuf:"varint,10,opt,name=close_off_screen_rendering,json=closeOffScreenRendering,proto3" json:"close_off_screen_rendering,omitempty"`
	MemoryDotDelay                    int32 `protobuf:"varint,11,opt,name=memory_dot_delay,json=memoryDotDelay,proto3" json:"memory_dot_delay,omitempty"`
	GlCheckAppState                   int32 `protobuf:"varint,12,opt,name=gl_check_app_state,json=glCheckAppState,proto3" json:"gl_check_app_state,omitempty"`
	IosOptimizeHomeSkinFlag           int32 `protobuf:"varint,13,opt,name=ios_optimize_home_skin_flag,json=iosOptimizeHomeSkinFlag,proto3" json:"ios_optimize_home_skin_flag,omitempty"`
	ChannelSocialHuaweiState          int32 `protobuf:"varint,14,opt,name=channel_social_huawei_state,json=channelSocialHuaweiState,proto3" json:"channel_social_huawei_state,omitempty"`
	ChannelSocialOppoState            int32 `protobuf:"varint,15,opt,name=channel_social_oppo_state,json=channelSocialOppoState,proto3" json:"channel_social_oppo_state,omitempty"`
	ChannelSocialVivoState            int32 `protobuf:"varint,16,opt,name=channel_social_vivo_state,json=channelSocialVivoState,proto3" json:"channel_social_vivo_state,omitempty"`
	NewImageChooser                   int32 `protobuf:"varint,17,opt,name=new_image_chooser,json=newImageChooser,proto3" json:"new_image_chooser,omitempty"`
	CloseNativeOperatorFlag           int32 `protobuf:"varint,18,opt,name=close_native_operator_flag,json=closeNativeOperatorFlag,proto3" json:"close_native_operator_flag,omitempty"`
	DownloaderState                   int32 `protobuf:"varint,19,opt,name=downloader_state,json=downloaderState,proto3" json:"downloader_state,omitempty"`
	DownloaderPauseStateV2            int32 `protobuf:"varint,20,opt,name=downloader_pause_state_v2,json=downloaderPauseStateV2,proto3" json:"downloader_pause_state_v2,omitempty"`
	CloseVideoMetalRender             int32 `protobuf:"varint,21,opt,name=close_video_metal_render,json=closeVideoMetalRender,proto3" json:"close_video_metal_render,omitempty"`
	JsbridgeStopHandleSpecialCharater int32 `protobuf:"varint,22,opt,name=jsbridge_stop_handle_special_charater,json=jsbridgeStopHandleSpecialCharater,proto3" json:"jsbridge_stop_handle_special_charater,omitempty"`
	OppoLoginFlag                     int32 `protobuf:"varint,23,opt,name=oppo_login_flag,json=oppoLoginFlag,proto3" json:"oppo_login_flag,omitempty"`
	OppoLoginRetryCount               int32 `protobuf:"varint,24,opt,name=oppo_login_retry_count,json=oppoLoginRetryCount,proto3" json:"oppo_login_retry_count,omitempty"`
	EnableWebveiwCopyFileToTemp       int32 `protobuf:"varint,25,opt,name=enable_webveiw_copy_file_to_temp,json=enableWebveiwCopyFileToTemp,proto3" json:"enable_webveiw_copy_file_to_temp,omitempty"`
	OpenGameProfiler                  int32 `protobuf:"varint,26,opt,name=open_game_profiler,json=openGameProfiler,proto3" json:"open_game_profiler,omitempty"`
	DisableInvisibleMemoryReclamation int32 `protobuf:"varint,27,opt,name=disable_invisible_memory_reclamation,json=disableInvisibleMemoryReclamation,proto3" json:"disable_invisible_memory_reclamation,omitempty"`
	YybTobidAdSwitch                  int32 `protobuf:"varint,28,opt,name=yyb_tobid_ad_switch,json=yybTobidAdSwitch,proto3" json:"yyb_tobid_ad_switch,omitempty"`
	NotShowIdfa                       int32 `protobuf:"varint,29,opt,name=not_show_idfa,json=notShowIdfa,proto3" json:"not_show_idfa,omitempty"`
}

func (x *FlagsConfig) Reset() {
	*x = FlagsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagsConfig) ProtoMessage() {}

func (x *FlagsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagsConfig.ProtoReflect.Descriptor instead.
func (*FlagsConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{77}
}

func (x *FlagsConfig) GetVisitorFlag() int32 {
	if x != nil {
		return x.VisitorFlag
	}
	return 0
}

func (x *FlagsConfig) GetDeleteArrayOes() int32 {
	if x != nil {
		return x.DeleteArrayOes
	}
	return 0
}

func (x *FlagsConfig) GetFirstBloodSoundEffect() int32 {
	if x != nil {
		return x.FirstBloodSoundEffect
	}
	return 0
}

func (x *FlagsConfig) GetOpenWeddingListAnim() int32 {
	if x != nil {
		return x.OpenWeddingListAnim
	}
	return 0
}

func (x *FlagsConfig) GetTcpPushStash() int32 {
	if x != nil {
		return x.TcpPushStash
	}
	return 0
}

func (x *FlagsConfig) GetOpenGotoUnityEndless() int32 {
	if x != nil {
		return x.OpenGotoUnityEndless
	}
	return 0
}

func (x *FlagsConfig) GetOldSingleGameSettle() int32 {
	if x != nil {
		return x.OldSingleGameSettle
	}
	return 0
}

func (x *FlagsConfig) GetSgEndUiFlag() int32 {
	if x != nil {
		return x.SgEndUiFlag
	}
	return 0
}

func (x *FlagsConfig) GetSigmobDelay() int32 {
	if x != nil {
		return x.SigmobDelay
	}
	return 0
}

func (x *FlagsConfig) GetCloseOffScreenRendering() int32 {
	if x != nil {
		return x.CloseOffScreenRendering
	}
	return 0
}

func (x *FlagsConfig) GetMemoryDotDelay() int32 {
	if x != nil {
		return x.MemoryDotDelay
	}
	return 0
}

func (x *FlagsConfig) GetGlCheckAppState() int32 {
	if x != nil {
		return x.GlCheckAppState
	}
	return 0
}

func (x *FlagsConfig) GetIosOptimizeHomeSkinFlag() int32 {
	if x != nil {
		return x.IosOptimizeHomeSkinFlag
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialHuaweiState() int32 {
	if x != nil {
		return x.ChannelSocialHuaweiState
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialOppoState() int32 {
	if x != nil {
		return x.ChannelSocialOppoState
	}
	return 0
}

func (x *FlagsConfig) GetChannelSocialVivoState() int32 {
	if x != nil {
		return x.ChannelSocialVivoState
	}
	return 0
}

func (x *FlagsConfig) GetNewImageChooser() int32 {
	if x != nil {
		return x.NewImageChooser
	}
	return 0
}

func (x *FlagsConfig) GetCloseNativeOperatorFlag() int32 {
	if x != nil {
		return x.CloseNativeOperatorFlag
	}
	return 0
}

func (x *FlagsConfig) GetDownloaderState() int32 {
	if x != nil {
		return x.DownloaderState
	}
	return 0
}

func (x *FlagsConfig) GetDownloaderPauseStateV2() int32 {
	if x != nil {
		return x.DownloaderPauseStateV2
	}
	return 0
}

func (x *FlagsConfig) GetCloseVideoMetalRender() int32 {
	if x != nil {
		return x.CloseVideoMetalRender
	}
	return 0
}

func (x *FlagsConfig) GetJsbridgeStopHandleSpecialCharater() int32 {
	if x != nil {
		return x.JsbridgeStopHandleSpecialCharater
	}
	return 0
}

func (x *FlagsConfig) GetOppoLoginFlag() int32 {
	if x != nil {
		return x.OppoLoginFlag
	}
	return 0
}

func (x *FlagsConfig) GetOppoLoginRetryCount() int32 {
	if x != nil {
		return x.OppoLoginRetryCount
	}
	return 0
}

func (x *FlagsConfig) GetEnableWebveiwCopyFileToTemp() int32 {
	if x != nil {
		return x.EnableWebveiwCopyFileToTemp
	}
	return 0
}

func (x *FlagsConfig) GetOpenGameProfiler() int32 {
	if x != nil {
		return x.OpenGameProfiler
	}
	return 0
}

func (x *FlagsConfig) GetDisableInvisibleMemoryReclamation() int32 {
	if x != nil {
		return x.DisableInvisibleMemoryReclamation
	}
	return 0
}

func (x *FlagsConfig) GetYybTobidAdSwitch() int32 {
	if x != nil {
		return x.YybTobidAdSwitch
	}
	return 0
}

func (x *FlagsConfig) GetNotShowIdfa() int32 {
	if x != nil {
		return x.NotShowIdfa
	}
	return 0
}

type FeedbackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	RegisterDays int32  `protobuf:"varint,3,opt,name=register_days,json=registerDays,proto3" json:"register_days,omitempty"`
	PlayCount    int32  `protobuf:"varint,4,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`
	Score        int32  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Limit        int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FeedbackConfig) Reset() {
	*x = FeedbackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackConfig) ProtoMessage() {}

func (x *FeedbackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackConfig.ProtoReflect.Descriptor instead.
func (*FeedbackConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{78}
}

func (x *FeedbackConfig) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *FeedbackConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FeedbackConfig) GetRegisterDays() int32 {
	if x != nil {
		return x.RegisterDays
	}
	return 0
}

func (x *FeedbackConfig) GetPlayCount() int32 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *FeedbackConfig) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FeedbackConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SettingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMultiTrans    int32             `protobuf:"varint,1,opt,name=game_multi_trans,json=gameMultiTrans,proto3" json:"game_multi_trans,omitempty"`
	EnableVolc        bool              `protobuf:"varint,2,opt,name=enable_volc,json=enableVolc,proto3" json:"enable_volc,omitempty"`
	EnableKoom        bool              `protobuf:"varint,3,opt,name=enable_koom,json=enableKoom,proto3" json:"enable_koom,omitempty"`
	NativeCrashReport bool              `protobuf:"varint,4,opt,name=native_crash_report,json=nativeCrashReport,proto3" json:"native_crash_report,omitempty"`
	DocVersion        *DocVersion       `protobuf:"bytes,5,opt,name=doc_version,json=docVersion,proto3" json:"doc_version,omitempty"`
	NetworkCheck      *NetworkCheck     `protobuf:"bytes,6,opt,name=network_check,json=networkCheck,proto3" json:"network_check,omitempty"`
	Prometheus        *Prometheus       `protobuf:"bytes,7,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	OkhttpDispatcher  *OkhttpDispatcher `protobuf:"bytes,8,opt,name=okhttp_dispatcher,json=okhttpDispatcher,proto3" json:"okhttp_dispatcher,omitempty"`
	MemSwitch         *MemSwitch        `protobuf:"bytes,9,opt,name=mem_switch,json=memSwitch,proto3" json:"mem_switch,omitempty"`
}

func (x *SettingConfig) Reset() {
	*x = SettingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingConfig) ProtoMessage() {}

func (x *SettingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingConfig.ProtoReflect.Descriptor instead.
func (*SettingConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{79}
}

func (x *SettingConfig) GetGameMultiTrans() int32 {
	if x != nil {
		return x.GameMultiTrans
	}
	return 0
}

func (x *SettingConfig) GetEnableVolc() bool {
	if x != nil {
		return x.EnableVolc
	}
	return false
}

func (x *SettingConfig) GetEnableKoom() bool {
	if x != nil {
		return x.EnableKoom
	}
	return false
}

func (x *SettingConfig) GetNativeCrashReport() bool {
	if x != nil {
		return x.NativeCrashReport
	}
	return false
}

func (x *SettingConfig) GetDocVersion() *DocVersion {
	if x != nil {
		return x.DocVersion
	}
	return nil
}

func (x *SettingConfig) GetNetworkCheck() *NetworkCheck {
	if x != nil {
		return x.NetworkCheck
	}
	return nil
}

func (x *SettingConfig) GetPrometheus() *Prometheus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *SettingConfig) GetOkhttpDispatcher() *OkhttpDispatcher {
	if x != nil {
		return x.OkhttpDispatcher
	}
	return nil
}

func (x *SettingConfig) GetMemSwitch() *MemSwitch {
	if x != nil {
		return x.MemSwitch
	}
	return nil
}

// 用户协议、隐私政策、未成年声明
type DocVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agreement       string `protobuf:"bytes,1,opt,name=agreement,proto3" json:"agreement,omitempty"`
	Privacy         string `protobuf:"bytes,2,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Announce        string `protobuf:"bytes,3,opt,name=announce,proto3" json:"announce,omitempty"`
	InfoSharingList string `protobuf:"bytes,4,opt,name=info_sharing_list,json=infoSharingList,proto3" json:"info_sharing_list,omitempty"`
	PersonalInfo    string `protobuf:"bytes,5,opt,name=personal_info,json=personalInfo,proto3" json:"personal_info,omitempty"`
}

func (x *DocVersion) Reset() {
	*x = DocVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocVersion) ProtoMessage() {}

func (x *DocVersion) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocVersion.ProtoReflect.Descriptor instead.
func (*DocVersion) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{80}
}

func (x *DocVersion) GetAgreement() string {
	if x != nil {
		return x.Agreement
	}
	return ""
}

func (x *DocVersion) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *DocVersion) GetAnnounce() string {
	if x != nil {
		return x.Announce
	}
	return ""
}

func (x *DocVersion) GetInfoSharingList() string {
	if x != nil {
		return x.InfoSharingList
	}
	return ""
}

func (x *DocVersion) GetPersonalInfo() string {
	if x != nil {
		return x.PersonalInfo
	}
	return ""
}

type NetworkCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Target   string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Open     int32  `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"` //1开0隐藏
}

func (x *NetworkCheck) Reset() {
	*x = NetworkCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCheck) ProtoMessage() {}

func (x *NetworkCheck) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCheck.ProtoReflect.Descriptor instead.
func (*NetworkCheck) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{81}
}

func (x *NetworkCheck) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *NetworkCheck) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *NetworkCheck) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

type Prometheus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch              int32 `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	BitmapMemThreshold int32 `protobuf:"varint,2,opt,name=bitmap_mem_threshold,json=bitmapMemThreshold,proto3" json:"bitmap_mem_threshold,omitempty"`
	Enabled            bool  `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Prometheus) Reset() {
	*x = Prometheus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prometheus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prometheus) ProtoMessage() {}

func (x *Prometheus) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prometheus.ProtoReflect.Descriptor instead.
func (*Prometheus) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{82}
}

func (x *Prometheus) GetBatch() int32 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *Prometheus) GetBitmapMemThreshold() int32 {
	if x != nil {
		return x.BitmapMemThreshold
	}
	return 0
}

func (x *Prometheus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type OkhttpDispatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueCapacity int32 `protobuf:"varint,1,opt,name=queue_capacity,json=queueCapacity,proto3" json:"queue_capacity,omitempty"`
	KeepLiveTime  int32 `protobuf:"varint,2,opt,name=keep_live_time,json=keepLiveTime,proto3" json:"keep_live_time,omitempty"`
}

func (x *OkhttpDispatcher) Reset() {
	*x = OkhttpDispatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkhttpDispatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkhttpDispatcher) ProtoMessage() {}

func (x *OkhttpDispatcher) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkhttpDispatcher.ProtoReflect.Descriptor instead.
func (*OkhttpDispatcher) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{83}
}

func (x *OkhttpDispatcher) GetQueueCapacity() int32 {
	if x != nil {
		return x.QueueCapacity
	}
	return 0
}

func (x *OkhttpDispatcher) GetKeepLiveTime() int32 {
	if x != nil {
		return x.KeepLiveTime
	}
	return 0
}

type MemSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rgb565Enabled       bool    `protobuf:"varint,1,opt,name=rgb565_enabled,json=rgb565Enabled,proto3" json:"rgb565_enabled,omitempty"`
	Rgb565Transform     bool    `protobuf:"varint,2,opt,name=rgb565_transform,json=rgb565Transform,proto3" json:"rgb565_transform,omitempty"`
	ImageBgOpt          bool    `protobuf:"varint,3,opt,name=image_bg_opt,json=imageBgOpt,proto3" json:"image_bg_opt,omitempty"`
	AnimReportEnabled   bool    `protobuf:"varint,4,opt,name=anim_report_enabled,json=animReportEnabled,proto3" json:"anim_report_enabled,omitempty"`
	FixStartPageMemLeak bool    `protobuf:"varint,5,opt,name=fix_start_page_mem_leak,json=fixStartPageMemLeak,proto3" json:"fix_start_page_mem_leak,omitempty"`
	AnimSampleRate      float64 `protobuf:"fixed64,6,opt,name=anim_sample_rate,json=animSampleRate,proto3" json:"anim_sample_rate,omitempty"`
}

func (x *MemSwitch) Reset() {
	*x = MemSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemSwitch) ProtoMessage() {}

func (x *MemSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemSwitch.ProtoReflect.Descriptor instead.
func (*MemSwitch) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{84}
}

func (x *MemSwitch) GetRgb565Enabled() bool {
	if x != nil {
		return x.Rgb565Enabled
	}
	return false
}

func (x *MemSwitch) GetRgb565Transform() bool {
	if x != nil {
		return x.Rgb565Transform
	}
	return false
}

func (x *MemSwitch) GetImageBgOpt() bool {
	if x != nil {
		return x.ImageBgOpt
	}
	return false
}

func (x *MemSwitch) GetAnimReportEnabled() bool {
	if x != nil {
		return x.AnimReportEnabled
	}
	return false
}

func (x *MemSwitch) GetFixStartPageMemLeak() bool {
	if x != nil {
		return x.FixStartPageMemLeak
	}
	return false
}

func (x *MemSwitch) GetAnimSampleRate() float64 {
	if x != nil {
		return x.AnimSampleRate
	}
	return 0
}

type BindConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgUrl    string `protobuf:"bytes,1,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`
	CanClose int32  `protobuf:"varint,2,opt,name=can_close,json=canClose,proto3" json:"can_close,omitempty"`
}

func (x *BindConfig) Reset() {
	*x = BindConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindConfig) ProtoMessage() {}

func (x *BindConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindConfig.ProtoReflect.Descriptor instead.
func (*BindConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{85}
}

func (x *BindConfig) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *BindConfig) GetCanClose() int32 {
	if x != nil {
		return x.CanClose
	}
	return 0
}

type RenamePopupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewbieClub      *NewbieClub      `protobuf:"bytes,1,opt,name=newbie_club,json=newbieClub,proto3" json:"newbie_club,omitempty"`
	QualifyingMatch *QualifyingMatch `protobuf:"bytes,2,opt,name=qualifying_match,json=qualifyingMatch,proto3" json:"qualifying_match,omitempty"`
}

func (x *RenamePopupRule) Reset() {
	*x = RenamePopupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenamePopupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenamePopupRule) ProtoMessage() {}

func (x *RenamePopupRule) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenamePopupRule.ProtoReflect.Descriptor instead.
func (*RenamePopupRule) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{86}
}

func (x *RenamePopupRule) GetNewbieClub() *NewbieClub {
	if x != nil {
		return x.NewbieClub
	}
	return nil
}

func (x *RenamePopupRule) GetQualifyingMatch() *QualifyingMatch {
	if x != nil {
		return x.QualifyingMatch
	}
	return nil
}

type QualifyingMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QualifyingMatch) Reset() {
	*x = QualifyingMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingMatch) ProtoMessage() {}

func (x *QualifyingMatch) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingMatch.ProtoReflect.Descriptor instead.
func (*QualifyingMatch) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{87}
}

func (x *QualifyingMatch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type NewbieClub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Limit    int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *NewbieClub) Reset() {
	*x = NewbieClub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieClub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieClub) ProtoMessage() {}

func (x *NewbieClub) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieClub.ProtoReflect.Descriptor instead.
func (*NewbieClub) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{88}
}

func (x *NewbieClub) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *NewbieClub) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GameEndSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeUrl string `protobuf:"bytes,1,opt,name=notice_url,json=noticeUrl,proto3" json:"notice_url,omitempty"` //气泡图
	Link      string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`                            //跳转库
}

func (x *GameEndSkin) Reset() {
	*x = GameEndSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndSkin) ProtoMessage() {}

func (x *GameEndSkin) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndSkin.ProtoReflect.Descriptor instead.
func (*GameEndSkin) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{89}
}

func (x *GameEndSkin) GetNoticeUrl() string {
	if x != nil {
		return x.NoticeUrl
	}
	return ""
}

func (x *GameEndSkin) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type DeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model        string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`               //手机型号(MODEL)
	Product      string `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`           //当前手机品牌(PRODUCT)
	Brand        string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`               //手机厂商(BOARD)
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"` //设备制造商(MANUFACTURER)
}

func (x *DeviceConfig) Reset() {
	*x = DeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfig) ProtoMessage() {}

func (x *DeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfig.ProtoReflect.Descriptor instead.
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{90}
}

func (x *DeviceConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceConfig) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *DeviceConfig) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *DeviceConfig) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

type AntiAddiction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notify         *Notify        `protobuf:"bytes,1,opt,name=notify,proto3" json:"notify,omitempty"`
	MinorNotify    *MinorNotify   `protobuf:"bytes,2,opt,name=minor_notify,json=minorNotify,proto3" json:"minor_notify,omitempty"` // 14岁以上未成年防沉迷配置
	SafeGameNotify string         `protobuf:"bytes,3,opt,name=safe_game_notify,json=safeGameNotify,proto3" json:"safe_game_notify,omitempty"`
	PayNotify      *PayNotify     `protobuf:"bytes,4,opt,name=pay_notify,json=payNotify,proto3" json:"pay_notify,omitempty"`
	SocialDesc     *SocialDesc    `protobuf:"bytes,5,opt,name=social_desc,json=socialDesc,proto3" json:"social_desc,omitempty"`
	IdentityAge    *IdentityAge   `protobuf:"bytes,6,opt,name=identity_age,json=identityAge,proto3" json:"identity_age,omitempty"`
	CertifyNotify  *CertifyNotify `protobuf:"bytes,7,opt,name=certify_notify,json=certifyNotify,proto3" json:"certify_notify,omitempty"`
	CertifyUrl     string         `protobuf:"bytes,8,opt,name=certify_url,json=certifyUrl,proto3" json:"certify_url,omitempty"`
	InfantNotify   *MinorNotify   `protobuf:"bytes,9,opt,name=infant_notify,json=infantNotify,proto3" json:"infant_notify,omitempty"` // 12岁以下防沉迷配置，已废弃
	NeedCertify    int32          `protobuf:"varint,10,opt,name=need_certify,json=needCertify,proto3" json:"need_certify,omitempty"`  // 实名开关，已废弃
}

func (x *AntiAddiction) Reset() {
	*x = AntiAddiction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiAddiction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiAddiction) ProtoMessage() {}

func (x *AntiAddiction) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiAddiction.ProtoReflect.Descriptor instead.
func (*AntiAddiction) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{91}
}

func (x *AntiAddiction) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *AntiAddiction) GetMinorNotify() *MinorNotify {
	if x != nil {
		return x.MinorNotify
	}
	return nil
}

func (x *AntiAddiction) GetSafeGameNotify() string {
	if x != nil {
		return x.SafeGameNotify
	}
	return ""
}

func (x *AntiAddiction) GetPayNotify() *PayNotify {
	if x != nil {
		return x.PayNotify
	}
	return nil
}

func (x *AntiAddiction) GetSocialDesc() *SocialDesc {
	if x != nil {
		return x.SocialDesc
	}
	return nil
}

func (x *AntiAddiction) GetIdentityAge() *IdentityAge {
	if x != nil {
		return x.IdentityAge
	}
	return nil
}

func (x *AntiAddiction) GetCertifyNotify() *CertifyNotify {
	if x != nil {
		return x.CertifyNotify
	}
	return nil
}

func (x *AntiAddiction) GetCertifyUrl() string {
	if x != nil {
		return x.CertifyUrl
	}
	return ""
}

func (x *AntiAddiction) GetInfantNotify() *MinorNotify {
	if x != nil {
		return x.InfantNotify
	}
	return nil
}

func (x *AntiAddiction) GetNeedCertify() int32 {
	if x != nil {
		return x.NeedCertify
	}
	return 0
}

type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uncertified []*CertifyGameConfig `protobuf:"bytes,1,rep,name=uncertified,proto3" json:"uncertified,omitempty"`
	Minor       []*CertifyGameConfig `protobuf:"bytes,2,rep,name=minor,proto3" json:"minor,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{92}
}

func (x *Notify) GetUncertified() []*CertifyGameConfig {
	if x != nil {
		return x.Uncertified
	}
	return nil
}

func (x *Notify) GetMinor() []*CertifyGameConfig {
	if x != nil {
		return x.Minor
	}
	return nil
}

//*
// game_time : 10800
// msg : 【健康系统】您今日的累计游戏时间已经超过3小时，为了您的健康，请您下线休息，做适当身体活动，注意劳逸结合。
type CertifyGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime     int32  `protobuf:"varint,1,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	Msg          string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	IntervalTime int32  `protobuf:"varint,3,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`
}

func (x *CertifyGameConfig) Reset() {
	*x = CertifyGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyGameConfig) ProtoMessage() {}

func (x *CertifyGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyGameConfig.ProtoReflect.Descriptor instead.
func (*CertifyGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{93}
}

func (x *CertifyGameConfig) GetGameTime() int32 {
	if x != nil {
		return x.GameTime
	}
	return 0
}

func (x *CertifyGameConfig) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CertifyGameConfig) GetIntervalTime() int32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

//*
// "login_text": "为空则没有宵禁","begin": "22:00","end": "08:00",
//         "workday_active": 3600,"holiday_active": 10800,"active_text": "超时提醒",
//         "active_notice": "剩余活跃时间提醒{remain}占位","notice_interval": 1800
type MinorNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginText      string `protobuf:"bytes,1,opt,name=login_text,json=loginText,proto3" json:"login_text,omitempty"`
	Begin          string `protobuf:"bytes,2,opt,name=begin,proto3" json:"begin,omitempty"`
	End            string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	WorkdayActive  int32  `protobuf:"varint,4,opt,name=workday_active,json=workdayActive,proto3" json:"workday_active,omitempty"`
	HolidayActive  int32  `protobuf:"varint,5,opt,name=holiday_active,json=holidayActive,proto3" json:"holiday_active,omitempty"`
	ActiveText     string `protobuf:"bytes,6,opt,name=active_text,json=activeText,proto3" json:"active_text,omitempty"`
	ActiveNotice   string `protobuf:"bytes,7,opt,name=active_notice,json=activeNotice,proto3" json:"active_notice,omitempty"`
	NoticeInterval int32  `protobuf:"varint,8,opt,name=notice_interval,json=noticeInterval,proto3" json:"notice_interval,omitempty"`
	AddictedFlag   int32  `protobuf:"varint,9,opt,name=addicted_flag,json=addictedFlag,proto3" json:"addicted_flag,omitempty"` //防沉迷开关 0关闭，1打开
	Title          string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ActiveTime     int32  `protobuf:"varint,11,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
}

func (x *MinorNotify) Reset() {
	*x = MinorNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinorNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinorNotify) ProtoMessage() {}

func (x *MinorNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinorNotify.ProtoReflect.Descriptor instead.
func (*MinorNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{94}
}

func (x *MinorNotify) GetLoginText() string {
	if x != nil {
		return x.LoginText
	}
	return ""
}

func (x *MinorNotify) GetBegin() string {
	if x != nil {
		return x.Begin
	}
	return ""
}

func (x *MinorNotify) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *MinorNotify) GetWorkdayActive() int32 {
	if x != nil {
		return x.WorkdayActive
	}
	return 0
}

func (x *MinorNotify) GetHolidayActive() int32 {
	if x != nil {
		return x.HolidayActive
	}
	return 0
}

func (x *MinorNotify) GetActiveText() string {
	if x != nil {
		return x.ActiveText
	}
	return ""
}

func (x *MinorNotify) GetActiveNotice() string {
	if x != nil {
		return x.ActiveNotice
	}
	return ""
}

func (x *MinorNotify) GetNoticeInterval() int32 {
	if x != nil {
		return x.NoticeInterval
	}
	return 0
}

func (x *MinorNotify) GetAddictedFlag() int32 {
	if x != nil {
		return x.AddictedFlag
	}
	return 0
}

func (x *MinorNotify) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MinorNotify) GetActiveTime() int32 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

type PayNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minor       string `protobuf:"bytes,1,opt,name=minor,proto3" json:"minor,omitempty"`
	CertifyFlag int32  `protobuf:"varint,2,opt,name=certify_flag,json=certifyFlag,proto3" json:"certify_flag,omitempty"` //0不弹窗，1弹窗可充值，2弹窗不可充值
}

func (x *PayNotify) Reset() {
	*x = PayNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotify) ProtoMessage() {}

func (x *PayNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotify.ProtoReflect.Descriptor instead.
func (*PayNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{95}
}

func (x *PayNotify) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

func (x *PayNotify) GetCertifyFlag() int32 {
	if x != nil {
		return x.CertifyFlag
	}
	return 0
}

type SocialDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast string `protobuf:"bytes,1,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	World     string `protobuf:"bytes,2,opt,name=world,proto3" json:"world,omitempty"`
	Friend    string `protobuf:"bytes,3,opt,name=friend,proto3" json:"friend,omitempty"`
	Clan      string `protobuf:"bytes,4,opt,name=clan,proto3" json:"clan,omitempty"`
}

func (x *SocialDesc) Reset() {
	*x = SocialDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialDesc) ProtoMessage() {}

func (x *SocialDesc) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialDesc.ProtoReflect.Descriptor instead.
func (*SocialDesc) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{96}
}

func (x *SocialDesc) GetBroadcast() string {
	if x != nil {
		return x.Broadcast
	}
	return ""
}

func (x *SocialDesc) GetWorld() string {
	if x != nil {
		return x.World
	}
	return ""
}

func (x *SocialDesc) GetFriend() string {
	if x != nil {
		return x.Friend
	}
	return ""
}

func (x *SocialDesc) GetClan() string {
	if x != nil {
		return x.Clan
	}
	return ""
}

type IdentityAge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minor  int32 `protobuf:"varint,1,opt,name=minor,proto3" json:"minor,omitempty"`
	Infant int32 `protobuf:"varint,2,opt,name=infant,proto3" json:"infant,omitempty"`
}

func (x *IdentityAge) Reset() {
	*x = IdentityAge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAge) ProtoMessage() {}

func (x *IdentityAge) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAge.ProtoReflect.Descriptor instead.
func (*IdentityAge) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{97}
}

func (x *IdentityAge) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *IdentityAge) GetInfant() int32 {
	if x != nil {
		return x.Infant
	}
	return 0
}

type CertifyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveLimit  int32    `protobuf:"varint,1,opt,name=active_limit,json=activeLimit,proto3" json:"active_limit,omitempty"`
	Interval     int32    `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Limit        int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Flag         int32    `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"` // 0不弹，1弹窗可关，2弹窗不可关
	IgnoreMarket []string `protobuf:"bytes,5,rep,name=ignore_market,json=ignoreMarket,proto3" json:"ignore_market,omitempty"`
	ForceMarket  []string `protobuf:"bytes,6,rep,name=force_market,json=forceMarket,proto3" json:"force_market,omitempty"`
}

func (x *CertifyNotify) Reset() {
	*x = CertifyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyNotify) ProtoMessage() {}

func (x *CertifyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyNotify.ProtoReflect.Descriptor instead.
func (*CertifyNotify) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{98}
}

func (x *CertifyNotify) GetActiveLimit() int32 {
	if x != nil {
		return x.ActiveLimit
	}
	return 0
}

func (x *CertifyNotify) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *CertifyNotify) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CertifyNotify) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *CertifyNotify) GetIgnoreMarket() []string {
	if x != nil {
		return x.IgnoreMarket
	}
	return nil
}

func (x *CertifyNotify) GetForceMarket() []string {
	if x != nil {
		return x.ForceMarket
	}
	return nil
}

type IdfaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward     []*config.RewardConfig `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward,omitempty"`
	IosVersion string                 `protobuf:"bytes,2,opt,name=ios_version,json=iosVersion,proto3" json:"ios_version,omitempty"`
	Force      bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	LoginCount int32                  `protobuf:"varint,4,opt,name=login_count,json=loginCount,proto3" json:"login_count,omitempty"`
	FirstPop   int32                  `protobuf:"varint,5,opt,name=first_pop,json=firstPop,proto3" json:"first_pop,omitempty"`
	Interval   int32                  `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *IdfaConfig) Reset() {
	*x = IdfaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdfaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdfaConfig) ProtoMessage() {}

func (x *IdfaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdfaConfig.ProtoReflect.Descriptor instead.
func (*IdfaConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{99}
}

func (x *IdfaConfig) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *IdfaConfig) GetIosVersion() string {
	if x != nil {
		return x.IosVersion
	}
	return ""
}

func (x *IdfaConfig) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *IdfaConfig) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *IdfaConfig) GetFirstPop() int32 {
	if x != nil {
		return x.FirstPop
	}
	return 0
}

func (x *IdfaConfig) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type CommentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score       int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	SwitchState int32 `protobuf:"varint,2,opt,name=switch_state,json=switchState,proto3" json:"switch_state,omitempty"`
}

func (x *CommentConfig) Reset() {
	*x = CommentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentConfig) ProtoMessage() {}

func (x *CommentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentConfig.ProtoReflect.Descriptor instead.
func (*CommentConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{100}
}

func (x *CommentConfig) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CommentConfig) GetSwitchState() int32 {
	if x != nil {
		return x.SwitchState
	}
	return 0
}

type RegisterSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32                  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`                             //1开0关
	Score        int64                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                               //分数条件
	NewUserDay   int32                  `protobuf:"varint,3,opt,name=new_user_day,json=newUserDay,proto3" json:"new_user_day,omitempty"` //注册多少天内算新手
	QaUrl        string                 `protobuf:"bytes,4,opt,name=qa_url,json=qaUrl,proto3" json:"qa_url,omitempty"`                   //问卷链接，需替换 {uid}
	MailTitle    string                 `protobuf:"bytes,5,opt,name=mail_title,json=mailTitle,proto3" json:"mail_title,omitempty"`
	MailContent  string                 `protobuf:"bytes,6,opt,name=mail_content,json=mailContent,proto3" json:"mail_content,omitempty"`
	Reward       []*config.RewardConfig `protobuf:"bytes,7,rep,name=reward,proto3" json:"reward,omitempty"`
	SecretaryMsg string                 `protobuf:"bytes,8,opt,name=secretary_msg,json=secretaryMsg,proto3" json:"secretary_msg,omitempty"`
	SurveyIds    []int32                `protobuf:"varint,9,rep,packed,name=survey_ids,json=surveyIds,proto3" json:"survey_ids,omitempty"`
}

func (x *RegisterSurvey) Reset() {
	*x = RegisterSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSurvey) ProtoMessage() {}

func (x *RegisterSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSurvey.ProtoReflect.Descriptor instead.
func (*RegisterSurvey) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{101}
}

func (x *RegisterSurvey) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *RegisterSurvey) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RegisterSurvey) GetNewUserDay() int32 {
	if x != nil {
		return x.NewUserDay
	}
	return 0
}

func (x *RegisterSurvey) GetQaUrl() string {
	if x != nil {
		return x.QaUrl
	}
	return ""
}

func (x *RegisterSurvey) GetMailTitle() string {
	if x != nil {
		return x.MailTitle
	}
	return ""
}

func (x *RegisterSurvey) GetMailContent() string {
	if x != nil {
		return x.MailContent
	}
	return ""
}

func (x *RegisterSurvey) GetReward() []*config.RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *RegisterSurvey) GetSecretaryMsg() string {
	if x != nil {
		return x.SecretaryMsg
	}
	return ""
}

func (x *RegisterSurvey) GetSurveyIds() []int32 {
	if x != nil {
		return x.SurveyIds
	}
	return nil
}

type RecruitPopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       int32  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`                        //1开0关
	PlayCount    int64  `protobuf:"varint,2,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"` //局数条件
	Score        int64  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                          //分数条件
	QaUrl        string `protobuf:"bytes,4,opt,name=qa_url,json=qaUrl,proto3" json:"qa_url,omitempty"`              //问卷链接，需替换 {uid}
	Id           int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`                                // 期数
	BannerUrl    string `protobuf:"bytes,6,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	ScreenShare  int32  `protobuf:"varint,7,opt,name=screen_share,json=screenShare,proto3" json:"screen_share,omitempty"`
	SecretaryMsg string `protobuf:"bytes,8,opt,name=secretary_msg,json=secretaryMsg,proto3" json:"secretary_msg,omitempty"`
}

func (x *RecruitPopup) Reset() {
	*x = RecruitPopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitPopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitPopup) ProtoMessage() {}

func (x *RecruitPopup) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitPopup.ProtoReflect.Descriptor instead.
func (*RecruitPopup) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{102}
}

func (x *RecruitPopup) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *RecruitPopup) GetPlayCount() int64 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *RecruitPopup) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RecruitPopup) GetQaUrl() string {
	if x != nil {
		return x.QaUrl
	}
	return ""
}

func (x *RecruitPopup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecruitPopup) GetBannerUrl() string {
	if x != nil {
		return x.BannerUrl
	}
	return ""
}

func (x *RecruitPopup) GetScreenShare() int32 {
	if x != nil {
		return x.ScreenShare
	}
	return 0
}

func (x *RecruitPopup) GetSecretaryMsg() string {
	if x != nil {
		return x.SecretaryMsg
	}
	return ""
}

//*
// "new_user_config": {
//     "player_eat_food_rate_change_scope": 200,
//     "player_eat_food_count_for_increase_node": 10,
// 		"eat_food_rate_change_scope": 200,
//     "eat_food_count_for_increase_node": 10,
//     "guide_candy_total_count": 100, //新手引导糖果总个数
//   	"guide_candy_score": 100, //新手引导糖果分数
//     "free_revive_game_count": 5, //新手无尽前几局每局第一次免费复活
//   }
type NewUserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerEatFoodRateChangeScope      int32                  `protobuf:"varint,1,opt,name=player_eat_food_rate_change_scope,json=playerEatFoodRateChangeScope,proto3" json:"player_eat_food_rate_change_scope,omitempty"`
	PlayerEatFoodCountForIncreaseNode int32                  `protobuf:"varint,2,opt,name=player_eat_food_count_for_increase_node,json=playerEatFoodCountForIncreaseNode,proto3" json:"player_eat_food_count_for_increase_node,omitempty"`
	EatFoodRateChangeScope            int32                  `protobuf:"varint,3,opt,name=eat_food_rate_change_scope,json=eatFoodRateChangeScope,proto3" json:"eat_food_rate_change_scope,omitempty"`
	EatFoodCountForIncreaseNode       int32                  `protobuf:"varint,4,opt,name=eat_food_count_for_increase_node,json=eatFoodCountForIncreaseNode,proto3" json:"eat_food_count_for_increase_node,omitempty"`
	GuideCandyTotalCount              int32                  `protobuf:"varint,5,opt,name=guide_candy_total_count,json=guideCandyTotalCount,proto3" json:"guide_candy_total_count,omitempty"`
	GuideCandyScore                   int32                  `protobuf:"varint,6,opt,name=guide_candy_score,json=guideCandyScore,proto3" json:"guide_candy_score,omitempty"`
	FreeReviveGameCount               int32                  `protobuf:"varint,7,opt,name=free_revive_game_count,json=freeReviveGameCount,proto3" json:"free_revive_game_count,omitempty"`
	NewbieLoginDays                   int32                  `protobuf:"varint,8,opt,name=newbie_login_days,json=newbieLoginDays,proto3" json:"newbie_login_days,omitempty"`
	NewbieQualifyingCount             int32                  `protobuf:"varint,9,opt,name=newbie_qualifying_count,json=newbieQualifyingCount,proto3" json:"newbie_qualifying_count,omitempty"`
	NewbieEndlessCount                int32                  `protobuf:"varint,10,opt,name=newbie_endless_count,json=newbieEndlessCount,proto3" json:"newbie_endless_count,omitempty"`
	GuideType                         int32                  `protobuf:"varint,11,opt,name=guide_type,json=guideType,proto3" json:"guide_type,omitempty"`
	NewUserImg                        string                 `protobuf:"bytes,12,opt,name=new_user_img,json=newUserImg,proto3" json:"new_user_img,omitempty"`
	OldUserImg                        string                 `protobuf:"bytes,13,opt,name=old_user_img,json=oldUserImg,proto3" json:"old_user_img,omitempty"`
	GuideReward                       []*config.RewardConfig `protobuf:"bytes,14,rep,name=guide_reward,json=guideReward,proto3" json:"guide_reward,omitempty"`
	GuideSkipFlag                     int32                  `protobuf:"varint,15,opt,name=guide_skip_flag,json=guideSkipFlag,proto3" json:"guide_skip_flag,omitempty"` // 0关1开 新手引导流程修改实验开关
}

func (x *NewUserConfig) Reset() {
	*x = NewUserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserConfig) ProtoMessage() {}

func (x *NewUserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserConfig.ProtoReflect.Descriptor instead.
func (*NewUserConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{103}
}

func (x *NewUserConfig) GetPlayerEatFoodRateChangeScope() int32 {
	if x != nil {
		return x.PlayerEatFoodRateChangeScope
	}
	return 0
}

func (x *NewUserConfig) GetPlayerEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.PlayerEatFoodCountForIncreaseNode
	}
	return 0
}

func (x *NewUserConfig) GetEatFoodRateChangeScope() int32 {
	if x != nil {
		return x.EatFoodRateChangeScope
	}
	return 0
}

func (x *NewUserConfig) GetEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.EatFoodCountForIncreaseNode
	}
	return 0
}

func (x *NewUserConfig) GetGuideCandyTotalCount() int32 {
	if x != nil {
		return x.GuideCandyTotalCount
	}
	return 0
}

func (x *NewUserConfig) GetGuideCandyScore() int32 {
	if x != nil {
		return x.GuideCandyScore
	}
	return 0
}

func (x *NewUserConfig) GetFreeReviveGameCount() int32 {
	if x != nil {
		return x.FreeReviveGameCount
	}
	return 0
}

func (x *NewUserConfig) GetNewbieLoginDays() int32 {
	if x != nil {
		return x.NewbieLoginDays
	}
	return 0
}

func (x *NewUserConfig) GetNewbieQualifyingCount() int32 {
	if x != nil {
		return x.NewbieQualifyingCount
	}
	return 0
}

func (x *NewUserConfig) GetNewbieEndlessCount() int32 {
	if x != nil {
		return x.NewbieEndlessCount
	}
	return 0
}

func (x *NewUserConfig) GetGuideType() int32 {
	if x != nil {
		return x.GuideType
	}
	return 0
}

func (x *NewUserConfig) GetNewUserImg() string {
	if x != nil {
		return x.NewUserImg
	}
	return ""
}

func (x *NewUserConfig) GetOldUserImg() string {
	if x != nil {
		return x.OldUserImg
	}
	return ""
}

func (x *NewUserConfig) GetGuideReward() []*config.RewardConfig {
	if x != nil {
		return x.GuideReward
	}
	return nil
}

func (x *NewUserConfig) GetGuideSkipFlag() int32 {
	if x != nil {
		return x.GuideSkipFlag
	}
	return 0
}

// === offline_game_config start ========================================
type ReviveConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdRevive      int32 `protobuf:"varint,1,opt,name=ad_revive,json=adRevive,proto3" json:"ad_revive,omitempty"`
	CardRevive    int32 `protobuf:"varint,2,opt,name=card_revive,json=cardRevive,proto3" json:"card_revive,omitempty"`
	DiamondRevive int32 `protobuf:"varint,3,opt,name=diamond_revive,json=diamondRevive,proto3" json:"diamond_revive,omitempty"`
}

func (x *ReviveConfigItem) Reset() {
	*x = ReviveConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviveConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviveConfigItem) ProtoMessage() {}

func (x *ReviveConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviveConfigItem.ProtoReflect.Descriptor instead.
func (*ReviveConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{104}
}

func (x *ReviveConfigItem) GetAdRevive() int32 {
	if x != nil {
		return x.AdRevive
	}
	return 0
}

func (x *ReviveConfigItem) GetCardRevive() int32 {
	if x != nil {
		return x.CardRevive
	}
	return 0
}

func (x *ReviveConfigItem) GetDiamondRevive() int32 {
	if x != nil {
		return x.DiamondRevive
	}
	return 0
}

type SingleGameAiConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLength      int64   `protobuf:"varint,1,opt,name=start_length,json=startLength,proto3" json:"start_length,omitempty"`
	BorderDisFactor  float64 `protobuf:"fixed64,2,opt,name=border_dis_factor,json=borderDisFactor,proto3" json:"border_dis_factor,omitempty"`
	SnakeDisFactor   float64 `protobuf:"fixed64,3,opt,name=snake_dis_factor,json=snakeDisFactor,proto3" json:"snake_dis_factor,omitempty"`
	WreckDisFactor   float64 `protobuf:"fixed64,4,opt,name=wreck_dis_factor,json=wreckDisFactor,proto3" json:"wreck_dis_factor,omitempty"`
	AiSnakeViewAngle float64 `protobuf:"fixed64,5,opt,name=ai_snake_view_angle,json=aiSnakeViewAngle,proto3" json:"ai_snake_view_angle,omitempty"`
}

func (x *SingleGameAiConfigItem) Reset() {
	*x = SingleGameAiConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleGameAiConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleGameAiConfigItem) ProtoMessage() {}

func (x *SingleGameAiConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleGameAiConfigItem.ProtoReflect.Descriptor instead.
func (*SingleGameAiConfigItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{105}
}

func (x *SingleGameAiConfigItem) GetStartLength() int64 {
	if x != nil {
		return x.StartLength
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetBorderDisFactor() float64 {
	if x != nil {
		return x.BorderDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetSnakeDisFactor() float64 {
	if x != nil {
		return x.SnakeDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetWreckDisFactor() float64 {
	if x != nil {
		return x.WreckDisFactor
	}
	return 0
}

func (x *SingleGameAiConfigItem) GetAiSnakeViewAngle() float64 {
	if x != nil {
		return x.AiSnakeViewAngle
	}
	return 0
}

type FloaterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BornLen      []int32 `protobuf:"varint,1,rep,packed,name=born_len,json=bornLen,proto3" json:"born_len,omitempty"`
	BornCount    int32   `protobuf:"varint,2,opt,name=born_count,json=bornCount,proto3" json:"born_count,omitempty"`
	BornCountV2  int32   `protobuf:"varint,3,opt,name=born_count_v2,json=bornCountV2,proto3" json:"born_count_v2,omitempty"`
	BornRadius   int32   `protobuf:"varint,4,opt,name=born_radius,json=bornRadius,proto3" json:"born_radius,omitempty"`
	FloaterScore int32   `protobuf:"varint,5,opt,name=floater_score,json=floaterScore,proto3" json:"floater_score,omitempty"`
	IntervalTime int32   `protobuf:"varint,6,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`
	BornLen2     []int32 `protobuf:"varint,7,rep,packed,name=born_len2,json=bornLen2,proto3" json:"born_len2,omitempty"`
}

func (x *FloaterConfig) Reset() {
	*x = FloaterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloaterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloaterConfig) ProtoMessage() {}

func (x *FloaterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloaterConfig.ProtoReflect.Descriptor instead.
func (*FloaterConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{106}
}

func (x *FloaterConfig) GetBornLen() []int32 {
	if x != nil {
		return x.BornLen
	}
	return nil
}

func (x *FloaterConfig) GetBornCount() int32 {
	if x != nil {
		return x.BornCount
	}
	return 0
}

func (x *FloaterConfig) GetBornCountV2() int32 {
	if x != nil {
		return x.BornCountV2
	}
	return 0
}

func (x *FloaterConfig) GetBornRadius() int32 {
	if x != nil {
		return x.BornRadius
	}
	return 0
}

func (x *FloaterConfig) GetFloaterScore() int32 {
	if x != nil {
		return x.FloaterScore
	}
	return 0
}

func (x *FloaterConfig) GetIntervalTime() int32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

func (x *FloaterConfig) GetBornLen2() []int32 {
	if x != nil {
		return x.BornLen2
	}
	return nil
}

type ActivityMapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	NewMapThemeId int32 `protobuf:"varint,3,opt,name=new_map_theme_id,json=newMapThemeId,proto3" json:"new_map_theme_id,omitempty"`
}

func (x *ActivityMapConfig) Reset() {
	*x = ActivityMapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityMapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityMapConfig) ProtoMessage() {}

func (x *ActivityMapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityMapConfig.ProtoReflect.Descriptor instead.
func (*ActivityMapConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{107}
}

func (x *ActivityMapConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ActivityMapConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityMapConfig) GetNewMapThemeId() int32 {
	if x != nil {
		return x.NewMapThemeId
	}
	return 0
}

type EndlessLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosLengthEndlessLimit_1         int64   `protobuf:"varint,1,opt,name=ios_length_endless_limit_1,json=iosLengthEndlessLimit1,proto3" json:"ios_length_endless_limit_1,omitempty"`
	IosLengthEndlessLimit_2         int64   `protobuf:"varint,2,opt,name=ios_length_endless_limit_2,json=iosLengthEndlessLimit2,proto3" json:"ios_length_endless_limit_2,omitempty"`
	IosLengthEndlessTimeLimit_1     float64 `protobuf:"fixed64,3,opt,name=ios_length_endless_time_limit_1,json=iosLengthEndlessTimeLimit1,proto3" json:"ios_length_endless_time_limit_1,omitempty"`
	IosLengthEndlessTimeLimit_2     float64 `protobuf:"fixed64,4,opt,name=ios_length_endless_time_limit_2,json=iosLengthEndlessTimeLimit2,proto3" json:"ios_length_endless_time_limit_2,omitempty"`
	AndroidLengthEndlessLimit_1     int64   `protobuf:"varint,5,opt,name=android_length_endless_limit_1,json=androidLengthEndlessLimit1,proto3" json:"android_length_endless_limit_1,omitempty"`
	AndroidLengthEndlessLimit_2     int64   `protobuf:"varint,6,opt,name=android_length_endless_limit_2,json=androidLengthEndlessLimit2,proto3" json:"android_length_endless_limit_2,omitempty"`
	AndroidLengthEndlessTimeLimit_1 float64 `protobuf:"fixed64,7,opt,name=android_length_endless_time_limit_1,json=androidLengthEndlessTimeLimit1,proto3" json:"android_length_endless_time_limit_1,omitempty"`
	AndroidLengthEndlessTimeLimit_2 float64 `protobuf:"fixed64,8,opt,name=android_length_endless_time_limit_2,json=androidLengthEndlessTimeLimit2,proto3" json:"android_length_endless_time_limit_2,omitempty"`
	IosKillEndlessLimit_1           int64   `protobuf:"varint,9,opt,name=ios_kill_endless_limit_1,json=iosKillEndlessLimit1,proto3" json:"ios_kill_endless_limit_1,omitempty"`
	IosKillEndlessLimit_2           int64   `protobuf:"varint,10,opt,name=ios_kill_endless_limit_2,json=iosKillEndlessLimit2,proto3" json:"ios_kill_endless_limit_2,omitempty"`
	IosKillEndlessTimeLimit_1       float64 `protobuf:"fixed64,11,opt,name=ios_kill_endless_time_limit_1,json=iosKillEndlessTimeLimit1,proto3" json:"ios_kill_endless_time_limit_1,omitempty"`
	IosKillEndlessTimeLimit_2       float64 `protobuf:"fixed64,12,opt,name=ios_kill_endless_time_limit_2,json=iosKillEndlessTimeLimit2,proto3" json:"ios_kill_endless_time_limit_2,omitempty"`
	AndroidKillEndlessLimit_1       int64   `protobuf:"varint,13,opt,name=android_kill_endless_limit_1,json=androidKillEndlessLimit1,proto3" json:"android_kill_endless_limit_1,omitempty"`
	AndroidKillEndlessLimit_2       int64   `protobuf:"varint,14,opt,name=android_kill_endless_limit_2,json=androidKillEndlessLimit2,proto3" json:"android_kill_endless_limit_2,omitempty"`
	AndroidKillEndlessTimeLimit_1   float64 `protobuf:"fixed64,15,opt,name=android_kill_endless_time_limit_1,json=androidKillEndlessTimeLimit1,proto3" json:"android_kill_endless_time_limit_1,omitempty"`
	AndroidKillEndlessTimeLimit_2   float64 `protobuf:"fixed64,16,opt,name=android_kill_endless_time_limit_2,json=androidKillEndlessTimeLimit2,proto3" json:"android_kill_endless_time_limit_2,omitempty"`
}

func (x *EndlessLimitConfig) Reset() {
	*x = EndlessLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessLimitConfig) ProtoMessage() {}

func (x *EndlessLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessLimitConfig.ProtoReflect.Descriptor instead.
func (*EndlessLimitConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{108}
}

func (x *EndlessLimitConfig) GetIosLengthEndlessLimit_1() int64 {
	if x != nil {
		return x.IosLengthEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessLimit_2() int64 {
	if x != nil {
		return x.IosLengthEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.IosLengthEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosLengthEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.IosLengthEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessLimit_1() int64 {
	if x != nil {
		return x.AndroidLengthEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessLimit_2() int64 {
	if x != nil {
		return x.AndroidLengthEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.AndroidLengthEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidLengthEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.AndroidLengthEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessLimit_1() int64 {
	if x != nil {
		return x.IosKillEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessLimit_2() int64 {
	if x != nil {
		return x.IosKillEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.IosKillEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetIosKillEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.IosKillEndlessTimeLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessLimit_1() int64 {
	if x != nil {
		return x.AndroidKillEndlessLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessLimit_2() int64 {
	if x != nil {
		return x.AndroidKillEndlessLimit_2
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessTimeLimit_1() float64 {
	if x != nil {
		return x.AndroidKillEndlessTimeLimit_1
	}
	return 0
}

func (x *EndlessLimitConfig) GetAndroidKillEndlessTimeLimit_2() float64 {
	if x != nil {
		return x.AndroidKillEndlessTimeLimit_2
	}
	return 0
}

type EndlessBubbleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime int64  `protobuf:"varint,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Link       string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *EndlessBubbleConfig) Reset() {
	*x = EndlessBubbleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBubbleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBubbleConfig) ProtoMessage() {}

func (x *EndlessBubbleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBubbleConfig.ProtoReflect.Descriptor instead.
func (*EndlessBubbleConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{109}
}

func (x *EndlessBubbleConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EndlessBubbleConfig) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *EndlessBubbleConfig) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type EndlessTrackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLen       int32 `protobuf:"varint,1,opt,name=start_len,json=startLen,proto3" json:"start_len,omitempty"`
	IntervalLen    int32 `protobuf:"varint,2,opt,name=interval_len,json=intervalLen,proto3" json:"interval_len,omitempty"`
	IntervalSecond int32 `protobuf:"varint,3,opt,name=interval_second,json=intervalSecond,proto3" json:"interval_second,omitempty"`
}

func (x *EndlessTrackConfig) Reset() {
	*x = EndlessTrackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessTrackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessTrackConfig) ProtoMessage() {}

func (x *EndlessTrackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessTrackConfig.ProtoReflect.Descriptor instead.
func (*EndlessTrackConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{110}
}

func (x *EndlessTrackConfig) GetStartLen() int32 {
	if x != nil {
		return x.StartLen
	}
	return 0
}

func (x *EndlessTrackConfig) GetIntervalLen() int32 {
	if x != nil {
		return x.IntervalLen
	}
	return 0
}

func (x *EndlessTrackConfig) GetIntervalSecond() int32 {
	if x != nil {
		return x.IntervalSecond
	}
	return 0
}

type WildStormListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration  int32   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	SpeedRate float64 `protobuf:"fixed64,2,opt,name=speed_rate,json=speedRate,proto3" json:"speed_rate,omitempty"`
}

func (x *WildStormListItem) Reset() {
	*x = WildStormListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildStormListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildStormListItem) ProtoMessage() {}

func (x *WildStormListItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildStormListItem.ProtoReflect.Descriptor instead.
func (*WildStormListItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{111}
}

func (x *WildStormListItem) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *WildStormListItem) GetSpeedRate() float64 {
	if x != nil {
		return x.SpeedRate
	}
	return 0
}

type WildStormConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSpeedRate  float64              `protobuf:"fixed64,1,opt,name=max_speed_rate,json=maxSpeedRate,proto3" json:"max_speed_rate,omitempty"`
	WildStormList []*WildStormListItem `protobuf:"bytes,2,rep,name=wild_storm_list,json=wildStormList,proto3" json:"wild_storm_list,omitempty"`
}

func (x *WildStormConfig) Reset() {
	*x = WildStormConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildStormConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildStormConfig) ProtoMessage() {}

func (x *WildStormConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildStormConfig.ProtoReflect.Descriptor instead.
func (*WildStormConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{112}
}

func (x *WildStormConfig) GetMaxSpeedRate() float64 {
	if x != nil {
		return x.MaxSpeedRate
	}
	return 0
}

func (x *WildStormConfig) GetWildStormList() []*WildStormListItem {
	if x != nil {
		return x.WildStormList
	}
	return nil
}

type OfflineGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigSnakeRate           int32                `protobuf:"varint,1,opt,name=big_snake_rate,json=bigSnakeRate,proto3" json:"big_snake_rate,omitempty"`
	MediumSnakeRate        int32                `protobuf:"varint,2,opt,name=medium_snake_rate,json=mediumSnakeRate,proto3" json:"medium_snake_rate,omitempty"`
	ReliveLengthLimit      int32                `protobuf:"varint,3,opt,name=relive_length_limit,json=reliveLengthLimit,proto3" json:"relive_length_limit,omitempty"`
	ReliveNeedDiamond      int32                `protobuf:"varint,4,opt,name=relive_need_diamond,json=reliveNeedDiamond,proto3" json:"relive_need_diamond,omitempty"`
	SnakeDirection         int32                `protobuf:"varint,5,opt,name=snake_direction,json=snakeDirection,proto3" json:"snake_direction,omitempty"`
	TwiceReliveDiamond     int32                `protobuf:"varint,6,opt,name=twice_relive_diamond,json=twiceReliveDiamond,proto3" json:"twice_relive_diamond,omitempty"`
	TwiceReliveLength      int32                `protobuf:"varint,7,opt,name=twice_relive_length,json=twiceReliveLength,proto3" json:"twice_relive_length,omitempty"`
	EndlessReviveConfig    []*ReviveConfigItem  `protobuf:"bytes,8,rep,name=endless_revive_config,json=endlessReviveConfig,proto3" json:"endless_revive_config,omitempty"`
	EndlessReviveConfigAb1 []*ReviveConfigItem  `protobuf:"bytes,9,rep,name=endless_revive_config_ab1,json=endlessReviveConfigAb1,proto3" json:"endless_revive_config_ab1,omitempty"`
	EndlessReviveConfigAb2 []*ReviveConfigItem  `protobuf:"bytes,10,rep,name=endless_revive_config_ab2,json=endlessReviveConfigAb2,proto3" json:"endless_revive_config_ab2,omitempty"`
	ExciteReviveConfig     []*ReviveConfigItem  `protobuf:"bytes,11,rep,name=excite_revive_config,json=exciteReviveConfig,proto3" json:"excite_revive_config,omitempty"`
	LimitReviveConfig      []*ReviveConfigItem  `protobuf:"bytes,12,rep,name=limit_revive_config,json=limitReviveConfig,proto3" json:"limit_revive_config,omitempty"`
	VoiceBroadcast         int32                `protobuf:"varint,13,opt,name=voice_broadcast,json=voiceBroadcast,proto3" json:"voice_broadcast,omitempty"`
	UseAiV3                int32                `protobuf:"varint,14,opt,name=use_ai_v3,json=useAiV3,proto3" json:"use_ai_v3,omitempty"`
	NewKillBroadcast       int32                `protobuf:"varint,15,opt,name=new_kill_broadcast,json=newKillBroadcast,proto3" json:"new_kill_broadcast,omitempty"`
	NewMap                 int32                `protobuf:"varint,16,opt,name=new_map,json=newMap,proto3" json:"new_map,omitempty"`
	Recover                int32                `protobuf:"varint,17,opt,name=recover,proto3" json:"recover,omitempty"`
	FloaterConfig          *FloaterConfig       `protobuf:"bytes,18,opt,name=floater_config,json=floaterConfig,proto3" json:"floater_config,omitempty"` // 貌似已经废弃，移到到ai_config_v3配置里了
	EndlessLimitConfig     *EndlessLimitConfig  `protobuf:"bytes,19,opt,name=endless_limit_config,json=endlessLimitConfig,proto3" json:"endless_limit_config,omitempty"`
	ActivityMapConfig      *ActivityMapConfig   `protobuf:"bytes,20,opt,name=activity_map_config,json=activityMapConfig,proto3" json:"activity_map_config,omitempty"`
	EndlessBubble          *EndlessBubbleConfig `protobuf:"bytes,21,opt,name=endless_bubble,json=endlessBubble,proto3" json:"endless_bubble,omitempty"`
	EndlessTrack           *EndlessTrackConfig  `protobuf:"bytes,22,opt,name=endless_track,json=endlessTrack,proto3" json:"endless_track,omitempty"`
	WildStorm              *WildStormConfig     `protobuf:"bytes,23,opt,name=wild_storm,json=wildStorm,proto3" json:"wild_storm,omitempty"`
	EndlessBuffProp        *EndLessBuffPropInfo `protobuf:"bytes,24,opt,name=endless_buff_prop,json=endlessBuffProp,proto3" json:"endless_buff_prop,omitempty"`
	AnthapShake            int32                `protobuf:"varint,25,opt,name=anthap_shake,json=anthapShake,proto3" json:"anthap_shake,omitempty"` // 震动开关
}

func (x *OfflineGameConfig) Reset() {
	*x = OfflineGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineGameConfig) ProtoMessage() {}

func (x *OfflineGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineGameConfig.ProtoReflect.Descriptor instead.
func (*OfflineGameConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{113}
}

func (x *OfflineGameConfig) GetBigSnakeRate() int32 {
	if x != nil {
		return x.BigSnakeRate
	}
	return 0
}

func (x *OfflineGameConfig) GetMediumSnakeRate() int32 {
	if x != nil {
		return x.MediumSnakeRate
	}
	return 0
}

func (x *OfflineGameConfig) GetReliveLengthLimit() int32 {
	if x != nil {
		return x.ReliveLengthLimit
	}
	return 0
}

func (x *OfflineGameConfig) GetReliveNeedDiamond() int32 {
	if x != nil {
		return x.ReliveNeedDiamond
	}
	return 0
}

func (x *OfflineGameConfig) GetSnakeDirection() int32 {
	if x != nil {
		return x.SnakeDirection
	}
	return 0
}

func (x *OfflineGameConfig) GetTwiceReliveDiamond() int32 {
	if x != nil {
		return x.TwiceReliveDiamond
	}
	return 0
}

func (x *OfflineGameConfig) GetTwiceReliveLength() int32 {
	if x != nil {
		return x.TwiceReliveLength
	}
	return 0
}

func (x *OfflineGameConfig) GetEndlessReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessReviveConfigAb1() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfigAb1
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessReviveConfigAb2() []*ReviveConfigItem {
	if x != nil {
		return x.EndlessReviveConfigAb2
	}
	return nil
}

func (x *OfflineGameConfig) GetExciteReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.ExciteReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetLimitReviveConfig() []*ReviveConfigItem {
	if x != nil {
		return x.LimitReviveConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetVoiceBroadcast() int32 {
	if x != nil {
		return x.VoiceBroadcast
	}
	return 0
}

func (x *OfflineGameConfig) GetUseAiV3() int32 {
	if x != nil {
		return x.UseAiV3
	}
	return 0
}

func (x *OfflineGameConfig) GetNewKillBroadcast() int32 {
	if x != nil {
		return x.NewKillBroadcast
	}
	return 0
}

func (x *OfflineGameConfig) GetNewMap() int32 {
	if x != nil {
		return x.NewMap
	}
	return 0
}

func (x *OfflineGameConfig) GetRecover() int32 {
	if x != nil {
		return x.Recover
	}
	return 0
}

func (x *OfflineGameConfig) GetFloaterConfig() *FloaterConfig {
	if x != nil {
		return x.FloaterConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessLimitConfig() *EndlessLimitConfig {
	if x != nil {
		return x.EndlessLimitConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetActivityMapConfig() *ActivityMapConfig {
	if x != nil {
		return x.ActivityMapConfig
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessBubble() *EndlessBubbleConfig {
	if x != nil {
		return x.EndlessBubble
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessTrack() *EndlessTrackConfig {
	if x != nil {
		return x.EndlessTrack
	}
	return nil
}

func (x *OfflineGameConfig) GetWildStorm() *WildStormConfig {
	if x != nil {
		return x.WildStorm
	}
	return nil
}

func (x *OfflineGameConfig) GetEndlessBuffProp() *EndLessBuffPropInfo {
	if x != nil {
		return x.EndlessBuffProp
	}
	return nil
}

func (x *OfflineGameConfig) GetAnthapShake() int32 {
	if x != nil {
		return x.AnthapShake
	}
	return 0
}

// === mentorship_config start ========================================
type MentorshipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterPrivilegeConfig  []*MentorPrivilegeInfo        `protobuf:"bytes,1,rep,name=master_privilege_config,json=masterPrivilegeConfig,proto3" json:"master_privilege_config,omitempty"`
	BondTitleConfig        []*MentorshipBondTitleItem    `protobuf:"bytes,2,rep,name=bond_title_config,json=bondTitleConfig,proto3" json:"bond_title_config,omitempty"`
	FinishReward           *MentorFinishReward           `protobuf:"bytes,3,opt,name=finish_reward,json=finishReward,proto3" json:"finish_reward,omitempty"`
	MasterPrenticeStrategy []*MasterPrenticeStrategyItem `protobuf:"bytes,4,rep,name=master_prentice_strategy,json=masterPrenticeStrategy,proto3" json:"master_prentice_strategy,omitempty"`
	MasterStarLimit        int32                         `protobuf:"varint,5,opt,name=master_star_limit,json=masterStarLimit,proto3" json:"master_star_limit,omitempty"`
	BreakHourLimit         int32                         `protobuf:"varint,6,opt,name=break_hour_limit,json=breakHourLimit,proto3" json:"break_hour_limit,omitempty"`
	MentorshipOpen         int32                         `protobuf:"varint,7,opt,name=mentorship_open,json=mentorshipOpen,proto3" json:"mentorship_open,omitempty"`
}

func (x *MentorshipConfig) Reset() {
	*x = MentorshipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorshipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorshipConfig) ProtoMessage() {}

func (x *MentorshipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorshipConfig.ProtoReflect.Descriptor instead.
func (*MentorshipConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{114}
}

func (x *MentorshipConfig) GetMasterPrivilegeConfig() []*MentorPrivilegeInfo {
	if x != nil {
		return x.MasterPrivilegeConfig
	}
	return nil
}

func (x *MentorshipConfig) GetBondTitleConfig() []*MentorshipBondTitleItem {
	if x != nil {
		return x.BondTitleConfig
	}
	return nil
}

func (x *MentorshipConfig) GetFinishReward() *MentorFinishReward {
	if x != nil {
		return x.FinishReward
	}
	return nil
}

func (x *MentorshipConfig) GetMasterPrenticeStrategy() []*MasterPrenticeStrategyItem {
	if x != nil {
		return x.MasterPrenticeStrategy
	}
	return nil
}

func (x *MentorshipConfig) GetMasterStarLimit() int32 {
	if x != nil {
		return x.MasterStarLimit
	}
	return 0
}

func (x *MentorshipConfig) GetBreakHourLimit() int32 {
	if x != nil {
		return x.BreakHourLimit
	}
	return 0
}

func (x *MentorshipConfig) GetMentorshipOpen() int32 {
	if x != nil {
		return x.MentorshipOpen
	}
	return 0
}

type MentorPrivilegeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Level      int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	LevelExp   int32                  `protobuf:"varint,3,opt,name=level_exp,json=levelExp,proto3" json:"level_exp,omitempty"`
	TitleImg   string                 `protobuf:"bytes,4,opt,name=title_img,json=titleImg,proto3" json:"title_img,omitempty"`
	AnimType   int32                  `protobuf:"varint,5,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Addition   int32                  `protobuf:"varint,6,opt,name=addition,proto3" json:"addition,omitempty"`                      // 名师加成百分比1～100
	Privilege  []*PrivilegeDetailInfo `protobuf:"bytes,7,rep,name=privilege,proto3" json:"privilege,omitempty"`                     // 当前名师等级特权配图
	RewardList []*config.RewardConfig `protobuf:"bytes,8,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"` // 名师特权奖励
}

func (x *MentorPrivilegeInfo) Reset() {
	*x = MentorPrivilegeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorPrivilegeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorPrivilegeInfo) ProtoMessage() {}

func (x *MentorPrivilegeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorPrivilegeInfo.ProtoReflect.Descriptor instead.
func (*MentorPrivilegeInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{115}
}

func (x *MentorPrivilegeInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MentorPrivilegeInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetLevelExp() int32 {
	if x != nil {
		return x.LevelExp
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetTitleImg() string {
	if x != nil {
		return x.TitleImg
	}
	return ""
}

func (x *MentorPrivilegeInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetAddition() int32 {
	if x != nil {
		return x.Addition
	}
	return 0
}

func (x *MentorPrivilegeInfo) GetPrivilege() []*PrivilegeDetailInfo {
	if x != nil {
		return x.Privilege
	}
	return nil
}

func (x *MentorPrivilegeInfo) GetRewardList() []*config.RewardConfig {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type PrivilegeDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgUrl string `protobuf:"bytes,1,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
	Desc   string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PrivilegeDetailInfo) Reset() {
	*x = PrivilegeDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeDetailInfo) ProtoMessage() {}

func (x *PrivilegeDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeDetailInfo.ProtoReflect.Descriptor instead.
func (*PrivilegeDetailInfo) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{116}
}

func (x *PrivilegeDetailInfo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *PrivilegeDetailInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type MentorshipBondTitleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FadeTime     int64 `protobuf:"varint,1,opt,name=fade_time,json=fadeTime,proto3" json:"fade_time,omitempty"`               // 褪色时间(s)
	BondLevel    int32 `protobuf:"varint,2,opt,name=bond_level,json=bondLevel,proto3" json:"bond_level,omitempty"`            // 羁绊等级
	BondLevelExp int32 `protobuf:"varint,3,opt,name=bond_level_exp,json=bondLevelExp,proto3" json:"bond_level_exp,omitempty"` // 羁绊等级对应经验值
}

func (x *MentorshipBondTitleItem) Reset() {
	*x = MentorshipBondTitleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorshipBondTitleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorshipBondTitleItem) ProtoMessage() {}

func (x *MentorshipBondTitleItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorshipBondTitleItem.ProtoReflect.Descriptor instead.
func (*MentorshipBondTitleItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{117}
}

func (x *MentorshipBondTitleItem) GetFadeTime() int64 {
	if x != nil {
		return x.FadeTime
	}
	return 0
}

func (x *MentorshipBondTitleItem) GetBondLevel() int32 {
	if x != nil {
		return x.BondLevel
	}
	return 0
}

func (x *MentorshipBondTitleItem) GetBondLevelExp() int32 {
	if x != nil {
		return x.BondLevelExp
	}
	return 0
}

type MentorFinishReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterReward   []*config.RewardConfig `protobuf:"bytes,1,rep,name=master_reward,json=masterReward,proto3" json:"master_reward,omitempty"`
	PrenticeReward []*config.RewardConfig `protobuf:"bytes,2,rep,name=prentice_reward,json=prenticeReward,proto3" json:"prentice_reward,omitempty"`
}

func (x *MentorFinishReward) Reset() {
	*x = MentorFinishReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentorFinishReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentorFinishReward) ProtoMessage() {}

func (x *MentorFinishReward) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentorFinishReward.ProtoReflect.Descriptor instead.
func (*MentorFinishReward) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{118}
}

func (x *MentorFinishReward) GetMasterReward() []*config.RewardConfig {
	if x != nil {
		return x.MasterReward
	}
	return nil
}

func (x *MentorFinishReward) GetPrenticeReward() []*config.RewardConfig {
	if x != nil {
		return x.PrenticeReward
	}
	return nil
}

type MasterPrenticeStrategyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Img   string `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *MasterPrenticeStrategyItem) Reset() {
	*x = MasterPrenticeStrategyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterPrenticeStrategyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterPrenticeStrategyItem) ProtoMessage() {}

func (x *MasterPrenticeStrategyItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterPrenticeStrategyItem.ProtoReflect.Descriptor instead.
func (*MasterPrenticeStrategyItem) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{119}
}

func (x *MasterPrenticeStrategyItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MasterPrenticeStrategyItem) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// === hot_config start ========================================
type HotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InReviewState int32  `protobuf:"varint,1,opt,name=in_review_state,json=inReviewState,proto3" json:"in_review_state,omitempty"`
	SubConfig     string `protobuf:"bytes,2,opt,name=sub_config,json=subConfig,proto3" json:"sub_config,omitempty"` // 小秘书配置
}

func (x *HotConfig) Reset() {
	*x = HotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotConfig) ProtoMessage() {}

func (x *HotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotConfig.ProtoReflect.Descriptor instead.
func (*HotConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{120}
}

func (x *HotConfig) GetInReviewState() int32 {
	if x != nil {
		return x.InReviewState
	}
	return 0
}

func (x *HotConfig) GetSubConfig() string {
	if x != nil {
		return x.SubConfig
	}
	return ""
}

// product_config start =========================================
type ProductConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property            *config.Property            `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	CurrencyStore       *config.CurrencyStore       `protobuf:"bytes,2,opt,name=currency_store,json=currencyStore,proto3" json:"currency_store,omitempty"`
	MiddleItemList      []*config.MiddleItem        `protobuf:"bytes,3,rep,name=middle_item_list,json=middleItemList,proto3" json:"middle_item_list,omitempty"` // 中间道具配置
	DrawCardGuideConfig *config.DrawCardGuideConfig `protobuf:"bytes,4,opt,name=draw_card_guide_config,json=drawCardGuideConfig,proto3" json:"draw_card_guide_config,omitempty"`
	StoreConfig         *config.StoreConfig         `protobuf:"bytes,5,opt,name=store_config,json=storeConfig,proto3" json:"store_config,omitempty"` // proto商店配置
}

func (x *ProductConfig) Reset() {
	*x = ProductConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecommon_project_config_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductConfig) ProtoMessage() {}

func (x *ProductConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakecommon_project_config_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductConfig.ProtoReflect.Descriptor instead.
func (*ProductConfig) Descriptor() ([]byte, []int) {
	return file_snakecommon_project_config_proto_rawDescGZIP(), []int{121}
}

func (x *ProductConfig) GetProperty() *config.Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *ProductConfig) GetCurrencyStore() *config.CurrencyStore {
	if x != nil {
		return x.CurrencyStore
	}
	return nil
}

func (x *ProductConfig) GetMiddleItemList() []*config.MiddleItem {
	if x != nil {
		return x.MiddleItemList
	}
	return nil
}

func (x *ProductConfig) GetDrawCardGuideConfig() *config.DrawCardGuideConfig {
	if x != nil {
		return x.DrawCardGuideConfig
	}
	return nil
}

func (x *ProductConfig) GetStoreConfig() *config.StoreConfig {
	if x != nil {
		return x.StoreConfig
	}
	return nil
}

var File_snakecommon_project_config_proto protoreflect.FileDescriptor

var file_snakecommon_project_config_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a,
	0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x53, 0x4b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a,
	0x38, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x17, 0x45, 0x6e, 0x64,
	0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x45,
	0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22, 0xbe, 0x01,
	0x0a, 0x0f, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x22, 0x7e,
	0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xbc,
	0x0b, 0x0a, 0x0c, 0x4f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x6b, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x42, 0x6f, 0x73, 0x73, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x57, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x70, 0x12, 0x2f,
	0x0a, 0x14, 0x68, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x68, 0x63,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x14, 0x6e, 0x6f, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6e,
	0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x6c,
	0x55, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x65,
	0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x36, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x6e, 0x6f, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x1a, 0x6e, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x19,
	0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x65, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3a,
	0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x75, 0x69, 0x74, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x12, 0x45,
	0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65,
	0x6c, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4a, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x12, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65,
	0x77, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x22, 0x73, 0x0a,
	0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x72, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x22, 0x5e, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x61, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39,
	0x0a, 0x09, 0x47, 0x72, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x75, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x75, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x4b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x61,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x49, 0x70, 0x61,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x70, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x6f, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6c, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6c, 0x65, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x95, 0x05, 0x0a, 0x10, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x56, 0x32,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69,
	0x70, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x55, 0x72, 0x6c, 0x73, 0x49, 0x70, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x32, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x49,
	0x70, 0x61, 0x64, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x63, 0x70, 0x5f, 0x76,
	0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4b, 0x63, 0x70, 0x56,
	0x32, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x76,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x74,
	0x79, 0x56, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x76, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x32, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x6b,
	0x63, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x4b, 0x63, 0x70,
	0x22, 0x71, 0x0a, 0x10, 0x52, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x55,
	0x72, 0x6c, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x49,
	0x63, 0x6f, 0x6e, 0x22, 0x83, 0x08, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x08, 0x72, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72,
	0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a,
	0x10, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x16, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x70,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x43, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x75, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x65, 0x62,
	0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x63, 0x55, 0x72, 0x6c, 0x56, 0x32, 0x1a, 0x5e, 0x0a, 0x13, 0x43, 0x6c, 0x61,
	0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x02, 0x0a, 0x08, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x43, 0x75, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x70, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x15, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x63, 0x65, 0x43, 0x75,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x65, 0x0a, 0x0e, 0x52, 0x61, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x65,
	0x65, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x65,
	0x65, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x22, 0x96, 0x04, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x4b,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x6c, 0x0a, 0x0a, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xf7, 0x03, 0x0a, 0x0b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x71, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x79, 0x51, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x45,
	0x0a, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69,
	0x70, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x61, 0x67, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x31, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6e, 0x65, 0x77, 0x57, 0x78, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x22, 0x54, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x22, 0x74, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x70,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x67, 0x22, 0x8e,
	0x01, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0xa9, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71,
	0x71, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x71, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x71, 0x5f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x71, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x22, 0x67, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x69, 0x61, 0x6f, 0x6d, 0x69, 0x5f,
	0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x69, 0x61, 0x6f, 0x6d,
	0x69, 0x49, 0x6d, 0x67, 0x22, 0x80, 0x06, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d,
	0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f,
	0x77, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61,
	0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x77, 0x46, 0x6f, 0x6f, 0x74, 0x12, 0x35, 0x0a,
	0x17, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6d, 0x61, 0x72, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x12, 0x34, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x56, 0x32, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x22, 0x78, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x6d,
	0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61,
	0x79, 0x22, 0x7e, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x56, 0x32, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x6d, 0x45, 0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x45,
	0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x72, 0x6d, 0x45, 0x78, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x42, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x45,
	0x78, 0x70, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xbe, 0x04, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x6d,
	0x53, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68,
	0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65,
	0x74, 0x61, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x74, 0x61, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x4c, 0x0a, 0x13, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66,
	0x74, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x67,
	0x69, 0x66, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x16, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x69, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x69, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x69, 0x66, 0x74, 0x4c,
	0x69, 0x6b, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0xe9, 0x01, 0x0a, 0x0e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x61, 0x63, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x6f, 0x61,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x09, 0x22, 0x34, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xc2, 0x07,
	0x0a, 0x0a, 0x55, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x33, 0x12, 0x3d, 0x0a, 0x0f,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x43, 0x0a, 0x12, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x10,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x56, 0x32,
	0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0a, 0x6c, 0x65,
	0x66, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x6f,
	0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x75, 0x67, 0x65, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x75, 0x67, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x0f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x72, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x67, 0x75,
	0x79, 0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x67, 0x75, 0x79, 0x73, 0x49, 0x63,
	0x6f, 0x6e, 0x22, 0xb0, 0x04, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x2b, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69,
	0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x06, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x22, 0x53, 0x0a, 0x0f,
	0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65,
	0x6e, 0x22, 0xdb, 0x02, 0x0a, 0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x72, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x67, 0x49, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x67, 0x49,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x65, 0x66, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22,
	0xb6, 0x03, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0c,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x30, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xb5, 0x0c, 0x0a, 0x0c, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x14, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0e,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a,
	0x0a, 0x13, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x11, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f,
	0x69, 0x6e, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x69, 0x72, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x44,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x61,
	0x64, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x75, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x55, 0x69, 0x12, 0x3b,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x12, 0x45, 0x0a, 0x10, 0x61,
	0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x61, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x54, 0x0a, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x64,
	0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x15, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x62, 0x5f, 0x61,
	0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x61, 0x62, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x1a, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x18, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x12, 0x66, 0x0a, 0x1f, 0x6e, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x1c, 0x6e,
	0x6f, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x59, 0x0a, 0x18, 0x6d,
	0x65, 0x6c, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x16,
	0x6d, 0x65, 0x6c, 0x65, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x10, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x13,
	0x62, 0x75, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x62,
	0x75, 0x79, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x41, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x69, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa8, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6f, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x0e, 0x41, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x70, 0x75, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x70, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x62,
	0x69, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x72, 0x69, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x68,
	0x0a, 0x15, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x13, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x62, 0x0a, 0x18, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a,
	0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69,
	0x6d, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x41,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63,
	0x6f, 0x69, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x8d, 0x05, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75,
	0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x61, 0x70, 0x70, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x61, 0x70, 0x70, 0x70, 0x61, 0x79, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x45,
	0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12,
	0x4b, 0x0a, 0x12, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63,
	0x6b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x69, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x19, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x22,
	0x99, 0x01, 0x0a, 0x19, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0d,
	0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c,
	0x61, 0x6e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x56, 0x32, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x25, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x63, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x70, 0x43, 0x64, 0x53, 0x65, 0x63, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77,
	0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x3a, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xed, 0x02, 0x0a,
	0x0f, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68,
	0x75, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x22, 0x42, 0x0a, 0x0d,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x63, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x97, 0x12, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0e,
	0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x7a, 0x68, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x7a, 0x68, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x72, 0x6c, 0x32, 0x12, 0x34, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x64,
	0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x11, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x37, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x70, 0x5f, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x41, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b,
	0x69, 0x64, 0x66, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x66, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x64, 0x66, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x0c, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb7, 0x01,
	0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x68, 0x69, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x22,
	0xf9, 0x0b, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x6f, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x63,
	0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x73, 0x68,
	0x12, 0x35, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x47, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0e,
	0x73, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x69, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x67, 0x45, 0x6e, 0x64, 0x55, 0x69, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6d, 0x6f, 0x62, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6d, 0x6f, 0x62, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4f,
	0x66, 0x66, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x44, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x67,
	0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6f, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x69,
	0x6f, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x6b,
	0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x76, 0x69, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x56, 0x69, 0x76, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x25, 0x6a, 0x73, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x21, 0x6a, 0x73, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x70, 0x6f, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6f, 0x70, 0x70, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a,
	0x16, 0x6f, 0x70, 0x70, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f,
	0x70, 0x70, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x62,
	0x76, 0x65, 0x69, 0x77, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x76, 0x65, 0x69, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x24, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6c, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x79, 0x79, 0x62, 0x5f,
	0x74, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x79, 0x79, 0x62, 0x54, 0x6f, 0x62, 0x69, 0x64, 0x41,
	0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x66, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x0e,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xe1, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x6f, 0x6f, 0x6d, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x6f,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6f, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x6b, 0x68, 0x74, 0x74,
	0x70, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x6b, 0x68,
	0x74, 0x74, 0x70, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x0a, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x22, 0x6e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x6d,
	0x65, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x5f, 0x0a, 0x10, 0x4f, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x8f, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x67, 0x62, 0x35, 0x36, 0x35, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x67,
	0x4f, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x61, 0x6e, 0x69, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x6d, 0x4c, 0x65, 0x61, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43,
	0x6c, 0x75, 0x62, 0x12, 0x47, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x27, 0x0a, 0x0f,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3e, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43,
	0x6c, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x40, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x53, 0x6b, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x78, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x22, 0x97, 0x04, 0x0a, 0x0d, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x09, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x38,
	0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x67, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6e, 0x66,
	0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x61,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x06,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0x67,
	0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x64, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x6c, 0x0a,
	0x0a, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6c, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6c, 0x61, 0x6e, 0x22, 0x3b, 0x0a, 0x0b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x0a,
	0x49, 0x64, 0x66, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x48, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x71, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x49, 0x64, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x71, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x73,
	0x67, 0x22, 0xab, 0x06, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x61,
	0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x27,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x1a, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x20,
	0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x65, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x64, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x75, 0x69, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x79,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x62, 0x69,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6d, 0x67, 0x12, 0x41, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x77, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x69, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x69, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x4c,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x6e,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x32, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x4c, 0x65, 0x6e, 0x32, 0x22, 0x76, 0x0a,
	0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10,
	0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x70, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xbc, 0x08, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x1a,
	0x69, 0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6f, 0x73, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x69, 0x6f,
	0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x32, 0x12, 0x43, 0x0a, 0x1f, 0x69, 0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x69,
	0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x43, 0x0a, 0x1f, 0x69, 0x6f, 0x73,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1a, 0x69, 0x6f, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x42,
	0x0a, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x31, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x31, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32,
	0x12, 0x36, 0x0a, 0x18, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x69, 0x6f, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x6f, 0x73, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x6f, 0x73, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32,
	0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x6f, 0x73, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x31, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x6f, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x69, 0x6f, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x31, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x12, 0x47, 0x0a, 0x21, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x12, 0x47, 0x0a, 0x21, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x32, 0x22, 0x69, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0x7d, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x4e,
	0x0a, 0x11, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0x7f,
	0x0a, 0x0f, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x77, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0d, 0x77, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc0, 0x0b, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x67, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x69, 0x67, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x65, 0x64,
	0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x77, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x74, 0x77, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x77, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x77, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x51, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61,
	0x62, 0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x62, 0x31, 0x12,
	0x58, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x62, 0x32, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x62, 0x32, 0x12, 0x4f, 0x0a, 0x14, 0x65, 0x78, 0x63,
	0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x13, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x69, 0x5f, 0x76, 0x33, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x41, 0x69, 0x56, 0x33, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4b,
	0x69, 0x6c, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x65, 0x77, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x44,
	0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x77, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x6d, 0x12, 0x4c, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x4c, 0x65,
	0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x68, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6e, 0x74, 0x68, 0x61, 0x70, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x22, 0xe6, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x61, 0x0a, 0x18, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x13,
	0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d,
	0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x7b, 0x0a, 0x17, 0x4d, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x45, 0x78, 0x70, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x47, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x44, 0x0a, 0x1a, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22,
	0x52, 0x0a, 0x09, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x46, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x16, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_snakecommon_project_config_proto_rawDescOnce sync.Once
	file_snakecommon_project_config_proto_rawDescData = file_snakecommon_project_config_proto_rawDesc
)

func file_snakecommon_project_config_proto_rawDescGZIP() []byte {
	file_snakecommon_project_config_proto_rawDescOnce.Do(func() {
		file_snakecommon_project_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecommon_project_config_proto_rawDescData)
	})
	return file_snakecommon_project_config_proto_rawDescData
}

var file_snakecommon_project_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_snakecommon_project_config_proto_msgTypes = make([]protoimpl.MessageInfo, 127)
var file_snakecommon_project_config_proto_goTypes = []interface{}{
	(ShortCutConfig_SceneType)(0),      // 0: snakecommon.ShortCutConfig.SceneType
	(*ConfigVersionInfo)(nil),          // 1: snakecommon.ConfigVersionInfo
	(*EndLessBuffPropConfigV2)(nil),    // 2: snakecommon.EndLessBuffPropConfigV2
	(*EndLessBuffPropInfo)(nil),        // 3: snakecommon.EndLessBuffPropInfo
	(*RandomPropInfo)(nil),             // 4: snakecommon.RandomPropInfo
	(*HuaweiHighlight)(nil),            // 5: snakecommon.HuaweiHighlight
	(*HighLightInfo)(nil),              // 6: snakecommon.HighLightInfo
	(*OlGameConfig)(nil),               // 7: snakecommon.OlGameConfig
	(*MatchBackgroudConfig)(nil),       // 8: snakecommon.MatchBackgroudConfig
	(*GameStatusTrack)(nil),            // 9: snakecommon.GameStatusTrack
	(*GrassConfig)(nil),                // 10: snakecommon.GrassConfig
	(*GrassInfo)(nil),                  // 11: snakecommon.GrassInfo
	(*TeamSuit)(nil),                   // 12: snakecommon.TeamSuit
	(*TeamSuitNewSuitInfo)(nil),        // 13: snakecommon.TeamSuitNewSuitInfo
	(*TeamKillConfig)(nil),             // 14: snakecommon.TeamKillConfig
	(*TeamMeleeConfig)(nil),            // 15: snakecommon.TeamMeleeConfig
	(*QualifyingConfig)(nil),           // 16: snakecommon.QualifyingConfig
	(*RaceNormalConfig)(nil),           // 17: snakecommon.RaceNormalConfig
	(*TeamKillProp)(nil),               // 18: snakecommon.TeamKillProp
	(*ClanConfig)(nil),                 // 19: snakecommon.ClanConfig
	(*RuleDesc)(nil),                   // 20: snakecommon.RuleDesc
	(*ActivePointAddition)(nil),        // 21: snakecommon.ActivePointAddition
	(*RaceTimeConfig)(nil),             // 22: snakecommon.RaceTimeConfig
	(*ClanRaceReward)(nil),             // 23: snakecommon.ClanRaceReward
	(*ClanLevelInfo)(nil),              // 24: snakecommon.ClanLevelInfo
	(*NewClanRewardItem)(nil),          // 25: snakecommon.NewClanRewardItem
	(*RankConfig)(nil),                 // 26: snakecommon.RankConfig
	(*RankReward)(nil),                 // 27: snakecommon.RankReward
	(*RankLevel)(nil),                  // 28: snakecommon.RankLevel
	(*SeasonInfo)(nil),                 // 29: snakecommon.SeasonInfo
	(*ShareConfig)(nil),                // 30: snakecommon.ShareConfig
	(*ShareTag)(nil),                   // 31: snakecommon.ShareTag
	(*ClipBoardCheck)(nil),             // 32: snakecommon.ClipBoardCheck
	(*VideoShareIcon)(nil),             // 33: snakecommon.VideoShareIcon
	(*ChannelConfig)(nil),              // 34: snakecommon.ChannelConfig
	(*GameInvite)(nil),                 // 35: snakecommon.GameInvite
	(*SocialConfig)(nil),               // 36: snakecommon.SocialConfig
	(*CharmTopConfig)(nil),             // 37: snakecommon.CharmTopConfig
	(*CharmLevelItem)(nil),             // 38: snakecommon.CharmLevelItem
	(*CharmExpConfig)(nil),             // 39: snakecommon.CharmExpConfig
	(*CharmExpRank)(nil),               // 40: snakecommon.CharmExpRank
	(*CharmPrivilegeItem)(nil),         // 41: snakecommon.CharmPrivilegeItem
	(*TextConfig)(nil),                 // 42: snakecommon.TextConfig
	(*GiftLikeTextList)(nil),           // 43: snakecommon.GiftLikeTextList
	(*ShortCutConfig)(nil),             // 44: snakecommon.ShortCutConfig
	(*ReportBehavior)(nil),             // 45: snakecommon.ReportBehavior
	(*UiConfigV3)(nil),                 // 46: snakecommon.UiConfigV3
	(*GameIcon)(nil),                   // 47: snakecommon.GameIcon
	(*Bubble)(nil),                     // 48: snakecommon.Bubble
	(*NewbieCondition)(nil),            // 49: snakecommon.NewbieCondition
	(*HomeBackground)(nil),             // 50: snakecommon.HomeBackground
	(*PingConfig)(nil),                 // 51: snakecommon.PingConfig
	(*RewardMarkConfig)(nil),           // 52: snakecommon.RewardMarkConfig
	(*RewardMark)(nil),                 // 53: snakecommon.RewardMark
	(*ShowAdConfig)(nil),               // 54: snakecommon.ShowAdConfig
	(*CrossPromotions)(nil),            // 55: snakecommon.CrossPromotions
	(*CrossPromotionsSource)(nil),      // 56: snakecommon.CrossPromotionsSource
	(*EndlessBuff)(nil),                // 57: snakecommon.EndlessBuff
	(*PopupPosition)(nil),              // 58: snakecommon.PopupPosition
	(*AdPopupsConfig)(nil),             // 59: snakecommon.AdPopupsConfig
	(*EndlessAdRecommend)(nil),         // 60: snakecommon.EndlessAdRecommend
	(*AdRewardModel)(nil),              // 61: snakecommon.AdRewardModel
	(*AdGoodsItem)(nil),                // 62: snakecommon.AdGoodsItem
	(*OrderConfig)(nil),                // 63: snakecommon.OrderConfig
	(*FirstChargePopup)(nil),           // 64: snakecommon.FirstChargePopup
	(*RandomDoubleClientInfo)(nil),     // 65: snakecommon.RandomDoubleClientInfo
	(*UnityQualifyingOpenConfig)(nil),  // 66: snakecommon.UnityQualifyingOpenConfig
	(*TopListConfig)(nil),              // 67: snakecommon.TopListConfig
	(*ShowConfig)(nil),                 // 68: snakecommon.ShowConfig
	(*ShowPackItem)(nil),               // 69: snakecommon.ShowPackItem
	(*ShowIconStyle)(nil),              // 70: snakecommon.ShowIconStyle
	(*ShowLevelConfig)(nil),            // 71: snakecommon.ShowLevelConfig
	(*ShowSkillName)(nil),              // 72: snakecommon.ShowSkillName
	(*ShowSkillBuff)(nil),              // 73: snakecommon.ShowSkillBuff
	(*UserConfig)(nil),                 // 74: snakecommon.UserConfig
	(*UnityFlags)(nil),                 // 75: snakecommon.UnityFlags
	(*MinorLimit)(nil),                 // 76: snakecommon.MinorLimit
	(*OrderCurator)(nil),               // 77: snakecommon.OrderCurator
	(*FlagsConfig)(nil),                // 78: snakecommon.FlagsConfig
	(*FeedbackConfig)(nil),             // 79: snakecommon.FeedbackConfig
	(*SettingConfig)(nil),              // 80: snakecommon.SettingConfig
	(*DocVersion)(nil),                 // 81: snakecommon.DocVersion
	(*NetworkCheck)(nil),               // 82: snakecommon.NetworkCheck
	(*Prometheus)(nil),                 // 83: snakecommon.Prometheus
	(*OkhttpDispatcher)(nil),           // 84: snakecommon.OkhttpDispatcher
	(*MemSwitch)(nil),                  // 85: snakecommon.MemSwitch
	(*BindConfig)(nil),                 // 86: snakecommon.BindConfig
	(*RenamePopupRule)(nil),            // 87: snakecommon.RenamePopupRule
	(*QualifyingMatch)(nil),            // 88: snakecommon.QualifyingMatch
	(*NewbieClub)(nil),                 // 89: snakecommon.NewbieClub
	(*GameEndSkin)(nil),                // 90: snakecommon.GameEndSkin
	(*DeviceConfig)(nil),               // 91: snakecommon.DeviceConfig
	(*AntiAddiction)(nil),              // 92: snakecommon.AntiAddiction
	(*Notify)(nil),                     // 93: snakecommon.Notify
	(*CertifyGameConfig)(nil),          // 94: snakecommon.CertifyGameConfig
	(*MinorNotify)(nil),                // 95: snakecommon.MinorNotify
	(*PayNotify)(nil),                  // 96: snakecommon.PayNotify
	(*SocialDesc)(nil),                 // 97: snakecommon.SocialDesc
	(*IdentityAge)(nil),                // 98: snakecommon.IdentityAge
	(*CertifyNotify)(nil),              // 99: snakecommon.CertifyNotify
	(*IdfaConfig)(nil),                 // 100: snakecommon.IdfaConfig
	(*CommentConfig)(nil),              // 101: snakecommon.CommentConfig
	(*RegisterSurvey)(nil),             // 102: snakecommon.RegisterSurvey
	(*RecruitPopup)(nil),               // 103: snakecommon.RecruitPopup
	(*NewUserConfig)(nil),              // 104: snakecommon.NewUserConfig
	(*ReviveConfigItem)(nil),           // 105: snakecommon.ReviveConfigItem
	(*SingleGameAiConfigItem)(nil),     // 106: snakecommon.SingleGameAiConfigItem
	(*FloaterConfig)(nil),              // 107: snakecommon.FloaterConfig
	(*ActivityMapConfig)(nil),          // 108: snakecommon.ActivityMapConfig
	(*EndlessLimitConfig)(nil),         // 109: snakecommon.EndlessLimitConfig
	(*EndlessBubbleConfig)(nil),        // 110: snakecommon.EndlessBubbleConfig
	(*EndlessTrackConfig)(nil),         // 111: snakecommon.EndlessTrackConfig
	(*WildStormListItem)(nil),          // 112: snakecommon.WildStormListItem
	(*WildStormConfig)(nil),            // 113: snakecommon.WildStormConfig
	(*OfflineGameConfig)(nil),          // 114: snakecommon.OfflineGameConfig
	(*MentorshipConfig)(nil),           // 115: snakecommon.MentorshipConfig
	(*MentorPrivilegeInfo)(nil),        // 116: snakecommon.MentorPrivilegeInfo
	(*PrivilegeDetailInfo)(nil),        // 117: snakecommon.PrivilegeDetailInfo
	(*MentorshipBondTitleItem)(nil),    // 118: snakecommon.MentorshipBondTitleItem
	(*MentorFinishReward)(nil),         // 119: snakecommon.MentorFinishReward
	(*MasterPrenticeStrategyItem)(nil), // 120: snakecommon.MasterPrenticeStrategyItem
	(*HotConfig)(nil),                  // 121: snakecommon.HotConfig
	(*ProductConfig)(nil),              // 122: snakecommon.ProductConfig
	nil,                                // 123: snakecommon.ConfigVersionInfo.FlagsEntry
	nil,                                // 124: snakecommon.ClanConfig.ClanRaceRewardEntry
	nil,                                // 125: snakecommon.PingConfig.PingIpListEntry
	nil,                                // 126: snakecommon.ShowAdConfig.AdPercentEntry
	nil,                                // 127: snakecommon.AdPopupsConfig.PopupPositionConfigEntry
	(*CPriceInfo)(nil),                 // 128: snakecommon.CPriceInfo
	(*config.RewardConfig)(nil),        // 129: SnakeMain.Config.RewardConfig
	(*RMBPackGoodsInfo)(nil),           // 130: snakecommon.RMBPackGoodsInfo
	(*config.PackModel)(nil),           // 131: SnakeMain.Config.PackModel
	(*config.Property)(nil),            // 132: SnakeMain.Config.Property
	(*config.CurrencyStore)(nil),       // 133: SnakeMain.Config.CurrencyStore
	(*config.MiddleItem)(nil),          // 134: SnakeMain.Config.MiddleItem
	(*config.DrawCardGuideConfig)(nil), // 135: SnakeMain.Config.DrawCardGuideConfig
	(*config.StoreConfig)(nil),         // 136: SnakeMain.Config.StoreConfig
}
var file_snakecommon_project_config_proto_depIdxs = []int32{
	123, // 0: snakecommon.ConfigVersionInfo.flags:type_name -> snakecommon.ConfigVersionInfo.FlagsEntry
	3,   // 1: snakecommon.EndLessBuffPropConfigV2.list:type_name -> snakecommon.EndLessBuffPropInfo
	128, // 2: snakecommon.EndLessBuffPropInfo.price_list:type_name -> snakecommon.CPriceInfo
	4,   // 3: snakecommon.EndLessBuffPropInfo.prop_list:type_name -> snakecommon.RandomPropInfo
	6,   // 4: snakecommon.HuaweiHighlight.highlight_list:type_name -> snakecommon.HighLightInfo
	9,   // 5: snakecommon.OlGameConfig.game_status_track:type_name -> snakecommon.GameStatusTrack
	10,  // 6: snakecommon.OlGameConfig.grass_config:type_name -> snakecommon.GrassConfig
	12,  // 7: snakecommon.OlGameConfig.team_suit:type_name -> snakecommon.TeamSuit
	14,  // 8: snakecommon.OlGameConfig.team_kill_config:type_name -> snakecommon.TeamKillConfig
	15,  // 9: snakecommon.OlGameConfig.team_melee_config:type_name -> snakecommon.TeamMeleeConfig
	16,  // 10: snakecommon.OlGameConfig.qualifying_config:type_name -> snakecommon.QualifyingConfig
	17,  // 11: snakecommon.OlGameConfig.race_normal_config:type_name -> snakecommon.RaceNormalConfig
	18,  // 12: snakecommon.OlGameConfig.team_kill_prop:type_name -> snakecommon.TeamKillProp
	8,   // 13: snakecommon.OlGameConfig.match_backgroud:type_name -> snakecommon.MatchBackgroudConfig
	11,  // 14: snakecommon.GrassConfig.grass:type_name -> snakecommon.GrassInfo
	13,  // 15: snakecommon.TeamSuit.new_suit:type_name -> snakecommon.TeamSuitNewSuitInfo
	128, // 16: snakecommon.TeamKillProp.price_list:type_name -> snakecommon.CPriceInfo
	129, // 17: snakecommon.TeamKillProp.prop_list:type_name -> SnakeMain.Config.RewardConfig
	20,  // 18: snakecommon.ClanConfig.rule_desc:type_name -> snakecommon.RuleDesc
	22,  // 19: snakecommon.ClanConfig.race_time_config:type_name -> snakecommon.RaceTimeConfig
	124, // 20: snakecommon.ClanConfig.clan_race_reward:type_name -> snakecommon.ClanConfig.ClanRaceRewardEntry
	24,  // 21: snakecommon.ClanConfig.level_config:type_name -> snakecommon.ClanLevelInfo
	25,  // 22: snakecommon.ClanConfig.reward_config:type_name -> snakecommon.NewClanRewardItem
	25,  // 23: snakecommon.ClanConfig.reward_explain_config:type_name -> snakecommon.NewClanRewardItem
	21,  // 24: snakecommon.RuleDesc.active_point_addition:type_name -> snakecommon.ActivePointAddition
	129, // 25: snakecommon.NewClanRewardItem.reward:type_name -> SnakeMain.Config.RewardConfig
	28,  // 26: snakecommon.RankConfig.level:type_name -> snakecommon.RankLevel
	27,  // 27: snakecommon.RankConfig.rank_reward:type_name -> snakecommon.RankReward
	129, // 28: snakecommon.RankReward.reward_list:type_name -> SnakeMain.Config.RewardConfig
	34,  // 29: snakecommon.ShareConfig.channel_config:type_name -> snakecommon.ChannelConfig
	35,  // 30: snakecommon.ShareConfig.game_invite:type_name -> snakecommon.GameInvite
	33,  // 31: snakecommon.ShareConfig.video_share_icon:type_name -> snakecommon.VideoShareIcon
	32,  // 32: snakecommon.ShareConfig.clipboard_check:type_name -> snakecommon.ClipBoardCheck
	31,  // 33: snakecommon.ShareConfig.share_tag:type_name -> snakecommon.ShareTag
	38,  // 34: snakecommon.SocialConfig.charm_level:type_name -> snakecommon.CharmLevelItem
	37,  // 35: snakecommon.SocialConfig.charm_top_config:type_name -> snakecommon.CharmTopConfig
	129, // 36: snakecommon.SocialConfig.marry_rewards:type_name -> SnakeMain.Config.RewardConfig
	40,  // 37: snakecommon.CharmExpConfig.charm_exp_ranks:type_name -> snakecommon.CharmExpRank
	41,  // 38: snakecommon.CharmExpConfig.privilege_config:type_name -> snakecommon.CharmPrivilegeItem
	43,  // 39: snakecommon.TextConfig.gift_like_text_list:type_name -> snakecommon.GiftLikeTextList
	44,  // 40: snakecommon.TextConfig.quick_phrase_text_list:type_name -> snakecommon.ShortCutConfig
	45,  // 41: snakecommon.TextConfig.report_behavior_list:type_name -> snakecommon.ReportBehavior
	47,  // 42: snakecommon.UiConfigV3.endless_icon_v2:type_name -> snakecommon.GameIcon
	47,  // 43: snakecommon.UiConfigV3.qualifying_icon_v2:type_name -> snakecommon.GameIcon
	47,  // 44: snakecommon.UiConfigV3.left_corner:type_name -> snakecommon.GameIcon
	47,  // 45: snakecommon.UiConfigV3.right_corner:type_name -> snakecommon.GameIcon
	47,  // 46: snakecommon.UiConfigV3.more_game:type_name -> snakecommon.GameIcon
	49,  // 47: snakecommon.UiConfigV3.newbie_condition:type_name -> snakecommon.NewbieCondition
	47,  // 48: snakecommon.UiConfigV3.endless_huge_icon:type_name -> snakecommon.GameIcon
	47,  // 49: snakecommon.UiConfigV3.game_slide_list:type_name -> snakecommon.GameIcon
	47,  // 50: snakecommon.UiConfigV3.endless_icon:type_name -> snakecommon.GameIcon
	47,  // 51: snakecommon.UiConfigV3.qualifying_icon:type_name -> snakecommon.GameIcon
	50,  // 52: snakecommon.UiConfigV3.home_background:type_name -> snakecommon.HomeBackground
	47,  // 53: snakecommon.UiConfigV3.ar_icon:type_name -> snakecommon.GameIcon
	47,  // 54: snakecommon.UiConfigV3.plant_icon:type_name -> snakecommon.GameIcon
	47,  // 55: snakecommon.UiConfigV3.fallguys_icon:type_name -> snakecommon.GameIcon
	48,  // 56: snakecommon.GameIcon.bubble:type_name -> snakecommon.Bubble
	125, // 57: snakecommon.PingConfig.ping_ip_list:type_name -> snakecommon.PingConfig.PingIpListEntry
	53,  // 58: snakecommon.RewardMarkConfig.reward_marks:type_name -> snakecommon.RewardMark
	61,  // 59: snakecommon.ShowAdConfig.snake_coin_ad_config:type_name -> snakecommon.AdRewardModel
	61,  // 60: snakecommon.ShowAdConfig.coupon_ad_config:type_name -> snakecommon.AdRewardModel
	61,  // 61: snakecommon.ShowAdConfig.happycoin_ad_config:type_name -> snakecommon.AdRewardModel
	62,  // 62: snakecommon.ShowAdConfig.goods_list:type_name -> snakecommon.AdGoodsItem
	57,  // 63: snakecommon.ShowAdConfig.endless_buff:type_name -> snakecommon.EndlessBuff
	59,  // 64: snakecommon.ShowAdConfig.ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	59,  // 65: snakecommon.ShowAdConfig.android_ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	59,  // 66: snakecommon.ShowAdConfig.ab_ad_popups_config:type_name -> snakecommon.AdPopupsConfig
	60,  // 67: snakecommon.ShowAdConfig.endless_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	60,  // 68: snakecommon.ShowAdConfig.noad_endless_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	60,  // 69: snakecommon.ShowAdConfig.melee_checkout_recommend:type_name -> snakecommon.EndlessAdRecommend
	126, // 70: snakecommon.ShowAdConfig.ad_percent:type_name -> snakecommon.ShowAdConfig.AdPercentEntry
	55,  // 71: snakecommon.ShowAdConfig.cross_promotions:type_name -> snakecommon.CrossPromotions
	56,  // 72: snakecommon.CrossPromotions.source:type_name -> snakecommon.CrossPromotionsSource
	127, // 73: snakecommon.AdPopupsConfig.popup_position_config:type_name -> snakecommon.AdPopupsConfig.PopupPositionConfigEntry
	130, // 74: snakecommon.OrderConfig.pack_goods_list:type_name -> snakecommon.RMBPackGoodsInfo
	130, // 75: snakecommon.OrderConfig.diamond_goods_list:type_name -> snakecommon.RMBPackGoodsInfo
	64,  // 76: snakecommon.OrderConfig.first_charge_popup:type_name -> snakecommon.FirstChargePopup
	130, // 77: snakecommon.OrderConfig.red_pack_goods_list:type_name -> snakecommon.RMBPackGoodsInfo
	65,  // 78: snakecommon.OrderConfig.random_double_client_info:type_name -> snakecommon.RandomDoubleClientInfo
	71,  // 79: snakecommon.ShowConfig.level_config:type_name -> snakecommon.ShowLevelConfig
	72,  // 80: snakecommon.ShowConfig.skill_name:type_name -> snakecommon.ShowSkillName
	70,  // 81: snakecommon.ShowConfig.icon_style:type_name -> snakecommon.ShowIconStyle
	69,  // 82: snakecommon.ShowConfig.pack_config:type_name -> snakecommon.ShowPackItem
	131, // 83: snakecommon.ShowPackItem.pack_info:type_name -> SnakeMain.Config.PackModel
	129, // 84: snakecommon.ShowLevelConfig.reward:type_name -> SnakeMain.Config.RewardConfig
	73,  // 85: snakecommon.ShowLevelConfig.game_skill_list:type_name -> snakecommon.ShowSkillBuff
	91,  // 86: snakecommon.UserConfig.abnormal_store:type_name -> snakecommon.DeviceConfig
	92,  // 87: snakecommon.UserConfig.anti_addiction:type_name -> snakecommon.AntiAddiction
	90,  // 88: snakecommon.UserConfig.game_end_skin:type_name -> snakecommon.GameEndSkin
	87,  // 89: snakecommon.UserConfig.rename_popup_rule:type_name -> snakecommon.RenamePopupRule
	86,  // 90: snakecommon.UserConfig.bind_config:type_name -> snakecommon.BindConfig
	80,  // 91: snakecommon.UserConfig.setting_conf:type_name -> snakecommon.SettingConfig
	79,  // 92: snakecommon.UserConfig.feedback:type_name -> snakecommon.FeedbackConfig
	78,  // 93: snakecommon.UserConfig.flags:type_name -> snakecommon.FlagsConfig
	129, // 94: snakecommon.UserConfig.certify_reward:type_name -> SnakeMain.Config.RewardConfig
	102, // 95: snakecommon.UserConfig.register_survey:type_name -> snakecommon.RegisterSurvey
	103, // 96: snakecommon.UserConfig.recruit_popup:type_name -> snakecommon.RecruitPopup
	76,  // 97: snakecommon.UserConfig.minor_limit:type_name -> snakecommon.MinorLimit
	104, // 98: snakecommon.UserConfig.new_user_config:type_name -> snakecommon.NewUserConfig
	101, // 99: snakecommon.UserConfig.comment_config:type_name -> snakecommon.CommentConfig
	75,  // 100: snakecommon.UserConfig.unity_flags:type_name -> snakecommon.UnityFlags
	100, // 101: snakecommon.UserConfig.idfa_config:type_name -> snakecommon.IdfaConfig
	77,  // 102: snakecommon.MinorLimit.order_curator:type_name -> snakecommon.OrderCurator
	81,  // 103: snakecommon.SettingConfig.doc_version:type_name -> snakecommon.DocVersion
	82,  // 104: snakecommon.SettingConfig.network_check:type_name -> snakecommon.NetworkCheck
	83,  // 105: snakecommon.SettingConfig.prometheus:type_name -> snakecommon.Prometheus
	84,  // 106: snakecommon.SettingConfig.okhttp_dispatcher:type_name -> snakecommon.OkhttpDispatcher
	85,  // 107: snakecommon.SettingConfig.mem_switch:type_name -> snakecommon.MemSwitch
	89,  // 108: snakecommon.RenamePopupRule.newbie_club:type_name -> snakecommon.NewbieClub
	88,  // 109: snakecommon.RenamePopupRule.qualifying_match:type_name -> snakecommon.QualifyingMatch
	93,  // 110: snakecommon.AntiAddiction.notify:type_name -> snakecommon.Notify
	95,  // 111: snakecommon.AntiAddiction.minor_notify:type_name -> snakecommon.MinorNotify
	96,  // 112: snakecommon.AntiAddiction.pay_notify:type_name -> snakecommon.PayNotify
	97,  // 113: snakecommon.AntiAddiction.social_desc:type_name -> snakecommon.SocialDesc
	98,  // 114: snakecommon.AntiAddiction.identity_age:type_name -> snakecommon.IdentityAge
	99,  // 115: snakecommon.AntiAddiction.certify_notify:type_name -> snakecommon.CertifyNotify
	95,  // 116: snakecommon.AntiAddiction.infant_notify:type_name -> snakecommon.MinorNotify
	94,  // 117: snakecommon.Notify.uncertified:type_name -> snakecommon.CertifyGameConfig
	94,  // 118: snakecommon.Notify.minor:type_name -> snakecommon.CertifyGameConfig
	129, // 119: snakecommon.IdfaConfig.reward:type_name -> SnakeMain.Config.RewardConfig
	129, // 120: snakecommon.RegisterSurvey.reward:type_name -> SnakeMain.Config.RewardConfig
	129, // 121: snakecommon.NewUserConfig.guide_reward:type_name -> SnakeMain.Config.RewardConfig
	112, // 122: snakecommon.WildStormConfig.wild_storm_list:type_name -> snakecommon.WildStormListItem
	105, // 123: snakecommon.OfflineGameConfig.endless_revive_config:type_name -> snakecommon.ReviveConfigItem
	105, // 124: snakecommon.OfflineGameConfig.endless_revive_config_ab1:type_name -> snakecommon.ReviveConfigItem
	105, // 125: snakecommon.OfflineGameConfig.endless_revive_config_ab2:type_name -> snakecommon.ReviveConfigItem
	105, // 126: snakecommon.OfflineGameConfig.excite_revive_config:type_name -> snakecommon.ReviveConfigItem
	105, // 127: snakecommon.OfflineGameConfig.limit_revive_config:type_name -> snakecommon.ReviveConfigItem
	107, // 128: snakecommon.OfflineGameConfig.floater_config:type_name -> snakecommon.FloaterConfig
	109, // 129: snakecommon.OfflineGameConfig.endless_limit_config:type_name -> snakecommon.EndlessLimitConfig
	108, // 130: snakecommon.OfflineGameConfig.activity_map_config:type_name -> snakecommon.ActivityMapConfig
	110, // 131: snakecommon.OfflineGameConfig.endless_bubble:type_name -> snakecommon.EndlessBubbleConfig
	111, // 132: snakecommon.OfflineGameConfig.endless_track:type_name -> snakecommon.EndlessTrackConfig
	113, // 133: snakecommon.OfflineGameConfig.wild_storm:type_name -> snakecommon.WildStormConfig
	3,   // 134: snakecommon.OfflineGameConfig.endless_buff_prop:type_name -> snakecommon.EndLessBuffPropInfo
	116, // 135: snakecommon.MentorshipConfig.master_privilege_config:type_name -> snakecommon.MentorPrivilegeInfo
	118, // 136: snakecommon.MentorshipConfig.bond_title_config:type_name -> snakecommon.MentorshipBondTitleItem
	119, // 137: snakecommon.MentorshipConfig.finish_reward:type_name -> snakecommon.MentorFinishReward
	120, // 138: snakecommon.MentorshipConfig.master_prentice_strategy:type_name -> snakecommon.MasterPrenticeStrategyItem
	117, // 139: snakecommon.MentorPrivilegeInfo.privilege:type_name -> snakecommon.PrivilegeDetailInfo
	129, // 140: snakecommon.MentorPrivilegeInfo.reward_list:type_name -> SnakeMain.Config.RewardConfig
	129, // 141: snakecommon.MentorFinishReward.master_reward:type_name -> SnakeMain.Config.RewardConfig
	129, // 142: snakecommon.MentorFinishReward.prentice_reward:type_name -> SnakeMain.Config.RewardConfig
	132, // 143: snakecommon.ProductConfig.property:type_name -> SnakeMain.Config.Property
	133, // 144: snakecommon.ProductConfig.currency_store:type_name -> SnakeMain.Config.CurrencyStore
	134, // 145: snakecommon.ProductConfig.middle_item_list:type_name -> SnakeMain.Config.MiddleItem
	135, // 146: snakecommon.ProductConfig.draw_card_guide_config:type_name -> SnakeMain.Config.DrawCardGuideConfig
	136, // 147: snakecommon.ProductConfig.store_config:type_name -> SnakeMain.Config.StoreConfig
	23,  // 148: snakecommon.ClanConfig.ClanRaceRewardEntry.value:type_name -> snakecommon.ClanRaceReward
	58,  // 149: snakecommon.AdPopupsConfig.PopupPositionConfigEntry.value:type_name -> snakecommon.PopupPosition
	150, // [150:150] is the sub-list for method output_type
	150, // [150:150] is the sub-list for method input_type
	150, // [150:150] is the sub-list for extension type_name
	150, // [150:150] is the sub-list for extension extendee
	0,   // [0:150] is the sub-list for field type_name
}

func init() { file_snakecommon_project_config_proto_init() }
func file_snakecommon_project_config_proto_init() {
	if File_snakecommon_project_config_proto != nil {
		return
	}
	file_snakecommon_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snakecommon_project_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLessBuffPropConfigV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLessBuffPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighLightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OlGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchBackgroudConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatusTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrassConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuitNewSuitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamKillConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMeleeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceNormalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamKillProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePointAddition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceTimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanRaceReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClanLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewClanRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClipBoardCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoShareIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmTopConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmLevelItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmExpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmExpRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharmPrivilegeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftLikeTextList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiConfigV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBackground); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardMarkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossPromotions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossPromotionsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopupPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdPopupsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessAdRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdRewardModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdGoodsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstChargePopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomDoubleClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityQualifyingOpenConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopListConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowIconStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowLevelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSkillName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSkillBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinorLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCurator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prometheus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkhttpDispatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenamePopupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieClub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiAddiction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifyGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinorNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdfaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitPopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviveConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleGameAiConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloaterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityMapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBubbleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessTrackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildStormListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildStormConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorshipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorPrivilegeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorshipBondTitleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentorFinishReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterPrenticeStrategyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecommon_project_config_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecommon_project_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   127,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakecommon_project_config_proto_goTypes,
		DependencyIndexes: file_snakecommon_project_config_proto_depIdxs,
		EnumInfos:         file_snakecommon_project_config_proto_enumTypes,
		MessageInfos:      file_snakecommon_project_config_proto_msgTypes,
	}.Build()
	File_snakecommon_project_config_proto = out.File
	file_snakecommon_project_config_proto_rawDesc = nil
	file_snakecommon_project_config_proto_goTypes = nil
	file_snakecommon_project_config_proto_depIdxs = nil
}
