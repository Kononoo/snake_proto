// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fallguys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchServerClient is the client API for MatchServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServerClient interface {
	SyncState(ctx context.Context, in *SyncStateReq, opts ...grpc.CallOption) (*SyncStateRsp, error)
	EndGame(ctx context.Context, in *EndGameReq, opts ...grpc.CallOption) (*EndGameRsp, error)
}

type matchServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServerClient(cc grpc.ClientConnInterface) MatchServerClient {
	return &matchServerClient{cc}
}

func (c *matchServerClient) SyncState(ctx context.Context, in *SyncStateReq, opts ...grpc.CallOption) (*SyncStateRsp, error) {
	out := new(SyncStateRsp)
	err := c.cc.Invoke(ctx, "/fallguys.MatchServer/SyncState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServerClient) EndGame(ctx context.Context, in *EndGameReq, opts ...grpc.CallOption) (*EndGameRsp, error) {
	out := new(EndGameRsp)
	err := c.cc.Invoke(ctx, "/fallguys.MatchServer/EndGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServerServer is the server API for MatchServer service.
// All implementations should embed UnimplementedMatchServerServer
// for forward compatibility
type MatchServerServer interface {
	SyncState(context.Context, *SyncStateReq) (*SyncStateRsp, error)
	EndGame(context.Context, *EndGameReq) (*EndGameRsp, error)
}

// UnimplementedMatchServerServer should be embedded to have forward compatible implementations.
type UnimplementedMatchServerServer struct {
}

func (UnimplementedMatchServerServer) SyncState(context.Context, *SyncStateReq) (*SyncStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncState not implemented")
}
func (UnimplementedMatchServerServer) EndGame(context.Context, *EndGameReq) (*EndGameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGame not implemented")
}

// UnsafeMatchServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServerServer will
// result in compilation errors.
type UnsafeMatchServerServer interface {
	mustEmbedUnimplementedMatchServerServer()
}

func RegisterMatchServerServer(s grpc.ServiceRegistrar, srv MatchServerServer) {
	s.RegisterService(&MatchServer_ServiceDesc, srv)
}

func _MatchServer_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServerServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fallguys.MatchServer/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServerServer).SyncState(ctx, req.(*SyncStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchServer_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServerServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fallguys.MatchServer/EndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServerServer).EndGame(ctx, req.(*EndGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchServer_ServiceDesc is the grpc.ServiceDesc for MatchServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fallguys.MatchServer",
	HandlerType: (*MatchServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncState",
			Handler:    _MatchServer_SyncState_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _MatchServer_EndGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fallguys/match.proto",
}
