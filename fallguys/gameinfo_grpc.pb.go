// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fallguys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnityServerClient is the client API for UnityServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnityServerClient interface {
	SyncGameInfo(ctx context.Context, in *SyncGameInfoReq, opts ...grpc.CallOption) (*SyncGameInfoRsp, error)
}

type unityServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUnityServerClient(cc grpc.ClientConnInterface) UnityServerClient {
	return &unityServerClient{cc}
}

func (c *unityServerClient) SyncGameInfo(ctx context.Context, in *SyncGameInfoReq, opts ...grpc.CallOption) (*SyncGameInfoRsp, error) {
	out := new(SyncGameInfoRsp)
	err := c.cc.Invoke(ctx, "/fallguys.UnityServer/SyncGameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnityServerServer is the server API for UnityServer service.
// All implementations should embed UnimplementedUnityServerServer
// for forward compatibility
type UnityServerServer interface {
	SyncGameInfo(context.Context, *SyncGameInfoReq) (*SyncGameInfoRsp, error)
}

// UnimplementedUnityServerServer should be embedded to have forward compatible implementations.
type UnimplementedUnityServerServer struct {
}

func (UnimplementedUnityServerServer) SyncGameInfo(context.Context, *SyncGameInfoReq) (*SyncGameInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGameInfo not implemented")
}

// UnsafeUnityServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnityServerServer will
// result in compilation errors.
type UnsafeUnityServerServer interface {
	mustEmbedUnimplementedUnityServerServer()
}

func RegisterUnityServerServer(s grpc.ServiceRegistrar, srv UnityServerServer) {
	s.RegisterService(&UnityServer_ServiceDesc, srv)
}

func _UnityServer_SyncGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGameInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnityServerServer).SyncGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fallguys.UnityServer/SyncGameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnityServerServer).SyncGameInfo(ctx, req.(*SyncGameInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UnityServer_ServiceDesc is the grpc.ServiceDesc for UnityServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnityServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fallguys.UnityServer",
	HandlerType: (*UnityServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncGameInfo",
			Handler:    _UnityServer_SyncGameInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fallguys/gameinfo.proto",
}
