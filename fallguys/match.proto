syntax = "proto3";

package fallguys;
option go_package = "git.17zjh.com/snake/snake_proto/fallguys";
import "fallguys/push.proto";

enum RoomState {
  Idle = 0; // 空闲
  WaitEnter = 1; // 待进入
  InGame = 2; // 游戏中
  WaitExit = 3; // 待退出
  Offline = 4; // 离线
}

// unity server每秒定时同步房间状态
message SyncStateReq {
  string addr = 1; // ip:端口
  int32 pid = 2; // 进程id
  int32 modeVersion = 3; // 模式版本号
  RoomState state = 4; // 状态
}

message SyncStateRsp {
}

message Winner {
  string uid = 1; // 玩家uid
  int32 rank = 2; // 名次
}

// 游戏结束时untiy server通知游戏结果
message EndGameReq {
  string addr = 1; // ip:端口
  int32 rid = 2;
  repeated Winner winners = 3;
}
message EndGameRsp {
}

message SubscribeReq { // 客户端订阅push消息
  string addr = 1; // ip:端口
}

message SubscribeRsp { // 服务器推送push消息
  PushType pushType = 1; // push 类型
  bytes data = 2; // push内容
  string msgId = 3; // 唯一标识
}

message GameReadyReq { // unity server初始化成功后通知tcp server
  bool ready = 1; // 是否初始化成功
  string msgId = 2; // push消息中的唯一标识
  string addr = 3; // ip:端口
}
message GameReadyRsp{
}

// 游戏每关结束时untiy server通知本轮游戏结果
message EndRoundReq {
  string addr = 1; // ip:端口
  int32 rid = 2; // 房间id
  repeated Winner winners = 3; // 本轮淘汰的玩家的名次
  bool isLastRound = 4; // 是否是最后一关
}
message EndRoundRsp {
}


service MatchServer {
  rpc SyncState (SyncStateReq) returns (SyncStateRsp) {}
  rpc EndGame (EndGameReq) returns (EndGameRsp) {}
  rpc GameReady (GameReadyReq) returns (GameReadyRsp) {}
  rpc Subscribe (SubscribeReq) returns (stream SubscribeRsp) {}
  rpc EndRound (EndRoundReq) returns (EndRoundRsp) {}
}