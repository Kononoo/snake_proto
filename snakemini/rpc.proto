syntax = "proto3";

option go_package="../snakemini";
option objc_class_prefix = "PROTO";

import "snakemini/export.proto";

package pb;


message UidList {
    repeated int64 uid_list = 1;
}

message ErrInfo {
    int32 err_code = 1;
    string err_message = 2;
}

message RpcResponse {
    ErrInfo err = 1;
    string body = 2;
}

message ReplyEmpty {
    ErrInfo err = 1;
}

//绑定
message BindRequest {
    int64 uid = 1;
    string sid = 2;
    string version = 3;
    int32 platform = 4;
    int32 user_type = 5;
}

message BindResponse {
    string info = 1;
}

message BindMatchInfo {
    int32 state = 1;
    GroupInfo group_info = 2;
    MatchInfo match_info = 3;
}

message UidRequest {
    int64 uid = 1;
    map<string, int32> cmdMap = 2;
}

message HeartBeartRequest {
    int64 client_time = 1;
}

message HeartBeartResponse {
    int64 client_time = 1;
    int64 server_time = 2;
}

//matchServer判断是否在房间中和游戏中
message InGameStateReply {
    ErrInfo err = 1;
    int32 gid = 2;
    int32 rid = 3;
    int32 relay_server_id = 4;
    string relay_host = 5;
}

message MatchUserInfo {
    int64 uid = 1;
    string openid = 2;
    string version = 3;
    int32 game_mode = 4;
    int32 mode_version = 5;
    int32 skin_id = 6;
    int32 user_type = 7;
    int32 platform = 8;
    int32 rank = 9;
    int32 history_max_star = 10;
    int32 has_magnet = 11;
    int32 kill_id = 12;
}

//创建队伍
message CreateGroupRequest {
    MatchUserInfo user_info = 1;
}

message CreateGroupResponse {
    int32 gid = 1;
}

//加入队伍
message JoinGroupRequest {
    MatchUserInfo user_info = 1;
    int64 invite_uid = 2;
}

message JoinGroupResponse {
    GroupInfo group_info = 1;
}

//退出队伍
message ExitGroupRequest {
    int64 uid = 1;
}

message ExitGroupResponse {
}

//踢出队伍
message KickRequest {
    int64 uid = 1;
    int64 kick_uid = 2;
}

message KickResponse {
}

message GroupInfo {
    int32 gid = 1;
    int64 owner = 2;
    repeated int64 uid_list = 3;
    int32 game_mode = 4;
    int32 mode_version = 5;
    repeated GroupUserInfo user_infos = 6;
}

message GroupUserInfo {
    int64  uid=1;
    int32 skin_id =2;
}

//开始匹配
message StartMatchRequest {
    MatchUserInfo user_info = 1;
}

message StartMatchResponse {
    int32 gid = 1;
    int32 timeout=2; // 匹配超时时间
}

// 取消匹配
message CancelMatchRequest {
    int64 uid = 1;
    int32 is_timeout = 2; // 是否超时取消
}


message MatchInfo {
    int32 rid = 1;
    string access_info = 2;
    repeated int64 uid_list = 3;
    int32 team_id = 4;
    repeated int32 team_id_list = 5;
    int32 time_limit = 6;
    int64 match_time = 7;
    int32 num = 8;
    int32 game_mode = 9;
    int32 mode_version = 10;
    int32 max_player_count = 11;
    repeated int32 team_skin_id_list = 12;
    repeated UserAttribute user_attr = 13;
    int32 seed = 14;
    bytes relay_sign = 15;
    string udp_host = 16;
    int32 udp_port = 17;
    int32 config_version = 18;
    string ws_addr = 19;
}

message UserAttribute {
    int64 uid = 1;
    int32 team_id = 2;
    int32 skin_id = 3;
    int32 num = 4;
    int32 ai_level = 5;
    int32 has_magnet = 6;
    int32 kill_id = 7;
}

//退出队伍
message ExitRoomRequest {
    int64 uid = 1;
    int32 exit_type = 2;
}

message ExitRoomResponse {
}

//游戏结束
message UploadScoreRequest {
    int32 rid = 1;
    int64 uid = 2;
    int32 num = 3;
    repeated UserScore score_list = 4;
}

message UserScore {
    int64 uid = 1;
    int32 score = 2;
    int32 kill = 3;
    int32 be_kill = 4;
    int32 relive = 5;
    int32 hit_wall = 6;
    int32 eat_star = 7;
}

message GameEndResponse {
}

message ReportRoomScore {
    int32 rid = 1;
    int64 start_time = 2;
    int64 end_time = 3;
    repeated UserScore score_list = 4;
    repeated int64 uids = 5;
}

//获取游戏配置
message GetGameConfigRequest {
    int32 game_mode = 1;
    int32 mode_version = 2;
}

//-------------------------relay-----------------------------

message RelayBindUserInfo {
    int64 uid = 1;
    int32 rid = 2;
    int32 seed = 3;
    int32 max_player_count = 4;
    int32 num = 5;
    int32 time_limit = 6;
    int64 match_time = 7;
    bytes relay_sign = 8;
    int32 game_mode = 9;
    int32 mode_version = 10;
    int32 platform = 11;
    int32 user_type = 12;
}

message RelayBindRequest {
    int64 uid = 1;
    int32 rid = 2;
    int32 seed = 3;
    int32 max_player_count = 4;
    int32 num = 5;
    int32 time_limit = 6;
    int64 match_time = 7;
    bytes relay_sign = 8;
    int32 game_mode = 9;
    int32 mode_version = 10;
    int32 platform = 11;
    int32 user_type = 12;
}

message RelayStartInfo {
    int64 start_time = 1;
    int32 render_delay = 2;
    int32 turn_time = 3;
}

message RelayBindResponse {
    RelayStartInfo start_info = 1;
    int32 state = 2;
    int64 player_uid = 3;
    int32 player_sid = 4;
}


message RelayCommandRequest {
    int64 uid = 1;
    int32 command = 2;
    int32 revival_length = 3;
    UserAttribute user_attr = 4;
    int32 param =5;
}

message RelayGetHistoryFrameRequest {
    int64 start_action_no = 1;
    bool snapshot_needed = 2;
    int64 uid = 3;
}


message RelayGetHistoryFrameResponse {
    //    int64 action_no = 1;
    //    bytes snapshot = 2;
    repeated FrameCommand frame_command_list = 3;
}

message RelaySignalRequest {
    int64 uid = 1;
    int32 signal = 2;
}


message RelayExitGameRequest {
    int64 uid = 1;
    int32 exit_type = 2;
}

message RelaySnapShotRequest {
    int64 action_no = 1;
    bytes snapshot = 2;
    int64 uid = 3;
}

message RelayReportRoomStateRequest {
    int64 action_no = 1;
    int32 state = 2;
    int64 uid = 3;
}

message RelayChecksumRequest {
    int64 action_no = 1;
    double checksum = 2;
    int64 uid = 3;
    int32 random_count = 4;
}


message RelayUdpSyncTimeRequest {
    int64 uid = 1;
    int32 temp_sid = 2;
    int64 client_time = 3;
}

message RelayUdpSyncTimeResponse {
    int64 server_time = 1;
    int64 client_time = 2;
}


message RelayReportScoreRequest {
    repeated int64 score_list = 1;
    repeated int64 kill_list = 2;
    int64 action_no = 3;
    int64 uid = 4;
    int32 rid = 5;
}

message RpcReportScoreRequest {
    repeated int64 score_list = 1;
    repeated int64 kill_list = 2;
    int32 rid = 3;
    int64 start_time = 4;
    int64 end_time = 5;
    int32 user_type = 6;
    repeated int32 player_states = 7;
}

message RpcReportRoomStateRequest {
    int32 rid = 1;
    int32 state = 2;
    int32 user_type = 3;
}

message RpcReportRoomAvailNumsRequest {
    int32 rid = 1;
    int32 user_type = 2;
    repeated int32 num_list = 3;
}

message RpcReportAbnormalRequest {
    int32 rid = 1;
    int32 user_type = 2;
    repeated int32 abnormal_nums = 3;
}


message RpcReportAbnormalNotifyRequest {
    int32 rid = 1;
    int32 user_type = 2;
}

message RpcReportRoomLockRequest {
    int32 rid = 1;
    int32 type = 2;
    int32 user_type = 3;
}

//-------------------------relay-------------------------------

message GetUserStateRequest {
    repeated int64 uids = 1;
}

message UserStateInfo {
    int64 uid = 1;
    int32 state = 2;
}

message GetUserStateResponse {
    repeated UserStateInfo states = 1;
}

message UpdateUserOnlineStateRequest {
    int64 uid = 1;
    int32 state = 2;
}

message UpdateUserStateRequest {
    repeated int64 uid_list = 1;
    int32 state = 2;
}

message InviteFriendRequest {
    int64 invite_uid = 1;
    int64 friend_uid = 2;
    int32 source = 3;
}

message HandleInviteRequest {
    int32 response = 1;
    string msg = 2;
    MatchUserInfo user_info = 3;
    int64 invite_uid = 4;
    int32 source = 5;
}

message BindUserInfo {
    int64 uid = 1;
    int32 state = 2;
    int32 user_type = 3;
    int32 platform = 4;
    string version = 5;
}

message GetUserConnectorInfoResponse {
    BindUserInfo user_info = 1;
}


enum SendGiftCost {
    Free = 0; // 免费，比如点赞
    Coin = 1;//金币
    Diamond = 2; // 苹果
    Ad = 3; // 广告
    Share =4; // 分享
    DouyinDiamond=5;// 抖音钻石
}

message SendGiftRequest {
    int64 send_uid = 1; // 送礼人uid
    int64 receive_uid = 2; // 收礼人uid
    int32 gift_id = 3; // 礼物ID，30001团战点赞
    int32 source = 4; // source 1和2 团战结算页，废弃
    SendGiftCost cost_type = 5; // 付费类型 0 免费 1 金币 2 苹果 3 广告 4 分享 5 抖音钻石
    int32 num = 6; // 送礼个数
    int32 rid = 7; // 房间ID(团战结算页必传)
    int32 user_type = 8; // 送礼人user_type
    int32 rec_user_type=9; // 收礼人user_type(跨渠道点赞预留)
    string ext=10; // 扩展字段，广告or分享 传{"position":xxx}
    string version=11; // 版本号
    int32 combo_num=12; // 连击次数，从1开始
    int64 combo_nonce=13; // 连击nonce，客户端取combo_num=1的毫秒时间戳
    int32 bag_num=14; // 背包礼物数量
    string source_str = 15; // 字符串
}

message SendGiftResponse {
    int64 remain_diamond=1; // 剩余苹果
    int64 remain_coin=2; // 剩余金币
}

