// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakeapi/config/SKStore.Proto

package config

import (
	snakeapi "git.17zjh.com/snake/snake_proto/snakeapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RewardType int32

const (
	RewardType_REWARD_TYPE_UNDEFINED       RewardType = 0
	RewardType_REWARD_COIN                 RewardType = 1
	RewardType_REWARD_APPLE                RewardType = 2
	RewardType_REWARD_SKIN                 RewardType = 3
	RewardType_REWARD_SKIN_CHIP            RewardType = 4
	RewardType_REWARD_EFFECT               RewardType = 5
	RewardType_REWARD_EFFECT_CHIP          RewardType = 6
	RewardType_REWARD_PROP                 RewardType = 7
	RewardType_REWARD_CRYSTAL              RewardType = 8   //水晶
	RewardType_REWARD_GIFT                 RewardType = 9   //礼物
	RewardType_REWARD_HAPPY_COIN           RewardType = 10  //欢乐币
	RewardType_REWARD_TYPE_EVENT_PROP      RewardType = 11  // 活动道具
	RewardType_REWARD_TYPE_AVATAR_BOX      RewardType = 12  // 头像框
	RewardType_REWARD_TYPE_GIFT_PACKS      RewardType = 15  // 礼包
	RewardType_REWARD_TYPE_HONOR           RewardType = 16  // 荣耀水晶
	RewardType_REWARD_TYPE_RING            RewardType = 17  // 戒指
	RewardType_REWARD_TYPE_PUZZLE          RewardType = 18  //拼图奖励
	RewardType_REWARD_TYPE_REAL_REWARD     RewardType = 19  //实物奖励
	RewardType_REWARD_TYPE_LUCKY_BAG       RewardType = 20  //福袋
	RewardType_REWARD_TYPE_GOLD_BEAN       RewardType = 21  //金豆
	RewardType_REWARD_TYPE_BET_COIN        RewardType = 22  //竞猜币
	RewardType_REWARD_TYPE_COLORFUL_BEAN   RewardType = 23  //彩豆
	RewardType_REWARD_TYPE_CARD_BAG        RewardType = 24  //卡包
	RewardType_REWARD_TYPE_VIP_CARD        RewardType = 26  //会员卡
	RewardType_REWARD_TYPE_CHAT_BUBBLE     RewardType = 27  //气泡
	RewardType_REWARD_TYPE_BUFF            RewardType = 28  //游戏buff
	RewardType_REWARD_MEDAL_COIN           RewardType = 29  //勋章比
	RewardType_REWARD_TITLE                RewardType = 30  //称号
	RewardType_REWARD_PASS_BOX             RewardType = 32  //通行证箱子
	RewardType_REWARD_GAME_FACE            RewardType = 35  //游戏表情
	RewardType_REWARD_ROOM_BACKGROUND      RewardType = 36  // 语音房房间背景
	RewardType_REWARD_ROOM_CARD_BACKGROUND RewardType = 37  // 语音房资料卡片背景
	RewardType_REWARD_ROOM_ENTER_EFFECT    RewardType = 38  // 语音房入场特效
	RewardType_REWARD_BROADCAST_EFFECT     RewardType = 39  // 广播播报效果
	RewardType_REWARD_HOMEPAGE_DECORATE    RewardType = 40  // 个人主页装扮
	RewardType_REWARD_CHEST                RewardType = 41  // 宝箱
	RewardType_REWARD_HOMEPAGE_OPEN        RewardType = 42  // 个人主页开屏
	RewardType_REWARD_COUPLE_BACKGROUND    RewardType = 43  // CP背景
	RewardType_REWARD_TEAM_SUIT            RewardType = 44  // 团战队服
	RewardType_REWARD_OGAME_BROADCAST      RewardType = 45  // 团战播报
	RewardType_REWARD_OGAME_BUBBLE         RewardType = 46  // 团战气泡
	RewardType_REWARD_SOCIAL_BG            RewardType = 47  // 社交底板
	RewardType_REWARD_HOMEPAGE_PENDANT     RewardType = 48  // 主页挂件
	RewardType_REWARD_ENDLESS_BACKGROUND   RewardType = 49  // 无尽背景
	RewardType_REWARD_INTIMATE_APPELLATION RewardType = 54  // 亲密称谓
	RewardType_REWARD_MENTOR_POINT_ID      RewardType = 158 // 名师点id
	RewardType_REWARD_MENTOR_BOND_ID       RewardType = 159 // 羁绊值id
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		0:   "REWARD_TYPE_UNDEFINED",
		1:   "REWARD_COIN",
		2:   "REWARD_APPLE",
		3:   "REWARD_SKIN",
		4:   "REWARD_SKIN_CHIP",
		5:   "REWARD_EFFECT",
		6:   "REWARD_EFFECT_CHIP",
		7:   "REWARD_PROP",
		8:   "REWARD_CRYSTAL",
		9:   "REWARD_GIFT",
		10:  "REWARD_HAPPY_COIN",
		11:  "REWARD_TYPE_EVENT_PROP",
		12:  "REWARD_TYPE_AVATAR_BOX",
		15:  "REWARD_TYPE_GIFT_PACKS",
		16:  "REWARD_TYPE_HONOR",
		17:  "REWARD_TYPE_RING",
		18:  "REWARD_TYPE_PUZZLE",
		19:  "REWARD_TYPE_REAL_REWARD",
		20:  "REWARD_TYPE_LUCKY_BAG",
		21:  "REWARD_TYPE_GOLD_BEAN",
		22:  "REWARD_TYPE_BET_COIN",
		23:  "REWARD_TYPE_COLORFUL_BEAN",
		24:  "REWARD_TYPE_CARD_BAG",
		26:  "REWARD_TYPE_VIP_CARD",
		27:  "REWARD_TYPE_CHAT_BUBBLE",
		28:  "REWARD_TYPE_BUFF",
		29:  "REWARD_MEDAL_COIN",
		30:  "REWARD_TITLE",
		32:  "REWARD_PASS_BOX",
		35:  "REWARD_GAME_FACE",
		36:  "REWARD_ROOM_BACKGROUND",
		37:  "REWARD_ROOM_CARD_BACKGROUND",
		38:  "REWARD_ROOM_ENTER_EFFECT",
		39:  "REWARD_BROADCAST_EFFECT",
		40:  "REWARD_HOMEPAGE_DECORATE",
		41:  "REWARD_CHEST",
		42:  "REWARD_HOMEPAGE_OPEN",
		43:  "REWARD_COUPLE_BACKGROUND",
		44:  "REWARD_TEAM_SUIT",
		45:  "REWARD_OGAME_BROADCAST",
		46:  "REWARD_OGAME_BUBBLE",
		47:  "REWARD_SOCIAL_BG",
		48:  "REWARD_HOMEPAGE_PENDANT",
		49:  "REWARD_ENDLESS_BACKGROUND",
		54:  "REWARD_INTIMATE_APPELLATION",
		158: "REWARD_MENTOR_POINT_ID",
		159: "REWARD_MENTOR_BOND_ID",
	}
	RewardType_value = map[string]int32{
		"REWARD_TYPE_UNDEFINED":       0,
		"REWARD_COIN":                 1,
		"REWARD_APPLE":                2,
		"REWARD_SKIN":                 3,
		"REWARD_SKIN_CHIP":            4,
		"REWARD_EFFECT":               5,
		"REWARD_EFFECT_CHIP":          6,
		"REWARD_PROP":                 7,
		"REWARD_CRYSTAL":              8,
		"REWARD_GIFT":                 9,
		"REWARD_HAPPY_COIN":           10,
		"REWARD_TYPE_EVENT_PROP":      11,
		"REWARD_TYPE_AVATAR_BOX":      12,
		"REWARD_TYPE_GIFT_PACKS":      15,
		"REWARD_TYPE_HONOR":           16,
		"REWARD_TYPE_RING":            17,
		"REWARD_TYPE_PUZZLE":          18,
		"REWARD_TYPE_REAL_REWARD":     19,
		"REWARD_TYPE_LUCKY_BAG":       20,
		"REWARD_TYPE_GOLD_BEAN":       21,
		"REWARD_TYPE_BET_COIN":        22,
		"REWARD_TYPE_COLORFUL_BEAN":   23,
		"REWARD_TYPE_CARD_BAG":        24,
		"REWARD_TYPE_VIP_CARD":        26,
		"REWARD_TYPE_CHAT_BUBBLE":     27,
		"REWARD_TYPE_BUFF":            28,
		"REWARD_MEDAL_COIN":           29,
		"REWARD_TITLE":                30,
		"REWARD_PASS_BOX":             32,
		"REWARD_GAME_FACE":            35,
		"REWARD_ROOM_BACKGROUND":      36,
		"REWARD_ROOM_CARD_BACKGROUND": 37,
		"REWARD_ROOM_ENTER_EFFECT":    38,
		"REWARD_BROADCAST_EFFECT":     39,
		"REWARD_HOMEPAGE_DECORATE":    40,
		"REWARD_CHEST":                41,
		"REWARD_HOMEPAGE_OPEN":        42,
		"REWARD_COUPLE_BACKGROUND":    43,
		"REWARD_TEAM_SUIT":            44,
		"REWARD_OGAME_BROADCAST":      45,
		"REWARD_OGAME_BUBBLE":         46,
		"REWARD_SOCIAL_BG":            47,
		"REWARD_HOMEPAGE_PENDANT":     48,
		"REWARD_ENDLESS_BACKGROUND":   49,
		"REWARD_INTIMATE_APPELLATION": 54,
		"REWARD_MENTOR_POINT_ID":      158,
		"REWARD_MENTOR_BOND_ID":       159,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_config_SKStore_Proto_enumTypes[0].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_snakeapi_config_SKStore_Proto_enumTypes[0]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{0}
}

type GetMethodType int32

const (
	GetMethodType_BUY      GetMethodType = 0 //购买
	GetMethodType_SIGN_IN  GetMethodType = 1 //签到
	GetMethodType_CHIP     GetMethodType = 2 //碎片
	GetMethodType_ACTIVITY GetMethodType = 3 //活动
	GetMethodType_LEVEL    GetMethodType = 5 //段位
	GetMethodType_CHEST    GetMethodType = 6 //宝箱
)

// Enum value maps for GetMethodType.
var (
	GetMethodType_name = map[int32]string{
		0: "BUY",
		1: "SIGN_IN",
		2: "CHIP",
		3: "ACTIVITY",
		5: "LEVEL",
		6: "CHEST",
	}
	GetMethodType_value = map[string]int32{
		"BUY":      0,
		"SIGN_IN":  1,
		"CHIP":     2,
		"ACTIVITY": 3,
		"LEVEL":    5,
		"CHEST":    6,
	}
)

func (x GetMethodType) Enum() *GetMethodType {
	p := new(GetMethodType)
	*p = x
	return p
}

func (x GetMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_config_SKStore_Proto_enumTypes[1].Descriptor()
}

func (GetMethodType) Type() protoreflect.EnumType {
	return &file_snakeapi_config_SKStore_Proto_enumTypes[1]
}

func (x GetMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMethodType.Descriptor instead.
func (GetMethodType) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{1}
}

type ServerTeamColor int32

const (
	ServerTeamColor_SERVER_TEAM_GREEN  ServerTeamColor = 0
	ServerTeamColor_SERVER_TEAM_RED    ServerTeamColor = 1
	ServerTeamColor_SERVER_TEAM_YELLOW ServerTeamColor = 2
)

// Enum value maps for ServerTeamColor.
var (
	ServerTeamColor_name = map[int32]string{
		0: "SERVER_TEAM_GREEN",
		1: "SERVER_TEAM_RED",
		2: "SERVER_TEAM_YELLOW",
	}
	ServerTeamColor_value = map[string]int32{
		"SERVER_TEAM_GREEN":  0,
		"SERVER_TEAM_RED":    1,
		"SERVER_TEAM_YELLOW": 2,
	}
)

func (x ServerTeamColor) Enum() *ServerTeamColor {
	p := new(ServerTeamColor)
	*p = x
	return p
}

func (x ServerTeamColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerTeamColor) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_config_SKStore_Proto_enumTypes[2].Descriptor()
}

func (ServerTeamColor) Type() protoreflect.EnumType {
	return &file_snakeapi_config_SKStore_Proto_enumTypes[2]
}

func (x ServerTeamColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerTeamColor.Descriptor instead.
func (ServerTeamColor) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{2}
}

type TeamIndex int32

const (
	TeamIndex_TEAM_INDEX_INVALID TeamIndex = 0
	TeamIndex_TEAM_INDEX_GREEN   TeamIndex = 1
	TeamIndex_TEAM_INDEX_RED     TeamIndex = 2
	TeamIndex_TEAM_INDEX_YELLOW  TeamIndex = 3
)

// Enum value maps for TeamIndex.
var (
	TeamIndex_name = map[int32]string{
		0: "TEAM_INDEX_INVALID",
		1: "TEAM_INDEX_GREEN",
		2: "TEAM_INDEX_RED",
		3: "TEAM_INDEX_YELLOW",
	}
	TeamIndex_value = map[string]int32{
		"TEAM_INDEX_INVALID": 0,
		"TEAM_INDEX_GREEN":   1,
		"TEAM_INDEX_RED":     2,
		"TEAM_INDEX_YELLOW":  3,
	}
)

func (x TeamIndex) Enum() *TeamIndex {
	p := new(TeamIndex)
	*p = x
	return p
}

func (x TeamIndex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamIndex) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_config_SKStore_Proto_enumTypes[3].Descriptor()
}

func (TeamIndex) Type() protoreflect.EnumType {
	return &file_snakeapi_config_SKStore_Proto_enumTypes[3]
}

func (x TeamIndex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamIndex.Descriptor instead.
func (TeamIndex) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{3}
}

type PropType int32

const (
	PropType_PROP_TYPE_UNDEFINED PropType = 0
	PropType_NORMAL              PropType = 1  // 普通道具
	PropType_REDPACK             PropType = 2  // 红包
	PropType_SHOW_INCREASE_CARD  PropType = 4  // show经验卡
	PropType_REBATE_CARD         PropType = 5  // 充值返利券
	PropType_DISCOUNT_CARD       PropType = 6  // 苹果抵扣券
	PropType_EXPIRE_PERIOD_CARD  PropType = 7  // 按有效期显示生效中的道具
	PropType_POP_DIALOG          PropType = 9  // 需要弹窗的道具
	PropType_SUPER_AD            PropType = 10 // 超级广告券
)

// Enum value maps for PropType.
var (
	PropType_name = map[int32]string{
		0:  "PROP_TYPE_UNDEFINED",
		1:  "NORMAL",
		2:  "REDPACK",
		4:  "SHOW_INCREASE_CARD",
		5:  "REBATE_CARD",
		6:  "DISCOUNT_CARD",
		7:  "EXPIRE_PERIOD_CARD",
		9:  "POP_DIALOG",
		10: "SUPER_AD",
	}
	PropType_value = map[string]int32{
		"PROP_TYPE_UNDEFINED": 0,
		"NORMAL":              1,
		"REDPACK":             2,
		"SHOW_INCREASE_CARD":  4,
		"REBATE_CARD":         5,
		"DISCOUNT_CARD":       6,
		"EXPIRE_PERIOD_CARD":  7,
		"POP_DIALOG":          9,
		"SUPER_AD":            10,
	}
)

func (x PropType) Enum() *PropType {
	p := new(PropType)
	*p = x
	return p
}

func (x PropType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_config_SKStore_Proto_enumTypes[4].Descriptor()
}

func (PropType) Type() protoreflect.EnumType {
	return &file_snakeapi_config_SKStore_Proto_enumTypes[4]
}

func (x PropType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropType.Descriptor instead.
func (PropType) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{4}
}

type SubLeftItem_MethodType int32

const (
	SubLeftItem_GET_METHOD_UNDEFINED SubLeftItem_MethodType = 0
	SubLeftItem_GET_METHOD_PAY       SubLeftItem_MethodType = 1
	SubLeftItem_GET_METHOD_ACTIVITY  SubLeftItem_MethodType = 2
	SubLeftItem_GET_METHOD_WAITING   SubLeftItem_MethodType = 3
)

// Enum value maps for SubLeftItem_MethodType.
var (
	SubLeftItem_MethodType_name = map[int32]string{
		0: "GET_METHOD_UNDEFINED",
		1: "GET_METHOD_PAY",
		2: "GET_METHOD_ACTIVITY",
		3: "GET_METHOD_WAITING",
	}
	SubLeftItem_MethodType_value = map[string]int32{
		"GET_METHOD_UNDEFINED": 0,
		"GET_METHOD_PAY":       1,
		"GET_METHOD_ACTIVITY":  2,
		"GET_METHOD_WAITING":   3,
	}
)

func (x SubLeftItem_MethodType) Enum() *SubLeftItem_MethodType {
	p := new(SubLeftItem_MethodType)
	*p = x
	return p
}

func (x SubLeftItem_MethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubLeftItem_MethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_config_SKStore_Proto_enumTypes[5].Descriptor()
}

func (SubLeftItem_MethodType) Type() protoreflect.EnumType {
	return &file_snakeapi_config_SKStore_Proto_enumTypes[5]
}

func (x SubLeftItem_MethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubLeftItem_MethodType.Descriptor instead.
func (SubLeftItem_MethodType) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{5, 0}
}

type GameInfo_ColorType int32

const (
	GameInfo_COLOR_UNDEFINED GameInfo_ColorType = 0
	GameInfo_COLOR_GREEN     GameInfo_ColorType = 1
	GameInfo_COLOR_RED       GameInfo_ColorType = 2
	GameInfo_COLOR_YELLOW    GameInfo_ColorType = 3
)

// Enum value maps for GameInfo_ColorType.
var (
	GameInfo_ColorType_name = map[int32]string{
		0: "COLOR_UNDEFINED",
		1: "COLOR_GREEN",
		2: "COLOR_RED",
		3: "COLOR_YELLOW",
	}
	GameInfo_ColorType_value = map[string]int32{
		"COLOR_UNDEFINED": 0,
		"COLOR_GREEN":     1,
		"COLOR_RED":       2,
		"COLOR_YELLOW":    3,
	}
)

func (x GameInfo_ColorType) Enum() *GameInfo_ColorType {
	p := new(GameInfo_ColorType)
	*p = x
	return p
}

func (x GameInfo_ColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameInfo_ColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_config_SKStore_Proto_enumTypes[6].Descriptor()
}

func (GameInfo_ColorType) Type() protoreflect.EnumType {
	return &file_snakeapi_config_SKStore_Proto_enumTypes[6]
}

func (x GameInfo_ColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameInfo_ColorType.Descriptor instead.
func (GameInfo_ColorType) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{69, 0}
}

// Store start
type ProductConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 如果property里某字段非空，则替换本地列表，否则读本地数据
	Property         *Property `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	StoreResourceUrl string    `protobuf:"bytes,2,opt,name=store_resource_url,json=storeResourceUrl,proto3" json:"store_resource_url,omitempty"` // 废弃
	// *
	//
	//	//4.3版本新增
	//	chip_compose_flag: 0; //0:关，1:开
	ChipComposeFlag     int32                `protobuf:"varint,3,opt,name=chip_compose_flag,json=chipComposeFlag,proto3" json:"chip_compose_flag,omitempty"`
	CurrencyStore       *CurrencyStore       `protobuf:"bytes,4,opt,name=currency_store,json=currencyStore,proto3" json:"currency_store,omitempty"`
	MiddleItemList      []*MiddleItem        `protobuf:"bytes,5,rep,name=middle_item_list,json=middleItemList,proto3" json:"middle_item_list,omitempty"` // 中间道具配置
	StoreRecommend      *StoreRecommend      `protobuf:"bytes,6,opt,name=store_recommend,json=storeRecommend,proto3" json:"store_recommend,omitempty"`   // 这里废弃，改为接口返回
	DrawCardGuideConfig *DrawCardGuideConfig `protobuf:"bytes,7,opt,name=draw_card_guide_config,json=drawCardGuideConfig,proto3" json:"draw_card_guide_config,omitempty"`
	SkinSet             []*SkinSet           `protobuf:"bytes,8,rep,name=skin_set,json=skinSet,proto3" json:"skin_set,omitempty"`
	StoreConfig         *StoreConfig         `protobuf:"bytes,9,opt,name=store_config,json=storeConfig,proto3" json:"store_config,omitempty"` // proto商店配置
}

func (x *ProductConfig) Reset() {
	*x = ProductConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductConfig) ProtoMessage() {}

func (x *ProductConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductConfig.ProtoReflect.Descriptor instead.
func (*ProductConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{0}
}

func (x *ProductConfig) GetProperty() *Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *ProductConfig) GetStoreResourceUrl() string {
	if x != nil {
		return x.StoreResourceUrl
	}
	return ""
}

func (x *ProductConfig) GetChipComposeFlag() int32 {
	if x != nil {
		return x.ChipComposeFlag
	}
	return 0
}

func (x *ProductConfig) GetCurrencyStore() *CurrencyStore {
	if x != nil {
		return x.CurrencyStore
	}
	return nil
}

func (x *ProductConfig) GetMiddleItemList() []*MiddleItem {
	if x != nil {
		return x.MiddleItemList
	}
	return nil
}

func (x *ProductConfig) GetStoreRecommend() *StoreRecommend {
	if x != nil {
		return x.StoreRecommend
	}
	return nil
}

func (x *ProductConfig) GetDrawCardGuideConfig() *DrawCardGuideConfig {
	if x != nil {
		return x.DrawCardGuideConfig
	}
	return nil
}

func (x *ProductConfig) GetSkinSet() []*SkinSet {
	if x != nil {
		return x.SkinSet
	}
	return nil
}

func (x *ProductConfig) GetStoreConfig() *StoreConfig {
	if x != nil {
		return x.StoreConfig
	}
	return nil
}

type StoreRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*RecommendItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	EmptyUrl string           `protobuf:"bytes,2,opt,name=empty_url,json=emptyUrl,proto3" json:"empty_url,omitempty"`
}

func (x *StoreRecommend) Reset() {
	*x = StoreRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRecommend) ProtoMessage() {}

func (x *StoreRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRecommend.ProtoReflect.Descriptor instead.
func (*StoreRecommend) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{1}
}

func (x *StoreRecommend) GetList() []*RecommendItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *StoreRecommend) GetEmptyUrl() string {
	if x != nil {
		return x.EmptyUrl
	}
	return ""
}

type RecommendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title             string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TitleColor        string      `protobuf:"bytes,3,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`
	StartTime         int64       `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`            //预告开始时间
	ActStartTime      int64       `protobuf:"varint,5,opt,name=act_start_time,json=actStartTime,proto3" json:"act_start_time,omitempty"` //预告结束时间或活动开始时间
	EndTime           int64       `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                  //活动结束时间
	Type              int32       `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	BgUrl             string      `protobuf:"bytes,8,opt,name=bg_url,json=bgUrl,proto3" json:"bg_url,omitempty"`
	Desc              string      `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	SubBgUrl          string      `protobuf:"bytes,10,opt,name=sub_bg_url,json=subBgUrl,proto3" json:"sub_bg_url,omitempty"`
	IconSelectedColor string      `protobuf:"bytes,11,opt,name=icon_selected_color,json=iconSelectedColor,proto3" json:"icon_selected_color,omitempty"`
	IconColor         string      `protobuf:"bytes,12,opt,name=icon_color,json=iconColor,proto3" json:"icon_color,omitempty"`
	StarTextColor     string      `protobuf:"bytes,13,opt,name=star_text_color,json=starTextColor,proto3" json:"star_text_color,omitempty"`
	DefaultSubIndex   int32       `protobuf:"varint,14,opt,name=default_sub_index,json=defaultSubIndex,proto3" json:"default_sub_index,omitempty"`
	SubList           []*SubItem  `protobuf:"bytes,15,rep,name=sub_list,json=subList,proto3" json:"sub_list,omitempty"`
	PackList          []*PackItem `protobuf:"bytes,16,rep,name=pack_list,json=packList,proto3" json:"pack_list,omitempty"`
}

func (x *RecommendItem) Reset() {
	*x = RecommendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendItem) ProtoMessage() {}

func (x *RecommendItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendItem.ProtoReflect.Descriptor instead.
func (*RecommendItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{2}
}

func (x *RecommendItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecommendItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RecommendItem) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *RecommendItem) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RecommendItem) GetActStartTime() int64 {
	if x != nil {
		return x.ActStartTime
	}
	return 0
}

func (x *RecommendItem) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RecommendItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RecommendItem) GetBgUrl() string {
	if x != nil {
		return x.BgUrl
	}
	return ""
}

func (x *RecommendItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *RecommendItem) GetSubBgUrl() string {
	if x != nil {
		return x.SubBgUrl
	}
	return ""
}

func (x *RecommendItem) GetIconSelectedColor() string {
	if x != nil {
		return x.IconSelectedColor
	}
	return ""
}

func (x *RecommendItem) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

func (x *RecommendItem) GetStarTextColor() string {
	if x != nil {
		return x.StarTextColor
	}
	return ""
}

func (x *RecommendItem) GetDefaultSubIndex() int32 {
	if x != nil {
		return x.DefaultSubIndex
	}
	return 0
}

func (x *RecommendItem) GetSubList() []*SubItem {
	if x != nil {
		return x.SubList
	}
	return nil
}

func (x *RecommendItem) GetPackList() []*PackItem {
	if x != nil {
		return x.PackList
	}
	return nil
}

type PackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Imgurl   string `protobuf:"bytes,2,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	ItemId   int32  `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemType int32  `protobuf:"varint,4,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
}

func (x *PackItem) Reset() {
	*x = PackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackItem) ProtoMessage() {}

func (x *PackItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackItem.ProtoReflect.Descriptor instead.
func (*PackItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{3}
}

func (x *PackItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PackItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *PackItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PackItem) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

type SubItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl   string         `protobuf:"bytes,1,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	LeftList []*SubLeftItem `protobuf:"bytes,2,rep,name=left_list,json=leftList,proto3" json:"left_list,omitempty"`
}

func (x *SubItem) Reset() {
	*x = SubItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubItem) ProtoMessage() {}

func (x *SubItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubItem.ProtoReflect.Descriptor instead.
func (*SubItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{4}
}

func (x *SubItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *SubItem) GetLeftList() []*SubLeftItem {
	if x != nil {
		return x.LeftList
	}
	return nil
}

type SubLeftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType  int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl   string `protobuf:"bytes,2,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	GetMethod int32  `protobuf:"varint,3,opt,name=get_method,json=getMethod,proto3" json:"get_method,omitempty"`
	GetUrl    string `protobuf:"bytes,4,opt,name=get_url,json=getUrl,proto3" json:"get_url,omitempty"`
	ItemId    int32  `protobuf:"varint,5,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemType  int32  `protobuf:"varint,6,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	ItemName  string `protobuf:"bytes,7,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
}

func (x *SubLeftItem) Reset() {
	*x = SubLeftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubLeftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubLeftItem) ProtoMessage() {}

func (x *SubLeftItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubLeftItem.ProtoReflect.Descriptor instead.
func (*SubLeftItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{5}
}

func (x *SubLeftItem) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *SubLeftItem) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *SubLeftItem) GetGetMethod() int32 {
	if x != nil {
		return x.GetMethod
	}
	return 0
}

func (x *SubLeftItem) GetGetUrl() string {
	if x != nil {
		return x.GetUrl
	}
	return ""
}

func (x *SubLeftItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SubLeftItem) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *SubLeftItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

type SkinSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // 皮肤套系id，服务器使用，客户端不用管
	Name    string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                              // 皮肤名字
	SkinIds []int32 `protobuf:"varint,3,rep,packed,name=skin_ids,json=skinIds,proto3" json:"skin_ids,omitempty"` //相关皮肤id
}

func (x *SkinSet) Reset() {
	*x = SkinSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinSet) ProtoMessage() {}

func (x *SkinSet) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinSet.ProtoReflect.Descriptor instead.
func (*SkinSet) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{6}
}

func (x *SkinSet) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkinSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkinSet) GetSkinIds() []int32 {
	if x != nil {
		return x.SkinIds
	}
	return nil
}

type MemberCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberCardList []*MemberCardModel `protobuf:"bytes,1,rep,name=member_card_list,json=memberCardList,proto3" json:"member_card_list,omitempty"`
}

func (x *MemberCardList) Reset() {
	*x = MemberCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCardList) ProtoMessage() {}

func (x *MemberCardList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCardList.ProtoReflect.Descriptor instead.
func (*MemberCardList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{7}
}

func (x *MemberCardList) GetMemberCardList() []*MemberCardModel {
	if x != nil {
		return x.MemberCardList
	}
	return nil
}

type MemberCardModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active     int32           `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	ItemId     int32           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Store      *StoreInfo      `protobuf:"bytes,3,opt,name=store,proto3" json:"store,omitempty"`
	Info       *MemberCardInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	UpdateTime int64           `protobuf:"varint,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *MemberCardModel) Reset() {
	*x = MemberCardModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCardModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCardModel) ProtoMessage() {}

func (x *MemberCardModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCardModel.ProtoReflect.Descriptor instead.
func (*MemberCardModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{8}
}

func (x *MemberCardModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *MemberCardModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *MemberCardModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *MemberCardModel) GetInfo() *MemberCardInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MemberCardModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type MemberCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimationFrame      string `protobuf:"bytes,1,opt,name=animation_frame,json=animationFrame,proto3" json:"animation_frame,omitempty"`
	BgImgurl            string `protobuf:"bytes,2,opt,name=bg_imgurl,json=bgImgurl,proto3" json:"bg_imgurl,omitempty"`
	PurchaseSuccessTips string `protobuf:"bytes,3,opt,name=purchase_success_tips,json=purchaseSuccessTips,proto3" json:"purchase_success_tips,omitempty"`
	PurchaseTips        string `protobuf:"bytes,4,opt,name=purchase_tips,json=purchaseTips,proto3" json:"purchase_tips,omitempty"`
	ResourceUrl         string `protobuf:"bytes,5,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	Type                int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	UseTime             int64  `protobuf:"varint,7,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
}

func (x *MemberCardInfo) Reset() {
	*x = MemberCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCardInfo) ProtoMessage() {}

func (x *MemberCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCardInfo.ProtoReflect.Descriptor instead.
func (*MemberCardInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{9}
}

func (x *MemberCardInfo) GetAnimationFrame() string {
	if x != nil {
		return x.AnimationFrame
	}
	return ""
}

func (x *MemberCardInfo) GetBgImgurl() string {
	if x != nil {
		return x.BgImgurl
	}
	return ""
}

func (x *MemberCardInfo) GetPurchaseSuccessTips() string {
	if x != nil {
		return x.PurchaseSuccessTips
	}
	return ""
}

func (x *MemberCardInfo) GetPurchaseTips() string {
	if x != nil {
		return x.PurchaseTips
	}
	return ""
}

func (x *MemberCardInfo) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *MemberCardInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MemberCardInfo) GetUseTime() int64 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

type DrawCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawCardList []*DrawCardModel `protobuf:"bytes,1,rep,name=draw_card_list,json=drawCardList,proto3" json:"draw_card_list,omitempty"`
}

func (x *DrawCardList) Reset() {
	*x = DrawCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardList) ProtoMessage() {}

func (x *DrawCardList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardList.ProtoReflect.Descriptor instead.
func (*DrawCardList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{10}
}

func (x *DrawCardList) GetDrawCardList() []*DrawCardModel {
	if x != nil {
		return x.DrawCardList
	}
	return nil
}

type DrawCardModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active     int32         `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	ItemId     int32         `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UpdateTime int64         `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo    `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *DrawCardInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DrawCardModel) Reset() {
	*x = DrawCardModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardModel) ProtoMessage() {}

func (x *DrawCardModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardModel.ProtoReflect.Descriptor instead.
func (*DrawCardModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{11}
}

func (x *DrawCardModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *DrawCardModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DrawCardModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *DrawCardModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *DrawCardModel) GetInfo() *DrawCardInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DrawCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  int32            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	DiscountTimes         int32            `protobuf:"varint,2,opt,name=discount_times,json=discountTimes,proto3" json:"discount_times,omitempty"`
	AdTimes               int32            `protobuf:"varint,3,opt,name=ad_times,json=adTimes,proto3" json:"ad_times,omitempty"`
	LuckyTimes            int32            `protobuf:"varint,4,opt,name=lucky_times,json=luckyTimes,proto3" json:"lucky_times,omitempty"`
	BuyLimit              int32            `protobuf:"varint,5,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"`
	WaterValue            int32            `protobuf:"varint,6,opt,name=water_value,json=waterValue,proto3" json:"water_value,omitempty"`
	MultiBuyPriceForProto []*MultiBuyPrice `protobuf:"bytes,7,rep,name=multi_buy_price_for_proto,json=multiBuyPriceForProto,proto3" json:"multi_buy_price_for_proto,omitempty"`
	RareRewardList        []*RewardConfig  `protobuf:"bytes,8,rep,name=rare_reward_list,json=rareRewardList,proto3" json:"rare_reward_list,omitempty"`
	GeneralRewardList     []*RewardConfig  `protobuf:"bytes,9,rep,name=general_reward_list,json=generalRewardList,proto3" json:"general_reward_list,omitempty"`
	Animation             string           `protobuf:"bytes,10,opt,name=animation,proto3" json:"animation,omitempty"`
	AnimationFrame        string           `protobuf:"bytes,11,opt,name=animation_frame,json=animationFrame,proto3" json:"animation_frame,omitempty"`
	Version               int32            `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`
	SkinBaodi             int32            `protobuf:"varint,13,opt,name=skin_baodi,json=skinBaodi,proto3" json:"skin_baodi,omitempty"`
	BaodiReward           *RewardConfig    `protobuf:"bytes,14,opt,name=baodi_reward,json=baodiReward,proto3" json:"baodi_reward,omitempty"`
	ProbabilityScale      float32          `protobuf:"fixed32,15,opt,name=probability_scale,json=probabilityScale,proto3" json:"probability_scale,omitempty"`
	ChipConfigForProto    *ChipConfig      `protobuf:"bytes,16,opt,name=chip_config_for_proto,json=chipConfigForProto,proto3" json:"chip_config_for_proto,omitempty"`
}

func (x *DrawCardInfo) Reset() {
	*x = DrawCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardInfo) ProtoMessage() {}

func (x *DrawCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardInfo.ProtoReflect.Descriptor instead.
func (*DrawCardInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{12}
}

func (x *DrawCardInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DrawCardInfo) GetDiscountTimes() int32 {
	if x != nil {
		return x.DiscountTimes
	}
	return 0
}

func (x *DrawCardInfo) GetAdTimes() int32 {
	if x != nil {
		return x.AdTimes
	}
	return 0
}

func (x *DrawCardInfo) GetLuckyTimes() int32 {
	if x != nil {
		return x.LuckyTimes
	}
	return 0
}

func (x *DrawCardInfo) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *DrawCardInfo) GetWaterValue() int32 {
	if x != nil {
		return x.WaterValue
	}
	return 0
}

func (x *DrawCardInfo) GetMultiBuyPriceForProto() []*MultiBuyPrice {
	if x != nil {
		return x.MultiBuyPriceForProto
	}
	return nil
}

func (x *DrawCardInfo) GetRareRewardList() []*RewardConfig {
	if x != nil {
		return x.RareRewardList
	}
	return nil
}

func (x *DrawCardInfo) GetGeneralRewardList() []*RewardConfig {
	if x != nil {
		return x.GeneralRewardList
	}
	return nil
}

func (x *DrawCardInfo) GetAnimation() string {
	if x != nil {
		return x.Animation
	}
	return ""
}

func (x *DrawCardInfo) GetAnimationFrame() string {
	if x != nil {
		return x.AnimationFrame
	}
	return ""
}

func (x *DrawCardInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DrawCardInfo) GetSkinBaodi() int32 {
	if x != nil {
		return x.SkinBaodi
	}
	return 0
}

func (x *DrawCardInfo) GetBaodiReward() *RewardConfig {
	if x != nil {
		return x.BaodiReward
	}
	return nil
}

func (x *DrawCardInfo) GetProbabilityScale() float32 {
	if x != nil {
		return x.ProbabilityScale
	}
	return 0
}

func (x *DrawCardInfo) GetChipConfigForProto() *ChipConfig {
	if x != nil {
		return x.ChipConfigForProto
	}
	return nil
}

type BuyPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	CurrencyType int32 `protobuf:"varint,2,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`
	Price        int32 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BuyPrice) Reset() {
	*x = BuyPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyPrice) ProtoMessage() {}

func (x *BuyPrice) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyPrice.ProtoReflect.Descriptor instead.
func (*BuyPrice) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{13}
}

func (x *BuyPrice) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BuyPrice) GetCurrencyType() int32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *BuyPrice) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type MultiBuyPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyPrice []*BuyPrice `protobuf:"bytes,1,rep,name=buyPrice,proto3" json:"buyPrice,omitempty"`
}

func (x *MultiBuyPrice) Reset() {
	*x = MultiBuyPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiBuyPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiBuyPrice) ProtoMessage() {}

func (x *MultiBuyPrice) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiBuyPrice.ProtoReflect.Descriptor instead.
func (*MultiBuyPrice) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{14}
}

func (x *MultiBuyPrice) GetBuyPrice() []*BuyPrice {
	if x != nil {
		return x.BuyPrice
	}
	return nil
}

type ChipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipMap  map[string]*IntList `protobuf:"bytes,1,rep,name=chip_map,json=chipMap,proto3" json:"chip_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SkinList []string            `protobuf:"bytes,2,rep,name=skin_list,json=skinList,proto3" json:"skin_list,omitempty"`
}

func (x *ChipConfig) Reset() {
	*x = ChipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChipConfig) ProtoMessage() {}

func (x *ChipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChipConfig.ProtoReflect.Descriptor instead.
func (*ChipConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{15}
}

func (x *ChipConfig) GetChipMap() map[string]*IntList {
	if x != nil {
		return x.ChipMap
	}
	return nil
}

func (x *ChipConfig) GetSkinList() []string {
	if x != nil {
		return x.SkinList
	}
	return nil
}

type IntList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *IntList) Reset() {
	*x = IntList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntList) ProtoMessage() {}

func (x *IntList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntList.ProtoReflect.Descriptor instead.
func (*IntList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{16}
}

func (x *IntList) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type DrawCardGuideConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawCardGuideConfig []*DrawCardGuideConfig `protobuf:"bytes,1,rep,name=draw_card_guide_config,json=drawCardGuideConfig,proto3" json:"draw_card_guide_config,omitempty"`
}

func (x *DrawCardGuideConfigList) Reset() {
	*x = DrawCardGuideConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardGuideConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardGuideConfigList) ProtoMessage() {}

func (x *DrawCardGuideConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardGuideConfigList.ProtoReflect.Descriptor instead.
func (*DrawCardGuideConfigList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{17}
}

func (x *DrawCardGuideConfigList) GetDrawCardGuideConfig() []*DrawCardGuideConfig {
	if x != nil {
		return x.DrawCardGuideConfig
	}
	return nil
}

type DrawCardGuideConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  []int32       `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	TextList            []string      `protobuf:"bytes,2,rep,name=text_list,json=textList,proto3" json:"text_list,omitempty"`
	Reward              []*RewardInfo `protobuf:"bytes,3,rep,name=reward,proto3" json:"reward,omitempty"`
	StartTime           int64         `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             int64         `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	GuideActId          int32         `protobuf:"varint,6,opt,name=guide_act_id,json=guideActId,proto3" json:"guide_act_id,omitempty"`
	RegisterTime        int32         `protobuf:"varint,7,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
	ProbabilityAnnounce string        `protobuf:"bytes,8,opt,name=probability_announce,json=probabilityAnnounce,proto3" json:"probability_announce,omitempty"`
}

func (x *DrawCardGuideConfig) Reset() {
	*x = DrawCardGuideConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardGuideConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardGuideConfig) ProtoMessage() {}

func (x *DrawCardGuideConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardGuideConfig.ProtoReflect.Descriptor instead.
func (*DrawCardGuideConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{18}
}

func (x *DrawCardGuideConfig) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DrawCardGuideConfig) GetTextList() []string {
	if x != nil {
		return x.TextList
	}
	return nil
}

func (x *DrawCardGuideConfig) GetReward() []*RewardInfo {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *DrawCardGuideConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DrawCardGuideConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DrawCardGuideConfig) GetGuideActId() int32 {
	if x != nil {
		return x.GuideActId
	}
	return 0
}

func (x *DrawCardGuideConfig) GetRegisterTime() int32 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *DrawCardGuideConfig) GetProbabilityAnnounce() string {
	if x != nil {
		return x.ProbabilityAnnounce
	}
	return ""
}

type MiddleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiddleItemId  int32  `protobuf:"varint,1,opt,name=middle_item_id,json=middleItemId,proto3" json:"middle_item_id,omitempty"`
	SkinId        int32  `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Count         int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Imgurl        string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Intro         string `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	Name          string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	GetMethodDesc string `protobuf:"bytes,7,opt,name=get_method_desc,json=getMethodDesc,proto3" json:"get_method_desc,omitempty"`
	WorthLevel    int32  `protobuf:"varint,8,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`
	Type          int32  `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	StartTime     int64  `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MiddleItem) Reset() {
	*x = MiddleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddleItem) ProtoMessage() {}

func (x *MiddleItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddleItem.ProtoReflect.Descriptor instead.
func (*MiddleItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{19}
}

func (x *MiddleItem) GetMiddleItemId() int32 {
	if x != nil {
		return x.MiddleItemId
	}
	return 0
}

func (x *MiddleItem) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *MiddleItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MiddleItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *MiddleItem) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *MiddleItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiddleItem) GetGetMethodDesc() string {
	if x != nil {
		return x.GetMethodDesc
	}
	return ""
}

func (x *MiddleItem) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *MiddleItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MiddleItem) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MiddleItem) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type CurrencyStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnakeCoin   []*CurrencyStoreItem `protobuf:"bytes,1,rep,name=snake_coin,json=snakeCoin,proto3" json:"snake_coin,omitempty"`
	Coupon      []*CurrencyStoreItem `protobuf:"bytes,2,rep,name=coupon,proto3" json:"coupon,omitempty"`
	EscapeStore []*EscapeStoreItem   `protobuf:"bytes,3,rep,name=escape_store,json=escapeStore,proto3" json:"escape_store,omitempty"`
}

func (x *CurrencyStore) Reset() {
	*x = CurrencyStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyStore) ProtoMessage() {}

func (x *CurrencyStore) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyStore.ProtoReflect.Descriptor instead.
func (*CurrencyStore) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{20}
}

func (x *CurrencyStore) GetSnakeCoin() []*CurrencyStoreItem {
	if x != nil {
		return x.SnakeCoin
	}
	return nil
}

func (x *CurrencyStore) GetCoupon() []*CurrencyStoreItem {
	if x != nil {
		return x.Coupon
	}
	return nil
}

func (x *CurrencyStore) GetEscapeStore() []*EscapeStoreItem {
	if x != nil {
		return x.EscapeStore
	}
	return nil
}

type CurrencyStoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int32  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商店购买项id
	Cost   int32  `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	Num    int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Imgurl string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name   string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SkinId int64  `protobuf:"varint,6,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	Type   int64  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CurrencyStoreItem) Reset() {
	*x = CurrencyStoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyStoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyStoreItem) ProtoMessage() {}

func (x *CurrencyStoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyStoreItem.ProtoReflect.Descriptor instead.
func (*CurrencyStoreItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{21}
}

func (x *CurrencyStoreItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CurrencyStoreItem) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CurrencyStoreItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CurrencyStoreItem) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *CurrencyStoreItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CurrencyStoreItem) GetSkinId() int64 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *CurrencyStoreItem) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type EscapeStoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buff    int32 `protobuf:"varint,1,opt,name=buff,proto3" json:"buff,omitempty"`
	Diamond int32 `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Id      int32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Type    int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EscapeStoreItem) Reset() {
	*x = EscapeStoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EscapeStoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EscapeStoreItem) ProtoMessage() {}

func (x *EscapeStoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EscapeStoreItem.ProtoReflect.Descriptor instead.
func (*EscapeStoreItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{22}
}

func (x *EscapeStoreItem) GetBuff() int32 {
	if x != nil {
		return x.Buff
	}
	return 0
}

func (x *EscapeStoreItem) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *EscapeStoreItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EscapeStoreItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarBoxTag       []*AvatarBoxTag       `protobuf:"bytes,1,rep,name=avatar_box_tag,json=avatarBoxTag,proto3" json:"avatar_box_tag,omitempty"`
	CurrencyList       []*Currency           `protobuf:"bytes,2,rep,name=currency_list,json=currencyList,proto3" json:"currency_list,omitempty"`
	DefaultSkinList    []int32               `protobuf:"varint,3,rep,packed,name=default_skin_list,json=defaultSkinList,proto3" json:"default_skin_list,omitempty"`
	DefaultTeamSuit    []int32               `protobuf:"varint,4,rep,packed,name=default_team_suit,json=defaultTeamSuit,proto3" json:"default_team_suit,omitempty"`
	Checksum           int64                 `protobuf:"varint,5,opt,name=checksum,proto3" json:"checksum,omitempty"` // 废弃
	ThumbnailBorder    []*ThumbnailBorder    `protobuf:"bytes,6,rep,name=thumbnail_border,json=thumbnailBorder,proto3" json:"thumbnail_border,omitempty"`
	WorthLevelIcon     []*WorthLevelIcon     `protobuf:"bytes,7,rep,name=worth_level_icon,json=worthLevelIcon,proto3" json:"worth_level_icon,omitempty"`
	WorthLevelBorderPc []*WorthLevelBorderPc `protobuf:"bytes,8,rep,name=worth_level_border_pc,json=worthLevelBorderPc,proto3" json:"worth_level_border_pc,omitempty"`
	SkinSet            []*SkinSet            `protobuf:"bytes,9,rep,name=skin_set,json=skinSet,proto3" json:"skin_set,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{23}
}

func (x *Property) GetAvatarBoxTag() []*AvatarBoxTag {
	if x != nil {
		return x.AvatarBoxTag
	}
	return nil
}

func (x *Property) GetCurrencyList() []*Currency {
	if x != nil {
		return x.CurrencyList
	}
	return nil
}

func (x *Property) GetDefaultSkinList() []int32 {
	if x != nil {
		return x.DefaultSkinList
	}
	return nil
}

func (x *Property) GetDefaultTeamSuit() []int32 {
	if x != nil {
		return x.DefaultTeamSuit
	}
	return nil
}

func (x *Property) GetChecksum() int64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *Property) GetThumbnailBorder() []*ThumbnailBorder {
	if x != nil {
		return x.ThumbnailBorder
	}
	return nil
}

func (x *Property) GetWorthLevelIcon() []*WorthLevelIcon {
	if x != nil {
		return x.WorthLevelIcon
	}
	return nil
}

func (x *Property) GetWorthLevelBorderPc() []*WorthLevelBorderPc {
	if x != nil {
		return x.WorthLevelBorderPc
	}
	return nil
}

func (x *Property) GetSkinSet() []*SkinSet {
	if x != nil {
		return x.SkinSet
	}
	return nil
}

type WorthLevelBorderPc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorthLevel int32  `protobuf:"varint,1,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`
	Url        string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *WorthLevelBorderPc) Reset() {
	*x = WorthLevelBorderPc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorthLevelBorderPc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorthLevelBorderPc) ProtoMessage() {}

func (x *WorthLevelBorderPc) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorthLevelBorderPc.ProtoReflect.Descriptor instead.
func (*WorthLevelBorderPc) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{24}
}

func (x *WorthLevelBorderPc) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *WorthLevelBorderPc) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WorthLevelIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorthLevel int32  `protobuf:"varint,1,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`
	Icon       string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *WorthLevelIcon) Reset() {
	*x = WorthLevelIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorthLevelIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorthLevelIcon) ProtoMessage() {}

func (x *WorthLevelIcon) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorthLevelIcon.ProtoReflect.Descriptor instead.
func (*WorthLevelIcon) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{25}
}

func (x *WorthLevelIcon) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *WorthLevelIcon) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type AvatarBoxTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   int32  `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
}

func (x *AvatarBoxTag) Reset() {
	*x = AvatarBoxTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBoxTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBoxTag) ProtoMessage() {}

func (x *AvatarBoxTag) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBoxTag.ProtoReflect.Descriptor instead.
func (*AvatarBoxTag) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{26}
}

func (x *AvatarBoxTag) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *AvatarBoxTag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardType    int32  `protobuf:"varint,1,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	CurrencyType  int32  `protobuf:"varint,2,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl        string `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Desc          string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	GetMethodDesc string `protobuf:"bytes,6,opt,name=get_method_desc,json=getMethodDesc,proto3" json:"get_method_desc,omitempty"`
	Thumbnail     string `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{27}
}

func (x *Currency) GetRewardType() int32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *Currency) GetCurrencyType() int32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *Currency) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Currency) GetGetMethodDesc() string {
	if x != nil {
		return x.GetMethodDesc
	}
	return ""
}

func (x *Currency) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type ThumbnailBorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorthLevel int32  `protobuf:"varint,1,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`
	Url        string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ThumbnailBorder) Reset() {
	*x = ThumbnailBorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailBorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailBorder) ProtoMessage() {}

func (x *ThumbnailBorder) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailBorder.ProtoReflect.Descriptor instead.
func (*ThumbnailBorder) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{28}
}

func (x *ThumbnailBorder) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *ThumbnailBorder) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList       []*StoreItem `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	ExtraConfigUrl string       `protobuf:"bytes,2,opt,name=extra_config_url,json=extraConfigUrl,proto3" json:"extra_config_url,omitempty"`
}

func (x *StoreConfig) Reset() {
	*x = StoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreConfig) ProtoMessage() {}

func (x *StoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreConfig.ProtoReflect.Descriptor instead.
func (*StoreConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{29}
}

func (x *StoreConfig) GetItemList() []*StoreItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *StoreConfig) GetExtraConfigUrl() string {
	if x != nil {
		return x.ExtraConfigUrl
	}
	return ""
}

type StoreExtraConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayPack             []*PackModel   `protobuf:"bytes,1,rep,name=pay_pack,json=payPack,proto3" json:"pay_pack,omitempty"`
	PackStrategy        []*PackModel   `protobuf:"bytes,2,rep,name=pack_strategy,json=packStrategy,proto3" json:"pack_strategy,omitempty"`
	NewRevivePackList   []*PackModel   `protobuf:"bytes,3,rep,name=new_revive_pack_list,json=newRevivePackList,proto3" json:"new_revive_pack_list,omitempty"`
	LuckyBpPackList     []*PackModel   `protobuf:"bytes,4,rep,name=lucky_bp_pack_list,json=luckyBpPackList,proto3" json:"lucky_bp_pack_list,omitempty"`
	AlivePackList       []*RMBPackInfo `protobuf:"bytes,5,rep,name=alive_pack_list,json=alivePackList,proto3" json:"alive_pack_list,omitempty"`
	ExcitePackList      []*RMBPackInfo `protobuf:"bytes,6,rep,name=excite_pack_list,json=excitePackList,proto3" json:"excite_pack_list,omitempty"`
	RechargePackList    []*RMBPackInfo `protobuf:"bytes,7,rep,name=recharge_pack_list,json=rechargePackList,proto3" json:"recharge_pack_list,omitempty"`
	ReviveBadgePackList []*RMBPackInfo `protobuf:"bytes,8,rep,name=revive_badge_pack_list,json=reviveBadgePackList,proto3" json:"revive_badge_pack_list,omitempty"`
	BpPackList          []*RMBPackInfo `protobuf:"bytes,9,rep,name=bp_pack_list,json=bpPackList,proto3" json:"bp_pack_list,omitempty"`
}

func (x *StoreExtraConfig) Reset() {
	*x = StoreExtraConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreExtraConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreExtraConfig) ProtoMessage() {}

func (x *StoreExtraConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreExtraConfig.ProtoReflect.Descriptor instead.
func (*StoreExtraConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{30}
}

func (x *StoreExtraConfig) GetPayPack() []*PackModel {
	if x != nil {
		return x.PayPack
	}
	return nil
}

func (x *StoreExtraConfig) GetPackStrategy() []*PackModel {
	if x != nil {
		return x.PackStrategy
	}
	return nil
}

func (x *StoreExtraConfig) GetNewRevivePackList() []*PackModel {
	if x != nil {
		return x.NewRevivePackList
	}
	return nil
}

func (x *StoreExtraConfig) GetLuckyBpPackList() []*PackModel {
	if x != nil {
		return x.LuckyBpPackList
	}
	return nil
}

func (x *StoreExtraConfig) GetAlivePackList() []*RMBPackInfo {
	if x != nil {
		return x.AlivePackList
	}
	return nil
}

func (x *StoreExtraConfig) GetExcitePackList() []*RMBPackInfo {
	if x != nil {
		return x.ExcitePackList
	}
	return nil
}

func (x *StoreExtraConfig) GetRechargePackList() []*RMBPackInfo {
	if x != nil {
		return x.RechargePackList
	}
	return nil
}

func (x *StoreExtraConfig) GetReviveBadgePackList() []*RMBPackInfo {
	if x != nil {
		return x.ReviveBadgePackList
	}
	return nil
}

func (x *StoreExtraConfig) GetBpPackList() []*RMBPackInfo {
	if x != nil {
		return x.BpPackList
	}
	return nil
}

type StoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	CdnUrl string `protobuf:"bytes,2,opt,name=cdn_url,json=cdnUrl,proto3" json:"cdn_url,omitempty"`
}

func (x *StoreItem) Reset() {
	*x = StoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem) ProtoMessage() {}

func (x *StoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem.ProtoReflect.Descriptor instead.
func (*StoreItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{31}
}

func (x *StoreItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *StoreItem) GetCdnUrl() string {
	if x != nil {
		return x.CdnUrl
	}
	return ""
}

type AvatarBoxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxList []*AvatarFrameModel `protobuf:"bytes,1,rep,name=box_list,json=boxList,proto3" json:"box_list,omitempty"`
}

func (x *AvatarBoxList) Reset() {
	*x = AvatarBoxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBoxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBoxList) ProtoMessage() {}

func (x *AvatarBoxList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBoxList.ProtoReflect.Descriptor instead.
func (*AvatarBoxList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{32}
}

func (x *AvatarBoxList) GetBoxList() []*AvatarFrameModel {
	if x != nil {
		return x.BoxList
	}
	return nil
}

type AvatarBoxModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32          `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32          `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64          `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Info       *AvatarBoxInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Store      *StoreInfo     `protobuf:"bytes,5,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *AvatarBoxModel) Reset() {
	*x = AvatarBoxModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBoxModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBoxModel) ProtoMessage() {}

func (x *AvatarBoxModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBoxModel.ProtoReflect.Descriptor instead.
func (*AvatarBoxModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{33}
}

func (x *AvatarBoxModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AvatarBoxModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *AvatarBoxModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AvatarBoxModel) GetInfo() *AvatarBoxInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *AvatarBoxModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

type AvatarBoxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Animate      string `protobuf:"bytes,1,opt,name=animate,proto3" json:"animate,omitempty"`
	GrayAnimate  string `protobuf:"bytes,2,opt,name=gray_animate,json=grayAnimate,proto3" json:"gray_animate,omitempty"`
	LiteAnimate  string `protobuf:"bytes,3,opt,name=lite_animate,json=liteAnimate,proto3" json:"lite_animate,omitempty"`
	GrayImgurl   string `protobuf:"bytes,4,opt,name=gray_imgurl,json=grayImgurl,proto3" json:"gray_imgurl,omitempty"`
	StoreImgurl  string `protobuf:"bytes,5,opt,name=store_imgurl,json=storeImgurl,proto3" json:"store_imgurl,omitempty"`
	TagId        int32  `protobuf:"varint,6,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	AnimType     int32  `protobuf:"varint,7,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	ResourceUrl  string `protobuf:"bytes,8,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	RecentObtain int32  `protobuf:"varint,9,opt,name=recent_obtain,json=recentObtain,proto3" json:"recent_obtain,omitempty"`
}

func (x *AvatarBoxInfo) Reset() {
	*x = AvatarBoxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBoxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBoxInfo) ProtoMessage() {}

func (x *AvatarBoxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBoxInfo.ProtoReflect.Descriptor instead.
func (*AvatarBoxInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{34}
}

func (x *AvatarBoxInfo) GetAnimate() string {
	if x != nil {
		return x.Animate
	}
	return ""
}

func (x *AvatarBoxInfo) GetGrayAnimate() string {
	if x != nil {
		return x.GrayAnimate
	}
	return ""
}

func (x *AvatarBoxInfo) GetLiteAnimate() string {
	if x != nil {
		return x.LiteAnimate
	}
	return ""
}

func (x *AvatarBoxInfo) GetGrayImgurl() string {
	if x != nil {
		return x.GrayImgurl
	}
	return ""
}

func (x *AvatarBoxInfo) GetStoreImgurl() string {
	if x != nil {
		return x.StoreImgurl
	}
	return ""
}

func (x *AvatarBoxInfo) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *AvatarBoxInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *AvatarBoxInfo) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *AvatarBoxInfo) GetRecentObtain() int32 {
	if x != nil {
		return x.RecentObtain
	}
	return 0
}

// pack start
type PackList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackList []*PackModel `protobuf:"bytes,1,rep,name=pack_list,json=packList,proto3" json:"pack_list,omitempty"`
}

func (x *PackList) Reset() {
	*x = PackList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackList) ProtoMessage() {}

func (x *PackList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackList.ProtoReflect.Descriptor instead.
func (*PackList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{35}
}

func (x *PackList) GetPackList() []*PackModel {
	if x != nil {
		return x.PackList
	}
	return nil
}

type PackModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *PackInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *PackModel) Reset() {
	*x = PackModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackModel) ProtoMessage() {}

func (x *PackModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackModel.ProtoReflect.Descriptor instead.
func (*PackModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{36}
}

func (x *PackModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PackModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *PackModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *PackModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *PackModel) GetInfo() *PackInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type PackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 礼包类型，1：苹果礼包，2：苹果翻倍礼包，其他是其他礼包
	Type             int32                 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PackType         int32                 `protobuf:"varint,2,opt,name=pack_type,json=packType,proto3" json:"pack_type,omitempty"` //1为礼包，奖励使用reward；2为福袋，奖励使用sure_reward和may_reward
	SureReward       []*RewardConfig       `protobuf:"bytes,3,rep,name=sure_reward,json=sureReward,proto3" json:"sure_reward,omitempty"`
	MayReward        []*RewardConfig       `protobuf:"bytes,4,rep,name=may_reward,json=mayReward,proto3" json:"may_reward,omitempty"`
	Reward           []*RewardConfig       `protobuf:"bytes,5,rep,name=reward,proto3" json:"reward,omitempty"`
	Title            string                `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description      string                `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	TotalPrice       string                `protobuf:"bytes,8,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	PaySuccessDesc   string                `protobuf:"bytes,9,opt,name=pay_success_desc,json=paySuccessDesc,proto3" json:"pay_success_desc,omitempty"`
	PaySuccessImgurl string                `protobuf:"bytes,10,opt,name=pay_success_imgurl,json=paySuccessImgurl,proto3" json:"pay_success_imgurl,omitempty"`
	MultiBuyPrice    []*PackMultiPriceInfo `protobuf:"bytes,11,rep,name=multi_buy_price,json=multiBuyPrice,proto3" json:"multi_buy_price,omitempty"`
	// 每日红点开始时间
	NotifyStart int64 `protobuf:"varint,12,opt,name=notify_start,json=notifyStart,proto3" json:"notify_start,omitempty"`
	// 每日红点结束时间
	NotifyEnd int64  `protobuf:"varint,13,opt,name=notify_end,json=notifyEnd,proto3" json:"notify_end,omitempty"`
	GifImgurl string `protobuf:"bytes,14,opt,name=gif_imgurl,json=gifImgurl,proto3" json:"gif_imgurl,omitempty"`
	// for passcheck 兑换 start
	BaodiTimes    int32        `protobuf:"varint,15,opt,name=baodi_times,json=baodiTimes,proto3" json:"baodi_times,omitempty"`
	RankLimit     int32        `protobuf:"varint,16,opt,name=rank_limit,json=rankLimit,proto3" json:"rank_limit,omitempty"`
	NeedVip       int32        `protobuf:"varint,17,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`
	NabobAddition int32        `protobuf:"varint,18,opt,name=nabob_addition,json=nabobAddition,proto3" json:"nabob_addition,omitempty"`
	LuckyDesc     string       `protobuf:"bytes,19,opt,name=lucky_desc,json=luckyDesc,proto3" json:"lucky_desc,omitempty"`
	BuyTimes      int64        `protobuf:"varint,20,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
	AddRank       int64        `protobuf:"varint,21,opt,name=add_rank,json=addRank,proto3" json:"add_rank,omitempty"`
	DelAdMin      int64        `protobuf:"varint,22,opt,name=del_ad_min,json=delAdMin,proto3" json:"del_ad_min,omitempty"`
	PriceInfo     []*PriceInfo `protobuf:"bytes,23,rep,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`
}

func (x *PackInfo) Reset() {
	*x = PackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackInfo) ProtoMessage() {}

func (x *PackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackInfo.ProtoReflect.Descriptor instead.
func (*PackInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{37}
}

func (x *PackInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PackInfo) GetPackType() int32 {
	if x != nil {
		return x.PackType
	}
	return 0
}

func (x *PackInfo) GetSureReward() []*RewardConfig {
	if x != nil {
		return x.SureReward
	}
	return nil
}

func (x *PackInfo) GetMayReward() []*RewardConfig {
	if x != nil {
		return x.MayReward
	}
	return nil
}

func (x *PackInfo) GetReward() []*RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *PackInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PackInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackInfo) GetTotalPrice() string {
	if x != nil {
		return x.TotalPrice
	}
	return ""
}

func (x *PackInfo) GetPaySuccessDesc() string {
	if x != nil {
		return x.PaySuccessDesc
	}
	return ""
}

func (x *PackInfo) GetPaySuccessImgurl() string {
	if x != nil {
		return x.PaySuccessImgurl
	}
	return ""
}

func (x *PackInfo) GetMultiBuyPrice() []*PackMultiPriceInfo {
	if x != nil {
		return x.MultiBuyPrice
	}
	return nil
}

func (x *PackInfo) GetNotifyStart() int64 {
	if x != nil {
		return x.NotifyStart
	}
	return 0
}

func (x *PackInfo) GetNotifyEnd() int64 {
	if x != nil {
		return x.NotifyEnd
	}
	return 0
}

func (x *PackInfo) GetGifImgurl() string {
	if x != nil {
		return x.GifImgurl
	}
	return ""
}

func (x *PackInfo) GetBaodiTimes() int32 {
	if x != nil {
		return x.BaodiTimes
	}
	return 0
}

func (x *PackInfo) GetRankLimit() int32 {
	if x != nil {
		return x.RankLimit
	}
	return 0
}

func (x *PackInfo) GetNeedVip() int32 {
	if x != nil {
		return x.NeedVip
	}
	return 0
}

func (x *PackInfo) GetNabobAddition() int32 {
	if x != nil {
		return x.NabobAddition
	}
	return 0
}

func (x *PackInfo) GetLuckyDesc() string {
	if x != nil {
		return x.LuckyDesc
	}
	return ""
}

func (x *PackInfo) GetBuyTimes() int64 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *PackInfo) GetAddRank() int64 {
	if x != nil {
		return x.AddRank
	}
	return 0
}

func (x *PackInfo) GetDelAdMin() int64 {
	if x != nil {
		return x.DelAdMin
	}
	return 0
}

func (x *PackInfo) GetPriceInfo() []*PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

type PackMultiPriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Price int32 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PackMultiPriceInfo) Reset() {
	*x = PackMultiPriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackMultiPriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackMultiPriceInfo) ProtoMessage() {}

func (x *PackMultiPriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackMultiPriceInfo.ProtoReflect.Descriptor instead.
func (*PackMultiPriceInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{38}
}

func (x *PackMultiPriceInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PackMultiPriceInfo) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type RMBPackInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RMBPackInfoList []*RMBPackInfo `protobuf:"bytes,1,rep,name=RMBPackInfoList,proto3" json:"RMBPackInfoList,omitempty"`
}

func (x *RMBPackInfoList) Reset() {
	*x = RMBPackInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMBPackInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMBPackInfoList) ProtoMessage() {}

func (x *RMBPackInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMBPackInfoList.ProtoReflect.Descriptor instead.
func (*RMBPackInfoList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{39}
}

func (x *RMBPackInfoList) GetRMBPackInfoList() []*RMBPackInfo {
	if x != nil {
		return x.RMBPackInfoList
	}
	return nil
}

type RMBPackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackId          int32           `protobuf:"varint,1,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`
	Title           string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PriceInfo       []*PriceInfo    `protobuf:"bytes,3,rep,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`
	ShowStart       int32           `protobuf:"varint,4,opt,name=show_start,json=showStart,proto3" json:"show_start,omitempty"`
	ShowEnd         int32           `protobuf:"varint,5,opt,name=show_end,json=showEnd,proto3" json:"show_end,omitempty"`
	DiscountStart   int32           `protobuf:"varint,6,opt,name=discount_start,json=discountStart,proto3" json:"discount_start,omitempty"`
	DiscountEnd     int32           `protobuf:"varint,7,opt,name=discount_end,json=discountEnd,proto3" json:"discount_end,omitempty"`
	PackType        int32           `protobuf:"varint,8,opt,name=pack_type,json=packType,proto3" json:"pack_type,omitempty"`
	Reward          []*RewardConfig `protobuf:"bytes,9,rep,name=reward,proto3" json:"reward,omitempty"`
	RewardPreview   []string        `protobuf:"bytes,10,rep,name=reward_preview,json=rewardPreview,proto3" json:"reward_preview,omitempty"`
	GoodsId         int32           `protobuf:"varint,11,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	IconImgurl      string          `protobuf:"bytes,12,opt,name=icon_imgurl,json=iconImgurl,proto3" json:"icon_imgurl,omitempty"`
	BgImgurl        string          `protobuf:"bytes,13,opt,name=bg_imgurl,json=bgImgurl,proto3" json:"bg_imgurl,omitempty"`
	GifImgurl       string          `protobuf:"bytes,14,opt,name=gif_imgurl,json=gifImgurl,proto3" json:"gif_imgurl,omitempty"`
	TipsImgurl      string          `protobuf:"bytes,15,opt,name=tips_imgurl,json=tipsImgurl,proto3" json:"tips_imgurl,omitempty"`
	NeedPopup       int32           `protobuf:"varint,16,opt,name=need_popup,json=needPopup,proto3" json:"need_popup,omitempty"`
	PopupLimit      int32           `protobuf:"varint,17,opt,name=popup_limit,json=popupLimit,proto3" json:"popup_limit,omitempty"`
	PopupLimitation int32           `protobuf:"varint,18,opt,name=popup_limitation,json=popupLimitation,proto3" json:"popup_limitation,omitempty"`
	AddRank         int32           `protobuf:"varint,19,opt,name=add_rank,json=addRank,proto3" json:"add_rank,omitempty"`
	DelAdMin        int32           `protobuf:"varint,20,opt,name=del_ad_min,json=delAdMin,proto3" json:"del_ad_min,omitempty"`
	Imgurl          string          `protobuf:"bytes,21,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Thumbnail       string          `protobuf:"bytes,22,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// limitation
	BuyLimit            int32 `protobuf:"varint,23,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"`
	BuyLimitation       int32 `protobuf:"varint,24,opt,name=buy_limitation,json=buyLimitation,proto3" json:"buy_limitation,omitempty"`
	BuyLimitationOffset int64 `protobuf:"varint,25,opt,name=buy_limitation_offset,json=buyLimitationOffset,proto3" json:"buy_limitation_offset,omitempty"`
}

func (x *RMBPackInfo) Reset() {
	*x = RMBPackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMBPackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMBPackInfo) ProtoMessage() {}

func (x *RMBPackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMBPackInfo.ProtoReflect.Descriptor instead.
func (*RMBPackInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{40}
}

func (x *RMBPackInfo) GetPackId() int32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *RMBPackInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RMBPackInfo) GetPriceInfo() []*PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *RMBPackInfo) GetShowStart() int32 {
	if x != nil {
		return x.ShowStart
	}
	return 0
}

func (x *RMBPackInfo) GetShowEnd() int32 {
	if x != nil {
		return x.ShowEnd
	}
	return 0
}

func (x *RMBPackInfo) GetDiscountStart() int32 {
	if x != nil {
		return x.DiscountStart
	}
	return 0
}

func (x *RMBPackInfo) GetDiscountEnd() int32 {
	if x != nil {
		return x.DiscountEnd
	}
	return 0
}

func (x *RMBPackInfo) GetPackType() int32 {
	if x != nil {
		return x.PackType
	}
	return 0
}

func (x *RMBPackInfo) GetReward() []*RewardConfig {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *RMBPackInfo) GetRewardPreview() []string {
	if x != nil {
		return x.RewardPreview
	}
	return nil
}

func (x *RMBPackInfo) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *RMBPackInfo) GetIconImgurl() string {
	if x != nil {
		return x.IconImgurl
	}
	return ""
}

func (x *RMBPackInfo) GetBgImgurl() string {
	if x != nil {
		return x.BgImgurl
	}
	return ""
}

func (x *RMBPackInfo) GetGifImgurl() string {
	if x != nil {
		return x.GifImgurl
	}
	return ""
}

func (x *RMBPackInfo) GetTipsImgurl() string {
	if x != nil {
		return x.TipsImgurl
	}
	return ""
}

func (x *RMBPackInfo) GetNeedPopup() int32 {
	if x != nil {
		return x.NeedPopup
	}
	return 0
}

func (x *RMBPackInfo) GetPopupLimit() int32 {
	if x != nil {
		return x.PopupLimit
	}
	return 0
}

func (x *RMBPackInfo) GetPopupLimitation() int32 {
	if x != nil {
		return x.PopupLimitation
	}
	return 0
}

func (x *RMBPackInfo) GetAddRank() int32 {
	if x != nil {
		return x.AddRank
	}
	return 0
}

func (x *RMBPackInfo) GetDelAdMin() int32 {
	if x != nil {
		return x.DelAdMin
	}
	return 0
}

func (x *RMBPackInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RMBPackInfo) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *RMBPackInfo) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *RMBPackInfo) GetBuyLimitation() int32 {
	if x != nil {
		return x.BuyLimitation
	}
	return 0
}

func (x *RMBPackInfo) GetBuyLimitationOffset() int64 {
	if x != nil {
		return x.BuyLimitationOffset
	}
	return 0
}

type LimitationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyLimit            int32 `protobuf:"varint,1,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"`                                    // 限购次数(配置)
	BuyLimitation       int32 `protobuf:"varint,2,opt,name=buy_limitation,json=buyLimitation,proto3" json:"buy_limitation,omitempty"`                     // 限购类型(配置)
	BuyLimitationOffset int64 `protobuf:"varint,3,opt,name=buy_limitation_offset,json=buyLimitationOffset,proto3" json:"buy_limitation_offset,omitempty"` // 时间偏移量，周限购为偏移天数(配置)
}

func (x *LimitationInfo) Reset() {
	*x = LimitationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitationInfo) ProtoMessage() {}

func (x *LimitationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitationInfo.ProtoReflect.Descriptor instead.
func (*LimitationInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{41}
}

func (x *LimitationInfo) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *LimitationInfo) GetBuyLimitation() int32 {
	if x != nil {
		return x.BuyLimitation
	}
	return 0
}

func (x *LimitationInfo) GetBuyLimitationOffset() int64 {
	if x != nil {
		return x.BuyLimitationOffset
	}
	return 0
}

type GameFaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameFaceList []*GameFaceModel `protobuf:"bytes,1,rep,name=game_face_list,json=gameFaceList,proto3" json:"game_face_list,omitempty"`
}

func (x *GameFaceList) Reset() {
	*x = GameFaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameFaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameFaceList) ProtoMessage() {}

func (x *GameFaceList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameFaceList.ProtoReflect.Descriptor instead.
func (*GameFaceList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{42}
}

func (x *GameFaceList) GetGameFaceList() []*GameFaceModel {
	if x != nil {
		return x.GameFaceList
	}
	return nil
}

// game face start
type GameFaceModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32            `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32            `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64            `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo       `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *ProductBaseInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GameFaceModel) Reset() {
	*x = GameFaceModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameFaceModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameFaceModel) ProtoMessage() {}

func (x *GameFaceModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameFaceModel.ProtoReflect.Descriptor instead.
func (*GameFaceModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{43}
}

func (x *GameFaceModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *GameFaceModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *GameFaceModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GameFaceModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *GameFaceModel) GetInfo() *ProductBaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// avatar frame start
type AvatarFrameModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32            `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32            `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64            `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo       `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *AvatarFrameInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *AvatarFrameModel) Reset() {
	*x = AvatarFrameModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarFrameModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarFrameModel) ProtoMessage() {}

func (x *AvatarFrameModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarFrameModel.ProtoReflect.Descriptor instead.
func (*AvatarFrameModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{44}
}

func (x *AvatarFrameModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AvatarFrameModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *AvatarFrameModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AvatarFrameModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *AvatarFrameModel) GetInfo() *AvatarFrameInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AvatarFrameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId        int32  `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	GrayImgurl   string `protobuf:"bytes,2,opt,name=gray_imgurl,json=grayImgurl,proto3" json:"gray_imgurl,omitempty"`
	AnimType     int32  `protobuf:"varint,3,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	ResourceUrl  string `protobuf:"bytes,4,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	LiteAnimate  string `protobuf:"bytes,5,opt,name=lite_animate,json=liteAnimate,proto3" json:"lite_animate,omitempty"`
	StoreImgurl  string `protobuf:"bytes,6,opt,name=store_imgurl,json=storeImgurl,proto3" json:"store_imgurl,omitempty"`
	RecentObtain int32  `protobuf:"varint,7,opt,name=recent_obtain,json=recentObtain,proto3" json:"recent_obtain,omitempty"`
}

func (x *AvatarFrameInfo) Reset() {
	*x = AvatarFrameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarFrameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarFrameInfo) ProtoMessage() {}

func (x *AvatarFrameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarFrameInfo.ProtoReflect.Descriptor instead.
func (*AvatarFrameInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{45}
}

func (x *AvatarFrameInfo) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *AvatarFrameInfo) GetGrayImgurl() string {
	if x != nil {
		return x.GrayImgurl
	}
	return ""
}

func (x *AvatarFrameInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *AvatarFrameInfo) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *AvatarFrameInfo) GetLiteAnimate() string {
	if x != nil {
		return x.LiteAnimate
	}
	return ""
}

func (x *AvatarFrameInfo) GetStoreImgurl() string {
	if x != nil {
		return x.StoreImgurl
	}
	return ""
}

func (x *AvatarFrameInfo) GetRecentObtain() int32 {
	if x != nil {
		return x.RecentObtain
	}
	return 0
}

type KillStyleChipList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillStyleChipList []*KillStyleChipModel `protobuf:"bytes,1,rep,name=kill_style_chip_list,json=killStyleChipList,proto3" json:"kill_style_chip_list,omitempty"`
}

func (x *KillStyleChipList) Reset() {
	*x = KillStyleChipList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillStyleChipList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillStyleChipList) ProtoMessage() {}

func (x *KillStyleChipList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillStyleChipList.ProtoReflect.Descriptor instead.
func (*KillStyleChipList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{46}
}

func (x *KillStyleChipList) GetKillStyleChipList() []*KillStyleChipModel {
	if x != nil {
		return x.KillStyleChipList
	}
	return nil
}

// ks chip start
type KillStyleChipModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *ChipInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *KillStyleChipModel) Reset() {
	*x = KillStyleChipModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillStyleChipModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillStyleChipModel) ProtoMessage() {}

func (x *KillStyleChipModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillStyleChipModel.ProtoReflect.Descriptor instead.
func (*KillStyleChipModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{47}
}

func (x *KillStyleChipModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *KillStyleChipModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *KillStyleChipModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *KillStyleChipModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *KillStyleChipModel) GetInfo() *ChipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type KillStyleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillStyleList []*KillStyleModel `protobuf:"bytes,1,rep,name=kill_style_list,json=killStyleList,proto3" json:"kill_style_list,omitempty"`
}

func (x *KillStyleList) Reset() {
	*x = KillStyleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillStyleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillStyleList) ProtoMessage() {}

func (x *KillStyleList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillStyleList.ProtoReflect.Descriptor instead.
func (*KillStyleList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{48}
}

func (x *KillStyleList) GetKillStyleList() []*KillStyleModel {
	if x != nil {
		return x.KillStyleList
	}
	return nil
}

// ks start
type KillStyleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32            `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32            `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64            `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo       `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *ProductBaseInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *KillStyleModel) Reset() {
	*x = KillStyleModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillStyleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillStyleModel) ProtoMessage() {}

func (x *KillStyleModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillStyleModel.ProtoReflect.Descriptor instead.
func (*KillStyleModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{49}
}

func (x *KillStyleModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *KillStyleModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *KillStyleModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *KillStyleModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *KillStyleModel) GetInfo() *ProductBaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OGameBroadcastList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OGameBroadcastList []*OGameBroadcastModel `protobuf:"bytes,1,rep,name=o_game_broadcast_list,json=oGameBroadcastList,proto3" json:"o_game_broadcast_list,omitempty"`
}

func (x *OGameBroadcastList) Reset() {
	*x = OGameBroadcastList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OGameBroadcastList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OGameBroadcastList) ProtoMessage() {}

func (x *OGameBroadcastList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OGameBroadcastList.ProtoReflect.Descriptor instead.
func (*OGameBroadcastList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{50}
}

func (x *OGameBroadcastList) GetOGameBroadcastList() []*OGameBroadcastModel {
	if x != nil {
		return x.OGameBroadcastList
	}
	return nil
}

// game broadcast start
type OGameBroadcastModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32               `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32               `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64               `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo          `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *OGameBroadcastInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *OGameBroadcastModel) Reset() {
	*x = OGameBroadcastModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OGameBroadcastModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OGameBroadcastModel) ProtoMessage() {}

func (x *OGameBroadcastModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OGameBroadcastModel.ProtoReflect.Descriptor instead.
func (*OGameBroadcastModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{51}
}

func (x *OGameBroadcastModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *OGameBroadcastModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *OGameBroadcastModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *OGameBroadcastModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *OGameBroadcastModel) GetInfo() *OGameBroadcastInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OGameBroadcastInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType           int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl            string `protobuf:"bytes,2,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	BroadcastTextColor string `protobuf:"bytes,3,opt,name=broadcast_text_color,json=broadcastTextColor,proto3" json:"broadcast_text_color,omitempty"` // 播报文字颜色
}

func (x *OGameBroadcastInfo) Reset() {
	*x = OGameBroadcastInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OGameBroadcastInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OGameBroadcastInfo) ProtoMessage() {}

func (x *OGameBroadcastInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OGameBroadcastInfo.ProtoReflect.Descriptor instead.
func (*OGameBroadcastInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{52}
}

func (x *OGameBroadcastInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *OGameBroadcastInfo) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *OGameBroadcastInfo) GetBroadcastTextColor() string {
	if x != nil {
		return x.BroadcastTextColor
	}
	return ""
}

type OGameBubbleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OGameBubbleList []*OGameBubbleModel `protobuf:"bytes,1,rep,name=o_game_bubble_list,json=oGameBubbleList,proto3" json:"o_game_bubble_list,omitempty"`
}

func (x *OGameBubbleList) Reset() {
	*x = OGameBubbleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OGameBubbleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OGameBubbleList) ProtoMessage() {}

func (x *OGameBubbleList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OGameBubbleList.ProtoReflect.Descriptor instead.
func (*OGameBubbleList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{53}
}

func (x *OGameBubbleList) GetOGameBubbleList() []*OGameBubbleModel {
	if x != nil {
		return x.OGameBubbleList
	}
	return nil
}

// game bubble start
type OGameBubbleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32            `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32            `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64            `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo       `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *OGameBubbleInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *OGameBubbleModel) Reset() {
	*x = OGameBubbleModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OGameBubbleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OGameBubbleModel) ProtoMessage() {}

func (x *OGameBubbleModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OGameBubbleModel.ProtoReflect.Descriptor instead.
func (*OGameBubbleModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{54}
}

func (x *OGameBubbleModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *OGameBubbleModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *OGameBubbleModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *OGameBubbleModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *OGameBubbleModel) GetInfo() *OGameBubbleInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OGameBubbleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType      int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl       string `protobuf:"bytes,2,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	NicknameColor string `protobuf:"bytes,3,opt,name=nickname_color,json=nicknameColor,proto3" json:"nickname_color,omitempty"` // 昵称颜色
	TextColor     string `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`             // 文字颜色
}

func (x *OGameBubbleInfo) Reset() {
	*x = OGameBubbleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OGameBubbleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OGameBubbleInfo) ProtoMessage() {}

func (x *OGameBubbleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OGameBubbleInfo.ProtoReflect.Descriptor instead.
func (*OGameBubbleInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{55}
}

func (x *OGameBubbleInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *OGameBubbleInfo) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *OGameBubbleInfo) GetNicknameColor() string {
	if x != nil {
		return x.NicknameColor
	}
	return ""
}

func (x *OGameBubbleInfo) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

type RingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RingList []*RingModel `protobuf:"bytes,1,rep,name=ring_list,json=ringList,proto3" json:"ring_list,omitempty"`
}

func (x *RingList) Reset() {
	*x = RingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingList) ProtoMessage() {}

func (x *RingList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingList.ProtoReflect.Descriptor instead.
func (*RingList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{56}
}

func (x *RingList) GetRingList() []*RingModel {
	if x != nil {
		return x.RingList
	}
	return nil
}

// ring start
type RingModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *RingInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RingModel) Reset() {
	*x = RingModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RingModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingModel) ProtoMessage() {}

func (x *RingModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingModel.ProtoReflect.Descriptor instead.
func (*RingModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{57}
}

func (x *RingModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *RingModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *RingModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *RingModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *RingModel) GetInfo() *RingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomLimit            int32  `protobuf:"varint,1,opt,name=room_limit,json=roomLimit,proto3" json:"room_limit,omitempty"`
	BagId                int32  `protobuf:"varint,2,opt,name=bag_id,json=bagId,proto3" json:"bag_id,omitempty"`
	Display              int32  `protobuf:"varint,3,opt,name=display,proto3" json:"display,omitempty"`
	AnimType             int32  `protobuf:"varint,4,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	ResourceUrl          string `protobuf:"bytes,5,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	Care                 int32  `protobuf:"varint,6,opt,name=care,proto3" json:"care,omitempty"`
	LiteAnimate          string `protobuf:"bytes,7,opt,name=lite_animate,json=liteAnimate,proto3" json:"lite_animate,omitempty"`
	RingType             int32  `protobuf:"varint,8,opt,name=ring_type,json=ringType,proto3" json:"ring_type,omitempty"` //戒指type;0:普通戒指，1:高级限定戒指
	TitleImg             string `protobuf:"bytes,9,opt,name=title_img,json=titleImg,proto3" json:"title_img,omitempty"`  //标题图片
	NewTitleImg          string `protobuf:"bytes,10,opt,name=new_title_img,json=newTitleImg,proto3" json:"new_title_img,omitempty"`
	ShowEffects          string `protobuf:"bytes,11,opt,name=show_effects,json=showEffects,proto3" json:"show_effects,omitempty"`                              //出场特效
	EffectsType          int32  `protobuf:"varint,12,opt,name=effects_type,json=effectsType,proto3" json:"effects_type,omitempty"`                             //出场特效动画类型
	DetailBg             string `protobuf:"bytes,13,opt,name=detail_bg,json=detailBg,proto3" json:"detail_bg,omitempty"`                                       //详情页背景
	TemplateId           int32  `protobuf:"varint,14,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`                                //专属请帖模版id
	HideImg              int32  `protobuf:"varint,15,opt,name=hide_img,json=hideImg,proto3" json:"hide_img,omitempty"`                                         //是否隐藏图片，0否1是
	BarrageEffects       string `protobuf:"bytes,16,opt,name=barrage_effects,json=barrageEffects,proto3" json:"barrage_effects,omitempty"`                     //播报动效
	BarrageEffectsType   int32  `protobuf:"varint,17,opt,name=barrage_effects_type,json=barrageEffectsType,proto3" json:"barrage_effects_type,omitempty"`      //播报动效类型
	BarrageEffectsImgurl string `protobuf:"bytes,18,opt,name=barrage_effects_imgurl,json=barrageEffectsImgurl,proto3" json:"barrage_effects_imgurl,omitempty"` //播报动效图片
	BarrageFontColor     string `protobuf:"bytes,19,opt,name=barrage_font_color,json=barrageFontColor,proto3" json:"barrage_font_color,omitempty"`             //播报昵称颜色
	BarrageText          string `protobuf:"bytes,20,opt,name=barrage_text,json=barrageText,proto3" json:"barrage_text,omitempty"`                              //播报文案
	RingCoordinate       string `protobuf:"bytes,21,opt,name=ring_coordinate,json=ringCoordinate,proto3" json:"ring_coordinate,omitempty"`                     //戒指位置坐标和尺寸大小，x;y;width;height
	ButtonCoordinate     string `protobuf:"bytes,22,opt,name=button_coordinate,json=buttonCoordinate,proto3" json:"button_coordinate,omitempty"`               //戒指位置坐标和尺寸大小，x;y;width;height
	ButtonStoreUrl       string `protobuf:"bytes,23,opt,name=button_store_url,json=buttonStoreUrl,proto3" json:"button_store_url,omitempty"`                   //按钮在商店场景下的图片
	ButtonBagUrl         string `protobuf:"bytes,24,opt,name=button_bag_url,json=buttonBagUrl,proto3" json:"button_bag_url,omitempty"`                         //按钮在商店场景下的图片
	RecentObtain         int32  `protobuf:"varint,25,opt,name=recent_obtain,json=recentObtain,proto3" json:"recent_obtain,omitempty"`                          //最近获得开关 0 关闭; 1打开
}

func (x *RingInfo) Reset() {
	*x = RingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingInfo) ProtoMessage() {}

func (x *RingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingInfo.ProtoReflect.Descriptor instead.
func (*RingInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{58}
}

func (x *RingInfo) GetRoomLimit() int32 {
	if x != nil {
		return x.RoomLimit
	}
	return 0
}

func (x *RingInfo) GetBagId() int32 {
	if x != nil {
		return x.BagId
	}
	return 0
}

func (x *RingInfo) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *RingInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *RingInfo) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *RingInfo) GetCare() int32 {
	if x != nil {
		return x.Care
	}
	return 0
}

func (x *RingInfo) GetLiteAnimate() string {
	if x != nil {
		return x.LiteAnimate
	}
	return ""
}

func (x *RingInfo) GetRingType() int32 {
	if x != nil {
		return x.RingType
	}
	return 0
}

func (x *RingInfo) GetTitleImg() string {
	if x != nil {
		return x.TitleImg
	}
	return ""
}

func (x *RingInfo) GetNewTitleImg() string {
	if x != nil {
		return x.NewTitleImg
	}
	return ""
}

func (x *RingInfo) GetShowEffects() string {
	if x != nil {
		return x.ShowEffects
	}
	return ""
}

func (x *RingInfo) GetEffectsType() int32 {
	if x != nil {
		return x.EffectsType
	}
	return 0
}

func (x *RingInfo) GetDetailBg() string {
	if x != nil {
		return x.DetailBg
	}
	return ""
}

func (x *RingInfo) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *RingInfo) GetHideImg() int32 {
	if x != nil {
		return x.HideImg
	}
	return 0
}

func (x *RingInfo) GetBarrageEffects() string {
	if x != nil {
		return x.BarrageEffects
	}
	return ""
}

func (x *RingInfo) GetBarrageEffectsType() int32 {
	if x != nil {
		return x.BarrageEffectsType
	}
	return 0
}

func (x *RingInfo) GetBarrageEffectsImgurl() string {
	if x != nil {
		return x.BarrageEffectsImgurl
	}
	return ""
}

func (x *RingInfo) GetBarrageFontColor() string {
	if x != nil {
		return x.BarrageFontColor
	}
	return ""
}

func (x *RingInfo) GetBarrageText() string {
	if x != nil {
		return x.BarrageText
	}
	return ""
}

func (x *RingInfo) GetRingCoordinate() string {
	if x != nil {
		return x.RingCoordinate
	}
	return ""
}

func (x *RingInfo) GetButtonCoordinate() string {
	if x != nil {
		return x.ButtonCoordinate
	}
	return ""
}

func (x *RingInfo) GetButtonStoreUrl() string {
	if x != nil {
		return x.ButtonStoreUrl
	}
	return ""
}

func (x *RingInfo) GetButtonBagUrl() string {
	if x != nil {
		return x.ButtonBagUrl
	}
	return ""
}

func (x *RingInfo) GetRecentObtain() int32 {
	if x != nil {
		return x.RecentObtain
	}
	return 0
}

type SkinChipList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinChipList []*SkinChipModel `protobuf:"bytes,1,rep,name=skin_chip_list,json=skinChipList,proto3" json:"skin_chip_list,omitempty"`
}

func (x *SkinChipList) Reset() {
	*x = SkinChipList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinChipList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinChipList) ProtoMessage() {}

func (x *SkinChipList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinChipList.ProtoReflect.Descriptor instead.
func (*SkinChipList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{59}
}

func (x *SkinChipList) GetSkinChipList() []*SkinChipModel {
	if x != nil {
		return x.SkinChipList
	}
	return nil
}

// skin chip start
type SkinChipModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *ChipInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SkinChipModel) Reset() {
	*x = SkinChipModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinChipModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinChipModel) ProtoMessage() {}

func (x *SkinChipModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinChipModel.ProtoReflect.Descriptor instead.
func (*SkinChipModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{60}
}

func (x *SkinChipModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SkinChipModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *SkinChipModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SkinChipModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *SkinChipModel) GetInfo() *ChipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SkinList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinList []*SkSkinModel `protobuf:"bytes,1,rep,name=skin_list,json=skinList,proto3" json:"skin_list,omitempty"`
}

func (x *SkinList) Reset() {
	*x = SkinList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinList) ProtoMessage() {}

func (x *SkinList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinList.ProtoReflect.Descriptor instead.
func (*SkinList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{61}
}

func (x *SkinList) GetSkinList() []*SkSkinModel {
	if x != nil {
		return x.SkinList
	}
	return nil
}

type SkSkinModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *SkinInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SkSkinModel) Reset() {
	*x = SkSkinModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkSkinModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkSkinModel) ProtoMessage() {}

func (x *SkSkinModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkSkinModel.ProtoReflect.Descriptor instead.
func (*SkSkinModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{62}
}

func (x *SkSkinModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SkSkinModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *SkSkinModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SkSkinModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *SkSkinModel) GetInfo() *SkinInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SkinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialList     []*MeterialItem `protobuf:"bytes,1,rep,name=material_list,json=materialList,proto3" json:"material_list,omitempty"`
	MaterialCoins    []*PriceInfo    `protobuf:"bytes,2,rep,name=material_coins,json=materialCoins,proto3" json:"material_coins,omitempty"`
	ShowWorth        int32           `protobuf:"varint,3,opt,name=show_worth,json=showWorth,proto3" json:"show_worth,omitempty"`
	UseLimitTime     int64           `protobuf:"varint,4,opt,name=use_limit_time,json=useLimitTime,proto3" json:"use_limit_time,omitempty"` //-1为永久;否则使用期限(int32 秒)
	AddTime          int64           `protobuf:"varint,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`                  // 获取时间，服务器在背包接口下发，用于背包皮肤和击杀效果排序
	DynamicThumbnail string          `protobuf:"bytes,6,opt,name=dynamic_thumbnail,json=dynamicThumbnail,proto3" json:"dynamic_thumbnail,omitempty"`
	BaseLevelId      int32           `protobuf:"varint,7,opt,name=base_level_id,json=baseLevelId,proto3" json:"base_level_id,omitempty"`
	Level            int32           `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	AnimType         int32           `protobuf:"varint,9,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Headimgurl       string          `protobuf:"bytes,10,opt,name=headimgurl,proto3" json:"headimgurl,omitempty"` //头像界面使用
	// *
	// 1: "绿队"; 2: "红队"; 3: "黄队"
	UseTeam               []int32             `protobuf:"varint,11,rep,packed,name=use_team,json=useTeam,proto3" json:"use_team,omitempty"`
	HideShadow            int32               `protobuf:"varint,12,opt,name=hide_shadow,json=hideShadow,proto3" json:"hide_shadow,omitempty"`                                     // 是否隐藏首页阴影，0展示 1隐藏
	LeftUpIcon            string              `protobuf:"bytes,13,opt,name=left_up_icon,json=leftUpIcon,proto3" json:"left_up_icon,omitempty"`                                    //皮肤限定角标
	CloseUp               int32               `protobuf:"varint,14,opt,name=close_up,json=closeUp,proto3" json:"close_up,omitempty"`                                              //0 不支持特写，1 支持特写
	CloseUpScale          float32             `protobuf:"fixed32,15,opt,name=close_up_scale,json=closeUpScale,proto3" json:"close_up_scale,omitempty"`                            //特写缩放系数
	BottomAnimType        int32               `protobuf:"varint,16,opt,name=bottom_anim_type,json=bottomAnimType,proto3" json:"bottom_anim_type,omitempty"`                       // 底图动效类型
	BottomAnimUrl         string              `protobuf:"bytes,17,opt,name=bottom_anim_url,json=bottomAnimUrl,proto3" json:"bottom_anim_url,omitempty"`                           // 底图动效链接
	EntranceAnimType      int32               `protobuf:"varint,18,opt,name=entrance_anim_type,json=entranceAnimType,proto3" json:"entrance_anim_type,omitempty"`                 // 入场动效类型
	EntranceAnimUrl       string              `protobuf:"bytes,19,opt,name=entrance_anim_url,json=entranceAnimUrl,proto3" json:"entrance_anim_url,omitempty"`                     // 入场动效链接
	RecentObtain          int32               `protobuf:"varint,20,opt,name=recent_obtain,json=recentObtain,proto3" json:"recent_obtain,omitempty"`                               //最近获得开关， 0 关闭  1打开
	FeatureList           []*Feature          `protobuf:"bytes,21,rep,name=feature_list,json=featureList,proto3" json:"feature_list,omitempty"`                                   //皮肤特性列表
	HasAssociated         bool                `protobuf:"varint,22,opt,name=has_associated,json=hasAssociated,proto3" json:"has_associated,omitempty"`                            // 是否关联图鉴bool
	IllustrationIds       []int32             `protobuf:"varint,23,rep,packed,name=illustration_ids,json=illustrationIds,proto3" json:"illustration_ids,omitempty"`               // 关联图鉴id  []int，（只有1级皮肤会配置，用skin_index去找当前实际拥有的等级）
	UnityAnimKey          string              `protobuf:"bytes,24,opt,name=unity_anim_key,json=unityAnimKey,proto3" json:"unity_anim_key,omitempty"`                              // unity资源路径
	UnityAnimVersion      string              `protobuf:"bytes,25,opt,name=unity_anim_version,json=unityAnimVersion,proto3" json:"unity_anim_version,omitempty"`                  // unity资源支持版本
	UnityPartyAnimKey     string              `protobuf:"bytes,26,opt,name=unity_party_anim_key,json=unityPartyAnimKey,proto3" json:"unity_party_anim_key,omitempty"`             // unity2d派对动效
	UnityPartyAnimVersion string              `protobuf:"bytes,27,opt,name=unity_party_anim_version,json=unityPartyAnimVersion,proto3" json:"unity_party_anim_version,omitempty"` // unity2d派对动效
	EnterUnity            int32               `protobuf:"varint,28,opt,name=enter_unity,json=enterUnity,proto3" json:"enter_unity,omitempty"`                                     // 是否进入 unity
	Sections              []*MagicSkinSection `protobuf:"bytes,29,rep,name=sections,proto3" json:"sections,omitempty"`                                                            // 幻化皮肤组件
}

func (x *SkinInfo) Reset() {
	*x = SkinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinInfo) ProtoMessage() {}

func (x *SkinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinInfo.ProtoReflect.Descriptor instead.
func (*SkinInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{63}
}

func (x *SkinInfo) GetMaterialList() []*MeterialItem {
	if x != nil {
		return x.MaterialList
	}
	return nil
}

func (x *SkinInfo) GetMaterialCoins() []*PriceInfo {
	if x != nil {
		return x.MaterialCoins
	}
	return nil
}

func (x *SkinInfo) GetShowWorth() int32 {
	if x != nil {
		return x.ShowWorth
	}
	return 0
}

func (x *SkinInfo) GetUseLimitTime() int64 {
	if x != nil {
		return x.UseLimitTime
	}
	return 0
}

func (x *SkinInfo) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *SkinInfo) GetDynamicThumbnail() string {
	if x != nil {
		return x.DynamicThumbnail
	}
	return ""
}

func (x *SkinInfo) GetBaseLevelId() int32 {
	if x != nil {
		return x.BaseLevelId
	}
	return 0
}

func (x *SkinInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SkinInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *SkinInfo) GetHeadimgurl() string {
	if x != nil {
		return x.Headimgurl
	}
	return ""
}

func (x *SkinInfo) GetUseTeam() []int32 {
	if x != nil {
		return x.UseTeam
	}
	return nil
}

func (x *SkinInfo) GetHideShadow() int32 {
	if x != nil {
		return x.HideShadow
	}
	return 0
}

func (x *SkinInfo) GetLeftUpIcon() string {
	if x != nil {
		return x.LeftUpIcon
	}
	return ""
}

func (x *SkinInfo) GetCloseUp() int32 {
	if x != nil {
		return x.CloseUp
	}
	return 0
}

func (x *SkinInfo) GetCloseUpScale() float32 {
	if x != nil {
		return x.CloseUpScale
	}
	return 0
}

func (x *SkinInfo) GetBottomAnimType() int32 {
	if x != nil {
		return x.BottomAnimType
	}
	return 0
}

func (x *SkinInfo) GetBottomAnimUrl() string {
	if x != nil {
		return x.BottomAnimUrl
	}
	return ""
}

func (x *SkinInfo) GetEntranceAnimType() int32 {
	if x != nil {
		return x.EntranceAnimType
	}
	return 0
}

func (x *SkinInfo) GetEntranceAnimUrl() string {
	if x != nil {
		return x.EntranceAnimUrl
	}
	return ""
}

func (x *SkinInfo) GetRecentObtain() int32 {
	if x != nil {
		return x.RecentObtain
	}
	return 0
}

func (x *SkinInfo) GetFeatureList() []*Feature {
	if x != nil {
		return x.FeatureList
	}
	return nil
}

func (x *SkinInfo) GetHasAssociated() bool {
	if x != nil {
		return x.HasAssociated
	}
	return false
}

func (x *SkinInfo) GetIllustrationIds() []int32 {
	if x != nil {
		return x.IllustrationIds
	}
	return nil
}

func (x *SkinInfo) GetUnityAnimKey() string {
	if x != nil {
		return x.UnityAnimKey
	}
	return ""
}

func (x *SkinInfo) GetUnityAnimVersion() string {
	if x != nil {
		return x.UnityAnimVersion
	}
	return ""
}

func (x *SkinInfo) GetUnityPartyAnimKey() string {
	if x != nil {
		return x.UnityPartyAnimKey
	}
	return ""
}

func (x *SkinInfo) GetUnityPartyAnimVersion() string {
	if x != nil {
		return x.UnityPartyAnimVersion
	}
	return ""
}

func (x *SkinInfo) GetEnterUnity() int32 {
	if x != nil {
		return x.EnterUnity
	}
	return 0
}

func (x *SkinInfo) GetSections() []*MagicSkinSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

type MagicSkinSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                           // 组件类型
	Id        int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                               // 组件ID
	StyleImg  string `protobuf:"bytes,3,opt,name=style_img,json=styleImg,proto3" json:"style_img,omitempty"`    // 款式图
	StyleName string `protobuf:"bytes,4,opt,name=style_name,json=styleName,proto3" json:"style_name,omitempty"` // 款式名
}

func (x *MagicSkinSection) Reset() {
	*x = MagicSkinSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSkinSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSkinSection) ProtoMessage() {}

func (x *MagicSkinSection) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSkinSection.ProtoReflect.Descriptor instead.
func (*MagicSkinSection) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{64}
}

func (x *MagicSkinSection) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MagicSkinSection) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MagicSkinSection) GetStyleImg() string {
	if x != nil {
		return x.StyleImg
	}
	return ""
}

func (x *MagicSkinSection) GetStyleName() string {
	if x != nil {
		return x.StyleName
	}
	return ""
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconUrl string `protobuf:"bytes,1,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Desc    string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{65}
}

func (x *Feature) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *Feature) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// team suit start
type TeamSuitList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamSuitList []*TeamSuitModel `protobuf:"bytes,1,rep,name=team_suit_list,json=teamSuitList,proto3" json:"team_suit_list,omitempty"`
}

func (x *TeamSuitList) Reset() {
	*x = TeamSuitList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuitList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuitList) ProtoMessage() {}

func (x *TeamSuitList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuitList.ProtoReflect.Descriptor instead.
func (*TeamSuitList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{66}
}

func (x *TeamSuitList) GetTeamSuitList() []*TeamSuitModel {
	if x != nil {
		return x.TeamSuitList
	}
	return nil
}

type TeamSuitModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32         `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32         `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64         `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo    `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *TeamSuitInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *TeamSuitModel) Reset() {
	*x = TeamSuitModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuitModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuitModel) ProtoMessage() {}

func (x *TeamSuitModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuitModel.ProtoReflect.Descriptor instead.
func (*TeamSuitModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{67}
}

func (x *TeamSuitModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *TeamSuitModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *TeamSuitModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TeamSuitModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *TeamSuitModel) GetInfo() *TeamSuitInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type TeamSuitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialList     []*MeterialItem `protobuf:"bytes,1,rep,name=material_list,json=materialList,proto3" json:"material_list,omitempty"`
	MaterialCoins    []*PriceInfo    `protobuf:"bytes,2,rep,name=material_coins,json=materialCoins,proto3" json:"material_coins,omitempty"`
	ShowWorth        int32           `protobuf:"varint,3,opt,name=show_worth,json=showWorth,proto3" json:"show_worth,omitempty"`
	UseLimitTime     int64           `protobuf:"varint,4,opt,name=use_limit_time,json=useLimitTime,proto3" json:"use_limit_time,omitempty"` //-1为永久;否则使用期限(int32 秒)
	AddTime          int64           `protobuf:"varint,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`                  // 获取时间，服务器在背包接口下发，用于背包皮肤和击杀效果排序
	DynamicThumbnail string          `protobuf:"bytes,6,opt,name=dynamic_thumbnail,json=dynamicThumbnail,proto3" json:"dynamic_thumbnail,omitempty"`
	BaseLevelId      int32           `protobuf:"varint,7,opt,name=base_level_id,json=baseLevelId,proto3" json:"base_level_id,omitempty"`
	Level            int32           `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	AnimType         int32           `protobuf:"varint,9,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Headimgurl       string          `protobuf:"bytes,10,opt,name=headimgurl,proto3" json:"headimgurl,omitempty"` //头像界面使用
	// *
	// 1: "绿队"; 2: "红队"; 3: "黄队"
	UseTeam          []int32     `protobuf:"varint,11,rep,packed,name=use_team,json=useTeam,proto3" json:"use_team,omitempty"`
	HideShadow       int32       `protobuf:"varint,12,opt,name=hide_shadow,json=hideShadow,proto3" json:"hide_shadow,omitempty"`                     // 是否隐藏首页阴影，0展示 1隐藏
	LeftUpIcon       string      `protobuf:"bytes,13,opt,name=left_up_icon,json=leftUpIcon,proto3" json:"left_up_icon,omitempty"`                    //皮肤限定角标
	CloseUp          int32       `protobuf:"varint,14,opt,name=close_up,json=closeUp,proto3" json:"close_up,omitempty"`                              //0 不支持特写，1 支持特写
	CloseUpScale     float32     `protobuf:"fixed32,15,opt,name=close_up_scale,json=closeUpScale,proto3" json:"close_up_scale,omitempty"`            //特写缩放系数
	BottomAnimType   int32       `protobuf:"varint,16,opt,name=bottom_anim_type,json=bottomAnimType,proto3" json:"bottom_anim_type,omitempty"`       // 底图动效类型
	BottomAnimUrl    string      `protobuf:"bytes,17,opt,name=bottom_anim_url,json=bottomAnimUrl,proto3" json:"bottom_anim_url,omitempty"`           // 底图动效链接
	EntranceAnimType int32       `protobuf:"varint,18,opt,name=entrance_anim_type,json=entranceAnimType,proto3" json:"entrance_anim_type,omitempty"` // 入场动效类型
	EntranceAnimUrl  string      `protobuf:"bytes,19,opt,name=entrance_anim_url,json=entranceAnimUrl,proto3" json:"entrance_anim_url,omitempty"`     // 入场动效链接
	RecentObtain     int32       `protobuf:"varint,20,opt,name=recent_obtain,json=recentObtain,proto3" json:"recent_obtain,omitempty"`               //最近获得开关， 0 关闭  1打开
	FeatureList      []*Feature  `protobuf:"bytes,21,rep,name=feature_list,json=featureList,proto3" json:"feature_list,omitempty"`                   //皮肤特性列表
	GameInfoList     []*GameInfo `protobuf:"bytes,22,rep,name=game_info_list,json=gameInfoList,proto3" json:"game_info_list,omitempty"`
	ActJumpurl       string      `protobuf:"bytes,23,opt,name=act_jumpurl,json=actJumpurl,proto3" json:"act_jumpurl,omitempty"`          // 活动跳转链接
	ActStartTime     int64       `protobuf:"varint,24,opt,name=act_start_time,json=actStartTime,proto3" json:"act_start_time,omitempty"` // 活动开始时间
	ActEndTime       int64       `protobuf:"varint,25,opt,name=act_end_time,json=actEndTime,proto3" json:"act_end_time,omitempty"`       // 活动结束时间
	HasAssociated    bool        `protobuf:"varint,26,opt,name=has_associated,json=hasAssociated,proto3" json:"has_associated,omitempty"`
	WorthLevel       int32       `protobuf:"varint,27,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`
	Worth            int32       `protobuf:"varint,28,opt,name=worth,proto3" json:"worth,omitempty"`
}

func (x *TeamSuitInfo) Reset() {
	*x = TeamSuitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSuitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSuitInfo) ProtoMessage() {}

func (x *TeamSuitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSuitInfo.ProtoReflect.Descriptor instead.
func (*TeamSuitInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{68}
}

func (x *TeamSuitInfo) GetMaterialList() []*MeterialItem {
	if x != nil {
		return x.MaterialList
	}
	return nil
}

func (x *TeamSuitInfo) GetMaterialCoins() []*PriceInfo {
	if x != nil {
		return x.MaterialCoins
	}
	return nil
}

func (x *TeamSuitInfo) GetShowWorth() int32 {
	if x != nil {
		return x.ShowWorth
	}
	return 0
}

func (x *TeamSuitInfo) GetUseLimitTime() int64 {
	if x != nil {
		return x.UseLimitTime
	}
	return 0
}

func (x *TeamSuitInfo) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *TeamSuitInfo) GetDynamicThumbnail() string {
	if x != nil {
		return x.DynamicThumbnail
	}
	return ""
}

func (x *TeamSuitInfo) GetBaseLevelId() int32 {
	if x != nil {
		return x.BaseLevelId
	}
	return 0
}

func (x *TeamSuitInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TeamSuitInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *TeamSuitInfo) GetHeadimgurl() string {
	if x != nil {
		return x.Headimgurl
	}
	return ""
}

func (x *TeamSuitInfo) GetUseTeam() []int32 {
	if x != nil {
		return x.UseTeam
	}
	return nil
}

func (x *TeamSuitInfo) GetHideShadow() int32 {
	if x != nil {
		return x.HideShadow
	}
	return 0
}

func (x *TeamSuitInfo) GetLeftUpIcon() string {
	if x != nil {
		return x.LeftUpIcon
	}
	return ""
}

func (x *TeamSuitInfo) GetCloseUp() int32 {
	if x != nil {
		return x.CloseUp
	}
	return 0
}

func (x *TeamSuitInfo) GetCloseUpScale() float32 {
	if x != nil {
		return x.CloseUpScale
	}
	return 0
}

func (x *TeamSuitInfo) GetBottomAnimType() int32 {
	if x != nil {
		return x.BottomAnimType
	}
	return 0
}

func (x *TeamSuitInfo) GetBottomAnimUrl() string {
	if x != nil {
		return x.BottomAnimUrl
	}
	return ""
}

func (x *TeamSuitInfo) GetEntranceAnimType() int32 {
	if x != nil {
		return x.EntranceAnimType
	}
	return 0
}

func (x *TeamSuitInfo) GetEntranceAnimUrl() string {
	if x != nil {
		return x.EntranceAnimUrl
	}
	return ""
}

func (x *TeamSuitInfo) GetRecentObtain() int32 {
	if x != nil {
		return x.RecentObtain
	}
	return 0
}

func (x *TeamSuitInfo) GetFeatureList() []*Feature {
	if x != nil {
		return x.FeatureList
	}
	return nil
}

func (x *TeamSuitInfo) GetGameInfoList() []*GameInfo {
	if x != nil {
		return x.GameInfoList
	}
	return nil
}

func (x *TeamSuitInfo) GetActJumpurl() string {
	if x != nil {
		return x.ActJumpurl
	}
	return ""
}

func (x *TeamSuitInfo) GetActStartTime() int64 {
	if x != nil {
		return x.ActStartTime
	}
	return 0
}

func (x *TeamSuitInfo) GetActEndTime() int64 {
	if x != nil {
		return x.ActEndTime
	}
	return 0
}

func (x *TeamSuitInfo) GetHasAssociated() bool {
	if x != nil {
		return x.HasAssociated
	}
	return false
}

func (x *TeamSuitInfo) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *TeamSuitInfo) GetWorth() int32 {
	if x != nil {
		return x.Worth
	}
	return 0
}

type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameIconUrl string `protobuf:"bytes,1,opt,name=game_icon_url,json=gameIconUrl,proto3" json:"game_icon_url,omitempty"` // 游戏内缩略图
	GameImgurl  string `protobuf:"bytes,2,opt,name=game_imgurl,json=gameImgurl,proto3" json:"game_imgurl,omitempty"`      // 全场最炫展示图片
	ColorId     int32  `protobuf:"varint,3,opt,name=color_id,json=colorId,proto3" json:"color_id,omitempty"`              //队服默认展示色系，商店内展示用，1:绿 2:红，3:黄
	GameInfoId  int32  `protobuf:"varint,4,opt,name=game_info_id,json=gameInfoId,proto3" json:"game_info_id,omitempty"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{69}
}

func (x *GameInfo) GetGameIconUrl() string {
	if x != nil {
		return x.GameIconUrl
	}
	return ""
}

func (x *GameInfo) GetGameImgurl() string {
	if x != nil {
		return x.GameImgurl
	}
	return ""
}

func (x *GameInfo) GetColorId() int32 {
	if x != nil {
		return x.ColorId
	}
	return 0
}

func (x *GameInfo) GetGameInfoId() int32 {
	if x != nil {
		return x.GameInfoId
	}
	return 0
}

type TitleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleList []*TitleModel `protobuf:"bytes,1,rep,name=title_list,json=titleList,proto3" json:"title_list,omitempty"`
}

func (x *TitleList) Reset() {
	*x = TitleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleList) ProtoMessage() {}

func (x *TitleList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleList.ProtoReflect.Descriptor instead.
func (*TitleList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{70}
}

func (x *TitleList) GetTitleList() []*TitleModel {
	if x != nil {
		return x.TitleList
	}
	return nil
}

// title start
type TitleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *TitleInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *TitleModel) Reset() {
	*x = TitleModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleModel) ProtoMessage() {}

func (x *TitleModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleModel.ProtoReflect.Descriptor instead.
func (*TitleModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{71}
}

func (x *TitleModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *TitleModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *TitleModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TitleModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *TitleModel) GetInfo() *TitleInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type TitleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseTime             int32  `protobuf:"varint,1,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
	AnimType            int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	Animate             string `protobuf:"bytes,3,opt,name=animate,proto3" json:"animate,omitempty"`
	HomeAnimate         string `protobuf:"bytes,4,opt,name=home_animate,json=homeAnimate,proto3" json:"home_animate,omitempty"`
	HomeAnimType        int32  `protobuf:"varint,5,opt,name=home_anim_type,json=homeAnimType,proto3" json:"home_anim_type,omitempty"`
	HomeLottieScaleType int32  `protobuf:"varint,6,opt,name=home_lottie_scale_type,json=homeLottieScaleType,proto3" json:"home_lottie_scale_type,omitempty"` //缩放方式
	StaticImgurl        string `protobuf:"bytes,7,opt,name=static_imgurl,json=staticImgurl,proto3" json:"static_imgurl,omitempty"`
	MailText            string `protobuf:"bytes,8,opt,name=mail_text,json=mailText,proto3" json:"mail_text,omitempty"`
}

func (x *TitleInfo) Reset() {
	*x = TitleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleInfo) ProtoMessage() {}

func (x *TitleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleInfo.ProtoReflect.Descriptor instead.
func (*TitleInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{72}
}

func (x *TitleInfo) GetUseTime() int32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *TitleInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *TitleInfo) GetAnimate() string {
	if x != nil {
		return x.Animate
	}
	return ""
}

func (x *TitleInfo) GetHomeAnimate() string {
	if x != nil {
		return x.HomeAnimate
	}
	return ""
}

func (x *TitleInfo) GetHomeAnimType() int32 {
	if x != nil {
		return x.HomeAnimType
	}
	return 0
}

func (x *TitleInfo) GetHomeLottieScaleType() int32 {
	if x != nil {
		return x.HomeLottieScaleType
	}
	return 0
}

func (x *TitleInfo) GetStaticImgurl() string {
	if x != nil {
		return x.StaticImgurl
	}
	return ""
}

func (x *TitleInfo) GetMailText() string {
	if x != nil {
		return x.MailText
	}
	return ""
}

type BroadCastEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadCastEffectList []*BroadcastEffectModel `protobuf:"bytes,1,rep,name=broad_cast_effect_list,json=broadCastEffectList,proto3" json:"broad_cast_effect_list,omitempty"`
}

func (x *BroadCastEffectList) Reset() {
	*x = BroadCastEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadCastEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadCastEffectList) ProtoMessage() {}

func (x *BroadCastEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadCastEffectList.ProtoReflect.Descriptor instead.
func (*BroadCastEffectList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{73}
}

func (x *BroadCastEffectList) GetBroadCastEffectList() []*BroadcastEffectModel {
	if x != nil {
		return x.BroadCastEffectList
	}
	return nil
}

// broadcastEffect start
type BroadcastEffectModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32                `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32                `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64                `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo           `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *BroadcastEffectInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *BroadcastEffectModel) Reset() {
	*x = BroadcastEffectModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastEffectModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastEffectModel) ProtoMessage() {}

func (x *BroadcastEffectModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastEffectModel.ProtoReflect.Descriptor instead.
func (*BroadcastEffectModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{74}
}

func (x *BroadcastEffectModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *BroadcastEffectModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *BroadcastEffectModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *BroadcastEffectModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *BroadcastEffectModel) GetInfo() *BroadcastEffectInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type BroadcastEffectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType  int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl   string `protobuf:"bytes,2,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	FontColor string `protobuf:"bytes,3,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	NameColor string `protobuf:"bytes,4,opt,name=name_color,json=nameColor,proto3" json:"name_color,omitempty"`
}

func (x *BroadcastEffectInfo) Reset() {
	*x = BroadcastEffectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastEffectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastEffectInfo) ProtoMessage() {}

func (x *BroadcastEffectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastEffectInfo.ProtoReflect.Descriptor instead.
func (*BroadcastEffectInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{75}
}

func (x *BroadcastEffectInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *BroadcastEffectInfo) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *BroadcastEffectInfo) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *BroadcastEffectInfo) GetNameColor() string {
	if x != nil {
		return x.NameColor
	}
	return ""
}

type GiftList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftList []*GiftModel `protobuf:"bytes,1,rep,name=gift_list,json=giftList,proto3" json:"gift_list,omitempty"`
}

func (x *GiftList) Reset() {
	*x = GiftList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftList) ProtoMessage() {}

func (x *GiftList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftList.ProtoReflect.Descriptor instead.
func (*GiftList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{76}
}

func (x *GiftList) GetGiftList() []*GiftModel {
	if x != nil {
		return x.GiftList
	}
	return nil
}

// gift start
type GiftModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *GiftInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GiftModel) Reset() {
	*x = GiftModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftModel) ProtoMessage() {}

func (x *GiftModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftModel.ProtoReflect.Descriptor instead.
func (*GiftModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{77}
}

func (x *GiftModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *GiftModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *GiftModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GiftModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *GiftModel) GetInfo() *GiftInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit              string              `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	CornerUrl         string              `protobuf:"bytes,2,opt,name=corner_url,json=cornerUrl,proto3" json:"corner_url,omitempty"`
	NumConfig         []*GiftNumberConfig `protobuf:"bytes,3,rep,name=num_config,json=numConfig,proto3" json:"num_config,omitempty"`
	NumList           []int32             `protobuf:"varint,4,rep,packed,name=num_list,json=numList,proto3" json:"num_list,omitempty"`
	WorldNumList      []int32             `protobuf:"varint,5,rep,packed,name=world_num_list,json=worldNumList,proto3" json:"world_num_list,omitempty"` // (空数组则不出现在世界频道送礼)
	Display           int32               `protobuf:"varint,6,opt,name=display,proto3" json:"display,omitempty"`                                        // 1显示，0不显示
	VoiceRoomHide     int32               `protobuf:"varint,7,opt,name=voice_room_hide,json=voiceRoomHide,proto3" json:"voice_room_hide,omitempty"`     // 语音房是否展示 1隐藏
	VoiceRoomAnim     int32               `protobuf:"varint,8,opt,name=voice_room_anim,json=voiceRoomAnim,proto3" json:"voice_room_anim,omitempty"`     // 语音房是否展示动画 1展示
	ActThumbnail      string              `protobuf:"bytes,9,opt,name=act_thumbnail,json=actThumbnail,proto3" json:"act_thumbnail,omitempty"`
	ActBannerImgurl   string              `protobuf:"bytes,10,opt,name=act_banner_imgurl,json=actBannerImgurl,proto3" json:"act_banner_imgurl,omitempty"`
	BannerLink        string              `protobuf:"bytes,11,opt,name=banner_link,json=bannerLink,proto3" json:"banner_link,omitempty"`
	ActStartTime      int64               `protobuf:"varint,12,opt,name=act_start_time,json=actStartTime,proto3" json:"act_start_time,omitempty"`
	ActEndTime        int64               `protobuf:"varint,13,opt,name=act_end_time,json=actEndTime,proto3" json:"act_end_time,omitempty"`
	WishMsgSwitch     int32               `protobuf:"varint,14,opt,name=wish_msg_switch,json=wishMsgSwitch,proto3" json:"wish_msg_switch,omitempty"`            //是否使用赠言，0或1
	GiftNameUrl       string              `protobuf:"bytes,15,opt,name=gift_name_url,json=giftNameUrl,proto3" json:"gift_name_url,omitempty"`                   //弹幕礼物图片icon url
	BarrageAnimType   int32               `protobuf:"varint,16,opt,name=barrage_anim_type,json=barrageAnimType,proto3" json:"barrage_anim_type,omitempty"`      // 弹幕动画类型，同通用动画类型一致
	BarrageAnimUrl    string              `protobuf:"bytes,17,opt,name=barrage_anim_url,json=barrageAnimUrl,proto3" json:"barrage_anim_url,omitempty"`          //弹幕动画链接
	BarrageFontColor  string              `protobuf:"bytes,18,opt,name=barrage_font_color,json=barrageFontColor,proto3" json:"barrage_font_color,omitempty"`    // 弹幕字体颜色，格式同气泡一致（#十六进制），例如：#EE6858
	BarrageAnimImgurl string              `protobuf:"bytes,19,opt,name=barrage_anim_imgurl,json=barrageAnimImgurl,proto3" json:"barrage_anim_imgurl,omitempty"` // 弹幕礼物低性能静态图
	UseLimitTime      int64               `protobuf:"varint,20,opt,name=use_limit_time,json=useLimitTime,proto3" json:"use_limit_time,omitempty"`
	TimeLimitGiftId   int32               `protobuf:"varint,21,opt,name=time_limit_gift_id,json=timeLimitGiftId,proto3" json:"time_limit_gift_id,omitempty"`    // 永久礼物对应的限时礼物id
	IsPrivilegeGift   bool                `protobuf:"varint,22,opt,name=is_privilege_gift,json=isPrivilegeGift,proto3" json:"is_privilege_gift,omitempty"`      // 是否魅力勋章特权礼物
	PhotoWallConfig   *PhotoWallConfig    `protobuf:"bytes,23,opt,name=photo_wall_config,json=photoWallConfig,proto3" json:"photo_wall_config,omitempty"`       // 照片花墙入口配置
	RecentObtain      int32               `protobuf:"varint,24,opt,name=recent_obtain,json=recentObtain,proto3" json:"recent_obtain,omitempty"`                 // 最近获得开关 0 关闭; 1打开
	FullScreenAnim    int32               `protobuf:"varint,25,opt,name=full_screen_anim,json=fullScreenAnim,proto3" json:"full_screen_anim,omitempty"`         // 全屏特性开关 0 关闭; 1打开
	HasMailReward     int32               `protobuf:"varint,26,opt,name=has_mail_reward,json=hasMailReward,proto3" json:"has_mail_reward,omitempty"`            // 附赠称号开关 0 关闭；1打开
	IllustrationIds   []int32             `protobuf:"varint,27,rep,packed,name=illustration_ids,json=illustrationIds,proto3" json:"illustration_ids,omitempty"` // 关联图鉴ids
	HasAssociated     bool                `protobuf:"varint,28,opt,name=has_associated,json=hasAssociated,proto3" json:"has_associated,omitempty"`              // 是否关联图鉴
	IllustrationUrl   string              `protobuf:"bytes,29,opt,name=illustration_url,json=illustrationUrl,proto3" json:"illustration_url,omitempty"`
	ForeverGiftId     int32               `protobuf:"varint,30,opt,name=forever_gift_id,json=foreverGiftId,proto3" json:"forever_gift_id,omitempty"` // 限时礼物对应永久礼物id
	GiftTabDesc       string              `protobuf:"bytes,31,opt,name=gift_tab_desc,json=giftTabDesc,proto3" json:"gift_tab_desc,omitempty"`
	ActShowStart      int64               `protobuf:"varint,32,opt,name=act_show_start,json=actShowStart,proto3" json:"act_show_start,omitempty"`
	ActShowEnd        int64               `protobuf:"varint,33,opt,name=act_show_end,json=actShowEnd,proto3" json:"act_show_end,omitempty"`
}

func (x *GiftInfo) Reset() {
	*x = GiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftInfo) ProtoMessage() {}

func (x *GiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftInfo.ProtoReflect.Descriptor instead.
func (*GiftInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{78}
}

func (x *GiftInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GiftInfo) GetCornerUrl() string {
	if x != nil {
		return x.CornerUrl
	}
	return ""
}

func (x *GiftInfo) GetNumConfig() []*GiftNumberConfig {
	if x != nil {
		return x.NumConfig
	}
	return nil
}

func (x *GiftInfo) GetNumList() []int32 {
	if x != nil {
		return x.NumList
	}
	return nil
}

func (x *GiftInfo) GetWorldNumList() []int32 {
	if x != nil {
		return x.WorldNumList
	}
	return nil
}

func (x *GiftInfo) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *GiftInfo) GetVoiceRoomHide() int32 {
	if x != nil {
		return x.VoiceRoomHide
	}
	return 0
}

func (x *GiftInfo) GetVoiceRoomAnim() int32 {
	if x != nil {
		return x.VoiceRoomAnim
	}
	return 0
}

func (x *GiftInfo) GetActThumbnail() string {
	if x != nil {
		return x.ActThumbnail
	}
	return ""
}

func (x *GiftInfo) GetActBannerImgurl() string {
	if x != nil {
		return x.ActBannerImgurl
	}
	return ""
}

func (x *GiftInfo) GetBannerLink() string {
	if x != nil {
		return x.BannerLink
	}
	return ""
}

func (x *GiftInfo) GetActStartTime() int64 {
	if x != nil {
		return x.ActStartTime
	}
	return 0
}

func (x *GiftInfo) GetActEndTime() int64 {
	if x != nil {
		return x.ActEndTime
	}
	return 0
}

func (x *GiftInfo) GetWishMsgSwitch() int32 {
	if x != nil {
		return x.WishMsgSwitch
	}
	return 0
}

func (x *GiftInfo) GetGiftNameUrl() string {
	if x != nil {
		return x.GiftNameUrl
	}
	return ""
}

func (x *GiftInfo) GetBarrageAnimType() int32 {
	if x != nil {
		return x.BarrageAnimType
	}
	return 0
}

func (x *GiftInfo) GetBarrageAnimUrl() string {
	if x != nil {
		return x.BarrageAnimUrl
	}
	return ""
}

func (x *GiftInfo) GetBarrageFontColor() string {
	if x != nil {
		return x.BarrageFontColor
	}
	return ""
}

func (x *GiftInfo) GetBarrageAnimImgurl() string {
	if x != nil {
		return x.BarrageAnimImgurl
	}
	return ""
}

func (x *GiftInfo) GetUseLimitTime() int64 {
	if x != nil {
		return x.UseLimitTime
	}
	return 0
}

func (x *GiftInfo) GetTimeLimitGiftId() int32 {
	if x != nil {
		return x.TimeLimitGiftId
	}
	return 0
}

func (x *GiftInfo) GetIsPrivilegeGift() bool {
	if x != nil {
		return x.IsPrivilegeGift
	}
	return false
}

func (x *GiftInfo) GetPhotoWallConfig() *PhotoWallConfig {
	if x != nil {
		return x.PhotoWallConfig
	}
	return nil
}

func (x *GiftInfo) GetRecentObtain() int32 {
	if x != nil {
		return x.RecentObtain
	}
	return 0
}

func (x *GiftInfo) GetFullScreenAnim() int32 {
	if x != nil {
		return x.FullScreenAnim
	}
	return 0
}

func (x *GiftInfo) GetHasMailReward() int32 {
	if x != nil {
		return x.HasMailReward
	}
	return 0
}

func (x *GiftInfo) GetIllustrationIds() []int32 {
	if x != nil {
		return x.IllustrationIds
	}
	return nil
}

func (x *GiftInfo) GetHasAssociated() bool {
	if x != nil {
		return x.HasAssociated
	}
	return false
}

func (x *GiftInfo) GetIllustrationUrl() string {
	if x != nil {
		return x.IllustrationUrl
	}
	return ""
}

func (x *GiftInfo) GetForeverGiftId() int32 {
	if x != nil {
		return x.ForeverGiftId
	}
	return 0
}

func (x *GiftInfo) GetGiftTabDesc() string {
	if x != nil {
		return x.GiftTabDesc
	}
	return ""
}

func (x *GiftInfo) GetActShowStart() int64 {
	if x != nil {
		return x.ActShowStart
	}
	return 0
}

func (x *GiftInfo) GetActShowEnd() int64 {
	if x != nil {
		return x.ActShowEnd
	}
	return 0
}

type GiftNumberConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num      int32           `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	TextList []string        `protobuf:"bytes,2,rep,name=text_list,json=textList,proto3" json:"text_list,omitempty"` // ['a', 'b'],  占位符{nickname} ,{imgurl}
	Charm    int32           `protobuf:"varint,3,opt,name=charm,proto3" json:"charm,omitempty"`
	Bless    int32           `protobuf:"varint,4,opt,name=bless,proto3" json:"bless,omitempty"`
	Anim     *GiftAnimConfig `protobuf:"bytes,5,opt,name=anim,proto3" json:"anim,omitempty"`
}

func (x *GiftNumberConfig) Reset() {
	*x = GiftNumberConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftNumberConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftNumberConfig) ProtoMessage() {}

func (x *GiftNumberConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftNumberConfig.ProtoReflect.Descriptor instead.
func (*GiftNumberConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{79}
}

func (x *GiftNumberConfig) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GiftNumberConfig) GetTextList() []string {
	if x != nil {
		return x.TextList
	}
	return nil
}

func (x *GiftNumberConfig) GetCharm() int32 {
	if x != nil {
		return x.Charm
	}
	return 0
}

func (x *GiftNumberConfig) GetBless() int32 {
	if x != nil {
		return x.Bless
	}
	return 0
}

func (x *GiftNumberConfig) GetAnim() *GiftAnimConfig {
	if x != nil {
		return x.Anim
	}
	return nil
}

type GiftAnimConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType2       int32   `protobuf:"varint,1,opt,name=anim_type2,json=animType2,proto3" json:"anim_type2,omitempty"` // 1--固定轨迹; 2--lottie json
	ImgUrl          string  `protobuf:"bytes,2,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`           // 固定轨迹图片地址
	LottieJsonUrl   string  `protobuf:"bytes,3,opt,name=lottie_json_url,json=lottieJsonUrl,proto3" json:"lottie_json_url,omitempty"`
	BgmUrl          string  `protobuf:"bytes,4,opt,name=bgm_url,json=bgmUrl,proto3" json:"bgm_url,omitempty"`
	LottieAnimSpeed float32 `protobuf:"fixed32,5,opt,name=lottie_anim_speed,json=lottieAnimSpeed,proto3" json:"lottie_anim_speed,omitempty"`
	LottieScaleType int32   `protobuf:"varint,6,opt,name=lottie_scale_type,json=lottieScaleType,proto3" json:"lottie_scale_type,omitempty"`
}

func (x *GiftAnimConfig) Reset() {
	*x = GiftAnimConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftAnimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftAnimConfig) ProtoMessage() {}

func (x *GiftAnimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftAnimConfig.ProtoReflect.Descriptor instead.
func (*GiftAnimConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{80}
}

func (x *GiftAnimConfig) GetAnimType2() int32 {
	if x != nil {
		return x.AnimType2
	}
	return 0
}

func (x *GiftAnimConfig) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *GiftAnimConfig) GetLottieJsonUrl() string {
	if x != nil {
		return x.LottieJsonUrl
	}
	return ""
}

func (x *GiftAnimConfig) GetBgmUrl() string {
	if x != nil {
		return x.BgmUrl
	}
	return ""
}

func (x *GiftAnimConfig) GetLottieAnimSpeed() float32 {
	if x != nil {
		return x.LottieAnimSpeed
	}
	return 0
}

func (x *GiftAnimConfig) GetLottieScaleType() int32 {
	if x != nil {
		return x.LottieScaleType
	}
	return 0
}

type PhotoWallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open      int32  `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"` // 入口开关，0：关闭，1：开启
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	EffectImg string `protobuf:"bytes,4,opt,name=effect_img,json=effectImg,proto3" json:"effect_img,omitempty"` // 入口样式
	AnimType  int32  `protobuf:"varint,5,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	AnimUrl   string `protobuf:"bytes,6,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
}

func (x *PhotoWallConfig) Reset() {
	*x = PhotoWallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWallConfig) ProtoMessage() {}

func (x *PhotoWallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWallConfig.ProtoReflect.Descriptor instead.
func (*PhotoWallConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{81}
}

func (x *PhotoWallConfig) GetOpen() int32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *PhotoWallConfig) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PhotoWallConfig) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PhotoWallConfig) GetEffectImg() string {
	if x != nil {
		return x.EffectImg
	}
	return ""
}

func (x *PhotoWallConfig) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *PhotoWallConfig) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

// card bag start
type CardBagModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32        `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32        `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64        `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo   `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *CardBagInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CardBagModel) Reset() {
	*x = CardBagModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBagModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBagModel) ProtoMessage() {}

func (x *CardBagModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBagModel.ProtoReflect.Descriptor instead.
func (*CardBagModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{82}
}

func (x *CardBagModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CardBagModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *CardBagModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CardBagModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *CardBagModel) GetInfo() *CardBagInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CardBagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	DiscountTimes  int32  `protobuf:"varint,2,opt,name=discount_times,json=discountTimes,proto3" json:"discount_times,omitempty"`
	AdTimes        int32  `protobuf:"varint,3,opt,name=ad_times,json=adTimes,proto3" json:"ad_times,omitempty"` // 有广告渠道是广告次数，无广告渠道是免费此时
	LuckyTimes     int32  `protobuf:"varint,4,opt,name=lucky_times,json=luckyTimes,proto3" json:"lucky_times,omitempty"`
	Version        int64  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Animation      string `protobuf:"bytes,6,opt,name=animation,proto3" json:"animation,omitempty"`
	AnimationFrame string `protobuf:"bytes,7,opt,name=animation_frame,json=animationFrame,proto3" json:"animation_frame,omitempty"`
	// repeated repeated MultiBuyPriceBean multi_buy_price = 8; proto 不支持这种 List<List<?>>嵌套结构，后续重新处理解析
	RareRewardList    []*RewardConfig `protobuf:"bytes,9,rep,name=rare_reward_list,json=rareRewardList,proto3" json:"rare_reward_list,omitempty"`
	GeneralRewardList []*RewardConfig `protobuf:"bytes,10,rep,name=general_reward_list,json=generalRewardList,proto3" json:"general_reward_list,omitempty"`
	SkinBaodi         int32           `protobuf:"varint,11,opt,name=skin_baodi,json=skinBaodi,proto3" json:"skin_baodi,omitempty"`      //皮肤保底，0：默认值，1：支持保底 4.3.12新增
	BaodiReward       *RewardConfig   `protobuf:"bytes,12,opt,name=baodi_reward,json=baodiReward,proto3" json:"baodi_reward,omitempty"` //通用奖励,无奖励时字段不存在每5次抽奖的奖励
}

func (x *CardBagInfo) Reset() {
	*x = CardBagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBagInfo) ProtoMessage() {}

func (x *CardBagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBagInfo.ProtoReflect.Descriptor instead.
func (*CardBagInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{83}
}

func (x *CardBagInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CardBagInfo) GetDiscountTimes() int32 {
	if x != nil {
		return x.DiscountTimes
	}
	return 0
}

func (x *CardBagInfo) GetAdTimes() int32 {
	if x != nil {
		return x.AdTimes
	}
	return 0
}

func (x *CardBagInfo) GetLuckyTimes() int32 {
	if x != nil {
		return x.LuckyTimes
	}
	return 0
}

func (x *CardBagInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CardBagInfo) GetAnimation() string {
	if x != nil {
		return x.Animation
	}
	return ""
}

func (x *CardBagInfo) GetAnimationFrame() string {
	if x != nil {
		return x.AnimationFrame
	}
	return ""
}

func (x *CardBagInfo) GetRareRewardList() []*RewardConfig {
	if x != nil {
		return x.RareRewardList
	}
	return nil
}

func (x *CardBagInfo) GetGeneralRewardList() []*RewardConfig {
	if x != nil {
		return x.GeneralRewardList
	}
	return nil
}

func (x *CardBagInfo) GetSkinBaodi() int32 {
	if x != nil {
		return x.SkinBaodi
	}
	return 0
}

func (x *CardBagInfo) GetBaodiReward() *RewardConfig {
	if x != nil {
		return x.BaodiReward
	}
	return nil
}

type MultiBuyPriceBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	CurrencyType int32 `protobuf:"varint,2,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`
	Price        int32 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *MultiBuyPriceBean) Reset() {
	*x = MultiBuyPriceBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiBuyPriceBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiBuyPriceBean) ProtoMessage() {}

func (x *MultiBuyPriceBean) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiBuyPriceBean.ProtoReflect.Descriptor instead.
func (*MultiBuyPriceBean) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{84}
}

func (x *MultiBuyPriceBean) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MultiBuyPriceBean) GetCurrencyType() int32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *MultiBuyPriceBean) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type PropList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropList []*PropModel `protobuf:"bytes,1,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty"`
}

func (x *PropList) Reset() {
	*x = PropList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropList) ProtoMessage() {}

func (x *PropList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropList.ProtoReflect.Descriptor instead.
func (*PropList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{85}
}

func (x *PropList) GetPropList() []*PropModel {
	if x != nil {
		return x.PropList
	}
	return nil
}

// prop start
type PropModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *PropInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *PropModel) Reset() {
	*x = PropModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropModel) ProtoMessage() {}

func (x *PropModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropModel.ProtoReflect.Descriptor instead.
func (*PropModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{86}
}

func (x *PropModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PropModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *PropModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *PropModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *PropModel) GetInfo() *PropInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type PropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseLimit      int32 `protobuf:"varint,1,opt,name=use_limit,json=useLimit,proto3" json:"use_limit,omitempty"`                //可以使用次数限制
	UseLimitation int32 `protobuf:"varint,2,opt,name=use_limitation,json=useLimitation,proto3" json:"use_limitation,omitempty"` // 使用时段种类 0：不限制，1:永久限购，2每日限制，3：每周限制
	UseLimitTime  int64 `protobuf:"varint,3,opt,name=use_limit_time,json=useLimitTime,proto3" json:"use_limit_time,omitempty"`  //-1为永久,否则使用期限(int 秒)
	PropType      int32 `protobuf:"varint,4,opt,name=prop_type,json=propType,proto3" json:"prop_type,omitempty"`
	// for 特殊道具属性
	Diamond      int32   `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`                               //红包里面要用来展示  含多少苹果
	ShareLimit   int32   `protobuf:"varint,6,opt,name=share_limit,json=shareLimit,proto3" json:"share_limit,omitempty"`       //房间容纳的人数 红包使用
	Effect       int32   `protobuf:"varint,7,opt,name=effect,proto3" json:"effect,omitempty"`                                 //对应show经验卡的增加值，返利券的比例，抵扣券的减少值；
	UseRange     []int32 `protobuf:"varint,8,rep,packed,name=use_range,json=useRange,proto3" json:"use_range,omitempty"`      //  抵扣券可用类型
	UseThreshold int32   `protobuf:"varint,9,opt,name=use_threshold,json=useThreshold,proto3" json:"use_threshold,omitempty"` // 抵扣券使用门槛
	Link         string  `protobuf:"bytes,10,opt,name=link,proto3" json:"link,omitempty"`
	PopupUrl     string  `protobuf:"bytes,11,opt,name=popup_url,json=popupUrl,proto3" json:"popup_url,omitempty"`
}

func (x *PropInfo) Reset() {
	*x = PropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropInfo) ProtoMessage() {}

func (x *PropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropInfo.ProtoReflect.Descriptor instead.
func (*PropInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{87}
}

func (x *PropInfo) GetUseLimit() int32 {
	if x != nil {
		return x.UseLimit
	}
	return 0
}

func (x *PropInfo) GetUseLimitation() int32 {
	if x != nil {
		return x.UseLimitation
	}
	return 0
}

func (x *PropInfo) GetUseLimitTime() int64 {
	if x != nil {
		return x.UseLimitTime
	}
	return 0
}

func (x *PropInfo) GetPropType() int32 {
	if x != nil {
		return x.PropType
	}
	return 0
}

func (x *PropInfo) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *PropInfo) GetShareLimit() int32 {
	if x != nil {
		return x.ShareLimit
	}
	return 0
}

func (x *PropInfo) GetEffect() int32 {
	if x != nil {
		return x.Effect
	}
	return 0
}

func (x *PropInfo) GetUseRange() []int32 {
	if x != nil {
		return x.UseRange
	}
	return nil
}

func (x *PropInfo) GetUseThreshold() int32 {
	if x != nil {
		return x.UseThreshold
	}
	return 0
}

func (x *PropInfo) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *PropInfo) GetPopupUrl() string {
	if x != nil {
		return x.PopupUrl
	}
	return ""
}

// vip start
type VipCardModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *VipInfo   `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *VipCardModel) Reset() {
	*x = VipCardModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipCardModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipCardModel) ProtoMessage() {}

func (x *VipCardModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipCardModel.ProtoReflect.Descriptor instead.
func (*VipCardModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{88}
}

func (x *VipCardModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *VipCardModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *VipCardModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VipCardModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *VipCardModel) GetInfo() *VipInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type VipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceUrl         string `protobuf:"bytes,1,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	BgImgurl            string `protobuf:"bytes,2,opt,name=bg_imgurl,json=bgImgurl,proto3" json:"bg_imgurl,omitempty"`
	UseTime             int32  `protobuf:"varint,3,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
	Type                int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	AnimationFrame      string `protobuf:"bytes,5,opt,name=animation_frame,json=animationFrame,proto3" json:"animation_frame,omitempty"`
	PurchaseTips        string `protobuf:"bytes,6,opt,name=purchase_tips,json=purchaseTips,proto3" json:"purchase_tips,omitempty"`
	PurchaseSuccessTips string `protobuf:"bytes,7,opt,name=purchase_success_tips,json=purchaseSuccessTips,proto3" json:"purchase_success_tips,omitempty"`
}

func (x *VipInfo) Reset() {
	*x = VipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipInfo) ProtoMessage() {}

func (x *VipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipInfo.ProtoReflect.Descriptor instead.
func (*VipInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{89}
}

func (x *VipInfo) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *VipInfo) GetBgImgurl() string {
	if x != nil {
		return x.BgImgurl
	}
	return ""
}

func (x *VipInfo) GetUseTime() int32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *VipInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VipInfo) GetAnimationFrame() string {
	if x != nil {
		return x.AnimationFrame
	}
	return ""
}

func (x *VipInfo) GetPurchaseTips() string {
	if x != nil {
		return x.PurchaseTips
	}
	return ""
}

func (x *VipInfo) GetPurchaseSuccessTips() string {
	if x != nil {
		return x.PurchaseSuccessTips
	}
	return ""
}

type ChatBubbleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatBubbleList []*ChatBubbleModel `protobuf:"bytes,1,rep,name=chat_bubble_list,json=chatBubbleList,proto3" json:"chat_bubble_list,omitempty"`
}

func (x *ChatBubbleList) Reset() {
	*x = ChatBubbleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBubbleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBubbleList) ProtoMessage() {}

func (x *ChatBubbleList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBubbleList.ProtoReflect.Descriptor instead.
func (*ChatBubbleList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{90}
}

func (x *ChatBubbleList) GetChatBubbleList() []*ChatBubbleModel {
	if x != nil {
		return x.ChatBubbleList
	}
	return nil
}

// chat bubble start
type ChatBubbleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32           `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32           `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64           `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo      `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *ChatBubbleInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ChatBubbleModel) Reset() {
	*x = ChatBubbleModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBubbleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBubbleModel) ProtoMessage() {}

func (x *ChatBubbleModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBubbleModel.ProtoReflect.Descriptor instead.
func (*ChatBubbleModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{91}
}

func (x *ChatBubbleModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ChatBubbleModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ChatBubbleModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ChatBubbleModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *ChatBubbleModel) GetInfo() *ChatBubbleInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ChatBubbleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimType        int32  `protobuf:"varint,1,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	LeftImgurl      string `protobuf:"bytes,2,opt,name=left_imgurl,json=leftImgurl,proto3" json:"left_imgurl,omitempty"`
	RightImgurl     string `protobuf:"bytes,3,opt,name=right_imgurl,json=rightImgurl,proto3" json:"right_imgurl,omitempty"`
	LeftColor       string `protobuf:"bytes,4,opt,name=left_color,json=leftColor,proto3" json:"left_color,omitempty"`
	RightColor      string `protobuf:"bytes,5,opt,name=right_color,json=rightColor,proto3" json:"right_color,omitempty"`
	LeftFocusColor  string `protobuf:"bytes,6,opt,name=left_focus_color,json=leftFocusColor,proto3" json:"left_focus_color,omitempty"`
	RightFocusColor string `protobuf:"bytes,7,opt,name=right_focus_color,json=rightFocusColor,proto3" json:"right_focus_color,omitempty"`
	VoiceRoomColor  string `protobuf:"bytes,8,opt,name=voice_room_color,json=voiceRoomColor,proto3" json:"voice_room_color,omitempty"` // 语音房颜色，没有的用原配置
}

func (x *ChatBubbleInfo) Reset() {
	*x = ChatBubbleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBubbleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBubbleInfo) ProtoMessage() {}

func (x *ChatBubbleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBubbleInfo.ProtoReflect.Descriptor instead.
func (*ChatBubbleInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{92}
}

func (x *ChatBubbleInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *ChatBubbleInfo) GetLeftImgurl() string {
	if x != nil {
		return x.LeftImgurl
	}
	return ""
}

func (x *ChatBubbleInfo) GetRightImgurl() string {
	if x != nil {
		return x.RightImgurl
	}
	return ""
}

func (x *ChatBubbleInfo) GetLeftColor() string {
	if x != nil {
		return x.LeftColor
	}
	return ""
}

func (x *ChatBubbleInfo) GetRightColor() string {
	if x != nil {
		return x.RightColor
	}
	return ""
}

func (x *ChatBubbleInfo) GetLeftFocusColor() string {
	if x != nil {
		return x.LeftFocusColor
	}
	return ""
}

func (x *ChatBubbleInfo) GetRightFocusColor() string {
	if x != nil {
		return x.RightFocusColor
	}
	return ""
}

func (x *ChatBubbleInfo) GetVoiceRoomColor() string {
	if x != nil {
		return x.VoiceRoomColor
	}
	return ""
}

type GamePropList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePropList []*GamePropModel `protobuf:"bytes,1,rep,name=game_prop_list,json=gamePropList,proto3" json:"game_prop_list,omitempty"`
}

func (x *GamePropList) Reset() {
	*x = GamePropList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePropList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePropList) ProtoMessage() {}

func (x *GamePropList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePropList.ProtoReflect.Descriptor instead.
func (*GamePropList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{93}
}

func (x *GamePropList) GetGamePropList() []*GamePropModel {
	if x != nil {
		return x.GamePropList
	}
	return nil
}

// game prop start
type GamePropModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32         `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32         `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64         `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo    `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *GamePropInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GamePropModel) Reset() {
	*x = GamePropModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePropModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePropModel) ProtoMessage() {}

func (x *GamePropModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePropModel.ProtoReflect.Descriptor instead.
func (*GamePropModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{94}
}

func (x *GamePropModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *GamePropModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *GamePropModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GamePropModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *GamePropModel) GetInfo() *GamePropInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GamePropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropType  int32         `protobuf:"varint,1,opt,name=prop_type,json=propType,proto3" json:"prop_type,omitempty"`
	GameMode  int32         `protobuf:"varint,2,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	LongDesc  string        `protobuf:"bytes,3,opt,name=long_desc,json=longDesc,proto3" json:"long_desc,omitempty"`
	Attribute *GamePropAttr `protobuf:"bytes,4,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *GamePropInfo) Reset() {
	*x = GamePropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePropInfo) ProtoMessage() {}

func (x *GamePropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePropInfo.ProtoReflect.Descriptor instead.
func (*GamePropInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{95}
}

func (x *GamePropInfo) GetPropType() int32 {
	if x != nil {
		return x.PropType
	}
	return 0
}

func (x *GamePropInfo) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *GamePropInfo) GetLongDesc() string {
	if x != nil {
		return x.LongDesc
	}
	return ""
}

func (x *GamePropInfo) GetAttribute() *GamePropAttr {
	if x != nil {
		return x.Attribute
	}
	return nil
}

type GamePropAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUseLimit      int32   `protobuf:"varint,1,opt,name=game_use_limit,json=gameUseLimit,proto3" json:"game_use_limit,omitempty"`               //试用限制 1. <=0 无限制  2. >0当局使用限制次数
	Gains             float32 `protobuf:"fixed32,2,opt,name=gains,proto3" json:"gains,omitempty"`                                                  //身体上的直接收益
	EffectiveDuration float32 `protobuf:"fixed32,3,opt,name=effective_duration,json=effectiveDuration,proto3" json:"effective_duration,omitempty"` //道具效果的持续时间
	CoolingDuration   float32 `protobuf:"fixed32,4,opt,name=cooling_duration,json=coolingDuration,proto3" json:"cooling_duration,omitempty"`       //冷却时间
	GainsDesc         string  `protobuf:"bytes,5,opt,name=gains_desc,json=gainsDesc,proto3" json:"gains_desc,omitempty"`                           //收益提示
	DelayTip          string  `protobuf:"bytes,6,opt,name=delay_tip,json=delayTip,proto3" json:"delay_tip,omitempty"`                              //技能延迟释放的提示
	DelayDuration     float32 `protobuf:"fixed32,7,opt,name=delay_duration,json=delayDuration,proto3" json:"delay_duration,omitempty"`             //技能延迟释放时间
}

func (x *GamePropAttr) Reset() {
	*x = GamePropAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePropAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePropAttr) ProtoMessage() {}

func (x *GamePropAttr) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePropAttr.ProtoReflect.Descriptor instead.
func (*GamePropAttr) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{96}
}

func (x *GamePropAttr) GetGameUseLimit() int32 {
	if x != nil {
		return x.GameUseLimit
	}
	return 0
}

func (x *GamePropAttr) GetGains() float32 {
	if x != nil {
		return x.Gains
	}
	return 0
}

func (x *GamePropAttr) GetEffectiveDuration() float32 {
	if x != nil {
		return x.EffectiveDuration
	}
	return 0
}

func (x *GamePropAttr) GetCoolingDuration() float32 {
	if x != nil {
		return x.CoolingDuration
	}
	return 0
}

func (x *GamePropAttr) GetGainsDesc() string {
	if x != nil {
		return x.GainsDesc
	}
	return ""
}

func (x *GamePropAttr) GetDelayTip() string {
	if x != nil {
		return x.DelayTip
	}
	return ""
}

func (x *GamePropAttr) GetDelayDuration() float32 {
	if x != nil {
		return x.DelayDuration
	}
	return 0
}

type RoomBackgroundList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomBackGroundList []*RoomBackgroundModel `protobuf:"bytes,1,rep,name=room_back_ground_list,json=roomBackGroundList,proto3" json:"room_back_ground_list,omitempty"`
}

func (x *RoomBackgroundList) Reset() {
	*x = RoomBackgroundList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBackgroundList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBackgroundList) ProtoMessage() {}

func (x *RoomBackgroundList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBackgroundList.ProtoReflect.Descriptor instead.
func (*RoomBackgroundList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{97}
}

func (x *RoomBackgroundList) GetRoomBackGroundList() []*RoomBackgroundModel {
	if x != nil {
		return x.RoomBackGroundList
	}
	return nil
}

// room bg start
type RoomBackgroundModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32               `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32               `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64               `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo          `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *RoomBackgroundInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RoomBackgroundModel) Reset() {
	*x = RoomBackgroundModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBackgroundModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBackgroundModel) ProtoMessage() {}

func (x *RoomBackgroundModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBackgroundModel.ProtoReflect.Descriptor instead.
func (*RoomBackgroundModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{98}
}

func (x *RoomBackgroundModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *RoomBackgroundModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *RoomBackgroundModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *RoomBackgroundModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *RoomBackgroundModel) GetInfo() *RoomBackgroundInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RoomBackgroundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level               int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                                                   // 休闲区资源等级
	DynamicPreviewUrl   string `protobuf:"bytes,2,opt,name=dynamic_preview_url,json=dynamicPreviewUrl,proto3" json:"dynamic_preview_url,omitempty"` // 预览资源
	DynamicAnimType     int32  `protobuf:"varint,3,opt,name=dynamic_anim_type,json=dynamicAnimType,proto3" json:"dynamic_anim_type,omitempty"`      // 预览动画类型
	PackThumbnailUrl    string `protobuf:"bytes,4,opt,name=pack_thumbnail_url,json=packThumbnailUrl,proto3" json:"pack_thumbnail_url,omitempty"`
	NickNameColor       string `protobuf:"bytes,5,opt,name=nick_name_color,json=nickNameColor,proto3" json:"nick_name_color,omitempty"`
	SignColor           string `protobuf:"bytes,6,opt,name=sign_color,json=signColor,proto3" json:"sign_color,omitempty"`
	SignBackGroundColor string `protobuf:"bytes,7,opt,name=sign_back_ground_color,json=signBackGroundColor,proto3" json:"sign_back_ground_color,omitempty"`
	EnterTip            string `protobuf:"bytes,8,opt,name=enter_tip,json=enterTip,proto3" json:"enter_tip,omitempty"`
	EnterAnimType       int32  `protobuf:"varint,9,opt,name=enter_anim_type,json=enterAnimType,proto3" json:"enter_anim_type,omitempty"`
	BigEnterEffectUrl   string `protobuf:"bytes,10,opt,name=big_enter_effect_url,json=bigEnterEffectUrl,proto3" json:"big_enter_effect_url,omitempty"`
	BigEnterAnimType    int32  `protobuf:"varint,11,opt,name=big_enter_anim_type,json=bigEnterAnimType,proto3" json:"big_enter_anim_type,omitempty"`
}

func (x *RoomBackgroundInfo) Reset() {
	*x = RoomBackgroundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBackgroundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBackgroundInfo) ProtoMessage() {}

func (x *RoomBackgroundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBackgroundInfo.ProtoReflect.Descriptor instead.
func (*RoomBackgroundInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{99}
}

func (x *RoomBackgroundInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RoomBackgroundInfo) GetDynamicPreviewUrl() string {
	if x != nil {
		return x.DynamicPreviewUrl
	}
	return ""
}

func (x *RoomBackgroundInfo) GetDynamicAnimType() int32 {
	if x != nil {
		return x.DynamicAnimType
	}
	return 0
}

func (x *RoomBackgroundInfo) GetPackThumbnailUrl() string {
	if x != nil {
		return x.PackThumbnailUrl
	}
	return ""
}

func (x *RoomBackgroundInfo) GetNickNameColor() string {
	if x != nil {
		return x.NickNameColor
	}
	return ""
}

func (x *RoomBackgroundInfo) GetSignColor() string {
	if x != nil {
		return x.SignColor
	}
	return ""
}

func (x *RoomBackgroundInfo) GetSignBackGroundColor() string {
	if x != nil {
		return x.SignBackGroundColor
	}
	return ""
}

func (x *RoomBackgroundInfo) GetEnterTip() string {
	if x != nil {
		return x.EnterTip
	}
	return ""
}

func (x *RoomBackgroundInfo) GetEnterAnimType() int32 {
	if x != nil {
		return x.EnterAnimType
	}
	return 0
}

func (x *RoomBackgroundInfo) GetBigEnterEffectUrl() string {
	if x != nil {
		return x.BigEnterEffectUrl
	}
	return ""
}

func (x *RoomBackgroundInfo) GetBigEnterAnimType() int32 {
	if x != nil {
		return x.BigEnterAnimType
	}
	return 0
}

type CardUserInfoBgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardUserInfoBgList []*CardUserInfoBgModel `protobuf:"bytes,1,rep,name=card_user_info_bg_list,json=cardUserInfoBgList,proto3" json:"card_user_info_bg_list,omitempty"`
}

func (x *CardUserInfoBgList) Reset() {
	*x = CardUserInfoBgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardUserInfoBgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardUserInfoBgList) ProtoMessage() {}

func (x *CardUserInfoBgList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardUserInfoBgList.ProtoReflect.Descriptor instead.
func (*CardUserInfoBgList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{100}
}

func (x *CardUserInfoBgList) GetCardUserInfoBgList() []*CardUserInfoBgModel {
	if x != nil {
		return x.CardUserInfoBgList
	}
	return nil
}

// card user info bg start
type CardUserInfoBgModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32               `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32               `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64               `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo          `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *CardUserInfoBgInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CardUserInfoBgModel) Reset() {
	*x = CardUserInfoBgModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardUserInfoBgModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardUserInfoBgModel) ProtoMessage() {}

func (x *CardUserInfoBgModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardUserInfoBgModel.ProtoReflect.Descriptor instead.
func (*CardUserInfoBgModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{101}
}

func (x *CardUserInfoBgModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CardUserInfoBgModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *CardUserInfoBgModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CardUserInfoBgModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *CardUserInfoBgModel) GetInfo() *CardUserInfoBgInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CardUserInfoBgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level               int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"` // 休闲区资源等级
	NickNameColor       string `protobuf:"bytes,2,opt,name=nick_name_color,json=nickNameColor,proto3" json:"nick_name_color,omitempty"`
	SignColor           string `protobuf:"bytes,3,opt,name=sign_color,json=signColor,proto3" json:"sign_color,omitempty"`
	SignBackgroudColor  string `protobuf:"bytes,4,opt,name=sign_backgroud_color,json=signBackgroudColor,proto3" json:"sign_backgroud_color,omitempty"`
	DynamicPreviewUrl   string `protobuf:"bytes,5,opt,name=dynamic_preview_url,json=dynamicPreviewUrl,proto3" json:"dynamic_preview_url,omitempty"`
	DynamicAnimType     int32  `protobuf:"varint,6,opt,name=dynamic_anim_type,json=dynamicAnimType,proto3" json:"dynamic_anim_type,omitempty"`
	PackThumbnailUrl    string `protobuf:"bytes,7,opt,name=pack_thumbnail_url,json=packThumbnailUrl,proto3" json:"pack_thumbnail_url,omitempty"`
	SignBackGroundColor string `protobuf:"bytes,8,opt,name=sign_back_ground_color,json=signBackGroundColor,proto3" json:"sign_back_ground_color,omitempty"`
	EnterTip            string `protobuf:"bytes,9,opt,name=enter_tip,json=enterTip,proto3" json:"enter_tip,omitempty"`
	EnterAnimType       int32  `protobuf:"varint,10,opt,name=enter_anim_type,json=enterAnimType,proto3" json:"enter_anim_type,omitempty"`
	BigEnterEffectUrl   string `protobuf:"bytes,11,opt,name=big_enter_effect_url,json=bigEnterEffectUrl,proto3" json:"big_enter_effect_url,omitempty"`
	BigEnterAnimType    int32  `protobuf:"varint,12,opt,name=big_enter_anim_type,json=bigEnterAnimType,proto3" json:"big_enter_anim_type,omitempty"`
}

func (x *CardUserInfoBgInfo) Reset() {
	*x = CardUserInfoBgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardUserInfoBgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardUserInfoBgInfo) ProtoMessage() {}

func (x *CardUserInfoBgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardUserInfoBgInfo.ProtoReflect.Descriptor instead.
func (*CardUserInfoBgInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{102}
}

func (x *CardUserInfoBgInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CardUserInfoBgInfo) GetNickNameColor() string {
	if x != nil {
		return x.NickNameColor
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetSignColor() string {
	if x != nil {
		return x.SignColor
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetSignBackgroudColor() string {
	if x != nil {
		return x.SignBackgroudColor
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetDynamicPreviewUrl() string {
	if x != nil {
		return x.DynamicPreviewUrl
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetDynamicAnimType() int32 {
	if x != nil {
		return x.DynamicAnimType
	}
	return 0
}

func (x *CardUserInfoBgInfo) GetPackThumbnailUrl() string {
	if x != nil {
		return x.PackThumbnailUrl
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetSignBackGroundColor() string {
	if x != nil {
		return x.SignBackGroundColor
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetEnterTip() string {
	if x != nil {
		return x.EnterTip
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetEnterAnimType() int32 {
	if x != nil {
		return x.EnterAnimType
	}
	return 0
}

func (x *CardUserInfoBgInfo) GetBigEnterEffectUrl() string {
	if x != nil {
		return x.BigEnterEffectUrl
	}
	return ""
}

func (x *CardUserInfoBgInfo) GetBigEnterAnimType() int32 {
	if x != nil {
		return x.BigEnterAnimType
	}
	return 0
}

type RoomEnterEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomEnterEffectList []*RoomEnterEffectModel `protobuf:"bytes,1,rep,name=room_enter_effect_list,json=roomEnterEffectList,proto3" json:"room_enter_effect_list,omitempty"`
}

func (x *RoomEnterEffectList) Reset() {
	*x = RoomEnterEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomEnterEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEnterEffectList) ProtoMessage() {}

func (x *RoomEnterEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEnterEffectList.ProtoReflect.Descriptor instead.
func (*RoomEnterEffectList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{103}
}

func (x *RoomEnterEffectList) GetRoomEnterEffectList() []*RoomEnterEffectModel {
	if x != nil {
		return x.RoomEnterEffectList
	}
	return nil
}

// card user info bg start
type RoomEnterEffectModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32                `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32                `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64                `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo           `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *RoomEnterEffectInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RoomEnterEffectModel) Reset() {
	*x = RoomEnterEffectModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomEnterEffectModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEnterEffectModel) ProtoMessage() {}

func (x *RoomEnterEffectModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEnterEffectModel.ProtoReflect.Descriptor instead.
func (*RoomEnterEffectModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{104}
}

func (x *RoomEnterEffectModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *RoomEnterEffectModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *RoomEnterEffectModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *RoomEnterEffectModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *RoomEnterEffectModel) GetInfo() *RoomEnterEffectInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RoomEnterEffectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level               int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"` // 休闲区资源等级
	BigEnterEffectUrl   string `protobuf:"bytes,2,opt,name=big_enter_effect_url,json=bigEnterEffectUrl,proto3" json:"big_enter_effect_url,omitempty"`
	BigEnterAnimType    int32  `protobuf:"varint,3,opt,name=big_enter_anim_type,json=bigEnterAnimType,proto3" json:"big_enter_anim_type,omitempty"`
	EnterTip            string `protobuf:"bytes,4,opt,name=enter_tip,json=enterTip,proto3" json:"enter_tip,omitempty"`
	EnterEffectUrl      string `protobuf:"bytes,5,opt,name=enter_effect_url,json=enterEffectUrl,proto3" json:"enter_effect_url,omitempty"`
	EnterAnimType       int32  `protobuf:"varint,6,opt,name=enter_anim_type,json=enterAnimType,proto3" json:"enter_anim_type,omitempty"`
	DynamicPreviewUrl   string `protobuf:"bytes,7,opt,name=dynamic_preview_url,json=dynamicPreviewUrl,proto3" json:"dynamic_preview_url,omitempty"` // 预览资源
	DynamicAnimType     int32  `protobuf:"varint,8,opt,name=dynamic_anim_type,json=dynamicAnimType,proto3" json:"dynamic_anim_type,omitempty"`      // 预览动画类型
	PackThumbnailUrl    string `protobuf:"bytes,9,opt,name=pack_thumbnail_url,json=packThumbnailUrl,proto3" json:"pack_thumbnail_url,omitempty"`
	NickNameColor       string `protobuf:"bytes,10,opt,name=nick_name_color,json=nickNameColor,proto3" json:"nick_name_color,omitempty"`
	SignColor           string `protobuf:"bytes,11,opt,name=sign_color,json=signColor,proto3" json:"sign_color,omitempty"`
	SignBackGroundColor string `protobuf:"bytes,12,opt,name=sign_back_ground_color,json=signBackGroundColor,proto3" json:"sign_back_ground_color,omitempty"`
}

func (x *RoomEnterEffectInfo) Reset() {
	*x = RoomEnterEffectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomEnterEffectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEnterEffectInfo) ProtoMessage() {}

func (x *RoomEnterEffectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEnterEffectInfo.ProtoReflect.Descriptor instead.
func (*RoomEnterEffectInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{105}
}

func (x *RoomEnterEffectInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RoomEnterEffectInfo) GetBigEnterEffectUrl() string {
	if x != nil {
		return x.BigEnterEffectUrl
	}
	return ""
}

func (x *RoomEnterEffectInfo) GetBigEnterAnimType() int32 {
	if x != nil {
		return x.BigEnterAnimType
	}
	return 0
}

func (x *RoomEnterEffectInfo) GetEnterTip() string {
	if x != nil {
		return x.EnterTip
	}
	return ""
}

func (x *RoomEnterEffectInfo) GetEnterEffectUrl() string {
	if x != nil {
		return x.EnterEffectUrl
	}
	return ""
}

func (x *RoomEnterEffectInfo) GetEnterAnimType() int32 {
	if x != nil {
		return x.EnterAnimType
	}
	return 0
}

func (x *RoomEnterEffectInfo) GetDynamicPreviewUrl() string {
	if x != nil {
		return x.DynamicPreviewUrl
	}
	return ""
}

func (x *RoomEnterEffectInfo) GetDynamicAnimType() int32 {
	if x != nil {
		return x.DynamicAnimType
	}
	return 0
}

func (x *RoomEnterEffectInfo) GetPackThumbnailUrl() string {
	if x != nil {
		return x.PackThumbnailUrl
	}
	return ""
}

func (x *RoomEnterEffectInfo) GetNickNameColor() string {
	if x != nil {
		return x.NickNameColor
	}
	return ""
}

func (x *RoomEnterEffectInfo) GetSignColor() string {
	if x != nil {
		return x.SignColor
	}
	return ""
}

func (x *RoomEnterEffectInfo) GetSignBackGroundColor() string {
	if x != nil {
		return x.SignBackGroundColor
	}
	return ""
}

type HomepageDecorateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomepageDecorateList []*HomepageDecorateModel `protobuf:"bytes,1,rep,name=homepage_decorate_list,json=homepageDecorateList,proto3" json:"homepage_decorate_list,omitempty"`
}

func (x *HomepageDecorateList) Reset() {
	*x = HomepageDecorateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepageDecorateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepageDecorateList) ProtoMessage() {}

func (x *HomepageDecorateList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepageDecorateList.ProtoReflect.Descriptor instead.
func (*HomepageDecorateList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{106}
}

func (x *HomepageDecorateList) GetHomepageDecorateList() []*HomepageDecorateModel {
	if x != nil {
		return x.HomepageDecorateList
	}
	return nil
}

// home decorate start
type HomepageDecorateModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32                 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32                 `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64                 `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo            `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *HomepageDecorateInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *HomepageDecorateModel) Reset() {
	*x = HomepageDecorateModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepageDecorateModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepageDecorateModel) ProtoMessage() {}

func (x *HomepageDecorateModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepageDecorateModel.ProtoReflect.Descriptor instead.
func (*HomepageDecorateModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{107}
}

func (x *HomepageDecorateModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *HomepageDecorateModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *HomepageDecorateModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *HomepageDecorateModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *HomepageDecorateModel) GetInfo() *HomepageDecorateInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type HomepageDecorateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimUrl         string `protobuf:"bytes,1,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType        int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	ScaleType       int32  `protobuf:"varint,3,opt,name=scale_type,json=scaleType,proto3" json:"scale_type,omitempty"`
	LottieScaleType int32  `protobuf:"varint,4,opt,name=lottie_scale_type,json=lottieScaleType,proto3" json:"lottie_scale_type,omitempty"`
	FontColor       string `protobuf:"bytes,5,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
}

func (x *HomepageDecorateInfo) Reset() {
	*x = HomepageDecorateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepageDecorateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepageDecorateInfo) ProtoMessage() {}

func (x *HomepageDecorateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepageDecorateInfo.ProtoReflect.Descriptor instead.
func (*HomepageDecorateInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{108}
}

func (x *HomepageDecorateInfo) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *HomepageDecorateInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *HomepageDecorateInfo) GetScaleType() int32 {
	if x != nil {
		return x.ScaleType
	}
	return 0
}

func (x *HomepageDecorateInfo) GetLottieScaleType() int32 {
	if x != nil {
		return x.LottieScaleType
	}
	return 0
}

func (x *HomepageDecorateInfo) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

type HomepageOpenList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomepageOpenList []*HomepageOpenModel `protobuf:"bytes,1,rep,name=homepage_open_list,json=homepageOpenList,proto3" json:"homepage_open_list,omitempty"`
}

func (x *HomepageOpenList) Reset() {
	*x = HomepageOpenList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepageOpenList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepageOpenList) ProtoMessage() {}

func (x *HomepageOpenList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepageOpenList.ProtoReflect.Descriptor instead.
func (*HomepageOpenList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{109}
}

func (x *HomepageOpenList) GetHomepageOpenList() []*HomepageOpenModel {
	if x != nil {
		return x.HomepageOpenList
	}
	return nil
}

// home open start
type HomepageOpenModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32             `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32             `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64             `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo        `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *HomepageOpenInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *HomepageOpenModel) Reset() {
	*x = HomepageOpenModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepageOpenModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepageOpenModel) ProtoMessage() {}

func (x *HomepageOpenModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepageOpenModel.ProtoReflect.Descriptor instead.
func (*HomepageOpenModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{110}
}

func (x *HomepageOpenModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *HomepageOpenModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *HomepageOpenModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *HomepageOpenModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *HomepageOpenModel) GetInfo() *HomepageOpenInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type HomepageOpenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimUrl   string `protobuf:"bytes,1,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType  int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	ScaleType int32  `protobuf:"varint,3,opt,name=scale_type,json=scaleType,proto3" json:"scale_type,omitempty"`
}

func (x *HomepageOpenInfo) Reset() {
	*x = HomepageOpenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepageOpenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepageOpenInfo) ProtoMessage() {}

func (x *HomepageOpenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepageOpenInfo.ProtoReflect.Descriptor instead.
func (*HomepageOpenInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{111}
}

func (x *HomepageOpenInfo) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *HomepageOpenInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *HomepageOpenInfo) GetScaleType() int32 {
	if x != nil {
		return x.ScaleType
	}
	return 0
}

type ChestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChestList []*ChestModel `protobuf:"bytes,1,rep,name=chest_list,json=chestList,proto3" json:"chest_list,omitempty"`
}

func (x *ChestList) Reset() {
	*x = ChestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChestList) ProtoMessage() {}

func (x *ChestList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChestList.ProtoReflect.Descriptor instead.
func (*ChestList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{112}
}

func (x *ChestList) GetChestList() []*ChestModel {
	if x != nil {
		return x.ChestList
	}
	return nil
}

// chest start
type ChestModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32      `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64      `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *ChestInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ChestModel) Reset() {
	*x = ChestModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChestModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChestModel) ProtoMessage() {}

func (x *ChestModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChestModel.ProtoReflect.Descriptor instead.
func (*ChestModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{113}
}

func (x *ChestModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ChestModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ChestModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ChestModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *ChestModel) GetInfo() *ChestInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ChestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChestType        int32                  `protobuf:"varint,1,opt,name=chest_type,json=chestType,proto3" json:"chest_type,omitempty"`                  // 宝箱类型
	EffectDay        int32                  `protobuf:"varint,2,opt,name=effect_day,json=effectDay,proto3" json:"effect_day,omitempty"`                  // 有效天数
	MaterialRewards  []*ChestRewardInfo     `protobuf:"bytes,3,rep,name=material_rewards,json=materialRewards,proto3" json:"material_rewards,omitempty"` // 实物奖励
	MustRewards      []*ChestRewardInfo     `protobuf:"bytes,4,rep,name=must_rewards,json=mustRewards,proto3" json:"must_rewards,omitempty"`             // 必得奖励
	RandRewards      []*ChestRewardInfo     `protobuf:"bytes,5,rep,name=rand_rewards,json=randRewards,proto3" json:"rand_rewards,omitempty"`             // 随机奖励
	SelectRewards    []*ChestRewardInfo     `protobuf:"bytes,6,rep,name=select_rewards,json=selectRewards,proto3" json:"select_rewards,omitempty"`       // 自选奖励
	ProbabilityText  string                 `protobuf:"bytes,7,opt,name=probability_text,json=probabilityText,proto3" json:"probability_text,omitempty"` //概率公式
	MaterialOpenArgs string                 `protobuf:"bytes,8,opt,name=material_open_args,json=materialOpenArgs,proto3" json:"material_open_args,omitempty"`
	EndTime          int64                  `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RandType         int32                  `protobuf:"varint,10,opt,name=rand_type,json=randType,proto3" json:"rand_type,omitempty"`
	RandWeightList   []*ChestRandWeightInfo `protobuf:"bytes,11,rep,name=rand_weight_list,json=randWeightList,proto3" json:"rand_weight_list,omitempty"`
}

func (x *ChestInfo) Reset() {
	*x = ChestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChestInfo) ProtoMessage() {}

func (x *ChestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChestInfo.ProtoReflect.Descriptor instead.
func (*ChestInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{114}
}

func (x *ChestInfo) GetChestType() int32 {
	if x != nil {
		return x.ChestType
	}
	return 0
}

func (x *ChestInfo) GetEffectDay() int32 {
	if x != nil {
		return x.EffectDay
	}
	return 0
}

func (x *ChestInfo) GetMaterialRewards() []*ChestRewardInfo {
	if x != nil {
		return x.MaterialRewards
	}
	return nil
}

func (x *ChestInfo) GetMustRewards() []*ChestRewardInfo {
	if x != nil {
		return x.MustRewards
	}
	return nil
}

func (x *ChestInfo) GetRandRewards() []*ChestRewardInfo {
	if x != nil {
		return x.RandRewards
	}
	return nil
}

func (x *ChestInfo) GetSelectRewards() []*ChestRewardInfo {
	if x != nil {
		return x.SelectRewards
	}
	return nil
}

func (x *ChestInfo) GetProbabilityText() string {
	if x != nil {
		return x.ProbabilityText
	}
	return ""
}

func (x *ChestInfo) GetMaterialOpenArgs() string {
	if x != nil {
		return x.MaterialOpenArgs
	}
	return ""
}

func (x *ChestInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ChestInfo) GetRandType() int32 {
	if x != nil {
		return x.RandType
	}
	return 0
}

func (x *ChestInfo) GetRandWeightList() []*ChestRandWeightInfo {
	if x != nil {
		return x.RandWeightList
	}
	return nil
}

type ChestRandWeightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartCount int64                        `protobuf:"varint,1,opt,name=start_count,json=startCount,proto3" json:"start_count,omitempty"`
	WeightList []*ChestRandWeightSingleItem `protobuf:"bytes,2,rep,name=weight_list,json=weightList,proto3" json:"weight_list,omitempty"`
}

func (x *ChestRandWeightInfo) Reset() {
	*x = ChestRandWeightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChestRandWeightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChestRandWeightInfo) ProtoMessage() {}

func (x *ChestRandWeightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChestRandWeightInfo.ProtoReflect.Descriptor instead.
func (*ChestRandWeightInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{115}
}

func (x *ChestRandWeightInfo) GetStartCount() int64 {
	if x != nil {
		return x.StartCount
	}
	return 0
}

func (x *ChestRandWeightInfo) GetWeightList() []*ChestRandWeightSingleItem {
	if x != nil {
		return x.WeightList
	}
	return nil
}

type ChestRandWeightSingleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ChestRandWeightSingleItem) Reset() {
	*x = ChestRandWeightSingleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChestRandWeightSingleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChestRandWeightSingleItem) ProtoMessage() {}

func (x *ChestRandWeightSingleItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChestRandWeightSingleItem.ProtoReflect.Descriptor instead.
func (*ChestRandWeightSingleItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{116}
}

func (x *ChestRandWeightSingleItem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChestRandWeightSingleItem) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type ChestRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               int32         `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId             int32         `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` //物品id
	Name               string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl             string        `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Num                int32         `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	BigNum             string        `protobuf:"bytes,6,opt,name=big_num,json=bigNum,proto3" json:"big_num,omitempty"`                       // 大数展示，为空展示num字段
	UserInfo           string        `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`                 //限时外观和头像框使用
	IsValuable         int32         `protobuf:"varint,8,opt,name=is_valuable,json=isValuable,proto3" json:"is_valuable,omitempty"`          //是否有高价值弹框，默认没有
	WorthLevel         int32         `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`          //稀有度等级，从 1 开始。0 的话默认为 C 等级
	MarkId             int32         `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`                     //0: 忽略 1: 豪华版通行证加成 2: 回归加成 3: 师徒加成
	ConvertDetail      []*RewardInfo `protobuf:"bytes,11,rep,name=convert_detail,json=convertDetail,proto3" json:"convert_detail,omitempty"` //奖励折算，没有折算则为空
	Probability        int32         `protobuf:"varint,12,opt,name=probability,proto3" json:"probability,omitempty"`
	UseInfo            string        `protobuf:"bytes,13,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	Index              int32         `protobuf:"varint,14,opt,name=index,proto3" json:"index,omitempty"`                                                       // 奖励序号，自选奖励、随机奖励和实物奖励有
	StartTime          int64         `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                              // 实物奖励才有
	EndTime            int64         `protobuf:"varint,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                    // 实物奖励才有
	Desc               string        `protobuf:"bytes,17,opt,name=desc,proto3" json:"desc,omitempty"`                                                          // 实物奖励才有
	Thumbnail          string        `protobuf:"bytes,18,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`                                                // 实物奖励才有
	GlobalAndroidLimit int32         `protobuf:"varint,19,opt,name=global_android_limit,json=globalAndroidLimit,proto3" json:"global_android_limit,omitempty"` // 全服限定数量，随机奖励和实物奖励有
	PersonalLimit      int32         `protobuf:"varint,20,opt,name=personal_limit,json=personalLimit,proto3" json:"personal_limit,omitempty"`                  // 个人限定数量，随机奖励和实物奖励有
	GlobalRemain       int32         `protobuf:"varint,21,opt,name=global_remain,json=globalRemain,proto3" json:"global_remain,omitempty"`                     // 全服剩余数量
	PersonalRemain     int32         `protobuf:"varint,22,opt,name=personal_remain,json=personalRemain,proto3" json:"personal_remain,omitempty"`               // 个人剩余数量
	RewardType         int32         `protobuf:"varint,23,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`                           // 奖励类型：必得、随机、自选、实物
	PopupDesc          string        `protobuf:"bytes,24,opt,name=popup_desc,json=popupDesc,proto3" json:"popup_desc,omitempty"`                               // 弹窗文案
}

func (x *ChestRewardInfo) Reset() {
	*x = ChestRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChestRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChestRewardInfo) ProtoMessage() {}

func (x *ChestRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChestRewardInfo.ProtoReflect.Descriptor instead.
func (*ChestRewardInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{117}
}

func (x *ChestRewardInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ChestRewardInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *ChestRewardInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChestRewardInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *ChestRewardInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ChestRewardInfo) GetBigNum() string {
	if x != nil {
		return x.BigNum
	}
	return ""
}

func (x *ChestRewardInfo) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

func (x *ChestRewardInfo) GetIsValuable() int32 {
	if x != nil {
		return x.IsValuable
	}
	return 0
}

func (x *ChestRewardInfo) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *ChestRewardInfo) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *ChestRewardInfo) GetConvertDetail() []*RewardInfo {
	if x != nil {
		return x.ConvertDetail
	}
	return nil
}

func (x *ChestRewardInfo) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *ChestRewardInfo) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *ChestRewardInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChestRewardInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ChestRewardInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ChestRewardInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ChestRewardInfo) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ChestRewardInfo) GetGlobalAndroidLimit() int32 {
	if x != nil {
		return x.GlobalAndroidLimit
	}
	return 0
}

func (x *ChestRewardInfo) GetPersonalLimit() int32 {
	if x != nil {
		return x.PersonalLimit
	}
	return 0
}

func (x *ChestRewardInfo) GetGlobalRemain() int32 {
	if x != nil {
		return x.GlobalRemain
	}
	return 0
}

func (x *ChestRewardInfo) GetPersonalRemain() int32 {
	if x != nil {
		return x.PersonalRemain
	}
	return 0
}

func (x *ChestRewardInfo) GetRewardType() int32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *ChestRewardInfo) GetPopupDesc() string {
	if x != nil {
		return x.PopupDesc
	}
	return ""
}

type CoupleBgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoupleBgList []*CoupleBgModel `protobuf:"bytes,1,rep,name=couple_bg_list,json=coupleBgList,proto3" json:"couple_bg_list,omitempty"`
}

func (x *CoupleBgList) Reset() {
	*x = CoupleBgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoupleBgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoupleBgList) ProtoMessage() {}

func (x *CoupleBgList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoupleBgList.ProtoReflect.Descriptor instead.
func (*CoupleBgList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{118}
}

func (x *CoupleBgList) GetCoupleBgList() []*CoupleBgModel {
	if x != nil {
		return x.CoupleBgList
	}
	return nil
}

// couple bg start
type CoupleBgModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32         `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32         `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64         `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo    `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *CoupleBgInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CoupleBgModel) Reset() {
	*x = CoupleBgModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoupleBgModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoupleBgModel) ProtoMessage() {}

func (x *CoupleBgModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoupleBgModel.ProtoReflect.Descriptor instead.
func (*CoupleBgModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{119}
}

func (x *CoupleBgModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CoupleBgModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *CoupleBgModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CoupleBgModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *CoupleBgModel) GetInfo() *CoupleBgInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CoupleBgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimUrl             string `protobuf:"bytes,1,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`                                       // 动画资源
	AnimType            int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`                                   // 动画类型
	OpenAnimUrl         string `protobuf:"bytes,3,opt,name=open_anim_url,json=openAnimUrl,proto3" json:"open_anim_url,omitempty"`                         // 开屏动画资源
	OpenAnimType        int32  `protobuf:"varint,4,opt,name=open_anim_type,json=openAnimType,proto3" json:"open_anim_type,omitempty"`                     // 开屏动画类型
	WeddingContentColor string `protobuf:"bytes,5,opt,name=wedding_content_color,json=weddingContentColor,proto3" json:"wedding_content_color,omitempty"` // 婚礼文案色值
	WeddingDateColor    string `protobuf:"bytes,6,opt,name=wedding_date_color,json=weddingDateColor,proto3" json:"wedding_date_color,omitempty"`          // 婚礼日期色值
	WeddingTimeColor    string `protobuf:"bytes,7,opt,name=wedding_time_color,json=weddingTimeColor,proto3" json:"wedding_time_color,omitempty"`          // 婚礼时光色值
	WeddingOathColor    string `protobuf:"bytes,8,opt,name=wedding_oath_color,json=weddingOathColor,proto3" json:"wedding_oath_color,omitempty"`          // 婚礼誓言色值
	HeartImgUrl         string `protobuf:"bytes,9,opt,name=heart_img_url,json=heartImgUrl,proto3" json:"heart_img_url,omitempty"`
	FrontColor          string `protobuf:"bytes,10,opt,name=front_color,json=frontColor,proto3" json:"front_color,omitempty"`
}

func (x *CoupleBgInfo) Reset() {
	*x = CoupleBgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoupleBgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoupleBgInfo) ProtoMessage() {}

func (x *CoupleBgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoupleBgInfo.ProtoReflect.Descriptor instead.
func (*CoupleBgInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{120}
}

func (x *CoupleBgInfo) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *CoupleBgInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *CoupleBgInfo) GetOpenAnimUrl() string {
	if x != nil {
		return x.OpenAnimUrl
	}
	return ""
}

func (x *CoupleBgInfo) GetOpenAnimType() int32 {
	if x != nil {
		return x.OpenAnimType
	}
	return 0
}

func (x *CoupleBgInfo) GetWeddingContentColor() string {
	if x != nil {
		return x.WeddingContentColor
	}
	return ""
}

func (x *CoupleBgInfo) GetWeddingDateColor() string {
	if x != nil {
		return x.WeddingDateColor
	}
	return ""
}

func (x *CoupleBgInfo) GetWeddingTimeColor() string {
	if x != nil {
		return x.WeddingTimeColor
	}
	return ""
}

func (x *CoupleBgInfo) GetWeddingOathColor() string {
	if x != nil {
		return x.WeddingOathColor
	}
	return ""
}

func (x *CoupleBgInfo) GetHeartImgUrl() string {
	if x != nil {
		return x.HeartImgUrl
	}
	return ""
}

func (x *CoupleBgInfo) GetFrontColor() string {
	if x != nil {
		return x.FrontColor
	}
	return ""
}

type SocialBgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialBgList []*SocialBgModel `protobuf:"bytes,1,rep,name=social_bg_list,json=socialBgList,proto3" json:"social_bg_list,omitempty"`
}

func (x *SocialBgList) Reset() {
	*x = SocialBgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialBgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialBgList) ProtoMessage() {}

func (x *SocialBgList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialBgList.ProtoReflect.Descriptor instead.
func (*SocialBgList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{121}
}

func (x *SocialBgList) GetSocialBgList() []*SocialBgModel {
	if x != nil {
		return x.SocialBgList
	}
	return nil
}

// social bg start
type SocialBgModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32         `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32         `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64         `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo    `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *SocialBgInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SocialBgModel) Reset() {
	*x = SocialBgModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialBgModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialBgModel) ProtoMessage() {}

func (x *SocialBgModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialBgModel.ProtoReflect.Descriptor instead.
func (*SocialBgModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{122}
}

func (x *SocialBgModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SocialBgModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *SocialBgModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SocialBgModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *SocialBgModel) GetInfo() *SocialBgInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SocialBgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortAnimType int32  `protobuf:"varint,1,opt,name=short_anim_type,json=shortAnimType,proto3" json:"short_anim_type,omitempty"` // 动画类型
	ShortAnimUrl  string `protobuf:"bytes,2,opt,name=short_anim_url,json=shortAnimUrl,proto3" json:"short_anim_url,omitempty"`
	ShortImgUrl   string `protobuf:"bytes,3,opt,name=short_img_url,json=shortImgUrl,proto3" json:"short_img_url,omitempty"`
	LongAnimType  int32  `protobuf:"varint,4,opt,name=long_anim_type,json=longAnimType,proto3" json:"long_anim_type,omitempty"`
	LongAnimUrl   string `protobuf:"bytes,5,opt,name=long_anim_url,json=longAnimUrl,proto3" json:"long_anim_url,omitempty"`
	LongImgUrl    string `protobuf:"bytes,6,opt,name=long_img_url,json=longImgUrl,proto3" json:"long_img_url,omitempty"`
}

func (x *SocialBgInfo) Reset() {
	*x = SocialBgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialBgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialBgInfo) ProtoMessage() {}

func (x *SocialBgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialBgInfo.ProtoReflect.Descriptor instead.
func (*SocialBgInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{123}
}

func (x *SocialBgInfo) GetShortAnimType() int32 {
	if x != nil {
		return x.ShortAnimType
	}
	return 0
}

func (x *SocialBgInfo) GetShortAnimUrl() string {
	if x != nil {
		return x.ShortAnimUrl
	}
	return ""
}

func (x *SocialBgInfo) GetShortImgUrl() string {
	if x != nil {
		return x.ShortImgUrl
	}
	return ""
}

func (x *SocialBgInfo) GetLongAnimType() int32 {
	if x != nil {
		return x.LongAnimType
	}
	return 0
}

func (x *SocialBgInfo) GetLongAnimUrl() string {
	if x != nil {
		return x.LongAnimUrl
	}
	return ""
}

func (x *SocialBgInfo) GetLongImgUrl() string {
	if x != nil {
		return x.LongImgUrl
	}
	return ""
}

type HomepagePendantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomepagePendantList []*HomepagePendantModel `protobuf:"bytes,1,rep,name=homepage_pendant_list,json=homepagePendantList,proto3" json:"homepage_pendant_list,omitempty"`
}

func (x *HomepagePendantList) Reset() {
	*x = HomepagePendantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepagePendantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepagePendantList) ProtoMessage() {}

func (x *HomepagePendantList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepagePendantList.ProtoReflect.Descriptor instead.
func (*HomepagePendantList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{124}
}

func (x *HomepagePendantList) GetHomepagePendantList() []*HomepagePendantModel {
	if x != nil {
		return x.HomepagePendantList
	}
	return nil
}

// home pendant start
type HomepagePendantModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32                `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32                `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64                `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo           `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *HomepagePendantInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *HomepagePendantModel) Reset() {
	*x = HomepagePendantModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepagePendantModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepagePendantModel) ProtoMessage() {}

func (x *HomepagePendantModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepagePendantModel.ProtoReflect.Descriptor instead.
func (*HomepagePendantModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{125}
}

func (x *HomepagePendantModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *HomepagePendantModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *HomepagePendantModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *HomepagePendantModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *HomepagePendantModel) GetInfo() *HomepagePendantInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type HomepagePendantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimUrl   string `protobuf:"bytes,1,opt,name=anim_url,json=animUrl,proto3" json:"anim_url,omitempty"`
	AnimType  int32  `protobuf:"varint,2,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	ScaleType int32  `protobuf:"varint,3,opt,name=scale_type,json=scaleType,proto3" json:"scale_type,omitempty"`
}

func (x *HomepagePendantInfo) Reset() {
	*x = HomepagePendantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomepagePendantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomepagePendantInfo) ProtoMessage() {}

func (x *HomepagePendantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomepagePendantInfo.ProtoReflect.Descriptor instead.
func (*HomepagePendantInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{126}
}

func (x *HomepagePendantInfo) GetAnimUrl() string {
	if x != nil {
		return x.AnimUrl
	}
	return ""
}

func (x *HomepagePendantInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *HomepagePendantInfo) GetScaleType() int32 {
	if x != nil {
		return x.ScaleType
	}
	return 0
}

type EndlessBgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndlessBgList []*EndlessBgModel `protobuf:"bytes,1,rep,name=endless_bg_list,json=endlessBgList,proto3" json:"endless_bg_list,omitempty"`
}

func (x *EndlessBgList) Reset() {
	*x = EndlessBgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBgList) ProtoMessage() {}

func (x *EndlessBgList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBgList.ProtoReflect.Descriptor instead.
func (*EndlessBgList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{127}
}

func (x *EndlessBgList) GetEndlessBgList() []*EndlessBgModel {
	if x != nil {
		return x.EndlessBgList
	}
	return nil
}

// endless bg start
type EndlessBgModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32               `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32               `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64               `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo          `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *EndlessBgInfoModel `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *EndlessBgModel) Reset() {
	*x = EndlessBgModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBgModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBgModel) ProtoMessage() {}

func (x *EndlessBgModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBgModel.ProtoReflect.Descriptor instead.
func (*EndlessBgModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{128}
}

func (x *EndlessBgModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *EndlessBgModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *EndlessBgModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *EndlessBgModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *EndlessBgModel) GetInfo() *EndlessBgInfoModel {
	if x != nil {
		return x.Info
	}
	return nil
}

type EndlessBgInfoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BagUrl          string `protobuf:"bytes,1,opt,name=bag_url,json=bagUrl,proto3" json:"bag_url,omitempty"`
	Imgurl          string `protobuf:"bytes,2,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	IsUnityAnim     int32  `protobuf:"varint,3,opt,name=is_unity_anim,json=isUnityAnim,proto3" json:"is_unity_anim,omitempty"`
	IsUnityResource int32  `protobuf:"varint,4,opt,name=is_unity_resource,json=isUnityResource,proto3" json:"is_unity_resource,omitempty"`
	SettingImgUrl   string `protobuf:"bytes,5,opt,name=setting_img_url,json=settingImgUrl,proto3" json:"setting_img_url,omitempty"`
	Thumbnail       string `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	UnityAnimUrl    string `protobuf:"bytes,7,opt,name=unity_anim_url,json=unityAnimUrl,proto3" json:"unity_anim_url,omitempty"`
}

func (x *EndlessBgInfoModel) Reset() {
	*x = EndlessBgInfoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessBgInfoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessBgInfoModel) ProtoMessage() {}

func (x *EndlessBgInfoModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessBgInfoModel.ProtoReflect.Descriptor instead.
func (*EndlessBgInfoModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{129}
}

func (x *EndlessBgInfoModel) GetBagUrl() string {
	if x != nil {
		return x.BagUrl
	}
	return ""
}

func (x *EndlessBgInfoModel) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *EndlessBgInfoModel) GetIsUnityAnim() int32 {
	if x != nil {
		return x.IsUnityAnim
	}
	return 0
}

func (x *EndlessBgInfoModel) GetIsUnityResource() int32 {
	if x != nil {
		return x.IsUnityResource
	}
	return 0
}

func (x *EndlessBgInfoModel) GetSettingImgUrl() string {
	if x != nil {
		return x.SettingImgUrl
	}
	return ""
}

func (x *EndlessBgInfoModel) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *EndlessBgInfoModel) GetUnityAnimUrl() string {
	if x != nil {
		return x.UnityAnimUrl
	}
	return ""
}

type ProductBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialList     []*MeterialItem `protobuf:"bytes,1,rep,name=material_list,json=materialList,proto3" json:"material_list,omitempty"`
	MaterialCoins    []*PriceInfo    `protobuf:"bytes,2,rep,name=material_coins,json=materialCoins,proto3" json:"material_coins,omitempty"`
	ShowWorth        int32           `protobuf:"varint,3,opt,name=show_worth,json=showWorth,proto3" json:"show_worth,omitempty"`
	UseLimitTime     int64           `protobuf:"varint,4,opt,name=use_limit_time,json=useLimitTime,proto3" json:"use_limit_time,omitempty"` //-1为永久;否则使用期限(int32 秒)
	AddTime          int64           `protobuf:"varint,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`                  // 获取时间，服务器在背包接口下发，用于背包皮肤和击杀效果排序
	DynamicThumbnail string          `protobuf:"bytes,6,opt,name=dynamic_thumbnail,json=dynamicThumbnail,proto3" json:"dynamic_thumbnail,omitempty"`
	BaseLevelId      int32           `protobuf:"varint,7,opt,name=base_level_id,json=baseLevelId,proto3" json:"base_level_id,omitempty"`
	Level            int32           `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	AnimType         int32           `protobuf:"varint,9,opt,name=anim_type,json=animType,proto3" json:"anim_type,omitempty"`
	HasAssociated    bool            `protobuf:"varint,10,opt,name=has_associated,json=hasAssociated,proto3" json:"has_associated,omitempty"`              // 是否关联图鉴bool
	IllustrationIds  []int32         `protobuf:"varint,11,rep,packed,name=illustration_ids,json=illustrationIds,proto3" json:"illustration_ids,omitempty"` // 关联图鉴id  []int，（只有1级皮肤会配置，用skin_index去找当前实际拥有的等级）
	AudioUrl         string          `protobuf:"bytes,12,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
}

func (x *ProductBaseInfo) Reset() {
	*x = ProductBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductBaseInfo) ProtoMessage() {}

func (x *ProductBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductBaseInfo.ProtoReflect.Descriptor instead.
func (*ProductBaseInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{130}
}

func (x *ProductBaseInfo) GetMaterialList() []*MeterialItem {
	if x != nil {
		return x.MaterialList
	}
	return nil
}

func (x *ProductBaseInfo) GetMaterialCoins() []*PriceInfo {
	if x != nil {
		return x.MaterialCoins
	}
	return nil
}

func (x *ProductBaseInfo) GetShowWorth() int32 {
	if x != nil {
		return x.ShowWorth
	}
	return 0
}

func (x *ProductBaseInfo) GetUseLimitTime() int64 {
	if x != nil {
		return x.UseLimitTime
	}
	return 0
}

func (x *ProductBaseInfo) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *ProductBaseInfo) GetDynamicThumbnail() string {
	if x != nil {
		return x.DynamicThumbnail
	}
	return ""
}

func (x *ProductBaseInfo) GetBaseLevelId() int32 {
	if x != nil {
		return x.BaseLevelId
	}
	return 0
}

func (x *ProductBaseInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProductBaseInfo) GetAnimType() int32 {
	if x != nil {
		return x.AnimType
	}
	return 0
}

func (x *ProductBaseInfo) GetHasAssociated() bool {
	if x != nil {
		return x.HasAssociated
	}
	return false
}

func (x *ProductBaseInfo) GetIllustrationIds() []int32 {
	if x != nil {
		return x.IllustrationIds
	}
	return nil
}

func (x *ProductBaseInfo) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

type ChipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipType    int32          `protobuf:"varint,1,opt,name=chip_type,json=chipType,proto3" json:"chip_type,omitempty"`       //通用奖励type; 区分皮肤还是击杀效果
	IsPersonal  int32          `protobuf:"varint,2,opt,name=is_personal,json=isPersonal,proto3" json:"is_personal,omitempty"` //0: 非专属碎片，1:是专属碎片
	LevelUrl    string         `protobuf:"bytes,3,opt,name=level_url,json=levelUrl,proto3" json:"level_url,omitempty"`
	SellPrice   []*PriceInfo   `protobuf:"bytes,4,rep,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`       //出售价格
	ComposeList []*ComposeItem `protobuf:"bytes,5,rep,name=compose_list,json=composeList,proto3" json:"compose_list,omitempty"` //可合成完整外观列表
	// 5.5.0版本增加
	ActStartTime  int64 `protobuf:"varint,6,opt,name=act_start_time,json=actStartTime,proto3" json:"act_start_time,omitempty"` // 售卖成活动道具开始时间戳（秒）
	ActEndTime    int64 `protobuf:"varint,7,opt,name=act_end_time,json=actEndTime,proto3" json:"act_end_time,omitempty"`       // 售卖成活动道具结束时间戳（秒）
	MiddleItemId  int32 `protobuf:"varint,8,opt,name=middle_item_id,json=middleItemId,proto3" json:"middle_item_id,omitempty"`
	MiddleItemNum int32 `protobuf:"varint,9,opt,name=middle_item_num,json=middleItemNum,proto3" json:"middle_item_num,omitempty"`
}

func (x *ChipInfo) Reset() {
	*x = ChipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChipInfo) ProtoMessage() {}

func (x *ChipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChipInfo.ProtoReflect.Descriptor instead.
func (*ChipInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{131}
}

func (x *ChipInfo) GetChipType() int32 {
	if x != nil {
		return x.ChipType
	}
	return 0
}

func (x *ChipInfo) GetIsPersonal() int32 {
	if x != nil {
		return x.IsPersonal
	}
	return 0
}

func (x *ChipInfo) GetLevelUrl() string {
	if x != nil {
		return x.LevelUrl
	}
	return ""
}

func (x *ChipInfo) GetSellPrice() []*PriceInfo {
	if x != nil {
		return x.SellPrice
	}
	return nil
}

func (x *ChipInfo) GetComposeList() []*ComposeItem {
	if x != nil {
		return x.ComposeList
	}
	return nil
}

func (x *ChipInfo) GetActStartTime() int64 {
	if x != nil {
		return x.ActStartTime
	}
	return 0
}

func (x *ChipInfo) GetActEndTime() int64 {
	if x != nil {
		return x.ActEndTime
	}
	return 0
}

func (x *ChipInfo) GetMiddleItemId() int32 {
	if x != nil {
		return x.MiddleItemId
	}
	return 0
}

func (x *ChipInfo) GetMiddleItemNum() int32 {
	if x != nil {
		return x.MiddleItemNum
	}
	return 0
}

type MeterialItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	ItemId int32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Num    int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *MeterialItem) Reset() {
	*x = MeterialItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeterialItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterialItem) ProtoMessage() {}

func (x *MeterialItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterialItem.ProtoReflect.Descriptor instead.
func (*MeterialItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{132}
}

func (x *MeterialItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MeterialItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *MeterialItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type ComposeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	ItemId int32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ComposeItem) Reset() {
	*x = ComposeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeItem) ProtoMessage() {}

func (x *ComposeItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeItem.ProtoReflect.Descriptor instead.
func (*ComposeItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{133}
}

func (x *ComposeItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ComposeItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type StoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BadgeUrl string `protobuf:"bytes,1,opt,name=badge_url,json=badgeUrl,proto3" json:"badge_url,omitempty"`
	Imgurl   string `protobuf:"bytes,2,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc     string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// 标签文案
	CornerDesc    string `protobuf:"bytes,5,opt,name=corner_desc,json=cornerDesc,proto3" json:"corner_desc,omitempty"`
	GetMethod     int32  `protobuf:"varint,6,opt,name=get_method,json=getMethod,proto3" json:"get_method,omitempty"`
	GetMethodDesc string `protobuf:"bytes,7,opt,name=get_method_desc,json=getMethodDesc,proto3" json:"get_method_desc,omitempty"`
	// 按钮文字
	BtnText       string `protobuf:"bytes,8,opt,name=btn_text,json=btnText,proto3" json:"btn_text,omitempty"`
	BtnJumpurl    string `protobuf:"bytes,9,opt,name=btn_jumpurl,json=btnJumpurl,proto3" json:"btn_jumpurl,omitempty"`
	BuyLimit      int32  `protobuf:"varint,10,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"`
	BuyLimitation int32  `protobuf:"varint,11,opt,name=buy_limitation,json=buyLimitation,proto3" json:"buy_limitation,omitempty"`
	// 展示开始时间
	ShowStart int64 `protobuf:"varint,12,opt,name=show_start,json=showStart,proto3" json:"show_start,omitempty"`
	// 展示结束时间
	ShowEnd int64 `protobuf:"varint,13,opt,name=show_end,json=showEnd,proto3" json:"show_end,omitempty"`
	// 折扣开始时间
	DiscountStart int64 `protobuf:"varint,14,opt,name=discount_start,json=discountStart,proto3" json:"discount_start,omitempty"`
	// 折扣结束时间
	DiscountEnd    int64        `protobuf:"varint,15,opt,name=discount_end,json=discountEnd,proto3" json:"discount_end,omitempty"`
	Thumbnail      string       `protobuf:"bytes,16,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	AddTime        int64        `protobuf:"varint,17,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	PriceInfo      []*PriceInfo `protobuf:"bytes,18,rep,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`
	WorthLevel     int32        `protobuf:"varint,19,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"`
	SupportVersion string       `protobuf:"bytes,20,opt,name=support_version,json=supportVersion,proto3" json:"support_version,omitempty"`
}

func (x *StoreInfo) Reset() {
	*x = StoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreInfo) ProtoMessage() {}

func (x *StoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreInfo.ProtoReflect.Descriptor instead.
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{134}
}

func (x *StoreInfo) GetBadgeUrl() string {
	if x != nil {
		return x.BadgeUrl
	}
	return ""
}

func (x *StoreInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *StoreInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *StoreInfo) GetCornerDesc() string {
	if x != nil {
		return x.CornerDesc
	}
	return ""
}

func (x *StoreInfo) GetGetMethod() int32 {
	if x != nil {
		return x.GetMethod
	}
	return 0
}

func (x *StoreInfo) GetGetMethodDesc() string {
	if x != nil {
		return x.GetMethodDesc
	}
	return ""
}

func (x *StoreInfo) GetBtnText() string {
	if x != nil {
		return x.BtnText
	}
	return ""
}

func (x *StoreInfo) GetBtnJumpurl() string {
	if x != nil {
		return x.BtnJumpurl
	}
	return ""
}

func (x *StoreInfo) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *StoreInfo) GetBuyLimitation() int32 {
	if x != nil {
		return x.BuyLimitation
	}
	return 0
}

func (x *StoreInfo) GetShowStart() int64 {
	if x != nil {
		return x.ShowStart
	}
	return 0
}

func (x *StoreInfo) GetShowEnd() int64 {
	if x != nil {
		return x.ShowEnd
	}
	return 0
}

func (x *StoreInfo) GetDiscountStart() int64 {
	if x != nil {
		return x.DiscountStart
	}
	return 0
}

func (x *StoreInfo) GetDiscountEnd() int64 {
	if x != nil {
		return x.DiscountEnd
	}
	return 0
}

func (x *StoreInfo) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *StoreInfo) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *StoreInfo) GetPriceInfo() []*PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *StoreInfo) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *StoreInfo) GetSupportVersion() string {
	if x != nil {
		return x.SupportVersion
	}
	return ""
}

type PriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Num           int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"` //RMB 类型时候  这个字段 代表 goodsid
	Discount      int32 `protobuf:"varint,3,opt,name=discount,proto3" json:"discount,omitempty"`
	DiscountPrice int32 `protobuf:"varint,4,opt,name=discountPrice,proto3" json:"discountPrice,omitempty"`
}

func (x *PriceInfo) Reset() {
	*x = PriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceInfo) ProtoMessage() {}

func (x *PriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceInfo.ProtoReflect.Descriptor instead.
func (*PriceInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{135}
}

func (x *PriceInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PriceInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *PriceInfo) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *PriceInfo) GetDiscountPrice() int32 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

type RewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             int32               `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId           int32               `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` //物品id
	Name             string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl           string              `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Num              int32               `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	BigNum           string              `protobuf:"bytes,6,opt,name=big_num,json=bigNum,proto3" json:"big_num,omitempty"`              // 大数展示，为空展示num字段
	UserInfo         string              `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`        //限时外观和头像框使用
	IsValuable       int32               `protobuf:"varint,8,opt,name=is_valuable,json=isValuable,proto3" json:"is_valuable,omitempty"` //是否有高价值弹框，默认没有
	WorthLevel       int32               `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"` //稀有度等级，从 1 开始。0 的话默认为 C 等级
	MarkId           int32               `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`            //0: 忽略 1: 豪华版通行证加成 2: 回归加成 3: 师徒加成
	Convert          *snakeapi.Convert   `protobuf:"bytes,11,opt,name=convert,proto3" json:"convert,omitempty"`                         //奖励折算，没有折算则为空，老版本使用，已废弃
	Probability      int32               `protobuf:"varint,12,opt,name=probability,proto3" json:"probability,omitempty"`
	UseInfo          string              `protobuf:"bytes,13,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	ConvertDetail    []*snakeapi.Convert `protobuf:"bytes,14,rep,name=convert_detail,json=convertDetail,proto3" json:"convert_detail,omitempty"` // 新版本目前正在使用
	MaxNum           int32               `protobuf:"varint,15,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
	Badge            string              `protobuf:"bytes,16,opt,name=badge,proto3" json:"badge,omitempty"`
	StageProbability []int32             `protobuf:"varint,17,rep,packed,name=stage_probability,json=stageProbability,proto3" json:"stage_probability,omitempty"`
	TimeUnit         int32               `protobuf:"varint,18,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	FreeProbability  int32               `protobuf:"varint,19,opt,name=free_probability,json=freeProbability,proto3" json:"free_probability,omitempty"`
	IsBaodi          int32               `protobuf:"varint,20,opt,name=is_baodi,json=isBaodi,proto3" json:"is_baodi,omitempty"`
	IsBroadcast      int32               `protobuf:"varint,21,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
	UserLimit        int32               `protobuf:"varint,22,opt,name=user_limit,json=userLimit,proto3" json:"user_limit,omitempty"`
	TotalLimit       int32               `protobuf:"varint,23,opt,name=total_limit,json=totalLimit,proto3" json:"total_limit,omitempty"`
	BaodiTimes       int32               `protobuf:"varint,24,opt,name=baodi_times,json=baodiTimes,proto3" json:"baodi_times,omitempty"` // 普通奖励配置中保底次数
	ResetBaodi       int32               `protobuf:"varint,25,opt,name=reset_baodi,json=resetBaodi,proto3" json:"reset_baodi,omitempty"` // 获得后是否重置保底  0 不重置 1 重置
	Id               int64               `protobuf:"varint,26,opt,name=id,proto3" json:"id,omitempty"`
	Desc             string              `protobuf:"bytes,27,opt,name=desc,proto3" json:"desc,omitempty"` // 奖励具体文案描述
}

func (x *RewardConfig) Reset() {
	*x = RewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardConfig) ProtoMessage() {}

func (x *RewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardConfig.ProtoReflect.Descriptor instead.
func (*RewardConfig) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{136}
}

func (x *RewardConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RewardConfig) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RewardConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RewardConfig) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RewardConfig) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RewardConfig) GetBigNum() string {
	if x != nil {
		return x.BigNum
	}
	return ""
}

func (x *RewardConfig) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

func (x *RewardConfig) GetIsValuable() int32 {
	if x != nil {
		return x.IsValuable
	}
	return 0
}

func (x *RewardConfig) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *RewardConfig) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *RewardConfig) GetConvert() *snakeapi.Convert {
	if x != nil {
		return x.Convert
	}
	return nil
}

func (x *RewardConfig) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *RewardConfig) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *RewardConfig) GetConvertDetail() []*snakeapi.Convert {
	if x != nil {
		return x.ConvertDetail
	}
	return nil
}

func (x *RewardConfig) GetMaxNum() int32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

func (x *RewardConfig) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *RewardConfig) GetStageProbability() []int32 {
	if x != nil {
		return x.StageProbability
	}
	return nil
}

func (x *RewardConfig) GetTimeUnit() int32 {
	if x != nil {
		return x.TimeUnit
	}
	return 0
}

func (x *RewardConfig) GetFreeProbability() int32 {
	if x != nil {
		return x.FreeProbability
	}
	return 0
}

func (x *RewardConfig) GetIsBaodi() int32 {
	if x != nil {
		return x.IsBaodi
	}
	return 0
}

func (x *RewardConfig) GetIsBroadcast() int32 {
	if x != nil {
		return x.IsBroadcast
	}
	return 0
}

func (x *RewardConfig) GetUserLimit() int32 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *RewardConfig) GetTotalLimit() int32 {
	if x != nil {
		return x.TotalLimit
	}
	return 0
}

func (x *RewardConfig) GetBaodiTimes() int32 {
	if x != nil {
		return x.BaodiTimes
	}
	return 0
}

func (x *RewardConfig) GetResetBaodi() int32 {
	if x != nil {
		return x.ResetBaodi
	}
	return 0
}

func (x *RewardConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RewardConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          int32               `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SkinId        int32               `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` //物品id
	Name          string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Imgurl        string              `protobuf:"bytes,4,opt,name=imgurl,proto3" json:"imgurl,omitempty"`
	Num           int32               `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	BigNum        string              `protobuf:"bytes,6,opt,name=big_num,json=bigNum,proto3" json:"big_num,omitempty"`              // 大数展示，为空展示num字段
	UserInfo      string              `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`        //限时外观和头像框使用
	IsValuable    int32               `protobuf:"varint,8,opt,name=is_valuable,json=isValuable,proto3" json:"is_valuable,omitempty"` //是否有高价值弹框，默认没有
	WorthLevel    int32               `protobuf:"varint,9,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"` //稀有度等级，从 1 开始。0 的话默认为 C 等级
	MarkId        int32               `protobuf:"varint,10,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`            //0: 忽略 1: 豪华版通行证加成 2: 回归加成 3: 师徒加成
	Convert       []*snakeapi.Convert `protobuf:"bytes,11,rep,name=convert,proto3" json:"convert,omitempty"`                         //奖励折算，没有折算则为空
	Probability   int32               `protobuf:"varint,12,opt,name=probability,proto3" json:"probability,omitempty"`
	UseInfo       string              `protobuf:"bytes,13,opt,name=use_info,json=useInfo,proto3" json:"use_info,omitempty"`
	ConvertDetail []*snakeapi.Convert `protobuf:"bytes,14,rep,name=convert_detail,json=convertDetail,proto3" json:"convert_detail,omitempty"` // 新版本目前正在使用，展示奖励配置用
}

func (x *RewardInfo) Reset() {
	*x = RewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfo) ProtoMessage() {}

func (x *RewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfo.ProtoReflect.Descriptor instead.
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{137}
}

func (x *RewardInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RewardInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RewardInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RewardInfo) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *RewardInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RewardInfo) GetBigNum() string {
	if x != nil {
		return x.BigNum
	}
	return ""
}

func (x *RewardInfo) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

func (x *RewardInfo) GetIsValuable() int32 {
	if x != nil {
		return x.IsValuable
	}
	return 0
}

func (x *RewardInfo) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *RewardInfo) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *RewardInfo) GetConvert() []*snakeapi.Convert {
	if x != nil {
		return x.Convert
	}
	return nil
}

func (x *RewardInfo) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *RewardInfo) GetUseInfo() string {
	if x != nil {
		return x.UseInfo
	}
	return ""
}

func (x *RewardInfo) GetConvertDetail() []*snakeapi.Convert {
	if x != nil {
		return x.ConvertDetail
	}
	return nil
}

// intimate_appellation start
type IntimateAppellationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntimateAppellationList []*IntimateAppellationModel `protobuf:"bytes,1,rep,name=intimate_appellation_list,json=intimateAppellationList,proto3" json:"intimate_appellation_list,omitempty"`
}

func (x *IntimateAppellationList) Reset() {
	*x = IntimateAppellationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntimateAppellationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntimateAppellationList) ProtoMessage() {}

func (x *IntimateAppellationList) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntimateAppellationList.ProtoReflect.Descriptor instead.
func (*IntimateAppellationList) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{138}
}

func (x *IntimateAppellationList) GetIntimateAppellationList() []*IntimateAppellationModel {
	if x != nil {
		return x.IntimateAppellationList
	}
	return nil
}

// room bg start
type IntimateAppellationModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int32                    `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"` // 商品id
	Active     int32                    `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	UpdateTime int64                    `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Store      *StoreInfo               `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Info       *IntimateAppellationInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *IntimateAppellationModel) Reset() {
	*x = IntimateAppellationModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntimateAppellationModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntimateAppellationModel) ProtoMessage() {}

func (x *IntimateAppellationModel) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntimateAppellationModel.ProtoReflect.Descriptor instead.
func (*IntimateAppellationModel) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{139}
}

func (x *IntimateAppellationModel) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *IntimateAppellationModel) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *IntimateAppellationModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *IntimateAppellationModel) GetStore() *StoreInfo {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *IntimateAppellationModel) GetInfo() *IntimateAppellationInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type IntimateAppellationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimList         []*IntimateAppellationAnimationItem `protobuf:"bytes,1,rep,name=anim_list,json=animList,proto3" json:"anim_list,omitempty"`
	FontColor        string                              `protobuf:"bytes,2,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	UnityAnimKey     string                              `protobuf:"bytes,3,opt,name=unity_anim_key,json=unityAnimKey,proto3" json:"unity_anim_key,omitempty"`             // 关联 unity 动效的 key
	UnityAnimVersion string                              `protobuf:"bytes,4,opt,name=unity_anim_version,json=unityAnimVersion,proto3" json:"unity_anim_version,omitempty"` // 关联 unity 动效 version
}

func (x *IntimateAppellationInfo) Reset() {
	*x = IntimateAppellationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntimateAppellationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntimateAppellationInfo) ProtoMessage() {}

func (x *IntimateAppellationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntimateAppellationInfo.ProtoReflect.Descriptor instead.
func (*IntimateAppellationInfo) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{140}
}

func (x *IntimateAppellationInfo) GetAnimList() []*IntimateAppellationAnimationItem {
	if x != nil {
		return x.AnimList
	}
	return nil
}

func (x *IntimateAppellationInfo) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *IntimateAppellationInfo) GetUnityAnimKey() string {
	if x != nil {
		return x.UnityAnimKey
	}
	return ""
}

func (x *IntimateAppellationInfo) GetUnityAnimVersion() string {
	if x != nil {
		return x.UnityAnimVersion
	}
	return ""
}

type IntimateAppellationAnimationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *IntimateAppellationAnimationItem) Reset() {
	*x = IntimateAppellationAnimationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_config_SKStore_Proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntimateAppellationAnimationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntimateAppellationAnimationItem) ProtoMessage() {}

func (x *IntimateAppellationAnimationItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_config_SKStore_Proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntimateAppellationAnimationItem.ProtoReflect.Descriptor instead.
func (*IntimateAppellationAnimationItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_config_SKStore_Proto_rawDescGZIP(), []int{141}
}

func (x *IntimateAppellationAnimationItem) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

var File_snakeapi_config_SKStore_Proto protoreflect.FileDescriptor

var file_snakeapi_config_SKStore_Proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x53, 0x4b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x13, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x16, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x62, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x55, 0x72, 0x6c, 0x22, 0xa5, 0x04,
	0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x62, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x42, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x75, 0x62, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4c, 0x65, 0x66, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x41,
	0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x22, 0x48, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x5d,
	0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x01,
	0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x02, 0x0a,
	0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x67, 0x5f, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x67, 0x49,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0xf9, 0x05, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x75, 0x63,
	0x6b, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x15, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x10, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x42, 0x61, 0x6f, 0x64, 0x69, 0x12, 0x41, 0x0a,
	0x0c, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x4f, 0x0a,
	0x15, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x63, 0x68, 0x69, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b,
	0x0a, 0x08, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x0d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0c, 0x43, 0x68, 0x69, 0x70, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a,
	0x07, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x75, 0x0a, 0x17, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xac, 0x02, 0x0a, 0x13, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xab, 0x01, 0x0a,
	0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x0f, 0x45, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x75, 0x66,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xae, 0x04, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0e,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x6f,
	0x78, 0x54, 0x61, 0x67, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x6f, 0x78, 0x54,
	0x61, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x63, 0x6f,
	0x6e, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x63, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x63, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x63, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x74,
	0x22, 0x47, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x45, 0x0a, 0x0e, 0x57, 0x6f, 0x72,
	0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x22, 0x40, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x6f, 0x78, 0x54, 0x61, 0x67,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x44, 0x0a, 0x0f, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x71, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x38, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x72, 0x6c, 0x22, 0x96, 0x05, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x4c, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x11,
	0x6e, 0x65, 0x77, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x62, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0f, 0x6c, 0x75, 0x63, 0x6b,
	0x79, 0x42, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x65, 0x78, 0x63,
	0x69, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x72, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x4d, 0x42, 0x50,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x62, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x62, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x38, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x64, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x64, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x4e, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x07,
	0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x6f, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42,
	0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x79, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x74, 0x65, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x61,
	0x79, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x22, 0x44, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a,
	0x09, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x86, 0x07, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3d,
	0x0a, 0x0a, 0x6d, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x6d, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x5f, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x66, 0x49,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x6f, 0x64,
	0x69, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x69,
	0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x69, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x62, 0x6f, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x61, 0x62, 0x6f, 0x62, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x75, 0x63,
	0x6b, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x0f, 0x52, 0x4d,
	0x42, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x0f, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x52, 0x4d, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe3, 0x06, 0x0a, 0x0b, 0x52, 0x4d, 0x42, 0x50, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x67, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69,
	0x66, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x69, 0x66, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x70,
	0x73, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x70, 0x73, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6e, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f,
	0x70, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x75, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x88, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x55, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x46,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcb,
	0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xce, 0x01, 0x0a,
	0x10, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x01,
	0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x79,
	0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x72, 0x61, 0x79, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x74,
	0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x62,
	0x74, 0x61, 0x69, 0x6e, 0x22, 0x6a, 0x0a, 0x11, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x43, 0x68, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x43, 0x68, 0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x11, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x68, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xc9, 0x01, 0x0a, 0x12, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x68,
	0x69, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x0d,
	0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x4b, 0x69, 0x6c, 0x6c,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x12, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x15,
	0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x12, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x4f, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7e, 0x0a,
	0x12, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x62, 0x0a,
	0x0f, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4f, 0x0a, 0x12, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x0f, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x08, 0x52, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x52,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xfb, 0x06,
	0x0a, 0x08, 0x52, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x67, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x61, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x65, 0x77, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x62, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6d, 0x67,
	0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x42, 0x61, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x22, 0x55, 0x0a, 0x0c, 0x53,
	0x6b, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x08, 0x53, 0x6b, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6b, 0x53, 0x6b,
	0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x53, 0x6b, 0x53, 0x6b, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb6, 0x09, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x55, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x41,
	0x6e, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6e,
	0x69, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x72, 0x0a, 0x10, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x49, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x55, 0x0a,
	0x0c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xd2, 0x08, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68,
	0x69, 0x64, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x75, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x65, 0x66, 0x74, 0x55, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x75, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x41, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x3c, 0x0a,
	0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x61, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77,
	0x6f, 0x72, 0x74, 0x68, 0x22, 0xe0, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x59,
	0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22, 0x48, 0x0a, 0x09, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x09, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f,
	0x6d, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x22, 0x72, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a,
	0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x44, 0x0a, 0x08, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x67,
	0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x66, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xbb, 0x0a, 0x0a, 0x08, 0x47,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61,
	0x6e, 0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x5f,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x73,
	0x68, 0x4d, 0x73, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61,
	0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x49, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x47,
	0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66,
	0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x54, 0x61, 0x62, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x47, 0x69, 0x66,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x6e, 0x69, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x41, 0x6e,
	0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x61, 0x6e, 0x69, 0x6d, 0x22, 0xe1,
	0x01, 0x0a, 0x0e, 0x47, 0x69, 0x66, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x74,
	0x74, 0x69, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x67, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x67, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f,
	0x74, 0x74, 0x69, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x6d, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x0c,
	0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xe1, 0x03, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x75,
	0x63, 0x6b, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10,
	0x72, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72, 0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x62,
	0x61, 0x6f, 0x64, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6e,
	0x42, 0x61, 0x6f, 0x64, 0x69, 0x12, 0x41, 0x0a, 0x0c, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x61, 0x6f,
	0x64, 0x69, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x64, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x44,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd7, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x55, 0x72,
	0x6c, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x67, 0x49, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x70, 0x73, 0x22, 0x5d, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a,
	0x0d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x87, 0x02,
	0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x15, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd5,
	0x03, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41,
	0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x69,
	0x67, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x69, 0x67, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x69, 0x67, 0x5f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x16,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x87,
	0x04, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x33,
	0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x69, 0x67, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x69, 0x67, 0x5f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x69, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x5b, 0x0a, 0x16, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x13, 0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a,
	0x14, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x04, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x62, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x75, 0x0a, 0x14, 0x48, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5d, 0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xd8, 0x01, 0x0a, 0x15, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x48,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f,
	0x74, 0x74, 0x69, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x10, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x12, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a,
	0x11, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x69, 0x0a, 0x10, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x09, 0x43, 0x68,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x68, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcf, 0x04, 0x0a, 0x09, 0x43, 0x68,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x48, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e,
	0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x61, 0x6e,
	0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x49, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf8, 0x05,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x69, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x22, 0x55, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x70,
	0x6c, 0x65, 0x42, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x70,
	0x6c, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc8, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x93, 0x03, 0x0a, 0x0c, 0x43,
	0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e,
	0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x4f, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x22, 0x55, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x42, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x42, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x42, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c,
	0x6f, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x22, 0x71, 0x0a, 0x13, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x15, 0x68, 0x6f, 0x6d, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x13, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a,
	0x13, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x0d, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0f,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x42, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x42, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x42, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x45, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x42, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x61, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x61, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x69, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x55, 0x72, 0x6c, 0x22, 0xed, 0x03, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f,
	0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xf9, 0x02, 0x0a,
	0x08, 0x43, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x3a, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x93, 0x05, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x74, 0x6e, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x74, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x75,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x09, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb6,
	0x06, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x42, 0x61, 0x6f, 0x64, 0x69, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x6f, 0x64, 0x69, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6f, 0x64,
	0x69, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x61,
	0x6f, 0x64, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xac, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x74,
	0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x66, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x49,
	0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x17,
	0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x69, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x20, 0x49,
	0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0xa0, 0x09, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49,
	0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4b,
	0x49, 0x4e, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x48,
	0x49, 0x50, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f,
	0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10,
	0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x10, 0x0b, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x41,
	0x54, 0x41, 0x52, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x53, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x42, 0x41, 0x47,
	0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x41, 0x4e, 0x10, 0x15, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x46, 0x55, 0x4c, 0x5f,
	0x42, 0x45, 0x41, 0x4e, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x18,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x42,
	0x55, 0x42, 0x42, 0x4c, 0x45, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x1c, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x41, 0x4c, 0x5f, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0x1d, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10,
	0x23, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x24, 0x12, 0x1f, 0x0a,
	0x1b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x25, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x26, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x27, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x4f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x28, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x2a, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f,
	0x55, 0x50, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x2b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x53, 0x55, 0x49, 0x54, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x4f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x42, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x10, 0x2e, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x47,
	0x10, 0x2f, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x10, 0x30, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x31, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x36, 0x12,
	0x1b, 0x0a, 0x16, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x9e, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x4f,
	0x4e, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x9f, 0x01, 0x2a, 0x53, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x48, 0x49, 0x50, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x06, 0x2a, 0x55, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x2a, 0xae, 0x01, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x44, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x48, 0x4f,
	0x57, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x4f, 0x50, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x09, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x10, 0x0a, 0x42, 0x31, 0x5a, 0x2f, 0x67,
	0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakeapi_config_SKStore_Proto_rawDescOnce sync.Once
	file_snakeapi_config_SKStore_Proto_rawDescData = file_snakeapi_config_SKStore_Proto_rawDesc
)

func file_snakeapi_config_SKStore_Proto_rawDescGZIP() []byte {
	file_snakeapi_config_SKStore_Proto_rawDescOnce.Do(func() {
		file_snakeapi_config_SKStore_Proto_rawDescData = protoimpl.X.CompressGZIP(file_snakeapi_config_SKStore_Proto_rawDescData)
	})
	return file_snakeapi_config_SKStore_Proto_rawDescData
}

var file_snakeapi_config_SKStore_Proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_snakeapi_config_SKStore_Proto_msgTypes = make([]protoimpl.MessageInfo, 143)
var file_snakeapi_config_SKStore_Proto_goTypes = []interface{}{
	(RewardType)(0),                          // 0: SnakeMain.Config.RewardType
	(GetMethodType)(0),                       // 1: SnakeMain.Config.GetMethodType
	(ServerTeamColor)(0),                     // 2: SnakeMain.Config.ServerTeamColor
	(TeamIndex)(0),                           // 3: SnakeMain.Config.TeamIndex
	(PropType)(0),                            // 4: SnakeMain.Config.PropType
	(SubLeftItem_MethodType)(0),              // 5: SnakeMain.Config.SubLeftItem.MethodType
	(GameInfo_ColorType)(0),                  // 6: SnakeMain.Config.GameInfo.ColorType
	(*ProductConfig)(nil),                    // 7: SnakeMain.Config.ProductConfig
	(*StoreRecommend)(nil),                   // 8: SnakeMain.Config.StoreRecommend
	(*RecommendItem)(nil),                    // 9: SnakeMain.Config.RecommendItem
	(*PackItem)(nil),                         // 10: SnakeMain.Config.PackItem
	(*SubItem)(nil),                          // 11: SnakeMain.Config.SubItem
	(*SubLeftItem)(nil),                      // 12: SnakeMain.Config.SubLeftItem
	(*SkinSet)(nil),                          // 13: SnakeMain.Config.SkinSet
	(*MemberCardList)(nil),                   // 14: SnakeMain.Config.MemberCardList
	(*MemberCardModel)(nil),                  // 15: SnakeMain.Config.MemberCardModel
	(*MemberCardInfo)(nil),                   // 16: SnakeMain.Config.MemberCardInfo
	(*DrawCardList)(nil),                     // 17: SnakeMain.Config.DrawCardList
	(*DrawCardModel)(nil),                    // 18: SnakeMain.Config.DrawCardModel
	(*DrawCardInfo)(nil),                     // 19: SnakeMain.Config.DrawCardInfo
	(*BuyPrice)(nil),                         // 20: SnakeMain.Config.BuyPrice
	(*MultiBuyPrice)(nil),                    // 21: SnakeMain.Config.MultiBuyPrice
	(*ChipConfig)(nil),                       // 22: SnakeMain.Config.ChipConfig
	(*IntList)(nil),                          // 23: SnakeMain.Config.IntList
	(*DrawCardGuideConfigList)(nil),          // 24: SnakeMain.Config.DrawCardGuideConfigList
	(*DrawCardGuideConfig)(nil),              // 25: SnakeMain.Config.DrawCardGuideConfig
	(*MiddleItem)(nil),                       // 26: SnakeMain.Config.MiddleItem
	(*CurrencyStore)(nil),                    // 27: SnakeMain.Config.CurrencyStore
	(*CurrencyStoreItem)(nil),                // 28: SnakeMain.Config.CurrencyStoreItem
	(*EscapeStoreItem)(nil),                  // 29: SnakeMain.Config.EscapeStoreItem
	(*Property)(nil),                         // 30: SnakeMain.Config.Property
	(*WorthLevelBorderPc)(nil),               // 31: SnakeMain.Config.WorthLevelBorderPc
	(*WorthLevelIcon)(nil),                   // 32: SnakeMain.Config.WorthLevelIcon
	(*AvatarBoxTag)(nil),                     // 33: SnakeMain.Config.AvatarBoxTag
	(*Currency)(nil),                         // 34: SnakeMain.Config.Currency
	(*ThumbnailBorder)(nil),                  // 35: SnakeMain.Config.ThumbnailBorder
	(*StoreConfig)(nil),                      // 36: SnakeMain.Config.StoreConfig
	(*StoreExtraConfig)(nil),                 // 37: SnakeMain.Config.StoreExtraConfig
	(*StoreItem)(nil),                        // 38: SnakeMain.Config.StoreItem
	(*AvatarBoxList)(nil),                    // 39: SnakeMain.Config.AvatarBoxList
	(*AvatarBoxModel)(nil),                   // 40: SnakeMain.Config.AvatarBoxModel
	(*AvatarBoxInfo)(nil),                    // 41: SnakeMain.Config.AvatarBoxInfo
	(*PackList)(nil),                         // 42: SnakeMain.Config.PackList
	(*PackModel)(nil),                        // 43: SnakeMain.Config.PackModel
	(*PackInfo)(nil),                         // 44: SnakeMain.Config.PackInfo
	(*PackMultiPriceInfo)(nil),               // 45: SnakeMain.Config.PackMultiPriceInfo
	(*RMBPackInfoList)(nil),                  // 46: SnakeMain.Config.RMBPackInfoList
	(*RMBPackInfo)(nil),                      // 47: SnakeMain.Config.RMBPackInfo
	(*LimitationInfo)(nil),                   // 48: SnakeMain.Config.LimitationInfo
	(*GameFaceList)(nil),                     // 49: SnakeMain.Config.GameFaceList
	(*GameFaceModel)(nil),                    // 50: SnakeMain.Config.GameFaceModel
	(*AvatarFrameModel)(nil),                 // 51: SnakeMain.Config.AvatarFrameModel
	(*AvatarFrameInfo)(nil),                  // 52: SnakeMain.Config.AvatarFrameInfo
	(*KillStyleChipList)(nil),                // 53: SnakeMain.Config.KillStyleChipList
	(*KillStyleChipModel)(nil),               // 54: SnakeMain.Config.KillStyleChipModel
	(*KillStyleList)(nil),                    // 55: SnakeMain.Config.KillStyleList
	(*KillStyleModel)(nil),                   // 56: SnakeMain.Config.KillStyleModel
	(*OGameBroadcastList)(nil),               // 57: SnakeMain.Config.OGameBroadcastList
	(*OGameBroadcastModel)(nil),              // 58: SnakeMain.Config.OGameBroadcastModel
	(*OGameBroadcastInfo)(nil),               // 59: SnakeMain.Config.OGameBroadcastInfo
	(*OGameBubbleList)(nil),                  // 60: SnakeMain.Config.OGameBubbleList
	(*OGameBubbleModel)(nil),                 // 61: SnakeMain.Config.OGameBubbleModel
	(*OGameBubbleInfo)(nil),                  // 62: SnakeMain.Config.OGameBubbleInfo
	(*RingList)(nil),                         // 63: SnakeMain.Config.RingList
	(*RingModel)(nil),                        // 64: SnakeMain.Config.RingModel
	(*RingInfo)(nil),                         // 65: SnakeMain.Config.RingInfo
	(*SkinChipList)(nil),                     // 66: SnakeMain.Config.SkinChipList
	(*SkinChipModel)(nil),                    // 67: SnakeMain.Config.SkinChipModel
	(*SkinList)(nil),                         // 68: SnakeMain.Config.SkinList
	(*SkSkinModel)(nil),                      // 69: SnakeMain.Config.SkSkinModel
	(*SkinInfo)(nil),                         // 70: SnakeMain.Config.SkinInfo
	(*MagicSkinSection)(nil),                 // 71: SnakeMain.Config.MagicSkinSection
	(*Feature)(nil),                          // 72: SnakeMain.Config.Feature
	(*TeamSuitList)(nil),                     // 73: SnakeMain.Config.TeamSuitList
	(*TeamSuitModel)(nil),                    // 74: SnakeMain.Config.TeamSuitModel
	(*TeamSuitInfo)(nil),                     // 75: SnakeMain.Config.TeamSuitInfo
	(*GameInfo)(nil),                         // 76: SnakeMain.Config.GameInfo
	(*TitleList)(nil),                        // 77: SnakeMain.Config.TitleList
	(*TitleModel)(nil),                       // 78: SnakeMain.Config.TitleModel
	(*TitleInfo)(nil),                        // 79: SnakeMain.Config.TitleInfo
	(*BroadCastEffectList)(nil),              // 80: SnakeMain.Config.BroadCastEffectList
	(*BroadcastEffectModel)(nil),             // 81: SnakeMain.Config.BroadcastEffectModel
	(*BroadcastEffectInfo)(nil),              // 82: SnakeMain.Config.BroadcastEffectInfo
	(*GiftList)(nil),                         // 83: SnakeMain.Config.GiftList
	(*GiftModel)(nil),                        // 84: SnakeMain.Config.GiftModel
	(*GiftInfo)(nil),                         // 85: SnakeMain.Config.GiftInfo
	(*GiftNumberConfig)(nil),                 // 86: SnakeMain.Config.GiftNumberConfig
	(*GiftAnimConfig)(nil),                   // 87: SnakeMain.Config.GiftAnimConfig
	(*PhotoWallConfig)(nil),                  // 88: SnakeMain.Config.PhotoWallConfig
	(*CardBagModel)(nil),                     // 89: SnakeMain.Config.CardBagModel
	(*CardBagInfo)(nil),                      // 90: SnakeMain.Config.CardBagInfo
	(*MultiBuyPriceBean)(nil),                // 91: SnakeMain.Config.MultiBuyPriceBean
	(*PropList)(nil),                         // 92: SnakeMain.Config.PropList
	(*PropModel)(nil),                        // 93: SnakeMain.Config.PropModel
	(*PropInfo)(nil),                         // 94: SnakeMain.Config.PropInfo
	(*VipCardModel)(nil),                     // 95: SnakeMain.Config.VipCardModel
	(*VipInfo)(nil),                          // 96: SnakeMain.Config.VipInfo
	(*ChatBubbleList)(nil),                   // 97: SnakeMain.Config.ChatBubbleList
	(*ChatBubbleModel)(nil),                  // 98: SnakeMain.Config.ChatBubbleModel
	(*ChatBubbleInfo)(nil),                   // 99: SnakeMain.Config.ChatBubbleInfo
	(*GamePropList)(nil),                     // 100: SnakeMain.Config.GamePropList
	(*GamePropModel)(nil),                    // 101: SnakeMain.Config.GamePropModel
	(*GamePropInfo)(nil),                     // 102: SnakeMain.Config.GamePropInfo
	(*GamePropAttr)(nil),                     // 103: SnakeMain.Config.GamePropAttr
	(*RoomBackgroundList)(nil),               // 104: SnakeMain.Config.RoomBackgroundList
	(*RoomBackgroundModel)(nil),              // 105: SnakeMain.Config.RoomBackgroundModel
	(*RoomBackgroundInfo)(nil),               // 106: SnakeMain.Config.RoomBackgroundInfo
	(*CardUserInfoBgList)(nil),               // 107: SnakeMain.Config.CardUserInfoBgList
	(*CardUserInfoBgModel)(nil),              // 108: SnakeMain.Config.CardUserInfoBgModel
	(*CardUserInfoBgInfo)(nil),               // 109: SnakeMain.Config.CardUserInfoBgInfo
	(*RoomEnterEffectList)(nil),              // 110: SnakeMain.Config.RoomEnterEffectList
	(*RoomEnterEffectModel)(nil),             // 111: SnakeMain.Config.RoomEnterEffectModel
	(*RoomEnterEffectInfo)(nil),              // 112: SnakeMain.Config.RoomEnterEffectInfo
	(*HomepageDecorateList)(nil),             // 113: SnakeMain.Config.HomepageDecorateList
	(*HomepageDecorateModel)(nil),            // 114: SnakeMain.Config.HomepageDecorateModel
	(*HomepageDecorateInfo)(nil),             // 115: SnakeMain.Config.HomepageDecorateInfo
	(*HomepageOpenList)(nil),                 // 116: SnakeMain.Config.HomepageOpenList
	(*HomepageOpenModel)(nil),                // 117: SnakeMain.Config.HomepageOpenModel
	(*HomepageOpenInfo)(nil),                 // 118: SnakeMain.Config.HomepageOpenInfo
	(*ChestList)(nil),                        // 119: SnakeMain.Config.ChestList
	(*ChestModel)(nil),                       // 120: SnakeMain.Config.ChestModel
	(*ChestInfo)(nil),                        // 121: SnakeMain.Config.ChestInfo
	(*ChestRandWeightInfo)(nil),              // 122: SnakeMain.Config.ChestRandWeightInfo
	(*ChestRandWeightSingleItem)(nil),        // 123: SnakeMain.Config.ChestRandWeightSingleItem
	(*ChestRewardInfo)(nil),                  // 124: SnakeMain.Config.ChestRewardInfo
	(*CoupleBgList)(nil),                     // 125: SnakeMain.Config.CoupleBgList
	(*CoupleBgModel)(nil),                    // 126: SnakeMain.Config.CoupleBgModel
	(*CoupleBgInfo)(nil),                     // 127: SnakeMain.Config.CoupleBgInfo
	(*SocialBgList)(nil),                     // 128: SnakeMain.Config.SocialBgList
	(*SocialBgModel)(nil),                    // 129: SnakeMain.Config.SocialBgModel
	(*SocialBgInfo)(nil),                     // 130: SnakeMain.Config.SocialBgInfo
	(*HomepagePendantList)(nil),              // 131: SnakeMain.Config.HomepagePendantList
	(*HomepagePendantModel)(nil),             // 132: SnakeMain.Config.HomepagePendantModel
	(*HomepagePendantInfo)(nil),              // 133: SnakeMain.Config.HomepagePendantInfo
	(*EndlessBgList)(nil),                    // 134: SnakeMain.Config.EndlessBgList
	(*EndlessBgModel)(nil),                   // 135: SnakeMain.Config.EndlessBgModel
	(*EndlessBgInfoModel)(nil),               // 136: SnakeMain.Config.EndlessBgInfoModel
	(*ProductBaseInfo)(nil),                  // 137: SnakeMain.Config.ProductBaseInfo
	(*ChipInfo)(nil),                         // 138: SnakeMain.Config.ChipInfo
	(*MeterialItem)(nil),                     // 139: SnakeMain.Config.MeterialItem
	(*ComposeItem)(nil),                      // 140: SnakeMain.Config.ComposeItem
	(*StoreInfo)(nil),                        // 141: SnakeMain.Config.StoreInfo
	(*PriceInfo)(nil),                        // 142: SnakeMain.Config.PriceInfo
	(*RewardConfig)(nil),                     // 143: SnakeMain.Config.RewardConfig
	(*RewardInfo)(nil),                       // 144: SnakeMain.Config.RewardInfo
	(*IntimateAppellationList)(nil),          // 145: SnakeMain.Config.IntimateAppellationList
	(*IntimateAppellationModel)(nil),         // 146: SnakeMain.Config.IntimateAppellationModel
	(*IntimateAppellationInfo)(nil),          // 147: SnakeMain.Config.IntimateAppellationInfo
	(*IntimateAppellationAnimationItem)(nil), // 148: SnakeMain.Config.IntimateAppellationAnimationItem
	nil,                                      // 149: SnakeMain.Config.ChipConfig.ChipMapEntry
	(*snakeapi.Convert)(nil),                 // 150: snakeapi.Convert
}
var file_snakeapi_config_SKStore_Proto_depIdxs = []int32{
	30,  // 0: SnakeMain.Config.ProductConfig.property:type_name -> SnakeMain.Config.Property
	27,  // 1: SnakeMain.Config.ProductConfig.currency_store:type_name -> SnakeMain.Config.CurrencyStore
	26,  // 2: SnakeMain.Config.ProductConfig.middle_item_list:type_name -> SnakeMain.Config.MiddleItem
	8,   // 3: SnakeMain.Config.ProductConfig.store_recommend:type_name -> SnakeMain.Config.StoreRecommend
	25,  // 4: SnakeMain.Config.ProductConfig.draw_card_guide_config:type_name -> SnakeMain.Config.DrawCardGuideConfig
	13,  // 5: SnakeMain.Config.ProductConfig.skin_set:type_name -> SnakeMain.Config.SkinSet
	36,  // 6: SnakeMain.Config.ProductConfig.store_config:type_name -> SnakeMain.Config.StoreConfig
	9,   // 7: SnakeMain.Config.StoreRecommend.list:type_name -> SnakeMain.Config.RecommendItem
	11,  // 8: SnakeMain.Config.RecommendItem.sub_list:type_name -> SnakeMain.Config.SubItem
	10,  // 9: SnakeMain.Config.RecommendItem.pack_list:type_name -> SnakeMain.Config.PackItem
	12,  // 10: SnakeMain.Config.SubItem.left_list:type_name -> SnakeMain.Config.SubLeftItem
	15,  // 11: SnakeMain.Config.MemberCardList.member_card_list:type_name -> SnakeMain.Config.MemberCardModel
	141, // 12: SnakeMain.Config.MemberCardModel.store:type_name -> SnakeMain.Config.StoreInfo
	16,  // 13: SnakeMain.Config.MemberCardModel.info:type_name -> SnakeMain.Config.MemberCardInfo
	18,  // 14: SnakeMain.Config.DrawCardList.draw_card_list:type_name -> SnakeMain.Config.DrawCardModel
	141, // 15: SnakeMain.Config.DrawCardModel.store:type_name -> SnakeMain.Config.StoreInfo
	19,  // 16: SnakeMain.Config.DrawCardModel.info:type_name -> SnakeMain.Config.DrawCardInfo
	21,  // 17: SnakeMain.Config.DrawCardInfo.multi_buy_price_for_proto:type_name -> SnakeMain.Config.MultiBuyPrice
	143, // 18: SnakeMain.Config.DrawCardInfo.rare_reward_list:type_name -> SnakeMain.Config.RewardConfig
	143, // 19: SnakeMain.Config.DrawCardInfo.general_reward_list:type_name -> SnakeMain.Config.RewardConfig
	143, // 20: SnakeMain.Config.DrawCardInfo.baodi_reward:type_name -> SnakeMain.Config.RewardConfig
	22,  // 21: SnakeMain.Config.DrawCardInfo.chip_config_for_proto:type_name -> SnakeMain.Config.ChipConfig
	20,  // 22: SnakeMain.Config.MultiBuyPrice.buyPrice:type_name -> SnakeMain.Config.BuyPrice
	149, // 23: SnakeMain.Config.ChipConfig.chip_map:type_name -> SnakeMain.Config.ChipConfig.ChipMapEntry
	25,  // 24: SnakeMain.Config.DrawCardGuideConfigList.draw_card_guide_config:type_name -> SnakeMain.Config.DrawCardGuideConfig
	144, // 25: SnakeMain.Config.DrawCardGuideConfig.reward:type_name -> SnakeMain.Config.RewardInfo
	28,  // 26: SnakeMain.Config.CurrencyStore.snake_coin:type_name -> SnakeMain.Config.CurrencyStoreItem
	28,  // 27: SnakeMain.Config.CurrencyStore.coupon:type_name -> SnakeMain.Config.CurrencyStoreItem
	29,  // 28: SnakeMain.Config.CurrencyStore.escape_store:type_name -> SnakeMain.Config.EscapeStoreItem
	33,  // 29: SnakeMain.Config.Property.avatar_box_tag:type_name -> SnakeMain.Config.AvatarBoxTag
	34,  // 30: SnakeMain.Config.Property.currency_list:type_name -> SnakeMain.Config.Currency
	35,  // 31: SnakeMain.Config.Property.thumbnail_border:type_name -> SnakeMain.Config.ThumbnailBorder
	32,  // 32: SnakeMain.Config.Property.worth_level_icon:type_name -> SnakeMain.Config.WorthLevelIcon
	31,  // 33: SnakeMain.Config.Property.worth_level_border_pc:type_name -> SnakeMain.Config.WorthLevelBorderPc
	13,  // 34: SnakeMain.Config.Property.skin_set:type_name -> SnakeMain.Config.SkinSet
	38,  // 35: SnakeMain.Config.StoreConfig.item_list:type_name -> SnakeMain.Config.StoreItem
	43,  // 36: SnakeMain.Config.StoreExtraConfig.pay_pack:type_name -> SnakeMain.Config.PackModel
	43,  // 37: SnakeMain.Config.StoreExtraConfig.pack_strategy:type_name -> SnakeMain.Config.PackModel
	43,  // 38: SnakeMain.Config.StoreExtraConfig.new_revive_pack_list:type_name -> SnakeMain.Config.PackModel
	43,  // 39: SnakeMain.Config.StoreExtraConfig.lucky_bp_pack_list:type_name -> SnakeMain.Config.PackModel
	47,  // 40: SnakeMain.Config.StoreExtraConfig.alive_pack_list:type_name -> SnakeMain.Config.RMBPackInfo
	47,  // 41: SnakeMain.Config.StoreExtraConfig.excite_pack_list:type_name -> SnakeMain.Config.RMBPackInfo
	47,  // 42: SnakeMain.Config.StoreExtraConfig.recharge_pack_list:type_name -> SnakeMain.Config.RMBPackInfo
	47,  // 43: SnakeMain.Config.StoreExtraConfig.revive_badge_pack_list:type_name -> SnakeMain.Config.RMBPackInfo
	47,  // 44: SnakeMain.Config.StoreExtraConfig.bp_pack_list:type_name -> SnakeMain.Config.RMBPackInfo
	51,  // 45: SnakeMain.Config.AvatarBoxList.box_list:type_name -> SnakeMain.Config.AvatarFrameModel
	41,  // 46: SnakeMain.Config.AvatarBoxModel.info:type_name -> SnakeMain.Config.AvatarBoxInfo
	141, // 47: SnakeMain.Config.AvatarBoxModel.store:type_name -> SnakeMain.Config.StoreInfo
	43,  // 48: SnakeMain.Config.PackList.pack_list:type_name -> SnakeMain.Config.PackModel
	141, // 49: SnakeMain.Config.PackModel.store:type_name -> SnakeMain.Config.StoreInfo
	44,  // 50: SnakeMain.Config.PackModel.info:type_name -> SnakeMain.Config.PackInfo
	143, // 51: SnakeMain.Config.PackInfo.sure_reward:type_name -> SnakeMain.Config.RewardConfig
	143, // 52: SnakeMain.Config.PackInfo.may_reward:type_name -> SnakeMain.Config.RewardConfig
	143, // 53: SnakeMain.Config.PackInfo.reward:type_name -> SnakeMain.Config.RewardConfig
	45,  // 54: SnakeMain.Config.PackInfo.multi_buy_price:type_name -> SnakeMain.Config.PackMultiPriceInfo
	142, // 55: SnakeMain.Config.PackInfo.price_info:type_name -> SnakeMain.Config.PriceInfo
	47,  // 56: SnakeMain.Config.RMBPackInfoList.RMBPackInfoList:type_name -> SnakeMain.Config.RMBPackInfo
	142, // 57: SnakeMain.Config.RMBPackInfo.price_info:type_name -> SnakeMain.Config.PriceInfo
	143, // 58: SnakeMain.Config.RMBPackInfo.reward:type_name -> SnakeMain.Config.RewardConfig
	50,  // 59: SnakeMain.Config.GameFaceList.game_face_list:type_name -> SnakeMain.Config.GameFaceModel
	141, // 60: SnakeMain.Config.GameFaceModel.store:type_name -> SnakeMain.Config.StoreInfo
	137, // 61: SnakeMain.Config.GameFaceModel.info:type_name -> SnakeMain.Config.ProductBaseInfo
	141, // 62: SnakeMain.Config.AvatarFrameModel.store:type_name -> SnakeMain.Config.StoreInfo
	52,  // 63: SnakeMain.Config.AvatarFrameModel.info:type_name -> SnakeMain.Config.AvatarFrameInfo
	54,  // 64: SnakeMain.Config.KillStyleChipList.kill_style_chip_list:type_name -> SnakeMain.Config.KillStyleChipModel
	141, // 65: SnakeMain.Config.KillStyleChipModel.store:type_name -> SnakeMain.Config.StoreInfo
	138, // 66: SnakeMain.Config.KillStyleChipModel.info:type_name -> SnakeMain.Config.ChipInfo
	56,  // 67: SnakeMain.Config.KillStyleList.kill_style_list:type_name -> SnakeMain.Config.KillStyleModel
	141, // 68: SnakeMain.Config.KillStyleModel.store:type_name -> SnakeMain.Config.StoreInfo
	137, // 69: SnakeMain.Config.KillStyleModel.info:type_name -> SnakeMain.Config.ProductBaseInfo
	58,  // 70: SnakeMain.Config.OGameBroadcastList.o_game_broadcast_list:type_name -> SnakeMain.Config.OGameBroadcastModel
	141, // 71: SnakeMain.Config.OGameBroadcastModel.store:type_name -> SnakeMain.Config.StoreInfo
	59,  // 72: SnakeMain.Config.OGameBroadcastModel.info:type_name -> SnakeMain.Config.OGameBroadcastInfo
	61,  // 73: SnakeMain.Config.OGameBubbleList.o_game_bubble_list:type_name -> SnakeMain.Config.OGameBubbleModel
	141, // 74: SnakeMain.Config.OGameBubbleModel.store:type_name -> SnakeMain.Config.StoreInfo
	62,  // 75: SnakeMain.Config.OGameBubbleModel.info:type_name -> SnakeMain.Config.OGameBubbleInfo
	64,  // 76: SnakeMain.Config.RingList.ring_list:type_name -> SnakeMain.Config.RingModel
	141, // 77: SnakeMain.Config.RingModel.store:type_name -> SnakeMain.Config.StoreInfo
	65,  // 78: SnakeMain.Config.RingModel.info:type_name -> SnakeMain.Config.RingInfo
	67,  // 79: SnakeMain.Config.SkinChipList.skin_chip_list:type_name -> SnakeMain.Config.SkinChipModel
	141, // 80: SnakeMain.Config.SkinChipModel.store:type_name -> SnakeMain.Config.StoreInfo
	138, // 81: SnakeMain.Config.SkinChipModel.info:type_name -> SnakeMain.Config.ChipInfo
	69,  // 82: SnakeMain.Config.SkinList.skin_list:type_name -> SnakeMain.Config.SkSkinModel
	141, // 83: SnakeMain.Config.SkSkinModel.store:type_name -> SnakeMain.Config.StoreInfo
	70,  // 84: SnakeMain.Config.SkSkinModel.info:type_name -> SnakeMain.Config.SkinInfo
	139, // 85: SnakeMain.Config.SkinInfo.material_list:type_name -> SnakeMain.Config.MeterialItem
	142, // 86: SnakeMain.Config.SkinInfo.material_coins:type_name -> SnakeMain.Config.PriceInfo
	72,  // 87: SnakeMain.Config.SkinInfo.feature_list:type_name -> SnakeMain.Config.Feature
	71,  // 88: SnakeMain.Config.SkinInfo.sections:type_name -> SnakeMain.Config.MagicSkinSection
	74,  // 89: SnakeMain.Config.TeamSuitList.team_suit_list:type_name -> SnakeMain.Config.TeamSuitModel
	141, // 90: SnakeMain.Config.TeamSuitModel.store:type_name -> SnakeMain.Config.StoreInfo
	75,  // 91: SnakeMain.Config.TeamSuitModel.info:type_name -> SnakeMain.Config.TeamSuitInfo
	139, // 92: SnakeMain.Config.TeamSuitInfo.material_list:type_name -> SnakeMain.Config.MeterialItem
	142, // 93: SnakeMain.Config.TeamSuitInfo.material_coins:type_name -> SnakeMain.Config.PriceInfo
	72,  // 94: SnakeMain.Config.TeamSuitInfo.feature_list:type_name -> SnakeMain.Config.Feature
	76,  // 95: SnakeMain.Config.TeamSuitInfo.game_info_list:type_name -> SnakeMain.Config.GameInfo
	78,  // 96: SnakeMain.Config.TitleList.title_list:type_name -> SnakeMain.Config.TitleModel
	141, // 97: SnakeMain.Config.TitleModel.store:type_name -> SnakeMain.Config.StoreInfo
	79,  // 98: SnakeMain.Config.TitleModel.info:type_name -> SnakeMain.Config.TitleInfo
	81,  // 99: SnakeMain.Config.BroadCastEffectList.broad_cast_effect_list:type_name -> SnakeMain.Config.BroadcastEffectModel
	141, // 100: SnakeMain.Config.BroadcastEffectModel.store:type_name -> SnakeMain.Config.StoreInfo
	82,  // 101: SnakeMain.Config.BroadcastEffectModel.info:type_name -> SnakeMain.Config.BroadcastEffectInfo
	84,  // 102: SnakeMain.Config.GiftList.gift_list:type_name -> SnakeMain.Config.GiftModel
	141, // 103: SnakeMain.Config.GiftModel.store:type_name -> SnakeMain.Config.StoreInfo
	85,  // 104: SnakeMain.Config.GiftModel.info:type_name -> SnakeMain.Config.GiftInfo
	86,  // 105: SnakeMain.Config.GiftInfo.num_config:type_name -> SnakeMain.Config.GiftNumberConfig
	88,  // 106: SnakeMain.Config.GiftInfo.photo_wall_config:type_name -> SnakeMain.Config.PhotoWallConfig
	87,  // 107: SnakeMain.Config.GiftNumberConfig.anim:type_name -> SnakeMain.Config.GiftAnimConfig
	141, // 108: SnakeMain.Config.CardBagModel.store:type_name -> SnakeMain.Config.StoreInfo
	90,  // 109: SnakeMain.Config.CardBagModel.info:type_name -> SnakeMain.Config.CardBagInfo
	143, // 110: SnakeMain.Config.CardBagInfo.rare_reward_list:type_name -> SnakeMain.Config.RewardConfig
	143, // 111: SnakeMain.Config.CardBagInfo.general_reward_list:type_name -> SnakeMain.Config.RewardConfig
	143, // 112: SnakeMain.Config.CardBagInfo.baodi_reward:type_name -> SnakeMain.Config.RewardConfig
	93,  // 113: SnakeMain.Config.PropList.prop_list:type_name -> SnakeMain.Config.PropModel
	141, // 114: SnakeMain.Config.PropModel.store:type_name -> SnakeMain.Config.StoreInfo
	94,  // 115: SnakeMain.Config.PropModel.info:type_name -> SnakeMain.Config.PropInfo
	141, // 116: SnakeMain.Config.VipCardModel.store:type_name -> SnakeMain.Config.StoreInfo
	96,  // 117: SnakeMain.Config.VipCardModel.info:type_name -> SnakeMain.Config.VipInfo
	98,  // 118: SnakeMain.Config.ChatBubbleList.chat_bubble_list:type_name -> SnakeMain.Config.ChatBubbleModel
	141, // 119: SnakeMain.Config.ChatBubbleModel.store:type_name -> SnakeMain.Config.StoreInfo
	99,  // 120: SnakeMain.Config.ChatBubbleModel.info:type_name -> SnakeMain.Config.ChatBubbleInfo
	101, // 121: SnakeMain.Config.GamePropList.game_prop_list:type_name -> SnakeMain.Config.GamePropModel
	141, // 122: SnakeMain.Config.GamePropModel.store:type_name -> SnakeMain.Config.StoreInfo
	102, // 123: SnakeMain.Config.GamePropModel.info:type_name -> SnakeMain.Config.GamePropInfo
	103, // 124: SnakeMain.Config.GamePropInfo.attribute:type_name -> SnakeMain.Config.GamePropAttr
	105, // 125: SnakeMain.Config.RoomBackgroundList.room_back_ground_list:type_name -> SnakeMain.Config.RoomBackgroundModel
	141, // 126: SnakeMain.Config.RoomBackgroundModel.store:type_name -> SnakeMain.Config.StoreInfo
	106, // 127: SnakeMain.Config.RoomBackgroundModel.info:type_name -> SnakeMain.Config.RoomBackgroundInfo
	108, // 128: SnakeMain.Config.CardUserInfoBgList.card_user_info_bg_list:type_name -> SnakeMain.Config.CardUserInfoBgModel
	141, // 129: SnakeMain.Config.CardUserInfoBgModel.store:type_name -> SnakeMain.Config.StoreInfo
	109, // 130: SnakeMain.Config.CardUserInfoBgModel.info:type_name -> SnakeMain.Config.CardUserInfoBgInfo
	111, // 131: SnakeMain.Config.RoomEnterEffectList.room_enter_effect_list:type_name -> SnakeMain.Config.RoomEnterEffectModel
	141, // 132: SnakeMain.Config.RoomEnterEffectModel.store:type_name -> SnakeMain.Config.StoreInfo
	112, // 133: SnakeMain.Config.RoomEnterEffectModel.info:type_name -> SnakeMain.Config.RoomEnterEffectInfo
	114, // 134: SnakeMain.Config.HomepageDecorateList.homepage_decorate_list:type_name -> SnakeMain.Config.HomepageDecorateModel
	141, // 135: SnakeMain.Config.HomepageDecorateModel.store:type_name -> SnakeMain.Config.StoreInfo
	115, // 136: SnakeMain.Config.HomepageDecorateModel.info:type_name -> SnakeMain.Config.HomepageDecorateInfo
	117, // 137: SnakeMain.Config.HomepageOpenList.homepage_open_list:type_name -> SnakeMain.Config.HomepageOpenModel
	141, // 138: SnakeMain.Config.HomepageOpenModel.store:type_name -> SnakeMain.Config.StoreInfo
	118, // 139: SnakeMain.Config.HomepageOpenModel.info:type_name -> SnakeMain.Config.HomepageOpenInfo
	120, // 140: SnakeMain.Config.ChestList.chest_list:type_name -> SnakeMain.Config.ChestModel
	141, // 141: SnakeMain.Config.ChestModel.store:type_name -> SnakeMain.Config.StoreInfo
	121, // 142: SnakeMain.Config.ChestModel.info:type_name -> SnakeMain.Config.ChestInfo
	124, // 143: SnakeMain.Config.ChestInfo.material_rewards:type_name -> SnakeMain.Config.ChestRewardInfo
	124, // 144: SnakeMain.Config.ChestInfo.must_rewards:type_name -> SnakeMain.Config.ChestRewardInfo
	124, // 145: SnakeMain.Config.ChestInfo.rand_rewards:type_name -> SnakeMain.Config.ChestRewardInfo
	124, // 146: SnakeMain.Config.ChestInfo.select_rewards:type_name -> SnakeMain.Config.ChestRewardInfo
	122, // 147: SnakeMain.Config.ChestInfo.rand_weight_list:type_name -> SnakeMain.Config.ChestRandWeightInfo
	123, // 148: SnakeMain.Config.ChestRandWeightInfo.weight_list:type_name -> SnakeMain.Config.ChestRandWeightSingleItem
	144, // 149: SnakeMain.Config.ChestRewardInfo.convert_detail:type_name -> SnakeMain.Config.RewardInfo
	126, // 150: SnakeMain.Config.CoupleBgList.couple_bg_list:type_name -> SnakeMain.Config.CoupleBgModel
	141, // 151: SnakeMain.Config.CoupleBgModel.store:type_name -> SnakeMain.Config.StoreInfo
	127, // 152: SnakeMain.Config.CoupleBgModel.info:type_name -> SnakeMain.Config.CoupleBgInfo
	129, // 153: SnakeMain.Config.SocialBgList.social_bg_list:type_name -> SnakeMain.Config.SocialBgModel
	141, // 154: SnakeMain.Config.SocialBgModel.store:type_name -> SnakeMain.Config.StoreInfo
	130, // 155: SnakeMain.Config.SocialBgModel.info:type_name -> SnakeMain.Config.SocialBgInfo
	132, // 156: SnakeMain.Config.HomepagePendantList.homepage_pendant_list:type_name -> SnakeMain.Config.HomepagePendantModel
	141, // 157: SnakeMain.Config.HomepagePendantModel.store:type_name -> SnakeMain.Config.StoreInfo
	133, // 158: SnakeMain.Config.HomepagePendantModel.info:type_name -> SnakeMain.Config.HomepagePendantInfo
	135, // 159: SnakeMain.Config.EndlessBgList.endless_bg_list:type_name -> SnakeMain.Config.EndlessBgModel
	141, // 160: SnakeMain.Config.EndlessBgModel.store:type_name -> SnakeMain.Config.StoreInfo
	136, // 161: SnakeMain.Config.EndlessBgModel.info:type_name -> SnakeMain.Config.EndlessBgInfoModel
	139, // 162: SnakeMain.Config.ProductBaseInfo.material_list:type_name -> SnakeMain.Config.MeterialItem
	142, // 163: SnakeMain.Config.ProductBaseInfo.material_coins:type_name -> SnakeMain.Config.PriceInfo
	142, // 164: SnakeMain.Config.ChipInfo.sell_price:type_name -> SnakeMain.Config.PriceInfo
	140, // 165: SnakeMain.Config.ChipInfo.compose_list:type_name -> SnakeMain.Config.ComposeItem
	142, // 166: SnakeMain.Config.StoreInfo.price_info:type_name -> SnakeMain.Config.PriceInfo
	150, // 167: SnakeMain.Config.RewardConfig.convert:type_name -> snakeapi.Convert
	150, // 168: SnakeMain.Config.RewardConfig.convert_detail:type_name -> snakeapi.Convert
	150, // 169: SnakeMain.Config.RewardInfo.convert:type_name -> snakeapi.Convert
	150, // 170: SnakeMain.Config.RewardInfo.convert_detail:type_name -> snakeapi.Convert
	146, // 171: SnakeMain.Config.IntimateAppellationList.intimate_appellation_list:type_name -> SnakeMain.Config.IntimateAppellationModel
	141, // 172: SnakeMain.Config.IntimateAppellationModel.store:type_name -> SnakeMain.Config.StoreInfo
	147, // 173: SnakeMain.Config.IntimateAppellationModel.info:type_name -> SnakeMain.Config.IntimateAppellationInfo
	148, // 174: SnakeMain.Config.IntimateAppellationInfo.anim_list:type_name -> SnakeMain.Config.IntimateAppellationAnimationItem
	23,  // 175: SnakeMain.Config.ChipConfig.ChipMapEntry.value:type_name -> SnakeMain.Config.IntList
	176, // [176:176] is the sub-list for method output_type
	176, // [176:176] is the sub-list for method input_type
	176, // [176:176] is the sub-list for extension type_name
	176, // [176:176] is the sub-list for extension extendee
	0,   // [0:176] is the sub-list for field type_name
}

func init() { file_snakeapi_config_SKStore_Proto_init() }
func file_snakeapi_config_SKStore_Proto_init() {
	if File_snakeapi_config_SKStore_Proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snakeapi_config_SKStore_Proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubLeftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCardModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiBuyPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardGuideConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardGuideConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyStoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EscapeStoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorthLevelBorderPc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorthLevelIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBoxTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailBorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreExtraConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBoxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBoxModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBoxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackMultiPriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMBPackInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMBPackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameFaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameFaceModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarFrameModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarFrameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillStyleChipList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillStyleChipModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillStyleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillStyleModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OGameBroadcastList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OGameBroadcastModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OGameBroadcastInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OGameBubbleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OGameBubbleModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OGameBubbleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RingModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinChipList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinChipModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkSkinModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicSkinSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuitList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuitModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSuitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadCastEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastEffectModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastEffectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftNumberConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftAnimConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBagModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiBuyPriceBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipCardModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBubbleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBubbleModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBubbleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePropList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePropModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePropAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBackgroundList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBackgroundModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBackgroundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardUserInfoBgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardUserInfoBgModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardUserInfoBgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomEnterEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomEnterEffectModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomEnterEffectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepageDecorateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepageDecorateModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepageDecorateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepageOpenList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepageOpenModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepageOpenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChestModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChestRandWeightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChestRandWeightSingleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChestRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoupleBgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoupleBgModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoupleBgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialBgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialBgModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialBgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepagePendantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepagePendantModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomepagePendantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBgModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessBgInfoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeterialItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntimateAppellationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntimateAppellationModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntimateAppellationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_config_SKStore_Proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntimateAppellationAnimationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakeapi_config_SKStore_Proto_rawDesc,
			NumEnums:      7,
			NumMessages:   143,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakeapi_config_SKStore_Proto_goTypes,
		DependencyIndexes: file_snakeapi_config_SKStore_Proto_depIdxs,
		EnumInfos:         file_snakeapi_config_SKStore_Proto_enumTypes,
		MessageInfos:      file_snakeapi_config_SKStore_Proto_msgTypes,
	}.Build()
	File_snakeapi_config_SKStore_Proto = out.File
	file_snakeapi_config_SKStore_Proto_rawDesc = nil
	file_snakeapi_config_SKStore_Proto_goTypes = nil
	file_snakeapi_config_SKStore_Proto_depIdxs = nil
}
