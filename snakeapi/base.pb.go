// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: snakeapi/base.proto

package snakeapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnakeApiOpType int32

const (
	SnakeApiOpType_cdUndef        SnakeApiOpType = 0
	SnakeApiOpType_Config         SnakeApiOpType = 1
	SnakeApiOpType_GetInfo        SnakeApiOpType = 2
	SnakeApiOpType_DoClaw         SnakeApiOpType = 3
	SnakeApiOpType_OpenGiftBox    SnakeApiOpType = 4
	SnakeApiOpType_ClasHistory    SnakeApiOpType = 5
	SnakeApiOpType_BuyClawCoin    SnakeApiOpType = 6
	SnakeApiOpType_GetAdRewards   SnakeApiOpType = 7
	SnakeApiOpType_GetTaskRewards SnakeApiOpType = 8
)

// Enum value maps for SnakeApiOpType.
var (
	SnakeApiOpType_name = map[int32]string{
		0: "cdUndef",
		1: "Config",
		2: "GetInfo",
		3: "DoClaw",
		4: "OpenGiftBox",
		5: "ClasHistory",
		6: "BuyClawCoin",
		7: "GetAdRewards",
		8: "GetTaskRewards",
	}
	SnakeApiOpType_value = map[string]int32{
		"cdUndef":        0,
		"Config":         1,
		"GetInfo":        2,
		"DoClaw":         3,
		"OpenGiftBox":    4,
		"ClasHistory":    5,
		"BuyClawCoin":    6,
		"GetAdRewards":   7,
		"GetTaskRewards": 8,
	}
)

func (x SnakeApiOpType) Enum() *SnakeApiOpType {
	p := new(SnakeApiOpType)
	*p = x
	return p
}

func (x SnakeApiOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnakeApiOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_base_proto_enumTypes[0].Descriptor()
}

func (SnakeApiOpType) Type() protoreflect.EnumType {
	return &file_snakeapi_base_proto_enumTypes[0]
}

func (x SnakeApiOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnakeApiOpType.Descriptor instead.
func (SnakeApiOpType) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{0}
}

type Platform int32

const (
	Platform_UnknownPlatform Platform = 0
	Platform_Ios             Platform = 1
	Platform_Android         Platform = 2
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "UnknownPlatform",
		1: "Ios",
		2: "Android",
	}
	Platform_value = map[string]int32{
		"UnknownPlatform": 0,
		"Ios":             1,
		"Android":         2,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_base_proto_enumTypes[1].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_snakeapi_base_proto_enumTypes[1]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{1}
}

// 任务状态
type TaskState int32

const (
	TaskState_UnDef     TaskState = 0 // 未定义
	TaskState_Init      TaskState = 1 // 初始化
	TaskState_CanReward TaskState = 2 // 可领奖
	TaskState_Finish    TaskState = 3 // 已领奖
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "UnDef",
		1: "Init",
		2: "CanReward",
		3: "Finish",
	}
	TaskState_value = map[string]int32{
		"UnDef":     0,
		"Init":      1,
		"CanReward": 2,
		"Finish":    3,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_snakeapi_base_proto_enumTypes[2].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_snakeapi_base_proto_enumTypes[2]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{2}
}

// 通用请求结构
type CommonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                   // uid
	Sid       string   `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`                                   // sid
	Platform  Platform `protobuf:"varint,3,opt,name=platform,proto3,enum=snakeapi.Platform" json:"platform,omitempty"` // 操作系统平台
	DeviceId  string   `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`         // 设备id
	Market    string   `protobuf:"bytes,5,opt,name=market,proto3" json:"market,omitempty"`                             // 渠道
	Version   string   `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`                           // 客户端版本 5.x.x
	ApiSource string   `protobuf:"bytes,7,opt,name=api_source,json=apiSource,proto3" json:"api_source,omitempty"`      // 请求来源, unity, h5, ..
}

func (x *CommonReq) Reset() {
	*x = CommonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonReq) ProtoMessage() {}

func (x *CommonReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonReq.ProtoReflect.Descriptor instead.
func (*CommonReq) Descriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{0}
}

func (x *CommonReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CommonReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CommonReq) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_UnknownPlatform
}

func (x *CommonReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CommonReq) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CommonReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CommonReq) GetApiSource() string {
	if x != nil {
		return x.ApiSource
	}
	return ""
}

// 奖励
type RewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32      `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                               // 奖励类型
	SkinId     int32      `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`             // 奖励 id
	Num        int64      `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`                                 // 奖励数量
	BigNum     *string    `protobuf:"bytes,4,opt,name=big_num,json=bigNum,proto3,oneof" json:"big_num,omitempty"`        // 奖励数量，大数
	Name       string     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                // 奖励名称
	UseInfo    *string    `protobuf:"bytes,6,opt,name=use_info,json=useInfo,proto3,oneof" json:"use_info,omitempty"`     // 有效期，单位秒
	Index      *int32     `protobuf:"varint,7,opt,name=index,proto3,oneof" json:"index,omitempty"`                       // 奖励序号
	WorthLevel int32      `protobuf:"varint,8,opt,name=worth_level,json=worthLevel,proto3" json:"worth_level,omitempty"` // 稀有度
	MarkId     *int32     `protobuf:"varint,9,opt,name=mark_id,json=markId,proto3,oneof" json:"mark_id,omitempty"`       // 来源标签id
	Convert    []*Convert `protobuf:"bytes,10,rep,name=convert,proto3" json:"convert,omitempty"`                         // 奖励折算
}

func (x *RewardItem) Reset() {
	*x = RewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardItem) ProtoMessage() {}

func (x *RewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardItem.ProtoReflect.Descriptor instead.
func (*RewardItem) Descriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{1}
}

func (x *RewardItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RewardItem) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *RewardItem) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RewardItem) GetBigNum() string {
	if x != nil && x.BigNum != nil {
		return *x.BigNum
	}
	return ""
}

func (x *RewardItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RewardItem) GetUseInfo() string {
	if x != nil && x.UseInfo != nil {
		return *x.UseInfo
	}
	return ""
}

func (x *RewardItem) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *RewardItem) GetWorthLevel() int32 {
	if x != nil {
		return x.WorthLevel
	}
	return 0
}

func (x *RewardItem) GetMarkId() int32 {
	if x != nil && x.MarkId != nil {
		return *x.MarkId
	}
	return 0
}

func (x *RewardItem) GetConvert() []*Convert {
	if x != nil {
		return x.Convert
	}
	return nil
}

// 奖励折算结构
type Convert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                   // 类型
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                     // 数量
	SkinId int32 `protobuf:"varint,3,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"` // id
}

func (x *Convert) Reset() {
	*x = Convert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Convert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Convert) ProtoMessage() {}

func (x *Convert) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Convert.ProtoReflect.Descriptor instead.
func (*Convert) Descriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{2}
}

func (x *Convert) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Convert) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Convert) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

// 任务信息
type EventTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         int32         `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                          // 任务id
	EventId        int32         `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                       // 任务所属任务活动id
	NeedNum        int64         `protobuf:"varint,3,opt,name=need_num,json=needNum,proto3" json:"need_num,omitempty"`                       // 所属数量
	Desc           string        `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`                                             // 任务描述，将 {} 替换成 need_num
	BtnLink        string        `protobuf:"bytes,5,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`                        // 跳转链接
	BtnType        string        `protobuf:"bytes,6,opt,name=btn_type,json=btnType,proto3" json:"btn_type,omitempty"`                        // 跳转类型
	State          TaskState     `protobuf:"varint,7,opt,name=state,proto3,enum=snakeapi.TaskState" json:"state,omitempty"`                  // 任务状态
	ProgressNum    int64         `protobuf:"varint,8,opt,name=progress_num,json=progressNum,proto3" json:"progress_num,omitempty"`           // 玩家进度
	RewardItemList []*RewardItem `protobuf:"bytes,9,rep,name=reward_item_list,json=rewardItemList,proto3" json:"reward_item_list,omitempty"` // 奖励列表
}

func (x *EventTask) Reset() {
	*x = EventTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTask) ProtoMessage() {}

func (x *EventTask) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTask.ProtoReflect.Descriptor instead.
func (*EventTask) Descriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{3}
}

func (x *EventTask) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *EventTask) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *EventTask) GetNeedNum() int64 {
	if x != nil {
		return x.NeedNum
	}
	return 0
}

func (x *EventTask) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *EventTask) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

func (x *EventTask) GetBtnType() string {
	if x != nil {
		return x.BtnType
	}
	return ""
}

func (x *EventTask) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_UnDef
}

func (x *EventTask) GetProgressNum() int64 {
	if x != nil {
		return x.ProgressNum
	}
	return 0
}

func (x *EventTask) GetRewardItemList() []*RewardItem {
	if x != nil {
		return x.RewardItemList
	}
	return nil
}

type Pack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackId         uint32        `protobuf:"varint,1,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GoodsId        uint32        `protobuf:"varint,3,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Price          uint32        `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	BuyCount       uint32        `protobuf:"varint,5,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	BuyLimit       uint32        `protobuf:"varint,6,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"`
	RewardItemList []*RewardItem `protobuf:"bytes,7,rep,name=reward_item_list,json=rewardItemList,proto3" json:"reward_item_list,omitempty"` // 奖励列表
}

func (x *Pack) Reset() {
	*x = Pack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakeapi_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pack) ProtoMessage() {}

func (x *Pack) ProtoReflect() protoreflect.Message {
	mi := &file_snakeapi_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pack.ProtoReflect.Descriptor instead.
func (*Pack) Descriptor() ([]byte, []int) {
	return file_snakeapi_base_proto_rawDescGZIP(), []int{4}
}

func (x *Pack) GetPackId() uint32 {
	if x != nil {
		return x.PackId
	}
	return 0
}

func (x *Pack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pack) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *Pack) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Pack) GetBuyCount() uint32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *Pack) GetBuyLimit() uint32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *Pack) GetRewardItemList() []*RewardItem {
	if x != nil {
		return x.RewardItemList
	}
	return nil
}

var File_snakeapi_base_proto protoreflect.FileDescriptor

var file_snakeapi_base_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x22,
	0xcd, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xd3, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x07, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0xb2, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x74, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x9b, 0x01, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x41,
	0x70, 0x69, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x64, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x6f, 0x43, 0x6c, 0x61, 0x77, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x6c, 0x61, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x75, 0x79, 0x43, 0x6c, 0x61, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x06, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x07, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x10, 0x08, 0x2a, 0x35, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x6f, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x09, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x44, 0x65, 0x66,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x03, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x2e, 0x31,
	0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakeapi_base_proto_rawDescOnce sync.Once
	file_snakeapi_base_proto_rawDescData = file_snakeapi_base_proto_rawDesc
)

func file_snakeapi_base_proto_rawDescGZIP() []byte {
	file_snakeapi_base_proto_rawDescOnce.Do(func() {
		file_snakeapi_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakeapi_base_proto_rawDescData)
	})
	return file_snakeapi_base_proto_rawDescData
}

var file_snakeapi_base_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_snakeapi_base_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_snakeapi_base_proto_goTypes = []interface{}{
	(SnakeApiOpType)(0), // 0: snakeapi.snakeApiOpType
	(Platform)(0),       // 1: snakeapi.Platform
	(TaskState)(0),      // 2: snakeapi.TaskState
	(*CommonReq)(nil),   // 3: snakeapi.CommonReq
	(*RewardItem)(nil),  // 4: snakeapi.RewardItem
	(*Convert)(nil),     // 5: snakeapi.Convert
	(*EventTask)(nil),   // 6: snakeapi.EventTask
	(*Pack)(nil),        // 7: snakeapi.Pack
}
var file_snakeapi_base_proto_depIdxs = []int32{
	1, // 0: snakeapi.CommonReq.platform:type_name -> snakeapi.Platform
	5, // 1: snakeapi.RewardItem.convert:type_name -> snakeapi.Convert
	2, // 2: snakeapi.EventTask.state:type_name -> snakeapi.TaskState
	4, // 3: snakeapi.EventTask.reward_item_list:type_name -> snakeapi.RewardItem
	4, // 4: snakeapi.Pack.reward_item_list:type_name -> snakeapi.RewardItem
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_snakeapi_base_proto_init() }
func file_snakeapi_base_proto_init() {
	if File_snakeapi_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snakeapi_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Convert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakeapi_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snakeapi_base_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakeapi_base_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakeapi_base_proto_goTypes,
		DependencyIndexes: file_snakeapi_base_proto_depIdxs,
		EnumInfos:         file_snakeapi_base_proto_enumTypes,
		MessageInfos:      file_snakeapi_base_proto_msgTypes,
	}.Build()
	File_snakeapi_base_proto = out.File
	file_snakeapi_base_proto_rawDesc = nil
	file_snakeapi_base_proto_goTypes = nil
	file_snakeapi_base_proto_depIdxs = nil
}
