// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package claw_doll

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClawDollServerClient is the client API for ClawDollServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClawDollServerClient interface {
	GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoResp, error)
	DoClaw(ctx context.Context, in *DoClawReq, opts ...grpc.CallOption) (*DoClawResp, error)
	OpenGiftBox(ctx context.Context, in *OpenGiftBoxReq, opts ...grpc.CallOption) (*OpenGiftBoxResp, error)
	ClasHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error)
	BuyClawCoin(ctx context.Context, in *BuyClawCoinReq, opts ...grpc.CallOption) (*BuyClawCoinResp, error)
	GetAdRewards(ctx context.Context, in *GetAdRewardsReq, opts ...grpc.CallOption) (*GetAdRewardsResp, error)
	GetTaskRewards(ctx context.Context, in *GetTaskRewardsReq, opts ...grpc.CallOption) (*GetTaskRewardsResp, error)
}

type clawDollServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClawDollServerClient(cc grpc.ClientConnInterface) ClawDollServerClient {
	return &clawDollServerClient{cc}
}

func (c *clawDollServerClient) GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoResp, error) {
	out := new(GetInfoResp)
	err := c.cc.Invoke(ctx, "/class_doll.ClawDollServer/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clawDollServerClient) DoClaw(ctx context.Context, in *DoClawReq, opts ...grpc.CallOption) (*DoClawResp, error) {
	out := new(DoClawResp)
	err := c.cc.Invoke(ctx, "/class_doll.ClawDollServer/DoClaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clawDollServerClient) OpenGiftBox(ctx context.Context, in *OpenGiftBoxReq, opts ...grpc.CallOption) (*OpenGiftBoxResp, error) {
	out := new(OpenGiftBoxResp)
	err := c.cc.Invoke(ctx, "/class_doll.ClawDollServer/OpenGiftBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clawDollServerClient) ClasHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error) {
	out := new(HistoryResp)
	err := c.cc.Invoke(ctx, "/class_doll.ClawDollServer/ClasHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clawDollServerClient) BuyClawCoin(ctx context.Context, in *BuyClawCoinReq, opts ...grpc.CallOption) (*BuyClawCoinResp, error) {
	out := new(BuyClawCoinResp)
	err := c.cc.Invoke(ctx, "/class_doll.ClawDollServer/BuyClawCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clawDollServerClient) GetAdRewards(ctx context.Context, in *GetAdRewardsReq, opts ...grpc.CallOption) (*GetAdRewardsResp, error) {
	out := new(GetAdRewardsResp)
	err := c.cc.Invoke(ctx, "/class_doll.ClawDollServer/GetAdRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clawDollServerClient) GetTaskRewards(ctx context.Context, in *GetTaskRewardsReq, opts ...grpc.CallOption) (*GetTaskRewardsResp, error) {
	out := new(GetTaskRewardsResp)
	err := c.cc.Invoke(ctx, "/class_doll.ClawDollServer/GetTaskRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClawDollServerServer is the server API for ClawDollServer service.
// All implementations should embed UnimplementedClawDollServerServer
// for forward compatibility
type ClawDollServerServer interface {
	GetInfo(context.Context, *GetInfoReq) (*GetInfoResp, error)
	DoClaw(context.Context, *DoClawReq) (*DoClawResp, error)
	OpenGiftBox(context.Context, *OpenGiftBoxReq) (*OpenGiftBoxResp, error)
	ClasHistory(context.Context, *HistoryReq) (*HistoryResp, error)
	BuyClawCoin(context.Context, *BuyClawCoinReq) (*BuyClawCoinResp, error)
	GetAdRewards(context.Context, *GetAdRewardsReq) (*GetAdRewardsResp, error)
	GetTaskRewards(context.Context, *GetTaskRewardsReq) (*GetTaskRewardsResp, error)
}

// UnimplementedClawDollServerServer should be embedded to have forward compatible implementations.
type UnimplementedClawDollServerServer struct {
}

func (UnimplementedClawDollServerServer) GetInfo(context.Context, *GetInfoReq) (*GetInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedClawDollServerServer) DoClaw(context.Context, *DoClawReq) (*DoClawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoClaw not implemented")
}
func (UnimplementedClawDollServerServer) OpenGiftBox(context.Context, *OpenGiftBoxReq) (*OpenGiftBoxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGiftBox not implemented")
}
func (UnimplementedClawDollServerServer) ClasHistory(context.Context, *HistoryReq) (*HistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClasHistory not implemented")
}
func (UnimplementedClawDollServerServer) BuyClawCoin(context.Context, *BuyClawCoinReq) (*BuyClawCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyClawCoin not implemented")
}
func (UnimplementedClawDollServerServer) GetAdRewards(context.Context, *GetAdRewardsReq) (*GetAdRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdRewards not implemented")
}
func (UnimplementedClawDollServerServer) GetTaskRewards(context.Context, *GetTaskRewardsReq) (*GetTaskRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRewards not implemented")
}

// UnsafeClawDollServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClawDollServerServer will
// result in compilation errors.
type UnsafeClawDollServerServer interface {
	mustEmbedUnimplementedClawDollServerServer()
}

func RegisterClawDollServerServer(s grpc.ServiceRegistrar, srv ClawDollServerServer) {
	s.RegisterService(&ClawDollServer_ServiceDesc, srv)
}

func _ClawDollServer_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClawDollServerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/class_doll.ClawDollServer/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClawDollServerServer).GetInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClawDollServer_DoClaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoClawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClawDollServerServer).DoClaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/class_doll.ClawDollServer/DoClaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClawDollServerServer).DoClaw(ctx, req.(*DoClawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClawDollServer_OpenGiftBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGiftBoxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClawDollServerServer).OpenGiftBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/class_doll.ClawDollServer/OpenGiftBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClawDollServerServer).OpenGiftBox(ctx, req.(*OpenGiftBoxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClawDollServer_ClasHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClawDollServerServer).ClasHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/class_doll.ClawDollServer/ClasHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClawDollServerServer).ClasHistory(ctx, req.(*HistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClawDollServer_BuyClawCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyClawCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClawDollServerServer).BuyClawCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/class_doll.ClawDollServer/BuyClawCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClawDollServerServer).BuyClawCoin(ctx, req.(*BuyClawCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClawDollServer_GetAdRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClawDollServerServer).GetAdRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/class_doll.ClawDollServer/GetAdRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClawDollServerServer).GetAdRewards(ctx, req.(*GetAdRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClawDollServer_GetTaskRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClawDollServerServer).GetTaskRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/class_doll.ClawDollServer/GetTaskRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClawDollServerServer).GetTaskRewards(ctx, req.(*GetTaskRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClawDollServer_ServiceDesc is the grpc.ServiceDesc for ClawDollServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClawDollServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "class_doll.ClawDollServer",
	HandlerType: (*ClawDollServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _ClawDollServer_GetInfo_Handler,
		},
		{
			MethodName: "DoClaw",
			Handler:    _ClawDollServer_DoClaw_Handler,
		},
		{
			MethodName: "OpenGiftBox",
			Handler:    _ClawDollServer_OpenGiftBox_Handler,
		},
		{
			MethodName: "ClasHistory",
			Handler:    _ClawDollServer_ClasHistory_Handler,
		},
		{
			MethodName: "BuyClawCoin",
			Handler:    _ClawDollServer_BuyClawCoin_Handler,
		},
		{
			MethodName: "GetAdRewards",
			Handler:    _ClawDollServer_GetAdRewards_Handler,
		},
		{
			MethodName: "GetTaskRewards",
			Handler:    _ClawDollServer_GetTaskRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snakeapi/claw_doll/claw_doll.proto",
}
