// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoiceRoomServerClient is the client API for VoiceRoomServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceRoomServerClient interface {
	CommonReq(ctx context.Context, in *RpcReqParam, opts ...grpc.CallOption) (*RpcRspData, error)
	CheckUserState(ctx context.Context, in *UserStateReq, opts ...grpc.CallOption) (*UserStateRsp, error)
	PlayMusic(ctx context.Context, in *PlayMusicReq, opts ...grpc.CallOption) (*PlayMusicRsp, error)
	NoticeOffline(ctx context.Context, in *NoticeOfflineReq, opts ...grpc.CallOption) (*Empty, error)
}

type voiceRoomServerClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceRoomServerClient(cc grpc.ClientConnInterface) VoiceRoomServerClient {
	return &voiceRoomServerClient{cc}
}

func (c *voiceRoomServerClient) CommonReq(ctx context.Context, in *RpcReqParam, opts ...grpc.CallOption) (*RpcRspData, error) {
	out := new(RpcRspData)
	err := c.cc.Invoke(ctx, "/rpc.VoiceRoomServer/commonReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceRoomServerClient) CheckUserState(ctx context.Context, in *UserStateReq, opts ...grpc.CallOption) (*UserStateRsp, error) {
	out := new(UserStateRsp)
	err := c.cc.Invoke(ctx, "/rpc.VoiceRoomServer/checkUserState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceRoomServerClient) PlayMusic(ctx context.Context, in *PlayMusicReq, opts ...grpc.CallOption) (*PlayMusicRsp, error) {
	out := new(PlayMusicRsp)
	err := c.cc.Invoke(ctx, "/rpc.VoiceRoomServer/playMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceRoomServerClient) NoticeOffline(ctx context.Context, in *NoticeOfflineReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.VoiceRoomServer/noticeOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceRoomServerServer is the server API for VoiceRoomServer service.
// All implementations should embed UnimplementedVoiceRoomServerServer
// for forward compatibility
type VoiceRoomServerServer interface {
	CommonReq(context.Context, *RpcReqParam) (*RpcRspData, error)
	CheckUserState(context.Context, *UserStateReq) (*UserStateRsp, error)
	PlayMusic(context.Context, *PlayMusicReq) (*PlayMusicRsp, error)
	NoticeOffline(context.Context, *NoticeOfflineReq) (*Empty, error)
}

// UnimplementedVoiceRoomServerServer should be embedded to have forward compatible implementations.
type UnimplementedVoiceRoomServerServer struct {
}

func (UnimplementedVoiceRoomServerServer) CommonReq(context.Context, *RpcReqParam) (*RpcRspData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonReq not implemented")
}
func (UnimplementedVoiceRoomServerServer) CheckUserState(context.Context, *UserStateReq) (*UserStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserState not implemented")
}
func (UnimplementedVoiceRoomServerServer) PlayMusic(context.Context, *PlayMusicReq) (*PlayMusicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayMusic not implemented")
}
func (UnimplementedVoiceRoomServerServer) NoticeOffline(context.Context, *NoticeOfflineReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeOffline not implemented")
}

// UnsafeVoiceRoomServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceRoomServerServer will
// result in compilation errors.
type UnsafeVoiceRoomServerServer interface {
	mustEmbedUnimplementedVoiceRoomServerServer()
}

func RegisterVoiceRoomServerServer(s grpc.ServiceRegistrar, srv VoiceRoomServerServer) {
	s.RegisterService(&VoiceRoomServer_ServiceDesc, srv)
}

func _VoiceRoomServer_CommonReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcReqParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceRoomServerServer).CommonReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VoiceRoomServer/commonReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceRoomServerServer).CommonReq(ctx, req.(*RpcReqParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceRoomServer_CheckUserState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceRoomServerServer).CheckUserState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VoiceRoomServer/checkUserState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceRoomServerServer).CheckUserState(ctx, req.(*UserStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceRoomServer_PlayMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayMusicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceRoomServerServer).PlayMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VoiceRoomServer/playMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceRoomServerServer).PlayMusic(ctx, req.(*PlayMusicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceRoomServer_NoticeOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceRoomServerServer).NoticeOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VoiceRoomServer/noticeOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceRoomServerServer).NoticeOffline(ctx, req.(*NoticeOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VoiceRoomServer_ServiceDesc is the grpc.ServiceDesc for VoiceRoomServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceRoomServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.VoiceRoomServer",
	HandlerType: (*VoiceRoomServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "commonReq",
			Handler:    _VoiceRoomServer_CommonReq_Handler,
		},
		{
			MethodName: "checkUserState",
			Handler:    _VoiceRoomServer_CheckUserState_Handler,
		},
		{
			MethodName: "playMusic",
			Handler:    _VoiceRoomServer_PlayMusic_Handler,
		},
		{
			MethodName: "noticeOffline",
			Handler:    _VoiceRoomServer_NoticeOffline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc.proto",
}

// MusicServerClient is the client API for MusicServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicServerClient interface {
	CommonReq(ctx context.Context, in *RpcReqParam, opts ...grpc.CallOption) (*RpcRspData, error)
}

type musicServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicServerClient(cc grpc.ClientConnInterface) MusicServerClient {
	return &musicServerClient{cc}
}

func (c *musicServerClient) CommonReq(ctx context.Context, in *RpcReqParam, opts ...grpc.CallOption) (*RpcRspData, error) {
	out := new(RpcRspData)
	err := c.cc.Invoke(ctx, "/rpc.MusicServer/commonReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServerServer is the server API for MusicServer service.
// All implementations should embed UnimplementedMusicServerServer
// for forward compatibility
type MusicServerServer interface {
	CommonReq(context.Context, *RpcReqParam) (*RpcRspData, error)
}

// UnimplementedMusicServerServer should be embedded to have forward compatible implementations.
type UnimplementedMusicServerServer struct {
}

func (UnimplementedMusicServerServer) CommonReq(context.Context, *RpcReqParam) (*RpcRspData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonReq not implemented")
}

// UnsafeMusicServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServerServer will
// result in compilation errors.
type UnsafeMusicServerServer interface {
	mustEmbedUnimplementedMusicServerServer()
}

func RegisterMusicServerServer(s grpc.ServiceRegistrar, srv MusicServerServer) {
	s.RegisterService(&MusicServer_ServiceDesc, srv)
}

func _MusicServer_CommonReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcReqParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServerServer).CommonReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MusicServer/commonReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServerServer).CommonReq(ctx, req.(*RpcReqParam))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicServer_ServiceDesc is the grpc.ServiceDesc for MusicServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MusicServer",
	HandlerType: (*MusicServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "commonReq",
			Handler:    _MusicServer_CommonReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc.proto",
}
