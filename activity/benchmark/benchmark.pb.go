// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.25.1
// source: activity/benchmark/benchmark.proto

package benchmark

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BenchmarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age           int32    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Gender        int32    `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Phone         string   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	IdCard        string   `protobuf:"bytes,6,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	IdCardPhoto   string   `protobuf:"bytes,7,opt,name=id_card_photo,json=idCardPhoto,proto3" json:"id_card_photo,omitempty"`
	Email         string   `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Deposit       float32  `protobuf:"fixed32,9,opt,name=deposit,proto3" json:"deposit,omitempty"`
	IsVip         bool     `protobuf:"varint,10,opt,name=is_vip,json=isVip,proto3" json:"is_vip,omitempty"`
	VipExpireTime int64    `protobuf:"varint,11,opt,name=vip_expire_time,json=vipExpireTime,proto3" json:"vip_expire_time,omitempty"`
	Tags          []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	DataLen       int64    `protobuf:"varint,13,opt,name=data_len,json=dataLen,proto3" json:"data_len,omitempty"`
	Compress      bool     `protobuf:"varint,14,opt,name=compress,proto3" json:"compress,omitempty"`
}

func (x *BenchmarkReq) Reset() {
	*x = BenchmarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_benchmark_benchmark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkReq) ProtoMessage() {}

func (x *BenchmarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_benchmark_benchmark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkReq.ProtoReflect.Descriptor instead.
func (*BenchmarkReq) Descriptor() ([]byte, []int) {
	return file_activity_benchmark_benchmark_proto_rawDescGZIP(), []int{0}
}

func (x *BenchmarkReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BenchmarkReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BenchmarkReq) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *BenchmarkReq) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *BenchmarkReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *BenchmarkReq) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *BenchmarkReq) GetIdCardPhoto() string {
	if x != nil {
		return x.IdCardPhoto
	}
	return ""
}

func (x *BenchmarkReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BenchmarkReq) GetDeposit() float32 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *BenchmarkReq) GetIsVip() bool {
	if x != nil {
		return x.IsVip
	}
	return false
}

func (x *BenchmarkReq) GetVipExpireTime() int64 {
	if x != nil {
		return x.VipExpireTime
	}
	return 0
}

func (x *BenchmarkReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BenchmarkReq) GetDataLen() int64 {
	if x != nil {
		return x.DataLen
	}
	return 0
}

func (x *BenchmarkReq) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

type BenchmarkRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age             int32             `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Gender          int32             `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Phone           string            `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	IdCard          string            `protobuf:"bytes,6,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	IdCardPhoto     string            `protobuf:"bytes,7,opt,name=id_card_photo,json=idCardPhoto,proto3" json:"id_card_photo,omitempty"`
	Email           string            `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Deposit         float32           `protobuf:"fixed32,9,opt,name=deposit,proto3" json:"deposit,omitempty"`
	IsVip           bool              `protobuf:"varint,10,opt,name=is_vip,json=isVip,proto3" json:"is_vip,omitempty"`
	VipExpireTime   int64             `protobuf:"varint,11,opt,name=vip_expire_time,json=vipExpireTime,proto3" json:"vip_expire_time,omitempty"`
	Tags            []string          `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	Recommendations []string          `protobuf:"bytes,13,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	ServerMetadata  map[string]string `protobuf:"bytes,14,rep,name=server_metadata,json=serverMetadata,proto3" json:"server_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Items           []*BenchmarkItem  `protobuf:"bytes,15,rep,name=items,proto3" json:"items,omitempty"`
	CompressData    []byte            `protobuf:"bytes,16,opt,name=compress_data,json=compressData,proto3" json:"compress_data,omitempty"`
}

func (x *BenchmarkRsp) Reset() {
	*x = BenchmarkRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_benchmark_benchmark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkRsp) ProtoMessage() {}

func (x *BenchmarkRsp) ProtoReflect() protoreflect.Message {
	mi := &file_activity_benchmark_benchmark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkRsp.ProtoReflect.Descriptor instead.
func (*BenchmarkRsp) Descriptor() ([]byte, []int) {
	return file_activity_benchmark_benchmark_proto_rawDescGZIP(), []int{1}
}

func (x *BenchmarkRsp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BenchmarkRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BenchmarkRsp) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *BenchmarkRsp) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *BenchmarkRsp) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *BenchmarkRsp) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *BenchmarkRsp) GetIdCardPhoto() string {
	if x != nil {
		return x.IdCardPhoto
	}
	return ""
}

func (x *BenchmarkRsp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BenchmarkRsp) GetDeposit() float32 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *BenchmarkRsp) GetIsVip() bool {
	if x != nil {
		return x.IsVip
	}
	return false
}

func (x *BenchmarkRsp) GetVipExpireTime() int64 {
	if x != nil {
		return x.VipExpireTime
	}
	return 0
}

func (x *BenchmarkRsp) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BenchmarkRsp) GetRecommendations() []string {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *BenchmarkRsp) GetServerMetadata() map[string]string {
	if x != nil {
		return x.ServerMetadata
	}
	return nil
}

func (x *BenchmarkRsp) GetItems() []*BenchmarkItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *BenchmarkRsp) GetCompressData() []byte {
	if x != nil {
		return x.CompressData
	}
	return nil
}

type BenchmarkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemType int64  `protobuf:"varint,2,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	ItemName string `protobuf:"bytes,3,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	ItemDesc string `protobuf:"bytes,4,opt,name=item_desc,json=itemDesc,proto3" json:"item_desc,omitempty"`
	ItemImg  string `protobuf:"bytes,5,opt,name=item_img,json=itemImg,proto3" json:"item_img,omitempty"`
}

func (x *BenchmarkItem) Reset() {
	*x = BenchmarkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_benchmark_benchmark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkItem) ProtoMessage() {}

func (x *BenchmarkItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_benchmark_benchmark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkItem.ProtoReflect.Descriptor instead.
func (*BenchmarkItem) Descriptor() ([]byte, []int) {
	return file_activity_benchmark_benchmark_proto_rawDescGZIP(), []int{2}
}

func (x *BenchmarkItem) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *BenchmarkItem) GetItemType() int64 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *BenchmarkItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *BenchmarkItem) GetItemDesc() string {
	if x != nil {
		return x.ItemDesc
	}
	return ""
}

func (x *BenchmarkItem) GetItemImg() string {
	if x != nil {
		return x.ItemImg
	}
	return ""
}

var File_activity_benchmark_benchmark_proto protoreflect.FileDescriptor

var file_activity_benchmark_benchmark_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0xf3, 0x02, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x56,
	0x69, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x70,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd4, 0x04, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x56, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x70, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x73, 0x70,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a,
	0x0d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x67, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_activity_benchmark_benchmark_proto_rawDescOnce sync.Once
	file_activity_benchmark_benchmark_proto_rawDescData = file_activity_benchmark_benchmark_proto_rawDesc
)

func file_activity_benchmark_benchmark_proto_rawDescGZIP() []byte {
	file_activity_benchmark_benchmark_proto_rawDescOnce.Do(func() {
		file_activity_benchmark_benchmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_activity_benchmark_benchmark_proto_rawDescData)
	})
	return file_activity_benchmark_benchmark_proto_rawDescData
}

var file_activity_benchmark_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_activity_benchmark_benchmark_proto_goTypes = []interface{}{
	(*BenchmarkReq)(nil),  // 0: benchmark.BenchmarkReq
	(*BenchmarkRsp)(nil),  // 1: benchmark.BenchmarkRsp
	(*BenchmarkItem)(nil), // 2: benchmark.BenchmarkItem
	nil,                   // 3: benchmark.BenchmarkRsp.ServerMetadataEntry
}
var file_activity_benchmark_benchmark_proto_depIdxs = []int32{
	3, // 0: benchmark.BenchmarkRsp.server_metadata:type_name -> benchmark.BenchmarkRsp.ServerMetadataEntry
	2, // 1: benchmark.BenchmarkRsp.items:type_name -> benchmark.BenchmarkItem
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_activity_benchmark_benchmark_proto_init() }
func file_activity_benchmark_benchmark_proto_init() {
	if File_activity_benchmark_benchmark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_activity_benchmark_benchmark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_benchmark_benchmark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_benchmark_benchmark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_activity_benchmark_benchmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_activity_benchmark_benchmark_proto_goTypes,
		DependencyIndexes: file_activity_benchmark_benchmark_proto_depIdxs,
		MessageInfos:      file_activity_benchmark_benchmark_proto_msgTypes,
	}.Build()
	File_activity_benchmark_benchmark_proto = out.File
	file_activity_benchmark_benchmark_proto_rawDesc = nil
	file_activity_benchmark_benchmark_proto_goTypes = nil
	file_activity_benchmark_benchmark_proto_depIdxs = nil
}
