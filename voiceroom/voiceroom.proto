syntax = "proto3";

package voiceroom;

option go_package = "git.17zjh.com/snake/snake_proto/voiceroom";
option objc_class_prefix = "SNKPBVR";

// 一般约定：请求响应的消息名的前半部分和opType相同，请求后缀req，响应后缀rsp，push后缀msg
// 为了避免大房间的push过多，push结构尽量设计成数组的方式，方便服务器缓存发出

enum VoiceOpType {
  vUndef = 0;
  NewRoom = 1; // 创建房间
  MyPreRoom = 2; // 历史房间，创建前请求
  EnterRoom = 3; // 进入房间
  UpdateSetting = 4; // 改房间信息/设置
  ExitRoom = 5; // 退出房间
  LockSeat = 6; // 开关麦位
  PlayerManager = 7; // 房主管理成员
  SeatInvite = 8; // 邀请上麦
  HandleSeatInvite = 9; // 处理邀请上麦
  UseSeat = 10; // 上下麦位
  MicOpt = 11; // 自己开关麦需要别人看到，只有座位上的人操作需要请求
  SendRedPack = 12; // 发红包，领红包复用receive_red_pack接口
  GetNearby = 13; // 附近的人
  GetRoomList = 14; // 获取房间列表
  SearchRoom = 15; // 搜索房间
  SendChat = 17; // 公屏发送聊天信息
  SendGift = 18; // 送礼物
  StartPk = 19; // 开始PK
  PkVote = 20; // PK投票
  SendEmoji = 21; // 发送表情
  GetMemberList = 22; // 获取成员列表
  Lottery = 23; // 抽奖
  SeatKick = 24; // 房主踢人下麦
  GetPkInfo = 25; // 获取PK信息
  PkSendGift = 26; // PK送礼物
  RoomInvite = 27; //邀请进语音房
  GetBlackList = 28; // 获取拉黑列表
  UpdateAuctionSetting = 29; //设置拍卖选项
  StartAuction = 30; //开始拍卖
  AuctionBid = 31; //拍卖出价
  FinishAuction = 32; //结束拍卖
  StartSpy = 33; // 开始谁是卧底游戏
  StartSpyVote = 34; // 开始投票
  EndSpyGame = 35; // 房主主动结束游戏
  SpyVote = 36; // 投票

  InnerCall = 100; //内部调用接口
  PuUpdateSetting = 101; // 改房间信息push
  PuPlayerChange = 102; // 成员变化push
  PuSeatInvite = 103; // 邀请上麦push
  PuSeatChange = 104; // 麦位变化push
  PuRoomClose = 105; // 房间解散push
  PuRedPack = 106; // 通知有红包
  PuRoomChat = 107; // 聊天信息/系统提示push
  PuPkResult = 108; // PK结果push
  PuSendEmoji = 109; // 表情push
  PuSendGift = 110; // 礼物弹幕push
  PuLotteryResult = 111; //抽奖结果push
  PuSeatKick = 112; // 自己被从麦位上踢下
  PuStartPk = 113; // 开始PK
  PuRoomInvite = 114; // 邀请进房
  PuPlayMusic = 115; //房主播放、暂停音乐推送
  PuBanChat = 116; // 被房主禁言，被禁的收到
  PuBlackList = 117; // 拉黑列表
  PuAuctionSetting = 118; //设置拍卖选项push
  PuStartAuction = 119; //开始拍卖push
  PuAuctionBid = 120; //出价信息push
  PuAuctionResult = 121; //拍卖结果push
  PuSpyWord = 122; // 谁是卧底词语push
  PuStartSpyVote = 123;// 开始投票push
  PuSpyVoteRes = 124; // 投票结果push
  PuSpyEliminate = 125; // 淘汰push
  PuEndSpyGame = 126; // 房主主动结束游戏push
  PuSpyEndRes = 127; // 游戏结束结果push
  PuPlayTencentCloudMusic = 128; //房主播放、暂停腾讯云音乐推送
}

message roomInfo {
  int32 room_id = 1;
  string owner = 2;
  roomSetting setting = 3;
  repeated seatInfo seatList = 4; // 座位列表
  bool ban_chat = 5; // 被房主禁言
  pkInfo pk = 6; // 可能为空
  repeated string black_list = 7; // 房主才有，黑名单
  int32 online_player = 8;
  repeated string ban_mic_list = 9; // 房主才有，禁麦列表
  repeated string ban_chat_list = 10; // 房主才有，禁言列表
  voiceRoomMusicInfo music = 11; //正在播放的音乐
  int32 mode_version = 12;
  AuctionInfo auction = 13; //拍卖相关信息
  VoiceRoomTencentCloudMusicInfo tencent_cloud_music = 14; //正在播放的腾讯云音乐
  SpyInfo spy_info = 15; // 谁是卧底相关
  repeated string avatar_list = 16; //头像列表，推荐列表中展示房间内top6魅力值头像
}

enum voiceRoomMusicStatus {
  invalidStatus = 0;
  Open = 1; //播放
  Pause = 2; //暂停
  Close = 3; //关闭
}

message VoiceRoomTencentCloudMusicInfo {
  string id = 1; //歌曲id
  string title = 2; //歌曲名称
  repeated string singers = 3;//歌手名称列表
  int32 duration = 4; //播放时长
  voiceRoomMusicStatus status = 5;//播放状态
}

message voiceRoomMusicInfo {
  int64 id = 1;
  string title = 2;
  string artist = 3;
  voiceRoomMusicStatus status = 4;
  string music = 5; //音乐链接
  string accompaniment = 6; //伴奏链接
  int32 music_duration = 7; //音乐时长（秒）
  int32 accompaniment_duration = 8; //伴奏时长（秒）
  string uploader = 9; //上传者uid
  string uploader_name = 10; //上传者昵称
}

message roomSetting {
  string name = 1;
  string announce = 2;
  int32 tag_id = 3;
  string password = 4;
  int32 bg_id = 5; //背景
  bool ban_chat = 6; //禁止公屏聊天
  bool ban_red_pack = 7; //禁止发红包
  bool ban_intimate = 8; //禁止亲密房主
}

message seatInfo {
  int32 index = 1; // 编号0-8，房主0其他依次往后
  bool lock = 2;
  string uid = 3;
  bool ban_mic = 4; // 房主闭麦
  bool self_ban_mic = 5; // 自己闭麦
}

message pkInfo {
  bool open = 1;
  string voted_user = 2; // 如果是投票模式, 用户投票的对象, 如果未投票则是空
  int64 start_time = 3; //开始时间戳(s)
  int32 period = 4; //持续时间
  string left_uid = 5;
  int64 left_score = 6;
  string right_uid = 7;
  int64 right_score = 8;
  PkType type = 9;
}

message location {
  double longitude = 1; //经度
  double latitude = 2; //纬度
}

// 房主创建房间了直接进入，如果enterRoom要加的参数这里也要加
message NewRoomReq {
  roomSetting param = 1;
  location pos = 2;
  int32 show = 3;
  int32 mode_version = 4; // 第一版40001
}

message NewRoomRsp {
  roomInfo room = 1;
  int64 ban_timestamp = 2; //封禁时间戳，-1永久封禁
}

message MyPreRoomReq {
}

message MyPreRoomRsp {
  roomSetting setting = 1;
}

message EnterRoomReq {
  int32 target_room_id = 1;
  string password = 2;
  location pos = 3;
  int32 show = 4;
  int32 mode_version = 5;
  bool recover = 6; // cut恢复时为true
  int32 source = 7; // 1:休闲区首页 2:他人邀请 3:跟房（个人资料页、好友列表）4:附近的人 5:搜索进入
}

message EnterRoomRsp {
  bool need_password = 1; // 如果需要密码但是没传的，这里返回true，没有roomInfo
  roomInfo room = 2;
  int64 ban_timestamp = 3; //封禁时间戳，-1永久封禁
}

message UpdateSettingReq {
  roomSetting setting = 1; //传全量数据
}

message UpdateSettingRsp {
}

// 房间修改的push
message PuUpdateSettingMsg {
  roomSetting setting = 1;
}

message ExitRoomReq {
}

message ExitRoomRsp {
}

message GetMemberListReq {
  int32 page = 1;
  int32 size = 2;
}

message MemberListItem {
  string uid = 1;
  int64 show = 2;
}

message GetMemberListRsp {
  repeated MemberListItem members = 1;
}

enum lotteryType {
  tpUndef = 0;
  MicUser = 1; //麦上玩家
  AllUser = 2; //所有玩家
}

message LotteryReq {
  lotteryType opt = 1;
  int32 num = 2; //抽奖人数
}

message LotteryRsp {
}

message PuLotteryResultMsg {
  repeated string join_uids = 1; //参与人员
  repeated string lucky_uids = 2; //中奖人员
}
//1: 获取房间信息，2：封禁语音房上麦，3：语音房间解散，4：重置语音房间房名，5：重置语音房间公告，6：用户当前房间拉下推荐
//7：push房间公告，8：踢出房间，9：发送个人消息
enum innerCallType {
  icUndef = 0;
  GetRoomInfo = 1;
  BanUserSeatMic = 2;
  VoiceRoomDissolve = 3;
  VoiceRoomResetName = 4;
  VoiceRoomResetAnnounce = 5;
  UserVoiceRoomDownRecommend = 6;
  VoiceRoomPushAlert = 7;
  UserVoiceRoomExit = 8;
  UserVoiceRoomMsg = 9;
}

message InnerCallReq {
  innerCallType call_type = 1;
  string CallToken = 2;
  int32 room_id = 3;
  string uid = 4;
  string msg = 5;
  int32 time = 6;
}

message InnerCallRsp {
  int32 code = 1;
  string msg = 2;
  adminRoomInfo room_info = 3;
}

message adminRoomInfo {
  int32 room_id = 1;
  string room_name = 2;
  string room_announce = 3;
  int32 room_tag_id = 4;
  int32 online_player = 5;
  int64 hot = 6;
  repeated string uids = 7; // 座位列表
  int32 room_type = 8;
  int32 platform = 9;
}


message playerChangeItem {
  string uid = 1;
  int32 type = 2; //1加入，2退出
}

message PuPlayerChangeMsg {
  //  repeated playerChangeItem change_list = 1;
  int32 online_player = 2; //最新的在线人数
}

message PuSeatChangeMsg {
  repeated seatInfo seatList = 1; // 变化的座位列表
}

message LockSeatReq {
  int32 opt = 1; // 1打开，2禁用
  int32 index = 2;
}

message LockSeatRsp {
}

enum playerManagerType {
  pmUndef = 0;
  MicBan = 1; //禁麦
  MicOpen = 2; //取消禁麦
  ChatBan = 3;
  ChatOPen = 4;
  Kick = 5;
  BlackAdd = 6; //拉黑
  BlackCancel = 7; //取消拉黑
}

message PlayerManagerReq {
  string target_uid = 1;
  playerManagerType opt = 2;
}

message PlayerManagerRsp {
}

message SeatInviteReq {
  string target_uid = 1;
  int32 index = 2;
}

message SeatInviteRsp {
}

message PuSeatInviteMsg {
  int32 seat_index = 1;
}

message HandleSeatInviteReq {
  //  int32 opt = 1; // 1同意，2拒绝
  bool mic_open = 2; //自己的麦是否开了
  int32 seat_index = 3;
}

message HandleSeatInviteRsp {
}

message UseSeatReq {
  int32 opt = 1; // 1坐下，2站起
  int32 index = 2;
  bool mic_open = 3; //自己的麦是否开了
}

message UseSeatRsp {
}

message PuRoomCloseMsg {
}

message MicOptReq {
  int32 opt = 1; //1打开，2关闭
}

message MicOptRsp {
}

message SendRedPackReq {
  int32 prop_id = 1;
  int32 source = 2;
  int32 target_num = 3; //发多少份
  string message = 4; //红包封面留言
}

message SendRedPackRsp {
}

message PuRedPackMsg {
  string sender_uid = 1;
  string red_pack_id = 2;
  int32 expire_time = 3; //过期时间
  string message = 4; // 透传
}

message userGeoInfo {
  string uid = 1;
  int32 gender = 2;
  string nickname = 3;
  string avatar = 4;
  int32 box_id = 5;
  int32 show = 6;
  int32 distance = 7; //距离米
  int32 room_id = 8;
}

message GetNearbyReq {
  location pos = 1;
}

message GetNearbyRsp {
  repeated userGeoInfo users = 1; //附近的人的信息
}

message GetBlackListReq {
  RoomBlackType black_type = 1;
}

message GetBlackListRsp {
  repeated string ban_mic_list = 1; //闭麦列表
  repeated string ban_chat_list = 2; //禁言列表
  repeated string black_user_list = 3; //拉黑列表
}

enum RoomBlackType {
  BlackTypeUndef = 0;
  BanMic = 1; //禁麦列表
  BanChat = 2; //禁言列表
  BlackUser = 3; //拉黑列表
}

message GetRoomListReq {
  int32 tag_id = 1; //房间类型
  int32 page = 2; //第几页，从1开始
  int32 size = 3; //每页多少条
  location pos = 4;
}

message PuRoomBlackUpdateMsg {
  RoomBlackType black_type = 1;
}

message RoomListItem {
  int32 room_id = 1;
  int32 tag_id = 2;
  string name = 3; //房间名称
  string nickname = 4; //房主昵称
  int32 gender = 5;
  string avatar = 6;
  int32 box_id = 7;
  int32 total_player = 8; //房间人数
  bool has_friend = 9; //是否有好友在该房间
  int32 min_distance = 10; //房间内成员离我最近的距离
  bool in_topk = 11; //是否是大神房间
  string owner_id = 12; //房主uid
  int32 sst_status = 13; //1：是sst认证
}

message GetRoomListRsp {
  repeated RoomListItem rooms = 1;
  int32 total = 2; //总共多少条
}

message SearchRoomReq {
  int64 id = 1; //房间id或房主id
  location pos = 2;
}

message topShowMember {
  string uid = 1;
  string avatar = 2;
  int32 box_id = 3;
}

message SearchRoomRsp {
  int32 room_id = 1;
  int32 tag_id = 2;
  string name = 3; //房间名称
  string nickname = 4; //房主昵称
  int32 gender = 5;
  string avatar = 6;
  int32 box_id = 7;
  int32 total_player = 8; //房间人数
  bool has_friend = 9; //是否有好友在该房间
  int32 min_distance = 10; //房间内成员离我最近的距离
  bool in_topk = 11; //是否是大神房间
  string owner_id = 12; //房主uid
  int32 show = 13; //房主show值
  int32 charm = 14; //房主魅力值
  int32 star = 15; //段位
  repeated topShowMember top_member = 16;
}

enum PkType {
  ptUndef = 0;
  Vote = 1; // 投票
  Gift = 2; // 刷礼物
}

message StartPkReq {
  string left_uid = 1;
  string right_uid = 2;
  int32 seconds = 3;
  PkType type = 4; // 1 投票，2 刷礼物
}

message StartPkRsp {
  pkInfo pk_info = 1;
}

message PuStartPkMsg {
  pkInfo pk_info = 1;
}

message GetPkInfoReq {
}

message GetPkInfoRsp {
  pkInfo pk_info = 1;
}

message PuPkResultMsg {
  string winner_uid = 1;
  int64 score = 2;
  bool is_draw = 3; // 是否平局, 如果是则winner_uid为空
}

message RoomChatMsg {
  string sender_uid = 1;
  int32 chat_type = 2; // 9:语音房消息
  int32 message_type = 3; // 25:系统消息, 为系统消息时仅有content和timestamp是有效的
  int32 sysmsg_type = 4; // 当message_type为25时有效 1.PK结果, 2.进入直播间, 3.抽奖结果
  string content = 5;
  string message_id = 6;
  string nickname = 7;
  string ext = 8;
  int32 sub_type = 10;
  int64 timestamp = 11;
}

message PuRoomChatMsg {
  repeated RoomChatMsg messages = 1;
}

message PkVoteReq {
  string target_uid = 1;
}

message PkVoteRsp {
  pkInfo pk_info = 1;
}

message PkSendGiftReq {
  SendGiftInfo info = 1;
}

message PkSendGiftRsp {
  pkInfo pk_info = 1;
  SendGiftRspInfo gift_info = 2;
}

message SendChatReq {
  int32 chat_type = 1;
  int32 message_type = 2;
  string content = 3;
  string message_id = 4;
  string nickname = 5;
  string ext = 6;
  int32 sub_type = 7;
}

message SendChatRsp {
  bool success = 1;
}

message SendGiftReq {
  SendGiftInfo info = 1;
}

message SendGiftInfo {
  string target_uid = 1;
  string target_nickname = 2;
  int32 source = 3;
  bool is_free = 4;
  int32 gift_id = 5;
  string gift_name = 6;
  int32 count = 7;
  int32 bag_count = 8;
  int32 message_index = 9;
  int32 charm = 10;
  string ext = 11;
}

message SendGiftRspInfo {
  int32 state = 1;
  int32 bag_count = 2;
  int64 charm = 3;
  int64 remain = 4;
  int32 care = 5;
  string extra = 6;
  string reward_desc = 7;
  string buff_info = 8;
}

message SendGiftRsp {
  SendGiftRspInfo info = 1;
}

message PuSendGiftMsg {
  string sender_uid = 1;
  string target_uid = 2;
  int32 gift_id = 3;
  int32 gift_num = 4;
}

message SendEmojiReq {
  int32 emoji_id = 1;
  int32 seat_index = 2;
}

message SendEmojiRsp {
  int32 value = 1; // 如果是骰子表情则是骰子的结果, 1-6, 其余表情该值为 0
}

message PuSendEmojiMsg {
  int32 seat_index = 1;
  int32 emoji_id = 2;
  int32 value = 3; // 骰子表情随机数结果
}

message SeatKickReq {
  int32 index = 1;
}

message SeatKickRsp {
}

message PuSeatKickMsg {
}

// 邀请进房间
message RoomInviteReq {
  string target_uid = 1;
  string nickname = 2; // 自己的昵称
  string chat_ext = 3; // 私聊天自己的ext(气泡框)
}

message RoomInviteRsp {
}

message PuRoomInviteMsg {
  string invite_uid = 1;
  int32 rid = 2;
}


message PuPlayMusicMsg {
  voiceRoomMusicInfo music = 1;
}

message PuBanChatMsg {
  int32 opt = 1; // 1禁聊天，2打开
}

enum spyType {
  spyTypeUndef = 0;
  spyTypMicUser = 1; //麦上玩家
}
message StartSpyReq {
  spyType opt = 1; // 参与玩家，目前只有 1:麦上玩家
  int32 spy_num = 2;
  bool allow_chat = 3; //是否允许公屏文字聊天
}
message StartSpyRsp {
}
message PuSpyWordMsg { // 下发谁是卧底词汇，每个用户单独push
  string word = 1;
}

message StartSpyVoteReq {
}
message StartSpyVoteRsp {
  int32 vote_time = 1; // 投票时间(秒)
}

message SpyVoteReq {
  int32 vote_index = 1;
}

message SpyVoteRsp {
}

message PuStartSpyVoteMsg {
  repeated int32 vote_indexs = 1; // 可以投票的麦位
}
message PuSpyVoteResMsg { // 投票结果push
  repeated string vote_res = 1; // 投票结果
  repeated int32 vote_detail = 2; // 投票详情
}
message PuSpyEliminateMsg { // 房主主动结束游戏push
  repeated int32 eliminate_indexs = 1;
}
enum spyGameRes {
  gsUndef = 0;
  CivilianWin = 1; // 平民胜利
  SpyWin = 2; // 卧底胜利

}
message PuSpyEndResMsg { // 游戏结束结果push
  string spy_word = 1; // 卧底词汇
  string civilian_word = 2; // 平民词汇
  spyGameRes game_res = 3; // 游戏结果，1
  repeated string spy_uids = 4; // 卧底uid
}

message EndSpyGameReq { // 房主主动结束游戏
}
message EndSpyGameRsp {
}
message PuEndSpyGameMsg { // 房主主动结束游戏push
}

message SpyInfo {
  bool is_start = 1;
  int64  start_time = 2; //开始时间戳
  string spy_word = 3;
  string civ_word = 4;
  repeated string spy_uids = 5; //卧底uids
  repeated string civ_uids = 6; //平民uids
  int32 voted_times = 7; //投票轮次
  int64 cur_vote_et = 8; //当前投票轮次结束时间戳
  repeated int32 survival_indexs = 9; //没有被淘汰的麦位
  repeated int32 last_vote_res = 10; //上一轮投票结果(麦位)
}

message AuctionSetting {
  string content = 1; //拍卖内容
  int32 gift_id = 2; //礼物id
  int32 num = 3; //起拍礼物数量
}

message UpdateAuctionSettingReq {
  AuctionSetting setting = 1; //拍卖设置
}
message UpdateAuctionSettingRsp {
}

message PuAuctionSettingMsg {
  AuctionSetting setting = 1; //拍卖设置
}

message StartAuctionReq {
}
message StartAuctionRsp {
}

message PuStartAuctionMsg {
}

message AuctionBidReq {
  int32 delta = 1; // 拍卖加价数量（增加的数量）
}
message AuctionBidRsp {
}

message PuAuctionBidMsg {
  string uid = 1; //出价者uid
  int32 gift_num = 2; //最高出价的礼物数量
}

message FinishAuctionReq {
}
message FinishAuctinRsp {
}

message PuAuctionResultMsg {
  string seller = 1; //拍卖者uid
  string buyer = 2; //买家uid,为空表示流拍
  int32 gift_id = 3; //礼物id
  int32 gift_num = 4; //最终礼物数量
}

message AuctionInfo {
  AuctionSetting setting = 1; //拍卖设置信息
  string uid = 2; //当前最高出价者uid
  int32 gift_num = 3; //当前最高出价礼物数
}

message PuPlayTencentCloudMusicMsg {
  VoiceRoomTencentCloudMusicInfo music = 1;
}