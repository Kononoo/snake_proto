// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package unityctl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnityctlServerClient is the client API for UnityctlServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnityctlServerClient interface {
	SyncState(ctx context.Context, in *SyncStateReq, opts ...grpc.CallOption) (*SyncStateRsp, error)
	EndGame(ctx context.Context, in *EndGameReq, opts ...grpc.CallOption) (*EndGameRsp, error)
	GameReady(ctx context.Context, in *GameReadyReq, opts ...grpc.CallOption) (*GameReadyRsp, error)
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (UnityctlServer_SubscribeClient, error)
	UploadMetric(ctx context.Context, opts ...grpc.CallOption) (UnityctlServer_UploadMetricClient, error)
	GetUnityConfig(ctx context.Context, in *GetUnityConfigReq, opts ...grpc.CallOption) (*GetUnityConfigRsp, error)
	GetModeVersion(ctx context.Context, in *GetModeVersionReq, opts ...grpc.CallOption) (*GetModeVersionRsp, error)
	GetUploadLogToken(ctx context.Context, in *GetUploadLogTokenReq, opts ...grpc.CallOption) (*GetUploadLogTokenRsp, error)
}

type unityctlServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUnityctlServerClient(cc grpc.ClientConnInterface) UnityctlServerClient {
	return &unityctlServerClient{cc}
}

func (c *unityctlServerClient) SyncState(ctx context.Context, in *SyncStateReq, opts ...grpc.CallOption) (*SyncStateRsp, error) {
	out := new(SyncStateRsp)
	err := c.cc.Invoke(ctx, "/unityctl.UnityctlServer/SyncState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unityctlServerClient) EndGame(ctx context.Context, in *EndGameReq, opts ...grpc.CallOption) (*EndGameRsp, error) {
	out := new(EndGameRsp)
	err := c.cc.Invoke(ctx, "/unityctl.UnityctlServer/EndGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unityctlServerClient) GameReady(ctx context.Context, in *GameReadyReq, opts ...grpc.CallOption) (*GameReadyRsp, error) {
	out := new(GameReadyRsp)
	err := c.cc.Invoke(ctx, "/unityctl.UnityctlServer/GameReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unityctlServerClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (UnityctlServer_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UnityctlServer_ServiceDesc.Streams[0], "/unityctl.UnityctlServer/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &unityctlServerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnityctlServer_SubscribeClient interface {
	Recv() (*SubscribeRsp, error)
	grpc.ClientStream
}

type unityctlServerSubscribeClient struct {
	grpc.ClientStream
}

func (x *unityctlServerSubscribeClient) Recv() (*SubscribeRsp, error) {
	m := new(SubscribeRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unityctlServerClient) UploadMetric(ctx context.Context, opts ...grpc.CallOption) (UnityctlServer_UploadMetricClient, error) {
	stream, err := c.cc.NewStream(ctx, &UnityctlServer_ServiceDesc.Streams[1], "/unityctl.UnityctlServer/UploadMetric", opts...)
	if err != nil {
		return nil, err
	}
	x := &unityctlServerUploadMetricClient{stream}
	return x, nil
}

type UnityctlServer_UploadMetricClient interface {
	Send(*UploadMetricReq) error
	CloseAndRecv() (*UploadMetricRsq, error)
	grpc.ClientStream
}

type unityctlServerUploadMetricClient struct {
	grpc.ClientStream
}

func (x *unityctlServerUploadMetricClient) Send(m *UploadMetricReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *unityctlServerUploadMetricClient) CloseAndRecv() (*UploadMetricRsq, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadMetricRsq)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unityctlServerClient) GetUnityConfig(ctx context.Context, in *GetUnityConfigReq, opts ...grpc.CallOption) (*GetUnityConfigRsp, error) {
	out := new(GetUnityConfigRsp)
	err := c.cc.Invoke(ctx, "/unityctl.UnityctlServer/GetUnityConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unityctlServerClient) GetModeVersion(ctx context.Context, in *GetModeVersionReq, opts ...grpc.CallOption) (*GetModeVersionRsp, error) {
	out := new(GetModeVersionRsp)
	err := c.cc.Invoke(ctx, "/unityctl.UnityctlServer/GetModeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unityctlServerClient) GetUploadLogToken(ctx context.Context, in *GetUploadLogTokenReq, opts ...grpc.CallOption) (*GetUploadLogTokenRsp, error) {
	out := new(GetUploadLogTokenRsp)
	err := c.cc.Invoke(ctx, "/unityctl.UnityctlServer/GetUploadLogToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnityctlServerServer is the server API for UnityctlServer service.
// All implementations should embed UnimplementedUnityctlServerServer
// for forward compatibility
type UnityctlServerServer interface {
	SyncState(context.Context, *SyncStateReq) (*SyncStateRsp, error)
	EndGame(context.Context, *EndGameReq) (*EndGameRsp, error)
	GameReady(context.Context, *GameReadyReq) (*GameReadyRsp, error)
	Subscribe(*SubscribeReq, UnityctlServer_SubscribeServer) error
	UploadMetric(UnityctlServer_UploadMetricServer) error
	GetUnityConfig(context.Context, *GetUnityConfigReq) (*GetUnityConfigRsp, error)
	GetModeVersion(context.Context, *GetModeVersionReq) (*GetModeVersionRsp, error)
	GetUploadLogToken(context.Context, *GetUploadLogTokenReq) (*GetUploadLogTokenRsp, error)
}

// UnimplementedUnityctlServerServer should be embedded to have forward compatible implementations.
type UnimplementedUnityctlServerServer struct {
}

func (UnimplementedUnityctlServerServer) SyncState(context.Context, *SyncStateReq) (*SyncStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncState not implemented")
}
func (UnimplementedUnityctlServerServer) EndGame(context.Context, *EndGameReq) (*EndGameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGame not implemented")
}
func (UnimplementedUnityctlServerServer) GameReady(context.Context, *GameReadyReq) (*GameReadyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameReady not implemented")
}
func (UnimplementedUnityctlServerServer) Subscribe(*SubscribeReq, UnityctlServer_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUnityctlServerServer) UploadMetric(UnityctlServer_UploadMetricServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMetric not implemented")
}
func (UnimplementedUnityctlServerServer) GetUnityConfig(context.Context, *GetUnityConfigReq) (*GetUnityConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnityConfig not implemented")
}
func (UnimplementedUnityctlServerServer) GetModeVersion(context.Context, *GetModeVersionReq) (*GetModeVersionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModeVersion not implemented")
}
func (UnimplementedUnityctlServerServer) GetUploadLogToken(context.Context, *GetUploadLogTokenReq) (*GetUploadLogTokenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadLogToken not implemented")
}

// UnsafeUnityctlServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnityctlServerServer will
// result in compilation errors.
type UnsafeUnityctlServerServer interface {
	mustEmbedUnimplementedUnityctlServerServer()
}

func RegisterUnityctlServerServer(s grpc.ServiceRegistrar, srv UnityctlServerServer) {
	s.RegisterService(&UnityctlServer_ServiceDesc, srv)
}

func _UnityctlServer_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnityctlServerServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unityctl.UnityctlServer/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnityctlServerServer).SyncState(ctx, req.(*SyncStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnityctlServer_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnityctlServerServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unityctl.UnityctlServer/EndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnityctlServerServer).EndGame(ctx, req.(*EndGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnityctlServer_GameReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReadyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnityctlServerServer).GameReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unityctl.UnityctlServer/GameReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnityctlServerServer).GameReady(ctx, req.(*GameReadyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnityctlServer_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnityctlServerServer).Subscribe(m, &unityctlServerSubscribeServer{stream})
}

type UnityctlServer_SubscribeServer interface {
	Send(*SubscribeRsp) error
	grpc.ServerStream
}

type unityctlServerSubscribeServer struct {
	grpc.ServerStream
}

func (x *unityctlServerSubscribeServer) Send(m *SubscribeRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _UnityctlServer_UploadMetric_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnityctlServerServer).UploadMetric(&unityctlServerUploadMetricServer{stream})
}

type UnityctlServer_UploadMetricServer interface {
	SendAndClose(*UploadMetricRsq) error
	Recv() (*UploadMetricReq, error)
	grpc.ServerStream
}

type unityctlServerUploadMetricServer struct {
	grpc.ServerStream
}

func (x *unityctlServerUploadMetricServer) SendAndClose(m *UploadMetricRsq) error {
	return x.ServerStream.SendMsg(m)
}

func (x *unityctlServerUploadMetricServer) Recv() (*UploadMetricReq, error) {
	m := new(UploadMetricReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UnityctlServer_GetUnityConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnityConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnityctlServerServer).GetUnityConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unityctl.UnityctlServer/GetUnityConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnityctlServerServer).GetUnityConfig(ctx, req.(*GetUnityConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnityctlServer_GetModeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModeVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnityctlServerServer).GetModeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unityctl.UnityctlServer/GetModeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnityctlServerServer).GetModeVersion(ctx, req.(*GetModeVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnityctlServer_GetUploadLogToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadLogTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnityctlServerServer).GetUploadLogToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unityctl.UnityctlServer/GetUploadLogToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnityctlServerServer).GetUploadLogToken(ctx, req.(*GetUploadLogTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UnityctlServer_ServiceDesc is the grpc.ServiceDesc for UnityctlServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnityctlServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unityctl.UnityctlServer",
	HandlerType: (*UnityctlServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncState",
			Handler:    _UnityctlServer_SyncState_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _UnityctlServer_EndGame_Handler,
		},
		{
			MethodName: "GameReady",
			Handler:    _UnityctlServer_GameReady_Handler,
		},
		{
			MethodName: "GetUnityConfig",
			Handler:    _UnityctlServer_GetUnityConfig_Handler,
		},
		{
			MethodName: "GetModeVersion",
			Handler:    _UnityctlServer_GetModeVersion_Handler,
		},
		{
			MethodName: "GetUploadLogToken",
			Handler:    _UnityctlServer_GetUploadLogToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _UnityctlServer_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadMetric",
			Handler:       _UnityctlServer_UploadMetric_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "unityctl/unityctl.proto",
}
