syntax = "proto3";

package unityctl;
option go_package = "git.17zjh.com/snake/snake_proto/unityctl";
import "unityctl/push.proto";
import "google/protobuf/struct.proto";

enum RoomState {
  Idle = 0; // 空闲
  WaitEnter = 1; // 待进入
  InGame = 2; // 游戏中
  WaitExit = 3; // 待退出
  Offline = 4; // 离线
}

// unity server每秒定时同步房间状态
message SyncStateReq {
  string addr = 1; // ip:端口
  int32 pid = 2; // 进程id
  int32 game_mode = 3; // 游戏模式
  int32 modeVersion = 4; // 模式版本号
  RoomState state = 5; // 状态
}

message SyncStateRsp {
}

// 游戏结束时untiy server通知游戏结果
message EndGameReq {
  string addr = 1; // ip:端口
  int32 rid = 2; // 房间id
  int32 game_mode = 3; // 游戏模式
  bytes payload = 4; // 额外数据
}

// 玩家结算时的一些数据，同top_list_v2/update_score接口
message TeamEndlessEndGame {
  string uid = 1; // 结算的玩家uid
  int32 platform = 3;
  string market = 4;
  string version = 5;
  string device_id = 6;
  int32 version_code = 7;
  int32 game_mode = 8;
  int32 kill = 9;
  int32 length = 10;
  int32 login_type = 11;
  int32 buff = 12;
  int32 first_charge_state = 13;
  int32 relive_count = 14;
  string relive_types = 15;
  int32 skin_id = 16;
  int32 new_score = 17;
  int32 game_time = 18;
  int32 destroy_length = 19;
  string score = 20;
  int32 collect = 21;
  int32 nonce = 22;
  string ab_groups = 23;
  string floating_collect_info = 24;
  string floating_collect_v2 = 25;
  int32 mushroom_id = 26;
  int32 mushroom_num = 27;
  int32 recover = 28;
  map<int64, int64> goat_chest_rewards = 29;
  int64 show_goat_chest_count = 30;
}

message EndGameRsp {
}

message SubscribeReq { // 客户端订阅push消息
  string addr = 1; // ip:端口
}

message SubscribeRsp { // 服务器推送push消息
  PushType pushType = 1; // push 类型
  bytes data = 2; // push内容
  string msgId = 3; // 唯一标识
}

message GameReadyReq { // unity server初始化成功后通知
  bool ready = 1; // 是否初始化成功
  string msgId = 2; // push消息中的唯一标识
  string addr = 3; // ip:端口
  string ds_id = 4; // unity server id 标识
  int32 rid = 5; // 房间 id
}
message GameReadyRsp{
}

// 上传打点
message UploadMetricReq {
  string action = 1;
  string uid = 2;
  int32 rid = 3;
  int32 platform = 4;
  string market = 5;
  string version = 6;
  google.protobuf.Struct kvs = 7;
}

message UploadMetricRsq {
}

// 获取apollo上的unity配置
message GetUnityConfigReq {
  string namespace_prefix = 1; // 命名空间前缀
  string client_version = 2; // 客户端版本
  string hot_version = 3; // 热更版本
  repeated string keys = 4;
}

message UnityConfigItem {
  string md5 = 1;
  int64 version = 2;
  string value = 3;
}

message GetUnityConfigRsp {
  map<string, UnityConfigItem> configs = 1;
}

// 获取模式版本号
message GetModeVersionReq {
  int32 game_mode = 1;
  string client_version = 2;
  string hot_version = 3;
}

message GetModeVersionRsp {
  int32 mode_version = 1;
}

// 获取日志上传token
message GetUploadLogTokenReq {
  string file_name = 1;
  string directory = 2;
}
message GetUploadLogTokenRsp {
  string accessid = 1;
  string host = 2;
  int64 expire = 3;
  string signature = 4;
  string policy = 5;
  string dir = 6;
  string callback = 7;
  string cdnhost = 8;
  string url = 9;
}

// 获取贪吃蛇apollo配置，版本号是最新的不下发数据
message GetSnakeConfigReq {
  string namespace = 1; // 命名空间
  map<string, string> keys = 2; // 配置名 -> 版本号
}
message GetSnakeConfigRsp {
  map<string, SnakeConfigItem> configs = 1; // 配置名 -> 配置值
}

message SnakeConfigItem {
  int64 version = 1;
  string value = 2;
}

service UnityctlServer {
  rpc SyncState (SyncStateReq) returns (SyncStateRsp) {}
  rpc EndGame (EndGameReq) returns (EndGameRsp) {}
  rpc GameReady (GameReadyReq) returns (GameReadyRsp) {}
  rpc Subscribe (SubscribeReq) returns (stream SubscribeRsp) {}
  rpc UploadMetric(stream UploadMetricReq) returns (UploadMetricRsq) {}
  rpc GetUnityConfig(GetUnityConfigReq) returns (GetUnityConfigRsp) {}
  rpc GetModeVersion(GetModeVersionReq) returns (GetModeVersionRsp) {}
  rpc GetUploadLogToken(GetUploadLogTokenReq) returns (GetUploadLogTokenRsp) {}
  rpc GetSnakeConfig(GetSnakeConfigReq) returns (GetSnakeConfigRsp) {}
}