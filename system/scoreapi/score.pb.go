// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: system/scoreapi/score.proto

package scoreapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// get_user_score_info request
// route: score.GetUserScoreInfo
type UserScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TargetUid string `protobuf:"bytes,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	Visit     int64  `protobuf:"varint,3,opt,name=visit,proto3" json:"visit,omitempty"`
	Version   string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Platform  int64  `protobuf:"varint,5,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *UserScoreReq) Reset() {
	*x = UserScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreReq) ProtoMessage() {}

func (x *UserScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreReq.ProtoReflect.Descriptor instead.
func (*UserScoreReq) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{0}
}

func (x *UserScoreReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserScoreReq) GetTargetUid() string {
	if x != nil {
		return x.TargetUid
	}
	return ""
}

func (x *UserScoreReq) GetVisit() int64 {
	if x != nil {
		return x.Visit
	}
	return 0
}

func (x *UserScoreReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserScoreReq) GetPlatform() int64 {
	if x != nil {
		return x.Platform
	}
	return 0
}

type UserScoreHttpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *UserScoreRsp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code int64         `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string        `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Time int64         `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UserScoreHttpRsp) Reset() {
	*x = UserScoreHttpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreHttpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreHttpRsp) ProtoMessage() {}

func (x *UserScoreHttpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreHttpRsp.ProtoReflect.Descriptor instead.
func (*UserScoreHttpRsp) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{1}
}

func (x *UserScoreHttpRsp) GetData() *UserScoreRsp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UserScoreHttpRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserScoreHttpRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserScoreHttpRsp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// get_user_score_info response
type UserScoreRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_info
	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	IsUnderage  int64  `protobuf:"varint,2,opt,name=is_underage,json=isUnderage,proto3" json:"is_underage,omitempty"`
	Age         int64  `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Gender      int64  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Nickname    string `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar      string `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	BigAvatar   string `protobuf:"bytes,7,opt,name=big_avatar,json=bigAvatar,proto3" json:"big_avatar,omitempty"`
	AvatarState int64  `protobuf:"varint,8,opt,name=avatar_state,json=avatarState,proto3" json:"avatar_state,omitempty"`
	// score
	EndLen        int64           `protobuf:"varint,9,opt,name=end_len,json=endLen,proto3" json:"end_len,omitempty"`
	EndLenRank    string          `protobuf:"bytes,10,opt,name=end_len_rank,json=endLenRank,proto3" json:"end_len_rank,omitempty"`
	LimitLen      int64           `protobuf:"varint,11,opt,name=limit_len,json=limitLen,proto3" json:"limit_len,omitempty"`
	LimitLenRank  string          `protobuf:"bytes,12,opt,name=limit_len_rank,json=limitLenRank,proto3" json:"limit_len_rank,omitempty"`
	EndKill       int64           `protobuf:"varint,13,opt,name=end_kill,json=endKill,proto3" json:"end_kill,omitempty"`
	EndKillRank   string          `protobuf:"bytes,14,opt,name=end_kill_rank,json=endKillRank,proto3" json:"end_kill_rank,omitempty"`
	LimitKill     int64           `protobuf:"varint,15,opt,name=limit_kill,json=limitKill,proto3" json:"limit_kill,omitempty"`
	LimitKillRank string          `protobuf:"bytes,16,opt,name=limit_kill_rank,json=limitKillRank,proto3" json:"limit_kill_rank,omitempty"`
	Len           int64           `protobuf:"varint,17,opt,name=len,proto3" json:"len,omitempty"`
	Kill          int64           `protobuf:"varint,18,opt,name=kill,proto3" json:"kill,omitempty"`
	GameCount     int64           `protobuf:"varint,19,opt,name=game_count,json=gameCount,proto3" json:"game_count,omitempty"`
	ExciteStat    *UserExciteStat `protobuf:"bytes,20,opt,name=excite_stat,json=exciteStat,proto3" json:"excite_stat,omitempty"`
	// grade_info
	GradeInfo         *GradeInfo           `protobuf:"bytes,21,opt,name=grade_info,json=gradeInfo,proto3" json:"grade_info,omitempty"`
	BoxId             int64                `protobuf:"varint,22,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	FreeStats         *FreeStats           `protobuf:"bytes,23,opt,name=free_stats,json=freeStats,proto3" json:"free_stats,omitempty"`
	QualifyingStats   *QualifyingStatsResp `protobuf:"bytes,24,opt,name=qualifying_stats,json=qualifyingStats,proto3" json:"qualifying_stats,omitempty"`
	HappycoinStats    *HappyCoinResp       `protobuf:"bytes,25,opt,name=happycoin_stats,json=happycoinStats,proto3" json:"happycoin_stats,omitempty"`
	LoginType         int64                `protobuf:"varint,26,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`
	Area              *Area                `protobuf:"bytes,27,opt,name=area,proto3" json:"area,omitempty"`
	PhotoList         []*Photo             `protobuf:"bytes,28,rep,name=photo_list,json=photoList,proto3" json:"photo_list,omitempty"`
	Signature         string               `protobuf:"bytes,29,opt,name=signature,proto3" json:"signature,omitempty"`
	SeasonHonor       []*SeasonRank        `protobuf:"bytes,30,rep,name=season_honor,json=seasonHonor,proto3" json:"season_honor,omitempty"`
	Remark            string               `protobuf:"bytes,31,opt,name=remark,proto3" json:"remark,omitempty"`
	FollowingCount    int64                `protobuf:"varint,32,opt,name=following_count,json=followingCount,proto3" json:"following_count,omitempty"`
	FollowerCount     int64                `protobuf:"varint,33,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`
	IsFollower        int64                `protobuf:"varint,34,opt,name=is_follower,json=isFollower,proto3" json:"is_follower,omitempty"`
	ClanInfo          *OtherClanInfo       `protobuf:"bytes,35,opt,name=clan_info,json=clanInfo,proto3" json:"clan_info,omitempty"`
	SocialInfo        *SocialInfo          `protobuf:"bytes,36,opt,name=social_info,json=socialInfo,proto3" json:"social_info,omitempty"`
	Show              int64                `protobuf:"varint,37,opt,name=show,proto3" json:"show,omitempty"`
	UserItemList      *UserHomepageItem    `protobuf:"bytes,38,opt,name=user_item_list,json=userItemList,proto3" json:"user_item_list,omitempty"`
	MarryInfo         *MarryInfoResp       `protobuf:"bytes,39,opt,name=marry_info,json=marryInfo,proto3" json:"marry_info,omitempty"`
	UserTitleList     []*UserBagTitle      `protobuf:"bytes,40,rep,name=user_title_list,json=userTitleList,proto3" json:"user_title_list,omitempty"`
	UserWearTitle     []*UserTitleInfo     `protobuf:"bytes,41,rep,name=user_wear_title,json=userWearTitle,proto3" json:"user_wear_title,omitempty"`
	TeamKill          *TeamKillResp        `protobuf:"bytes,42,opt,name=team_kill,json=teamKill,proto3" json:"team_kill,omitempty"`
	RaceNormalStats   *SimpleGameDetail    `protobuf:"bytes,43,opt,name=race_normal_stats,json=raceNormalStats,proto3" json:"race_normal_stats,omitempty"`
	PlayerId          int64                `protobuf:"varint,44,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	IsMaster          int64                `protobuf:"varint,45,opt,name=is_master,json=isMaster,proto3" json:"is_master,omitempty"`
	IsPrentice        int64                `protobuf:"varint,46,opt,name=is_prentice,json=isPrentice,proto3" json:"is_prentice,omitempty"`
	HideMentorship    int64                `protobuf:"varint,47,opt,name=hide_mentorship,json=hideMentorship,proto3" json:"hide_mentorship,omitempty"`
	Mentorship        int64                `protobuf:"varint,48,opt,name=mentorship,proto3" json:"mentorship,omitempty"`
	MasterPoint       int64                `protobuf:"varint,49,opt,name=master_point,json=masterPoint,proto3" json:"master_point,omitempty"`
	CharmExpLevel     int64                `protobuf:"varint,50,opt,name=charm_exp_level,json=charmExpLevel,proto3" json:"charm_exp_level,omitempty"`
	HomepageShowId    int64                `protobuf:"varint,51,opt,name=homepage_show_id,json=homepageShowId,proto3" json:"homepage_show_id,omitempty"`
	HomepageOpenId    int64                `protobuf:"varint,52,opt,name=homepage_open_id,json=homepageOpenId,proto3" json:"homepage_open_id,omitempty"`
	HomePendantId     int64                `protobuf:"varint,53,opt,name=home_pendant_id,json=homePendantId,proto3" json:"home_pendant_id,omitempty"`
	Verified          int64                `protobuf:"varint,54,opt,name=verified,proto3" json:"verified,omitempty"`
	VerifiedDesc      string               `protobuf:"bytes,55,opt,name=verified_desc,json=verifiedDesc,proto3" json:"verified_desc,omitempty"`
	NicknameRemain    int64                `protobuf:"varint,56,opt,name=nickname_remain,json=nicknameRemain,proto3" json:"nickname_remain,omitempty"`
	AvatarRemain      int64                `protobuf:"varint,57,opt,name=avatar_remain,json=avatarRemain,proto3" json:"avatar_remain,omitempty"`
	SignatureRemain   int64                `protobuf:"varint,58,opt,name=signature_remain,json=signatureRemain,proto3" json:"signature_remain,omitempty"`
	SocialBgId        int64                `protobuf:"varint,59,opt,name=social_bg_id,json=socialBgId,proto3" json:"social_bg_id,omitempty"`
	ChargeExp         int64                `protobuf:"varint,60,opt,name=charge_exp,json=chargeExp,proto3" json:"charge_exp,omitempty"`
	GiftCollectList   []*GiftItem          `protobuf:"bytes,61,rep,name=gift_collect_list,json=giftCollectList,proto3" json:"gift_collect_list,omitempty"`
	CharmLevelGotList []int64              `protobuf:"varint,62,rep,packed,name=charm_level_got_list,json=charmLevelGotList,proto3" json:"charm_level_got_list,omitempty"`
	// 好友状态信息 1是单向好友
	FriendState int64 `protobuf:"varint,63,opt,name=friend_state,json=friendState,proto3" json:"friend_state,omitempty"`
}

func (x *UserScoreRsp) Reset() {
	*x = UserScoreRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreRsp) ProtoMessage() {}

func (x *UserScoreRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreRsp.ProtoReflect.Descriptor instead.
func (*UserScoreRsp) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{2}
}

func (x *UserScoreRsp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserScoreRsp) GetIsUnderage() int64 {
	if x != nil {
		return x.IsUnderage
	}
	return 0
}

func (x *UserScoreRsp) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserScoreRsp) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UserScoreRsp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserScoreRsp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserScoreRsp) GetBigAvatar() string {
	if x != nil {
		return x.BigAvatar
	}
	return ""
}

func (x *UserScoreRsp) GetAvatarState() int64 {
	if x != nil {
		return x.AvatarState
	}
	return 0
}

func (x *UserScoreRsp) GetEndLen() int64 {
	if x != nil {
		return x.EndLen
	}
	return 0
}

func (x *UserScoreRsp) GetEndLenRank() string {
	if x != nil {
		return x.EndLenRank
	}
	return ""
}

func (x *UserScoreRsp) GetLimitLen() int64 {
	if x != nil {
		return x.LimitLen
	}
	return 0
}

func (x *UserScoreRsp) GetLimitLenRank() string {
	if x != nil {
		return x.LimitLenRank
	}
	return ""
}

func (x *UserScoreRsp) GetEndKill() int64 {
	if x != nil {
		return x.EndKill
	}
	return 0
}

func (x *UserScoreRsp) GetEndKillRank() string {
	if x != nil {
		return x.EndKillRank
	}
	return ""
}

func (x *UserScoreRsp) GetLimitKill() int64 {
	if x != nil {
		return x.LimitKill
	}
	return 0
}

func (x *UserScoreRsp) GetLimitKillRank() string {
	if x != nil {
		return x.LimitKillRank
	}
	return ""
}

func (x *UserScoreRsp) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *UserScoreRsp) GetKill() int64 {
	if x != nil {
		return x.Kill
	}
	return 0
}

func (x *UserScoreRsp) GetGameCount() int64 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *UserScoreRsp) GetExciteStat() *UserExciteStat {
	if x != nil {
		return x.ExciteStat
	}
	return nil
}

func (x *UserScoreRsp) GetGradeInfo() *GradeInfo {
	if x != nil {
		return x.GradeInfo
	}
	return nil
}

func (x *UserScoreRsp) GetBoxId() int64 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *UserScoreRsp) GetFreeStats() *FreeStats {
	if x != nil {
		return x.FreeStats
	}
	return nil
}

func (x *UserScoreRsp) GetQualifyingStats() *QualifyingStatsResp {
	if x != nil {
		return x.QualifyingStats
	}
	return nil
}

func (x *UserScoreRsp) GetHappycoinStats() *HappyCoinResp {
	if x != nil {
		return x.HappycoinStats
	}
	return nil
}

func (x *UserScoreRsp) GetLoginType() int64 {
	if x != nil {
		return x.LoginType
	}
	return 0
}

func (x *UserScoreRsp) GetArea() *Area {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *UserScoreRsp) GetPhotoList() []*Photo {
	if x != nil {
		return x.PhotoList
	}
	return nil
}

func (x *UserScoreRsp) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UserScoreRsp) GetSeasonHonor() []*SeasonRank {
	if x != nil {
		return x.SeasonHonor
	}
	return nil
}

func (x *UserScoreRsp) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserScoreRsp) GetFollowingCount() int64 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *UserScoreRsp) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *UserScoreRsp) GetIsFollower() int64 {
	if x != nil {
		return x.IsFollower
	}
	return 0
}

func (x *UserScoreRsp) GetClanInfo() *OtherClanInfo {
	if x != nil {
		return x.ClanInfo
	}
	return nil
}

func (x *UserScoreRsp) GetSocialInfo() *SocialInfo {
	if x != nil {
		return x.SocialInfo
	}
	return nil
}

func (x *UserScoreRsp) GetShow() int64 {
	if x != nil {
		return x.Show
	}
	return 0
}

func (x *UserScoreRsp) GetUserItemList() *UserHomepageItem {
	if x != nil {
		return x.UserItemList
	}
	return nil
}

func (x *UserScoreRsp) GetMarryInfo() *MarryInfoResp {
	if x != nil {
		return x.MarryInfo
	}
	return nil
}

func (x *UserScoreRsp) GetUserTitleList() []*UserBagTitle {
	if x != nil {
		return x.UserTitleList
	}
	return nil
}

func (x *UserScoreRsp) GetUserWearTitle() []*UserTitleInfo {
	if x != nil {
		return x.UserWearTitle
	}
	return nil
}

func (x *UserScoreRsp) GetTeamKill() *TeamKillResp {
	if x != nil {
		return x.TeamKill
	}
	return nil
}

func (x *UserScoreRsp) GetRaceNormalStats() *SimpleGameDetail {
	if x != nil {
		return x.RaceNormalStats
	}
	return nil
}

func (x *UserScoreRsp) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UserScoreRsp) GetIsMaster() int64 {
	if x != nil {
		return x.IsMaster
	}
	return 0
}

func (x *UserScoreRsp) GetIsPrentice() int64 {
	if x != nil {
		return x.IsPrentice
	}
	return 0
}

func (x *UserScoreRsp) GetHideMentorship() int64 {
	if x != nil {
		return x.HideMentorship
	}
	return 0
}

func (x *UserScoreRsp) GetMentorship() int64 {
	if x != nil {
		return x.Mentorship
	}
	return 0
}

func (x *UserScoreRsp) GetMasterPoint() int64 {
	if x != nil {
		return x.MasterPoint
	}
	return 0
}

func (x *UserScoreRsp) GetCharmExpLevel() int64 {
	if x != nil {
		return x.CharmExpLevel
	}
	return 0
}

func (x *UserScoreRsp) GetHomepageShowId() int64 {
	if x != nil {
		return x.HomepageShowId
	}
	return 0
}

func (x *UserScoreRsp) GetHomepageOpenId() int64 {
	if x != nil {
		return x.HomepageOpenId
	}
	return 0
}

func (x *UserScoreRsp) GetHomePendantId() int64 {
	if x != nil {
		return x.HomePendantId
	}
	return 0
}

func (x *UserScoreRsp) GetVerified() int64 {
	if x != nil {
		return x.Verified
	}
	return 0
}

func (x *UserScoreRsp) GetVerifiedDesc() string {
	if x != nil {
		return x.VerifiedDesc
	}
	return ""
}

func (x *UserScoreRsp) GetNicknameRemain() int64 {
	if x != nil {
		return x.NicknameRemain
	}
	return 0
}

func (x *UserScoreRsp) GetAvatarRemain() int64 {
	if x != nil {
		return x.AvatarRemain
	}
	return 0
}

func (x *UserScoreRsp) GetSignatureRemain() int64 {
	if x != nil {
		return x.SignatureRemain
	}
	return 0
}

func (x *UserScoreRsp) GetSocialBgId() int64 {
	if x != nil {
		return x.SocialBgId
	}
	return 0
}

func (x *UserScoreRsp) GetChargeExp() int64 {
	if x != nil {
		return x.ChargeExp
	}
	return 0
}

func (x *UserScoreRsp) GetGiftCollectList() []*GiftItem {
	if x != nil {
		return x.GiftCollectList
	}
	return nil
}

func (x *UserScoreRsp) GetCharmLevelGotList() []int64 {
	if x != nil {
		return x.CharmLevelGotList
	}
	return nil
}

func (x *UserScoreRsp) GetFriendState() int64 {
	if x != nil {
		return x.FriendState
	}
	return 0
}

type UserExciteStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxScore    int64  `protobuf:"varint,1,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MaxTime     int64  `protobuf:"varint,2,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	MaxKill     int64  `protobuf:"varint,3,opt,name=max_kill,json=maxKill,proto3" json:"max_kill,omitempty"`
	MaxHit      int64  `protobuf:"varint,4,opt,name=max_hit,json=maxHit,proto3" json:"max_hit,omitempty"`
	TotalCount  int64  `protobuf:"varint,5,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	SurviveTime int64  `protobuf:"varint,6,opt,name=survive_time,json=surviveTime,proto3" json:"survive_time,omitempty"`
	Week        string `protobuf:"bytes,7,opt,name=week,proto3" json:"week,omitempty"`
	WeekScore   int64  `protobuf:"varint,8,opt,name=week_score,json=weekScore,proto3" json:"week_score,omitempty"`
	Month       string `protobuf:"bytes,9,opt,name=month,proto3" json:"month,omitempty"`
	MonthScore  int64  `protobuf:"varint,10,opt,name=month_score,json=monthScore,proto3" json:"month_score,omitempty"`
}

func (x *UserExciteStat) Reset() {
	*x = UserExciteStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExciteStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExciteStat) ProtoMessage() {}

func (x *UserExciteStat) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExciteStat.ProtoReflect.Descriptor instead.
func (*UserExciteStat) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{3}
}

func (x *UserExciteStat) GetMaxScore() int64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *UserExciteStat) GetMaxTime() int64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *UserExciteStat) GetMaxKill() int64 {
	if x != nil {
		return x.MaxKill
	}
	return 0
}

func (x *UserExciteStat) GetMaxHit() int64 {
	if x != nil {
		return x.MaxHit
	}
	return 0
}

func (x *UserExciteStat) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *UserExciteStat) GetSurviveTime() int64 {
	if x != nil {
		return x.SurviveTime
	}
	return 0
}

func (x *UserExciteStat) GetWeek() string {
	if x != nil {
		return x.Week
	}
	return ""
}

func (x *UserExciteStat) GetWeekScore() int64 {
	if x != nil {
		return x.WeekScore
	}
	return 0
}

func (x *UserExciteStat) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *UserExciteStat) GetMonthScore() int64 {
	if x != nil {
		return x.MonthScore
	}
	return 0
}

type GradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ultimate  int64   `protobuf:"varint,1,opt,name=ultimate,proto3" json:"ultimate,omitempty"`
	Star      int64   `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	MaxStar   int64   `protobuf:"varint,3,opt,name=max_star,json=maxStar,proto3" json:"max_star,omitempty"`
	Time      int64   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Unlock    int64   `protobuf:"varint,5,opt,name=unlock,proto3" json:"unlock,omitempty"`
	RankCount []int64 `protobuf:"varint,6,rep,packed,name=rank_count,json=rankCount,proto3" json:"rank_count,omitempty"`
	PvpCount  int64   `protobuf:"varint,7,opt,name=PvpCount,proto3" json:"PvpCount,omitempty"`
}

func (x *GradeInfo) Reset() {
	*x = GradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeInfo) ProtoMessage() {}

func (x *GradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeInfo.ProtoReflect.Descriptor instead.
func (*GradeInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{4}
}

func (x *GradeInfo) GetUltimate() int64 {
	if x != nil {
		return x.Ultimate
	}
	return 0
}

func (x *GradeInfo) GetStar() int64 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *GradeInfo) GetMaxStar() int64 {
	if x != nil {
		return x.MaxStar
	}
	return 0
}

func (x *GradeInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GradeInfo) GetUnlock() int64 {
	if x != nil {
		return x.Unlock
	}
	return 0
}

func (x *GradeInfo) GetRankCount() []int64 {
	if x != nil {
		return x.RankCount
	}
	return nil
}

func (x *GradeInfo) GetPvpCount() int64 {
	if x != nil {
		return x.PvpCount
	}
	return 0
}

type FreeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times     int64 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	Kill      int64 `protobuf:"varint,2,opt,name=kill,proto3" json:"kill,omitempty"`
	MaxKill   int64 `protobuf:"varint,3,opt,name=max_kill,json=maxKill,proto3" json:"max_kill,omitempty"`
	MaxLength int64 `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
}

func (x *FreeStats) Reset() {
	*x = FreeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeStats) ProtoMessage() {}

func (x *FreeStats) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeStats.ProtoReflect.Descriptor instead.
func (*FreeStats) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{5}
}

func (x *FreeStats) GetTimes() int64 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *FreeStats) GetKill() int64 {
	if x != nil {
		return x.Kill
	}
	return 0
}

func (x *FreeStats) GetMaxKill() int64 {
	if x != nil {
		return x.MaxKill
	}
	return 0
}

func (x *FreeStats) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

type QualifyingStatsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HonorList []*HonorItem `protobuf:"bytes,1,rep,name=honor_list,json=honorList,proto3" json:"honor_list,omitempty"`
	Kill      int64        `protobuf:"varint,2,opt,name=kill,proto3" json:"kill,omitempty"`
	MaxKill   int64        `protobuf:"varint,3,opt,name=max_kill,json=maxKill,proto3" json:"max_kill,omitempty"`
	MaxLength int64        `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	Mvp       int64        `protobuf:"varint,5,opt,name=mvp,proto3" json:"mvp,omitempty"`
	PvpCount  int64        `protobuf:"varint,6,opt,name=pvp_count,json=pvpCount,proto3" json:"pvp_count,omitempty"`
	MaxHonor  *SeasonRank  `protobuf:"bytes,7,opt,name=max_honor,json=maxHonor,proto3" json:"max_honor,omitempty"`
}

func (x *QualifyingStatsResp) Reset() {
	*x = QualifyingStatsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingStatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingStatsResp) ProtoMessage() {}

func (x *QualifyingStatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingStatsResp.ProtoReflect.Descriptor instead.
func (*QualifyingStatsResp) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{6}
}

func (x *QualifyingStatsResp) GetHonorList() []*HonorItem {
	if x != nil {
		return x.HonorList
	}
	return nil
}

func (x *QualifyingStatsResp) GetKill() int64 {
	if x != nil {
		return x.Kill
	}
	return 0
}

func (x *QualifyingStatsResp) GetMaxKill() int64 {
	if x != nil {
		return x.MaxKill
	}
	return 0
}

func (x *QualifyingStatsResp) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *QualifyingStatsResp) GetMvp() int64 {
	if x != nil {
		return x.Mvp
	}
	return 0
}

func (x *QualifyingStatsResp) GetPvpCount() int64 {
	if x != nil {
		return x.PvpCount
	}
	return 0
}

func (x *QualifyingStatsResp) GetMaxHonor() *SeasonRank {
	if x != nil {
		return x.MaxHonor
	}
	return nil
}

type HonorItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HonorId string `protobuf:"bytes,1,opt,name=honor_id,json=honorId,proto3" json:"honor_id,omitempty"`
	Value   int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HonorItem) Reset() {
	*x = HonorItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HonorItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HonorItem) ProtoMessage() {}

func (x *HonorItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HonorItem.ProtoReflect.Descriptor instead.
func (*HonorItem) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{7}
}

func (x *HonorItem) GetHonorId() string {
	if x != nil {
		return x.HonorId
	}
	return ""
}

func (x *HonorItem) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SeasonRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season    string `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
	PrimeRank int64  `protobuf:"varint,2,opt,name=prime_rank,json=primeRank,proto3" json:"prime_rank,omitempty"`
	Star      int64  `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty"`
}

func (x *SeasonRank) Reset() {
	*x = SeasonRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonRank) ProtoMessage() {}

func (x *SeasonRank) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonRank.ProtoReflect.Descriptor instead.
func (*SeasonRank) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{8}
}

func (x *SeasonRank) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

func (x *SeasonRank) GetPrimeRank() int64 {
	if x != nil {
		return x.PrimeRank
	}
	return 0
}

func (x *SeasonRank) GetStar() int64 {
	if x != nil {
		return x.Star
	}
	return 0
}

// 返回的happy_stats结构
type HappyCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxHappycoin int64  `protobuf:"varint,1,opt,name=max_happycoin,json=maxHappycoin,proto3" json:"max_happycoin,omitempty"`
	IsCeo        int64  `protobuf:"varint,2,opt,name=is_ceo,json=isCeo,proto3" json:"is_ceo,omitempty"`
	EarnRate     string `protobuf:"bytes,3,opt,name=earn_rate,json=earnRate,proto3" json:"earn_rate,omitempty"`
	HistoryEarn  string `protobuf:"bytes,4,opt,name=history_earn,json=historyEarn,proto3" json:"history_earn,omitempty"`
	MaxEarn      string `protobuf:"bytes,5,opt,name=max_earn,json=maxEarn,proto3" json:"max_earn,omitempty"`
	TotalGames   int64  `protobuf:"varint,6,opt,name=total_games,json=totalGames,proto3" json:"total_games,omitempty"`
	TotalKill    int64  `protobuf:"varint,7,opt,name=total_kill,json=totalKill,proto3" json:"total_kill,omitempty"`
}

func (x *HappyCoinResp) Reset() {
	*x = HappyCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyCoinResp) ProtoMessage() {}

func (x *HappyCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyCoinResp.ProtoReflect.Descriptor instead.
func (*HappyCoinResp) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{9}
}

func (x *HappyCoinResp) GetMaxHappycoin() int64 {
	if x != nil {
		return x.MaxHappycoin
	}
	return 0
}

func (x *HappyCoinResp) GetIsCeo() int64 {
	if x != nil {
		return x.IsCeo
	}
	return 0
}

func (x *HappyCoinResp) GetEarnRate() string {
	if x != nil {
		return x.EarnRate
	}
	return ""
}

func (x *HappyCoinResp) GetHistoryEarn() string {
	if x != nil {
		return x.HistoryEarn
	}
	return ""
}

func (x *HappyCoinResp) GetMaxEarn() string {
	if x != nil {
		return x.MaxEarn
	}
	return ""
}

func (x *HappyCoinResp) GetTotalGames() int64 {
	if x != nil {
		return x.TotalGames
	}
	return 0
}

func (x *HappyCoinResp) GetTotalKill() int64 {
	if x != nil {
		return x.TotalKill
	}
	return 0
}

type Area struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Province string `protobuf:"bytes,1,opt,name=province,proto3" json:"province,omitempty"`
	City     string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *Area) Reset() {
	*x = Area{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Area) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Area) ProtoMessage() {}

func (x *Area) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Area.ProtoReflect.Descriptor instead.
func (*Area) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{10}
}

func (x *Area) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *Area) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId string `protobuf:"bytes,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	State   int64  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Url     string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{11}
}

func (x *Photo) GetPhotoId() string {
	if x != nil {
		return x.PhotoId
	}
	return ""
}

func (x *Photo) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Photo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type OtherClanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanId   string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Role     int64  `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
	LogoId   string `protobuf:"bytes,4,opt,name=logo_id,json=logoId,proto3" json:"logo_id,omitempty"`
	Index    int64  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	RewardId int64  `protobuf:"varint,6,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Area     *Area  `protobuf:"bytes,7,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *OtherClanInfo) Reset() {
	*x = OtherClanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherClanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherClanInfo) ProtoMessage() {}

func (x *OtherClanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherClanInfo.ProtoReflect.Descriptor instead.
func (*OtherClanInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{12}
}

func (x *OtherClanInfo) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *OtherClanInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtherClanInfo) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *OtherClanInfo) GetLogoId() string {
	if x != nil {
		return x.LogoId
	}
	return ""
}

func (x *OtherClanInfo) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OtherClanInfo) GetRewardId() int64 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *OtherClanInfo) GetArea() *Area {
	if x != nil {
		return x.Area
	}
	return nil
}

type SocialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyCare      int64              `protobuf:"varint,1,opt,name=my_care,json=myCare,proto3" json:"my_care,omitempty"`
	MyCareState int64              `protobuf:"varint,2,opt,name=my_care_state,json=myCareState,proto3" json:"my_care_state,omitempty"`
	CareList    []*SocialCharmInfo `protobuf:"bytes,3,rep,name=care_list,json=careList,proto3" json:"care_list,omitempty"`
	GiftList    []*SocialGiftCache `protobuf:"bytes,4,rep,name=gift_list,json=giftList,proto3" json:"gift_list,omitempty"`
	Charm       int64              `protobuf:"varint,5,opt,name=charm,proto3" json:"charm,omitempty"`
}

func (x *SocialInfo) Reset() {
	*x = SocialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialInfo) ProtoMessage() {}

func (x *SocialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialInfo.ProtoReflect.Descriptor instead.
func (*SocialInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{13}
}

func (x *SocialInfo) GetMyCare() int64 {
	if x != nil {
		return x.MyCare
	}
	return 0
}

func (x *SocialInfo) GetMyCareState() int64 {
	if x != nil {
		return x.MyCareState
	}
	return 0
}

func (x *SocialInfo) GetCareList() []*SocialCharmInfo {
	if x != nil {
		return x.CareList
	}
	return nil
}

func (x *SocialInfo) GetGiftList() []*SocialGiftCache {
	if x != nil {
		return x.GiftList
	}
	return nil
}

func (x *SocialInfo) GetCharm() int64 {
	if x != nil {
		return x.Charm
	}
	return 0
}

type SocialCharmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Charm         int64  `protobuf:"varint,2,opt,name=charm,proto3" json:"charm,omitempty"`
	Nickname      string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar        string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Gender        int64  `protobuf:"varint,5,opt,name=gender,proto3" json:"gender,omitempty"`
	BoxId         int64  `protobuf:"varint,6,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	Index         int64  `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	Time          int64  `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	Care          int64  `protobuf:"varint,9,opt,name=care,proto3" json:"care,omitempty"`
	CharmExpLevel int64  `protobuf:"varint,10,opt,name=charm_exp_level,json=charmExpLevel,proto3" json:"charm_exp_level,omitempty"`
	Verified      int64  `protobuf:"varint,11,opt,name=verified,proto3" json:"verified,omitempty"`
	SocialBgId    int64  `protobuf:"varint,12,opt,name=social_bg_id,json=socialBgId,proto3" json:"social_bg_id,omitempty"`
}

func (x *SocialCharmInfo) Reset() {
	*x = SocialCharmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialCharmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialCharmInfo) ProtoMessage() {}

func (x *SocialCharmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialCharmInfo.ProtoReflect.Descriptor instead.
func (*SocialCharmInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{14}
}

func (x *SocialCharmInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SocialCharmInfo) GetCharm() int64 {
	if x != nil {
		return x.Charm
	}
	return 0
}

func (x *SocialCharmInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SocialCharmInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SocialCharmInfo) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *SocialCharmInfo) GetBoxId() int64 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *SocialCharmInfo) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SocialCharmInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SocialCharmInfo) GetCare() int64 {
	if x != nil {
		return x.Care
	}
	return 0
}

func (x *SocialCharmInfo) GetCharmExpLevel() int64 {
	if x != nil {
		return x.CharmExpLevel
	}
	return 0
}

func (x *SocialCharmInfo) GetVerified() int64 {
	if x != nil {
		return x.Verified
	}
	return 0
}

func (x *SocialCharmInfo) GetSocialBgId() int64 {
	if x != nil {
		return x.SocialBgId
	}
	return 0
}

type SocialGiftCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gender        int64  `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Nickname      string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar        string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	BoxId         int64  `protobuf:"varint,5,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	GiftId        int64  `protobuf:"varint,6,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	Num           int64  `protobuf:"varint,7,opt,name=num,proto3" json:"num,omitempty"`
	SendTime      int64  `protobuf:"varint,8,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	LogId         int64  `protobuf:"varint,9,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	CharmExpLevel int64  `protobuf:"varint,10,opt,name=charm_exp_level,json=charmExpLevel,proto3" json:"charm_exp_level,omitempty"`
	Verified      int64  `protobuf:"varint,11,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *SocialGiftCache) Reset() {
	*x = SocialGiftCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialGiftCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialGiftCache) ProtoMessage() {}

func (x *SocialGiftCache) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialGiftCache.ProtoReflect.Descriptor instead.
func (*SocialGiftCache) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{15}
}

func (x *SocialGiftCache) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SocialGiftCache) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *SocialGiftCache) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SocialGiftCache) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SocialGiftCache) GetBoxId() int64 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *SocialGiftCache) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *SocialGiftCache) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SocialGiftCache) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *SocialGiftCache) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *SocialGiftCache) GetCharmExpLevel() int64 {
	if x != nil {
		return x.CharmExpLevel
	}
	return 0
}

func (x *SocialGiftCache) GetVerified() int64 {
	if x != nil {
		return x.Verified
	}
	return 0
}

type UserHomepageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skin         []int64          `protobuf:"varint,1,rep,packed,name=skin,proto3" json:"skin,omitempty"`
	UserKill     []int64          `protobuf:"varint,2,rep,packed,name=user_kill,json=userKill,proto3" json:"user_kill,omitempty"`
	TeamSkin     []int64          `protobuf:"varint,3,rep,packed,name=team_skin,json=teamSkin,proto3" json:"team_skin,omitempty"`
	UserFace     []*UserLimitItem `protobuf:"bytes,4,rep,name=user_face,json=userFace,proto3" json:"user_face,omitempty"`
	TeamSuitList []*UserLimitItem `protobuf:"bytes,5,rep,name=team_suit_list,json=teamSuitList,proto3" json:"team_suit_list,omitempty"`
}

func (x *UserHomepageItem) Reset() {
	*x = UserHomepageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHomepageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHomepageItem) ProtoMessage() {}

func (x *UserHomepageItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHomepageItem.ProtoReflect.Descriptor instead.
func (*UserHomepageItem) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{16}
}

func (x *UserHomepageItem) GetSkin() []int64 {
	if x != nil {
		return x.Skin
	}
	return nil
}

func (x *UserHomepageItem) GetUserKill() []int64 {
	if x != nil {
		return x.UserKill
	}
	return nil
}

func (x *UserHomepageItem) GetTeamSkin() []int64 {
	if x != nil {
		return x.TeamSkin
	}
	return nil
}

func (x *UserHomepageItem) GetUserFace() []*UserLimitItem {
	if x != nil {
		return x.UserFace
	}
	return nil
}

func (x *UserHomepageItem) GetTeamSuitList() []*UserLimitItem {
	if x != nil {
		return x.TeamSuitList
	}
	return nil
}

type UserLimitItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ExpireTime int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	RemainTime int64 `protobuf:"varint,3,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	AddTime    int64 `protobuf:"varint,4,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
}

func (x *UserLimitItem) Reset() {
	*x = UserLimitItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLimitItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLimitItem) ProtoMessage() {}

func (x *UserLimitItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLimitItem.ProtoReflect.Descriptor instead.
func (*UserLimitItem) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{17}
}

func (x *UserLimitItem) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *UserLimitItem) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UserLimitItem) GetRemainTime() int64 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *UserLimitItem) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

type MarryInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarryId         int64           `protobuf:"varint,1,opt,name=marry_id,json=marryId,proto3" json:"marry_id,omitempty"`
	MarryTime       string          `protobuf:"bytes,2,opt,name=marry_time,json=marryTime,proto3" json:"marry_time,omitempty"`
	RingId          int64           `protobuf:"varint,3,opt,name=ring_id,json=ringId,proto3" json:"ring_id,omitempty"`
	Love            int64           `protobuf:"varint,4,opt,name=love,proto3" json:"love,omitempty"`
	Desc            string          `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Days            string          `protobuf:"bytes,6,opt,name=days,proto3" json:"days,omitempty"`
	WeddingState    int64           `protobuf:"varint,7,opt,name=wedding_state,json=weddingState,proto3" json:"wedding_state,omitempty"`
	CpUserInfo      *SimpleUserInfo `protobuf:"bytes,8,opt,name=cp_user_info,json=cpUserInfo,proto3" json:"cp_user_info,omitempty"`
	RingList        []*UserRingInfo `protobuf:"bytes,9,rep,name=ring_list,json=ringList,proto3" json:"ring_list,omitempty"`
	LoveRank        int64           `protobuf:"varint,10,opt,name=love_rank,json=loveRank,proto3" json:"love_rank,omitempty"`
	CoupleBgId      int64           `protobuf:"varint,11,opt,name=couple_bg_id,json=coupleBgId,proto3" json:"couple_bg_id,omitempty"`
	CoupleBgIdV2    int64           `protobuf:"varint,12,opt,name=couple_bg_id_v2,json=coupleBgIdV2,proto3" json:"couple_bg_id_v2,omitempty"`
	CoupleBgOwnerV2 string          `protobuf:"bytes,13,opt,name=couple_bg_owner_v2,json=coupleBgOwnerV2,proto3" json:"couple_bg_owner_v2,omitempty"`
	CoupleBgList    []*CoupleBgInfo `protobuf:"bytes,14,rep,name=couple_bg_list,json=coupleBgList,proto3" json:"couple_bg_list,omitempty"`
}

func (x *MarryInfoResp) Reset() {
	*x = MarryInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarryInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarryInfoResp) ProtoMessage() {}

func (x *MarryInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarryInfoResp.ProtoReflect.Descriptor instead.
func (*MarryInfoResp) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{18}
}

func (x *MarryInfoResp) GetMarryId() int64 {
	if x != nil {
		return x.MarryId
	}
	return 0
}

func (x *MarryInfoResp) GetMarryTime() string {
	if x != nil {
		return x.MarryTime
	}
	return ""
}

func (x *MarryInfoResp) GetRingId() int64 {
	if x != nil {
		return x.RingId
	}
	return 0
}

func (x *MarryInfoResp) GetLove() int64 {
	if x != nil {
		return x.Love
	}
	return 0
}

func (x *MarryInfoResp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *MarryInfoResp) GetDays() string {
	if x != nil {
		return x.Days
	}
	return ""
}

func (x *MarryInfoResp) GetWeddingState() int64 {
	if x != nil {
		return x.WeddingState
	}
	return 0
}

func (x *MarryInfoResp) GetCpUserInfo() *SimpleUserInfo {
	if x != nil {
		return x.CpUserInfo
	}
	return nil
}

func (x *MarryInfoResp) GetRingList() []*UserRingInfo {
	if x != nil {
		return x.RingList
	}
	return nil
}

func (x *MarryInfoResp) GetLoveRank() int64 {
	if x != nil {
		return x.LoveRank
	}
	return 0
}

func (x *MarryInfoResp) GetCoupleBgId() int64 {
	if x != nil {
		return x.CoupleBgId
	}
	return 0
}

func (x *MarryInfoResp) GetCoupleBgIdV2() int64 {
	if x != nil {
		return x.CoupleBgIdV2
	}
	return 0
}

func (x *MarryInfoResp) GetCoupleBgOwnerV2() string {
	if x != nil {
		return x.CoupleBgOwnerV2
	}
	return ""
}

func (x *MarryInfoResp) GetCoupleBgList() []*CoupleBgInfo {
	if x != nil {
		return x.CoupleBgList
	}
	return nil
}

type CoupleBgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ExpireTime int64  `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Owner      string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *CoupleBgInfo) Reset() {
	*x = CoupleBgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoupleBgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoupleBgInfo) ProtoMessage() {}

func (x *CoupleBgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoupleBgInfo.ProtoReflect.Descriptor instead.
func (*CoupleBgInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{19}
}

func (x *CoupleBgInfo) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CoupleBgInfo) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *CoupleBgInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type SimpleUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	BoxId    int64  `protobuf:"varint,4,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	Gender   int64  `protobuf:"varint,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Verified int64  `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *SimpleUserInfo) Reset() {
	*x = SimpleUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleUserInfo) ProtoMessage() {}

func (x *SimpleUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleUserInfo.ProtoReflect.Descriptor instead.
func (*SimpleUserInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{20}
}

func (x *SimpleUserInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SimpleUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SimpleUserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SimpleUserInfo) GetBoxId() int64 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *SimpleUserInfo) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *SimpleUserInfo) GetVerified() int64 {
	if x != nil {
		return x.Verified
	}
	return 0
}

type UserRingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RingId  int64 `protobuf:"varint,1,opt,name=ring_id,json=ringId,proto3" json:"ring_id,omitempty"`
	Num     int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	UsedNum int64 `protobuf:"varint,3,opt,name=used_num,json=usedNum,proto3" json:"used_num,omitempty"`
	Time    int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UserRingInfo) Reset() {
	*x = UserRingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRingInfo) ProtoMessage() {}

func (x *UserRingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRingInfo.ProtoReflect.Descriptor instead.
func (*UserRingInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{21}
}

func (x *UserRingInfo) GetRingId() int64 {
	if x != nil {
		return x.RingId
	}
	return 0
}

func (x *UserRingInfo) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *UserRingInfo) GetUsedNum() int64 {
	if x != nil {
		return x.UsedNum
	}
	return 0
}

func (x *UserRingInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type UserBagTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ExpireTime int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	RemainTime int64 `protobuf:"varint,3,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	GetCount   int64 `protobuf:"varint,4,opt,name=get_count,json=getCount,proto3" json:"get_count,omitempty"`
	GetTime    int64 `protobuf:"varint,5,opt,name=get_time,json=getTime,proto3" json:"get_time,omitempty"`
}

func (x *UserBagTitle) Reset() {
	*x = UserBagTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBagTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBagTitle) ProtoMessage() {}

func (x *UserBagTitle) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBagTitle.ProtoReflect.Descriptor instead.
func (*UserBagTitle) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{22}
}

func (x *UserBagTitle) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *UserBagTitle) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UserBagTitle) GetRemainTime() int64 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *UserBagTitle) GetGetCount() int64 {
	if x != nil {
		return x.GetCount
	}
	return 0
}

func (x *UserBagTitle) GetGetTime() int64 {
	if x != nil {
		return x.GetTime
	}
	return 0
}

type UserTitleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ExpireTime int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	WearTime   int64 `protobuf:"varint,3,opt,name=wear_time,json=wearTime,proto3" json:"wear_time,omitempty"`
	HomeUi     int64 `protobuf:"varint,4,opt,name=home_ui,json=homeUi,proto3" json:"home_ui,omitempty"`
}

func (x *UserTitleInfo) Reset() {
	*x = UserTitleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTitleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTitleInfo) ProtoMessage() {}

func (x *UserTitleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTitleInfo.ProtoReflect.Descriptor instead.
func (*UserTitleInfo) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{23}
}

func (x *UserTitleInfo) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *UserTitleInfo) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UserTitleInfo) GetWearTime() int64 {
	if x != nil {
		return x.WearTime
	}
	return 0
}

func (x *UserTitleInfo) GetHomeUi() int64 {
	if x != nil {
		return x.HomeUi
	}
	return 0
}

type TeamKillResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Played       int64  `protobuf:"varint,1,opt,name=played,proto3" json:"played,omitempty"`
	Record       string `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	Ppg          string `protobuf:"bytes,3,opt,name=ppg,proto3" json:"ppg,omitempty"`
	Kpg          string `protobuf:"bytes,4,opt,name=kpg,proto3" json:"kpg,omitempty"`
	Mvp          int64  `protobuf:"varint,5,opt,name=mvp,proto3" json:"mvp,omitempty"`
	MaxRecord    int64  `protobuf:"varint,6,opt,name=max_record,json=maxRecord,proto3" json:"max_record,omitempty"`
	MaxScore     int64  `protobuf:"varint,7,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MaxKillScore int64  `protobuf:"varint,8,opt,name=max_kill_score,json=maxKillScore,proto3" json:"max_kill_score,omitempty"`
	Pvp          int64  `protobuf:"varint,9,opt,name=pvp,proto3" json:"pvp,omitempty"`
}

func (x *TeamKillResp) Reset() {
	*x = TeamKillResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamKillResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamKillResp) ProtoMessage() {}

func (x *TeamKillResp) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamKillResp.ProtoReflect.Descriptor instead.
func (*TeamKillResp) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{24}
}

func (x *TeamKillResp) GetPlayed() int64 {
	if x != nil {
		return x.Played
	}
	return 0
}

func (x *TeamKillResp) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

func (x *TeamKillResp) GetPpg() string {
	if x != nil {
		return x.Ppg
	}
	return ""
}

func (x *TeamKillResp) GetKpg() string {
	if x != nil {
		return x.Kpg
	}
	return ""
}

func (x *TeamKillResp) GetMvp() int64 {
	if x != nil {
		return x.Mvp
	}
	return 0
}

func (x *TeamKillResp) GetMaxRecord() int64 {
	if x != nil {
		return x.MaxRecord
	}
	return 0
}

func (x *TeamKillResp) GetMaxScore() int64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *TeamKillResp) GetMaxKillScore() int64 {
	if x != nil {
		return x.MaxKillScore
	}
	return 0
}

func (x *TeamKillResp) GetPvp() int64 {
	if x != nil {
		return x.Pvp
	}
	return 0
}

type SimpleGameDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mvp       int64 `protobuf:"varint,1,opt,name=mvp,proto3" json:"mvp,omitempty"`
	Kill      int64 `protobuf:"varint,2,opt,name=kill,proto3" json:"kill,omitempty"`
	PvpCount  int64 `protobuf:"varint,3,opt,name=pvp_count,json=pvpCount,proto3" json:"pvp_count,omitempty"`
	MaxLength int64 `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	MaxKill   int64 `protobuf:"varint,5,opt,name=max_kill,json=maxKill,proto3" json:"max_kill,omitempty"`
	Time      int64 `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SimpleGameDetail) Reset() {
	*x = SimpleGameDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleGameDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleGameDetail) ProtoMessage() {}

func (x *SimpleGameDetail) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleGameDetail.ProtoReflect.Descriptor instead.
func (*SimpleGameDetail) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{25}
}

func (x *SimpleGameDetail) GetMvp() int64 {
	if x != nil {
		return x.Mvp
	}
	return 0
}

func (x *SimpleGameDetail) GetKill() int64 {
	if x != nil {
		return x.Kill
	}
	return 0
}

func (x *SimpleGameDetail) GetPvpCount() int64 {
	if x != nil {
		return x.PvpCount
	}
	return 0
}

func (x *SimpleGameDetail) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *SimpleGameDetail) GetMaxKill() int64 {
	if x != nil {
		return x.MaxKill
	}
	return 0
}

func (x *SimpleGameDetail) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type GiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *GiftItem) Reset() {
	*x = GiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_scoreapi_score_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftItem) ProtoMessage() {}

func (x *GiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_scoreapi_score_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftItem.ProtoReflect.Descriptor instead.
func (*GiftItem) Descriptor() ([]byte, []int) {
	return file_system_scoreapi_score_proto_rawDescGZIP(), []int{26}
}

func (x *GiftItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftItem) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

var File_system_scoreapi_score_proto protoreflect.FileDescriptor

var file_system_scoreapi_score_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x69, 0x73, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x78, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x73, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xb6, 0x13, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x67, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4b,
	0x69, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0b,
	0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x63, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x78,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x40, 0x0a, 0x0f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x68, 0x6f,
	0x6e, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x6f,
	0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3e, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x67, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65, 0x61, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x72,
	0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x65,
	0x78, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65,
	0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x42, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x12, 0x3e, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x67, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3e, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x63, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x72, 0x76,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x76, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x76, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xf9, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32,
	0x0a, 0x0a, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f,
	0x6e, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d,
	0x76, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x76, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x76, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x6e,
	0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x09, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x57, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x48, 0x61,
	0x70, 0x70, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x70, 0x70, 0x79, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x69, 0x73, 0x43, 0x65, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x61, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x45, 0x61,
	0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69,
	0x6c, 0x6c, 0x22, 0x36, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x05, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x79, 0x5f, 0x63,
	0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x79, 0x43, 0x61, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x08, 0x67, 0x69, 0x66,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x22, 0xc0, 0x02, 0x0a, 0x0f,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72,
	0x6d, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x67, 0x49, 0x64, 0x22, 0xa9,
	0x02, 0x0a, 0x0f, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f,
	0x65, 0x78, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x34, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x04, 0x0a, 0x0d, 0x4d,
	0x61, 0x72, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x61, 0x72, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c,
	0x6f, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x63, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x64,
	0x5f, 0x76, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6c,
	0x65, 0x42, 0x67, 0x49, 0x64, 0x56, 0x32, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x70, 0x6c,
	0x65, 0x5f, 0x62, 0x67, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x56, 0x32, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x62,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x78,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x67, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68,
	0x6f, 0x6d, 0x65, 0x55, 0x69, 0x22, 0xe8, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x70, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x70, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x70, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x76, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x76, 0x70,
	0x22, 0xa3, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x76, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x76, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4b, 0x69,
	0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x08, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a,
	0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_scoreapi_score_proto_rawDescOnce sync.Once
	file_system_scoreapi_score_proto_rawDescData = file_system_scoreapi_score_proto_rawDesc
)

func file_system_scoreapi_score_proto_rawDescGZIP() []byte {
	file_system_scoreapi_score_proto_rawDescOnce.Do(func() {
		file_system_scoreapi_score_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_scoreapi_score_proto_rawDescData)
	})
	return file_system_scoreapi_score_proto_rawDescData
}

var file_system_scoreapi_score_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_system_scoreapi_score_proto_goTypes = []interface{}{
	(*UserScoreReq)(nil),        // 0: scoreapi.UserScoreReq
	(*UserScoreHttpRsp)(nil),    // 1: scoreapi.UserScoreHttpRsp
	(*UserScoreRsp)(nil),        // 2: scoreapi.UserScoreRsp
	(*UserExciteStat)(nil),      // 3: scoreapi.UserExciteStat
	(*GradeInfo)(nil),           // 4: scoreapi.GradeInfo
	(*FreeStats)(nil),           // 5: scoreapi.FreeStats
	(*QualifyingStatsResp)(nil), // 6: scoreapi.QualifyingStatsResp
	(*HonorItem)(nil),           // 7: scoreapi.HonorItem
	(*SeasonRank)(nil),          // 8: scoreapi.SeasonRank
	(*HappyCoinResp)(nil),       // 9: scoreapi.HappyCoinResp
	(*Area)(nil),                // 10: scoreapi.Area
	(*Photo)(nil),               // 11: scoreapi.Photo
	(*OtherClanInfo)(nil),       // 12: scoreapi.OtherClanInfo
	(*SocialInfo)(nil),          // 13: scoreapi.SocialInfo
	(*SocialCharmInfo)(nil),     // 14: scoreapi.SocialCharmInfo
	(*SocialGiftCache)(nil),     // 15: scoreapi.SocialGiftCache
	(*UserHomepageItem)(nil),    // 16: scoreapi.UserHomepageItem
	(*UserLimitItem)(nil),       // 17: scoreapi.UserLimitItem
	(*MarryInfoResp)(nil),       // 18: scoreapi.MarryInfoResp
	(*CoupleBgInfo)(nil),        // 19: scoreapi.CoupleBgInfo
	(*SimpleUserInfo)(nil),      // 20: scoreapi.SimpleUserInfo
	(*UserRingInfo)(nil),        // 21: scoreapi.UserRingInfo
	(*UserBagTitle)(nil),        // 22: scoreapi.UserBagTitle
	(*UserTitleInfo)(nil),       // 23: scoreapi.UserTitleInfo
	(*TeamKillResp)(nil),        // 24: scoreapi.TeamKillResp
	(*SimpleGameDetail)(nil),    // 25: scoreapi.SimpleGameDetail
	(*GiftItem)(nil),            // 26: scoreapi.GiftItem
}
var file_system_scoreapi_score_proto_depIdxs = []int32{
	2,  // 0: scoreapi.UserScoreHttpRsp.data:type_name -> scoreapi.UserScoreRsp
	3,  // 1: scoreapi.UserScoreRsp.excite_stat:type_name -> scoreapi.UserExciteStat
	4,  // 2: scoreapi.UserScoreRsp.grade_info:type_name -> scoreapi.GradeInfo
	5,  // 3: scoreapi.UserScoreRsp.free_stats:type_name -> scoreapi.FreeStats
	6,  // 4: scoreapi.UserScoreRsp.qualifying_stats:type_name -> scoreapi.QualifyingStatsResp
	9,  // 5: scoreapi.UserScoreRsp.happycoin_stats:type_name -> scoreapi.HappyCoinResp
	10, // 6: scoreapi.UserScoreRsp.area:type_name -> scoreapi.Area
	11, // 7: scoreapi.UserScoreRsp.photo_list:type_name -> scoreapi.Photo
	8,  // 8: scoreapi.UserScoreRsp.season_honor:type_name -> scoreapi.SeasonRank
	12, // 9: scoreapi.UserScoreRsp.clan_info:type_name -> scoreapi.OtherClanInfo
	13, // 10: scoreapi.UserScoreRsp.social_info:type_name -> scoreapi.SocialInfo
	16, // 11: scoreapi.UserScoreRsp.user_item_list:type_name -> scoreapi.UserHomepageItem
	18, // 12: scoreapi.UserScoreRsp.marry_info:type_name -> scoreapi.MarryInfoResp
	22, // 13: scoreapi.UserScoreRsp.user_title_list:type_name -> scoreapi.UserBagTitle
	23, // 14: scoreapi.UserScoreRsp.user_wear_title:type_name -> scoreapi.UserTitleInfo
	24, // 15: scoreapi.UserScoreRsp.team_kill:type_name -> scoreapi.TeamKillResp
	25, // 16: scoreapi.UserScoreRsp.race_normal_stats:type_name -> scoreapi.SimpleGameDetail
	26, // 17: scoreapi.UserScoreRsp.gift_collect_list:type_name -> scoreapi.GiftItem
	7,  // 18: scoreapi.QualifyingStatsResp.honor_list:type_name -> scoreapi.HonorItem
	8,  // 19: scoreapi.QualifyingStatsResp.max_honor:type_name -> scoreapi.SeasonRank
	10, // 20: scoreapi.OtherClanInfo.area:type_name -> scoreapi.Area
	14, // 21: scoreapi.SocialInfo.care_list:type_name -> scoreapi.SocialCharmInfo
	15, // 22: scoreapi.SocialInfo.gift_list:type_name -> scoreapi.SocialGiftCache
	17, // 23: scoreapi.UserHomepageItem.user_face:type_name -> scoreapi.UserLimitItem
	17, // 24: scoreapi.UserHomepageItem.team_suit_list:type_name -> scoreapi.UserLimitItem
	20, // 25: scoreapi.MarryInfoResp.cp_user_info:type_name -> scoreapi.SimpleUserInfo
	21, // 26: scoreapi.MarryInfoResp.ring_list:type_name -> scoreapi.UserRingInfo
	19, // 27: scoreapi.MarryInfoResp.couple_bg_list:type_name -> scoreapi.CoupleBgInfo
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_system_scoreapi_score_proto_init() }
func file_system_scoreapi_score_proto_init() {
	if File_system_scoreapi_score_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_system_scoreapi_score_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreHttpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExciteStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingStatsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HonorItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Area); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherClanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialCharmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialGiftCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHomepageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLimitItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarryInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoupleBgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBagTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTitleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamKillResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleGameDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_scoreapi_score_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_scoreapi_score_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_system_scoreapi_score_proto_goTypes,
		DependencyIndexes: file_system_scoreapi_score_proto_depIdxs,
		MessageInfos:      file_system_scoreapi_score_proto_msgTypes,
	}.Build()
	File_system_scoreapi_score_proto = out.File
	file_system_scoreapi_score_proto_rawDesc = nil
	file_system_scoreapi_score_proto_goTypes = nil
	file_system_scoreapi_score_proto_depIdxs = nil
}
