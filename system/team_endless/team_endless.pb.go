// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: system/team_endless/team_endless.proto

package team_endless

import (
	snakecommon "git.17zjh.com/snake/snake_proto/snakecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRecentPartnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode int32 `protobuf:"varint,1,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"` // 游戏模式
}

func (x *GetRecentPartnerReq) Reset() {
	*x = GetRecentPartnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentPartnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentPartnerReq) ProtoMessage() {}

func (x *GetRecentPartnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentPartnerReq.ProtoReflect.Descriptor instead.
func (*GetRecentPartnerReq) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{0}
}

func (x *GetRecentPartnerReq) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

type GetRecentPartnerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserList []*Partner `protobuf:"bytes,1,rep,name=user_list,json=userList,proto3" json:"user_list,omitempty"`
}

func (x *GetRecentPartnerRsp) Reset() {
	*x = GetRecentPartnerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentPartnerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentPartnerRsp) ProtoMessage() {}

func (x *GetRecentPartnerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentPartnerRsp.ProtoReflect.Descriptor instead.
func (*GetRecentPartnerRsp) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecentPartnerRsp) GetUserList() []*Partner {
	if x != nil {
		return x.UserList
	}
	return nil
}

type Partner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	BoxId    int32  `protobuf:"varint,4,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	Verified int32  `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *Partner) Reset() {
	*x = Partner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partner) ProtoMessage() {}

func (x *Partner) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partner.ProtoReflect.Descriptor instead.
func (*Partner) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{2}
}

func (x *Partner) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Partner) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Partner) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Partner) GetBoxId() int32 {
	if x != nil {
		return x.BoxId
	}
	return 0
}

func (x *Partner) GetVerified() int32 {
	if x != nil {
		return x.Verified
	}
	return 0
}

type GetGameResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Rid int64  `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
}

func (x *GetGameResultReq) Reset() {
	*x = GetGameResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameResultReq) ProtoMessage() {}

func (x *GetGameResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameResultReq.ProtoReflect.Descriptor instead.
func (*GetGameResultReq) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{3}
}

func (x *GetGameResultReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetGameResultReq) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

type GetGameResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *EndGameNotify `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetGameResultRsp) Reset() {
	*x = GetGameResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameResultRsp) ProtoMessage() {}

func (x *GetGameResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameResultRsp.ProtoReflect.Descriptor instead.
func (*GetGameResultRsp) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{4}
}

func (x *GetGameResultRsp) GetResult() *EndGameNotify {
	if x != nil {
		return x.Result
	}
	return nil
}

type UserGameTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayProgress     int64 `protobuf:"varint,1,opt,name=day_progress,json=dayProgress,proto3" json:"day_progress,omitempty"`
	DayReward       int64 `protobuf:"varint,2,opt,name=day_reward,json=dayReward,proto3" json:"day_reward,omitempty"`
	WeekProgress    int64 `protobuf:"varint,3,opt,name=week_progress,json=weekProgress,proto3" json:"week_progress,omitempty"`
	WeekReward      int64 `protobuf:"varint,4,opt,name=week_reward,json=weekReward,proto3" json:"week_reward,omitempty"`
	UpdateTime      int64 `protobuf:"varint,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	PreDayProgress  int64 `protobuf:"varint,6,opt,name=pre_day_progress,json=preDayProgress,proto3" json:"pre_day_progress,omitempty"`
	PreDayReward    int64 `protobuf:"varint,7,opt,name=pre_day_reward,json=preDayReward,proto3" json:"pre_day_reward,omitempty"`
	PreWeekProgress int64 `protobuf:"varint,8,opt,name=pre_week_progress,json=preWeekProgress,proto3" json:"pre_week_progress,omitempty"`
	PreWeekReward   int64 `protobuf:"varint,9,opt,name=pre_week_reward,json=preWeekReward,proto3" json:"pre_week_reward,omitempty"`
	PreTime         int64 `protobuf:"varint,10,opt,name=pre_time,json=preTime,proto3" json:"pre_time,omitempty"`
}

func (x *UserGameTask) Reset() {
	*x = UserGameTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameTask) ProtoMessage() {}

func (x *UserGameTask) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameTask.ProtoReflect.Descriptor instead.
func (*UserGameTask) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{5}
}

func (x *UserGameTask) GetDayProgress() int64 {
	if x != nil {
		return x.DayProgress
	}
	return 0
}

func (x *UserGameTask) GetDayReward() int64 {
	if x != nil {
		return x.DayReward
	}
	return 0
}

func (x *UserGameTask) GetWeekProgress() int64 {
	if x != nil {
		return x.WeekProgress
	}
	return 0
}

func (x *UserGameTask) GetWeekReward() int64 {
	if x != nil {
		return x.WeekReward
	}
	return 0
}

func (x *UserGameTask) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UserGameTask) GetPreDayProgress() int64 {
	if x != nil {
		return x.PreDayProgress
	}
	return 0
}

func (x *UserGameTask) GetPreDayReward() int64 {
	if x != nil {
		return x.PreDayReward
	}
	return 0
}

func (x *UserGameTask) GetPreWeekProgress() int64 {
	if x != nil {
		return x.PreWeekProgress
	}
	return 0
}

func (x *UserGameTask) GetPreWeekReward() int64 {
	if x != nil {
		return x.PreWeekReward
	}
	return 0
}

func (x *UserGameTask) GetPreTime() int64 {
	if x != nil {
		return x.PreTime
	}
	return 0
}

type UserEgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level    int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	State    int32 `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Pos      int32 `protobuf:"varint,4,opt,name=pos,proto3" json:"pos,omitempty"`
	OpenTime int64 `protobuf:"varint,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	AdCount  int64 `protobuf:"varint,6,opt,name=ad_count,json=adCount,proto3" json:"ad_count,omitempty"`
}

func (x *UserEgg) Reset() {
	*x = UserEgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEgg) ProtoMessage() {}

func (x *UserEgg) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEgg.ProtoReflect.Descriptor instead.
func (*UserEgg) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{6}
}

func (x *UserEgg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserEgg) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserEgg) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UserEgg) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *UserEgg) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *UserEgg) GetAdCount() int64 {
	if x != nil {
		return x.AdCount
	}
	return 0
}

type UserEggProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EggList []*UserEgg `protobuf:"bytes,1,rep,name=egg_list,json=eggList,proto3" json:"egg_list,omitempty"`
	Hatched int32      `protobuf:"varint,2,opt,name=hatched,proto3" json:"hatched,omitempty"`
	GetNew  int32      `protobuf:"varint,3,opt,name=get_new,json=getNew,proto3" json:"get_new,omitempty"`
	Didi    int32      `protobuf:"varint,4,opt,name=didi,proto3" json:"didi,omitempty"`
}

func (x *UserEggProgress) Reset() {
	*x = UserEggProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEggProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEggProgress) ProtoMessage() {}

func (x *UserEggProgress) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEggProgress.ProtoReflect.Descriptor instead.
func (*UserEggProgress) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{7}
}

func (x *UserEggProgress) GetEggList() []*UserEgg {
	if x != nil {
		return x.EggList
	}
	return nil
}

func (x *UserEggProgress) GetHatched() int32 {
	if x != nil {
		return x.Hatched
	}
	return 0
}

func (x *UserEggProgress) GetGetNew() int32 {
	if x != nil {
		return x.GetNew
	}
	return 0
}

func (x *UserEggProgress) GetDidi() int32 {
	if x != nil {
		return x.Didi
	}
	return 0
}

type PassCheckExpDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	MarkId int32  `protobuf:"varint,2,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	From   string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *PassCheckExpDetail) Reset() {
	*x = PassCheckExpDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassCheckExpDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassCheckExpDetail) ProtoMessage() {}

func (x *PassCheckExpDetail) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassCheckExpDetail.ProtoReflect.Descriptor instead.
func (*PassCheckExpDetail) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{8}
}

func (x *PassCheckExpDetail) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PassCheckExpDetail) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *PassCheckExpDetail) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type GamePassCheckExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exp       int64                 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	Day       int64                 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	ExpDetail []*PassCheckExpDetail `protobuf:"bytes,3,rep,name=exp_detail,json=expDetail,proto3" json:"exp_detail,omitempty"`
}

func (x *GamePassCheckExp) Reset() {
	*x = GamePassCheckExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePassCheckExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePassCheckExp) ProtoMessage() {}

func (x *GamePassCheckExp) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePassCheckExp.ProtoReflect.Descriptor instead.
func (*GamePassCheckExp) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{9}
}

func (x *GamePassCheckExp) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *GamePassCheckExp) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *GamePassCheckExp) GetExpDetail() []*PassCheckExpDetail {
	if x != nil {
		return x.ExpDetail
	}
	return nil
}

type ActReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc       string                     `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	RewardList []*snakecommon.CRewardItem `protobuf:"bytes,2,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
}

func (x *ActReward) Reset() {
	*x = ActReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActReward) ProtoMessage() {}

func (x *ActReward) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActReward.ProtoReflect.Descriptor instead.
func (*ActReward) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{10}
}

func (x *ActReward) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ActReward) GetRewardList() []*snakecommon.CRewardItem {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type GameExtraReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardList []*snakecommon.CRewardItem `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	BtnLink    string                     `protobuf:"bytes,2,opt,name=btn_link,json=btnLink,proto3" json:"btn_link,omitempty"`
}

func (x *GameExtraReward) Reset() {
	*x = GameExtraReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameExtraReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameExtraReward) ProtoMessage() {}

func (x *GameExtraReward) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameExtraReward.ProtoReflect.Descriptor instead.
func (*GameExtraReward) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{11}
}

func (x *GameExtraReward) GetRewardList() []*snakecommon.CRewardItem {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *GameExtraReward) GetBtnLink() string {
	if x != nil {
		return x.BtnLink
	}
	return ""
}

type UserMeetupProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId    int64       `protobuf:"varint,1,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	Finish   int64       `protobuf:"varint,2,opt,name=finish,proto3" json:"finish,omitempty"`
	Len      int64       `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	AddLen   int64       `protobuf:"varint,4,opt,name=add_len,json=addLen,proto3" json:"add_len,omitempty"`
	Days     int64       `protobuf:"varint,5,opt,name=days,proto3" json:"days,omitempty"`
	TaskInfo []*TaskInfo `protobuf:"bytes,6,rep,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (x *UserMeetupProgress) Reset() {
	*x = UserMeetupProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMeetupProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeetupProgress) ProtoMessage() {}

func (x *UserMeetupProgress) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeetupProgress.ProtoReflect.Descriptor instead.
func (*UserMeetupProgress) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{12}
}

func (x *UserMeetupProgress) GetActId() int64 {
	if x != nil {
		return x.ActId
	}
	return 0
}

func (x *UserMeetupProgress) GetFinish() int64 {
	if x != nil {
		return x.Finish
	}
	return 0
}

func (x *UserMeetupProgress) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *UserMeetupProgress) GetAddLen() int64 {
	if x != nil {
		return x.AddLen
	}
	return 0
}

func (x *UserMeetupProgress) GetDays() int64 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *UserMeetupProgress) GetTaskInfo() []*TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type UserMeetupProgressItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress  *UserMeetupProgress `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	TitleUrl  string              `protobuf:"bytes,2,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	ButtonMsg string              `protobuf:"bytes,3,opt,name=button_msg,json=buttonMsg,proto3" json:"button_msg,omitempty"`
	StartTime int64               `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *UserMeetupProgressItem) Reset() {
	*x = UserMeetupProgressItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMeetupProgressItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeetupProgressItem) ProtoMessage() {}

func (x *UserMeetupProgressItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeetupProgressItem.ProtoReflect.Descriptor instead.
func (*UserMeetupProgressItem) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{13}
}

func (x *UserMeetupProgressItem) GetProgress() *UserMeetupProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *UserMeetupProgressItem) GetTitleUrl() string {
	if x != nil {
		return x.TitleUrl
	}
	return ""
}

func (x *UserMeetupProgressItem) GetButtonMsg() string {
	if x != nil {
		return x.ButtonMsg
	}
	return ""
}

func (x *UserMeetupProgressItem) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type UserElGameReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len      int64       `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	AddLen   int64       `protobuf:"varint,2,opt,name=add_len,json=addLen,proto3" json:"add_len,omitempty"`
	TaskInfo []*TaskInfo `protobuf:"bytes,3,rep,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (x *UserElGameReward) Reset() {
	*x = UserElGameReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserElGameReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserElGameReward) ProtoMessage() {}

func (x *UserElGameReward) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserElGameReward.ProtoReflect.Descriptor instead.
func (*UserElGameReward) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{14}
}

func (x *UserElGameReward) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *UserElGameReward) GetAddLen() int64 {
	if x != nil {
		return x.AddLen
	}
	return 0
}

func (x *UserElGameReward) GetTaskInfo() []*TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type EndGameNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank              string                     `protobuf:"bytes,1,opt,name=rank,proto3" json:"rank,omitempty"`
	RecommendInfo     map[string]int32           `protobuf:"bytes,2,rep,name=recommend_info,json=recommendInfo,proto3" json:"recommend_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Cup               int64                      `protobuf:"varint,3,opt,name=cup,proto3" json:"cup,omitempty"`
	TotalLen          int64                      `protobuf:"varint,4,opt,name=total_len,json=totalLen,proto3" json:"total_len,omitempty"`
	OpenedChest       map[string]int32           `protobuf:"bytes,5,rep,name=opened_chest,json=openedChest,proto3" json:"opened_chest,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DisplayScore      int64                      `protobuf:"varint,6,opt,name=display_score,json=displayScore,proto3" json:"display_score,omitempty"`
	SnakeCoin         int64                      `protobuf:"varint,7,opt,name=snake_coin,json=snakeCoin,proto3" json:"snake_coin,omitempty"`
	WeekSnakeCoin     int64                      `protobuf:"varint,8,opt,name=week_snake_coin,json=weekSnakeCoin,proto3" json:"week_snake_coin,omitempty"`
	SnakeCoinDetail   []*SnakeCoinDetailItem     `protobuf:"bytes,9,rep,name=snake_coin_detail,json=snakeCoinDetail,proto3" json:"snake_coin_detail,omitempty"`
	AdFlag            int32                      `protobuf:"varint,10,opt,name=ad_flag,json=adFlag,proto3" json:"ad_flag,omitempty"`
	Turntable         map[string]int32           `protobuf:"bytes,11,rep,name=turntable,proto3" json:"turntable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	QualifyingUnlock  int32                      `protobuf:"varint,12,opt,name=qualifying_unlock,json=qualifyingUnlock,proto3" json:"qualifying_unlock,omitempty"`
	GameTask          *UserGameTask              `protobuf:"bytes,13,opt,name=game_task,json=gameTask,proto3" json:"game_task,omitempty"`
	HatchEgg          *UserEggProgress           `protobuf:"bytes,14,opt,name=hatch_egg,json=hatchEgg,proto3" json:"hatch_egg,omitempty"`
	PassCheck         *GamePassCheckExp          `protobuf:"bytes,15,opt,name=pass_check,json=passCheck,proto3" json:"pass_check,omitempty"`
	DifficultyScore   float64                    `protobuf:"fixed64,16,opt,name=difficulty_score,json=difficultyScore,proto3" json:"difficulty_score,omitempty"`
	ActReward         *ActReward                 `protobuf:"bytes,17,opt,name=act_reward,json=actReward,proto3" json:"act_reward,omitempty"`
	ExtraReward       []*GameExtraReward         `protobuf:"bytes,18,rep,name=extra_reward,json=extraReward,proto3" json:"extra_reward,omitempty"`
	IconUrl           string                     `protobuf:"bytes,19,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	EndlessRewardList []*snakecommon.CRewardItem `protobuf:"bytes,20,rep,name=endless_reward_list,json=endlessRewardList,proto3" json:"endless_reward_list,omitempty"`
	NewMeetup         *UserMeetupProgress        `protobuf:"bytes,21,opt,name=new_meetup,json=newMeetup,proto3" json:"new_meetup,omitempty"`
	NewMeetupV2       *UserMeetupProgress        `protobuf:"bytes,22,opt,name=new_meetup_v2,json=newMeetupV2,proto3" json:"new_meetup_v2,omitempty"`
	NewMeetupV3       *UserMeetupProgress        `protobuf:"bytes,23,opt,name=new_meetup_v3,json=newMeetupV3,proto3" json:"new_meetup_v3,omitempty"`
	NewMeetupV3List   []*UserMeetupProgressItem  `protobuf:"bytes,24,rep,name=new_meetup_v3_list,json=newMeetupV3List,proto3" json:"new_meetup_v3_list,omitempty"`
	EndlessGameReward *UserElGameReward          `protobuf:"bytes,25,opt,name=endless_game_reward,json=endlessGameReward,proto3" json:"endless_game_reward,omitempty"`
	NewEndPopupOrder1 []string                   `protobuf:"bytes,26,rep,name=new_end_popup_order1,json=newEndPopupOrder1,proto3" json:"new_end_popup_order1,omitempty"`
	WebBanner         *WebBanner                 `protobuf:"bytes,27,opt,name=web_banner,json=webBanner,proto3" json:"web_banner,omitempty"`
	ComposeCoin       string                     `protobuf:"bytes,28,opt,name=compose_coin,json=composeCoin,proto3" json:"compose_coin,omitempty"`
	FloatingInfo      *FloatingInfo              `protobuf:"bytes,29,opt,name=floating_info,json=floatingInfo,proto3" json:"floating_info,omitempty"`
	Teammates         []*EndlessTeammate         `protobuf:"bytes,30,rep,name=teammates,proto3" json:"teammates,omitempty"`                           // 队友信息
	FollowedList      []string                   `protobuf:"bytes,31,rep,name=followed_list,json=followedList,proto3" json:"followed_list,omitempty"` // 被关注的 uid
}

func (x *EndGameNotify) Reset() {
	*x = EndGameNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndGameNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndGameNotify) ProtoMessage() {}

func (x *EndGameNotify) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndGameNotify.ProtoReflect.Descriptor instead.
func (*EndGameNotify) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{15}
}

func (x *EndGameNotify) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *EndGameNotify) GetRecommendInfo() map[string]int32 {
	if x != nil {
		return x.RecommendInfo
	}
	return nil
}

func (x *EndGameNotify) GetCup() int64 {
	if x != nil {
		return x.Cup
	}
	return 0
}

func (x *EndGameNotify) GetTotalLen() int64 {
	if x != nil {
		return x.TotalLen
	}
	return 0
}

func (x *EndGameNotify) GetOpenedChest() map[string]int32 {
	if x != nil {
		return x.OpenedChest
	}
	return nil
}

func (x *EndGameNotify) GetDisplayScore() int64 {
	if x != nil {
		return x.DisplayScore
	}
	return 0
}

func (x *EndGameNotify) GetSnakeCoin() int64 {
	if x != nil {
		return x.SnakeCoin
	}
	return 0
}

func (x *EndGameNotify) GetWeekSnakeCoin() int64 {
	if x != nil {
		return x.WeekSnakeCoin
	}
	return 0
}

func (x *EndGameNotify) GetSnakeCoinDetail() []*SnakeCoinDetailItem {
	if x != nil {
		return x.SnakeCoinDetail
	}
	return nil
}

func (x *EndGameNotify) GetAdFlag() int32 {
	if x != nil {
		return x.AdFlag
	}
	return 0
}

func (x *EndGameNotify) GetTurntable() map[string]int32 {
	if x != nil {
		return x.Turntable
	}
	return nil
}

func (x *EndGameNotify) GetQualifyingUnlock() int32 {
	if x != nil {
		return x.QualifyingUnlock
	}
	return 0
}

func (x *EndGameNotify) GetGameTask() *UserGameTask {
	if x != nil {
		return x.GameTask
	}
	return nil
}

func (x *EndGameNotify) GetHatchEgg() *UserEggProgress {
	if x != nil {
		return x.HatchEgg
	}
	return nil
}

func (x *EndGameNotify) GetPassCheck() *GamePassCheckExp {
	if x != nil {
		return x.PassCheck
	}
	return nil
}

func (x *EndGameNotify) GetDifficultyScore() float64 {
	if x != nil {
		return x.DifficultyScore
	}
	return 0
}

func (x *EndGameNotify) GetActReward() *ActReward {
	if x != nil {
		return x.ActReward
	}
	return nil
}

func (x *EndGameNotify) GetExtraReward() []*GameExtraReward {
	if x != nil {
		return x.ExtraReward
	}
	return nil
}

func (x *EndGameNotify) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *EndGameNotify) GetEndlessRewardList() []*snakecommon.CRewardItem {
	if x != nil {
		return x.EndlessRewardList
	}
	return nil
}

func (x *EndGameNotify) GetNewMeetup() *UserMeetupProgress {
	if x != nil {
		return x.NewMeetup
	}
	return nil
}

func (x *EndGameNotify) GetNewMeetupV2() *UserMeetupProgress {
	if x != nil {
		return x.NewMeetupV2
	}
	return nil
}

func (x *EndGameNotify) GetNewMeetupV3() *UserMeetupProgress {
	if x != nil {
		return x.NewMeetupV3
	}
	return nil
}

func (x *EndGameNotify) GetNewMeetupV3List() []*UserMeetupProgressItem {
	if x != nil {
		return x.NewMeetupV3List
	}
	return nil
}

func (x *EndGameNotify) GetEndlessGameReward() *UserElGameReward {
	if x != nil {
		return x.EndlessGameReward
	}
	return nil
}

func (x *EndGameNotify) GetNewEndPopupOrder1() []string {
	if x != nil {
		return x.NewEndPopupOrder1
	}
	return nil
}

func (x *EndGameNotify) GetWebBanner() *WebBanner {
	if x != nil {
		return x.WebBanner
	}
	return nil
}

func (x *EndGameNotify) GetComposeCoin() string {
	if x != nil {
		return x.ComposeCoin
	}
	return ""
}

func (x *EndGameNotify) GetFloatingInfo() *FloatingInfo {
	if x != nil {
		return x.FloatingInfo
	}
	return nil
}

func (x *EndGameNotify) GetTeammates() []*EndlessTeammate {
	if x != nil {
		return x.Teammates
	}
	return nil
}

func (x *EndGameNotify) GetFollowedList() []string {
	if x != nil {
		return x.FollowedList
	}
	return nil
}

type EndlessTeammate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Score  int32   `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	SkinId int32   `protobuf:"varint,3,opt,name=skinId,proto3" json:"skinId,omitempty"`
	Tag    []int32 `protobuf:"varint,4,rep,packed,name=tag,proto3" json:"tag,omitempty"`
}

func (x *EndlessTeammate) Reset() {
	*x = EndlessTeammate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessTeammate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessTeammate) ProtoMessage() {}

func (x *EndlessTeammate) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessTeammate.ProtoReflect.Descriptor instead.
func (*EndlessTeammate) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{16}
}

func (x *EndlessTeammate) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *EndlessTeammate) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EndlessTeammate) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *EndlessTeammate) GetTag() []int32 {
	if x != nil {
		return x.Tag
	}
	return nil
}

type SnakeCoinDetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	MarkId int32  `protobuf:"varint,2,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	From   string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *SnakeCoinDetailItem) Reset() {
	*x = SnakeCoinDetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeCoinDetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeCoinDetailItem) ProtoMessage() {}

func (x *SnakeCoinDetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeCoinDetailItem.ProtoReflect.Descriptor instead.
func (*SnakeCoinDetailItem) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{17}
}

func (x *SnakeCoinDetailItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SnakeCoinDetailItem) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *SnakeCoinDetailItem) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Ad    int64 `protobuf:"varint,3,opt,name=ad,proto3" json:"ad,omitempty"`
	Own   bool  `protobuf:"varint,4,opt,name=own,proto3" json:"own,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{18}
}

func (x *TaskInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskInfo) GetAd() int64 {
	if x != nil {
		return x.Ad
	}
	return 0
}

func (x *TaskInfo) GetOwn() bool {
	if x != nil {
		return x.Own
	}
	return false
}

type WebBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *WebBanner) Reset() {
	*x = WebBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebBanner) ProtoMessage() {}

func (x *WebBanner) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebBanner.ProtoReflect.Descriptor instead.
func (*WebBanner) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{19}
}

func (x *WebBanner) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebBanner) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FloatingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num   int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Add   int64 `protobuf:"varint,3,opt,name=add,proto3" json:"add,omitempty"`
	State int32 `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FloatingItem) Reset() {
	*x = FloatingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingItem) ProtoMessage() {}

func (x *FloatingItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingItem.ProtoReflect.Descriptor instead.
func (*FloatingItem) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{20}
}

func (x *FloatingItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FloatingItem) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *FloatingItem) GetAdd() int64 {
	if x != nil {
		return x.Add
	}
	return 0
}

func (x *FloatingItem) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type FloatingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardList   []*snakecommon.CRewardItem `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	HomeReddot   int32                      `protobuf:"varint,2,opt,name=home_reddot,json=homeReddot,proto3" json:"home_reddot,omitempty"`
	FloatingList []*FloatingItem            `protobuf:"bytes,3,rep,name=floating_list,json=floatingList,proto3" json:"floating_list,omitempty"`
}

func (x *FloatingInfo) Reset() {
	*x = FloatingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_team_endless_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingInfo) ProtoMessage() {}

func (x *FloatingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_team_endless_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingInfo.ProtoReflect.Descriptor instead.
func (*FloatingInfo) Descriptor() ([]byte, []int) {
	return file_system_team_endless_team_endless_proto_rawDescGZIP(), []int{21}
}

func (x *FloatingInfo) GetRewardList() []*snakecommon.CRewardItem {
	if x != nil {
		return x.RewardList
	}
	return nil
}

func (x *FloatingInfo) GetHomeReddot() int32 {
	if x != nil {
		return x.HomeReddot
	}
	return 0
}

func (x *FloatingInfo) GetFloatingList() []*FloatingItem {
	if x != nil {
		return x.FloatingList
	}
	return nil
}

var File_system_team_endless_team_endless_proto protoreflect.FileDescriptor

var file_system_team_endless_team_endless_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x1a, 0x18, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72,
	0x69, 0x64, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x65,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x44,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x57, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x45, 0x67, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x67, 0x67, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x67, 0x67, 0x52, 0x07, 0x65, 0x67, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x64, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x69, 0x64, 0x69, 0x22, 0x57, 0x0a, 0x12, 0x50, 0x61, 0x73,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x22, 0x72, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x78, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x5a, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x67, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xb2, 0x01, 0x0a, 0x12,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6c, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xac, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74,
	0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x6d, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x2e,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d,
	0x0e, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x77, 0x65, 0x65, 0x6b, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x48, 0x0a,
	0x11, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x43, 0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x54, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x09, 0x68, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x67, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x67, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x08, 0x68, 0x61, 0x74, 0x63, 0x68, 0x45, 0x67, 0x67, 0x12, 0x38, 0x0a,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x52, 0x09, 0x70, 0x61,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x09, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a,
	0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x6d,
	0x65, 0x65, 0x74, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x65,
	0x74, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x76, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x65, 0x74,
	0x75, 0x70, 0x56, 0x32, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x76, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x65,
	0x74, 0x75, 0x70, 0x56, 0x33, 0x12, 0x4c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x56, 0x33, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x11, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65,
	0x77, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x12,
	0x31, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x65,
	0x62, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x77, 0x65, 0x62, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x45,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x40,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63,
	0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x22, 0x58, 0x0a, 0x13, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x52, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x77,
	0x6e, 0x22, 0x2d, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x58, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x61, 0x64, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x64, 0x64, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_system_team_endless_team_endless_proto_rawDescOnce sync.Once
	file_system_team_endless_team_endless_proto_rawDescData = file_system_team_endless_team_endless_proto_rawDesc
)

func file_system_team_endless_team_endless_proto_rawDescGZIP() []byte {
	file_system_team_endless_team_endless_proto_rawDescOnce.Do(func() {
		file_system_team_endless_team_endless_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_team_endless_team_endless_proto_rawDescData)
	})
	return file_system_team_endless_team_endless_proto_rawDescData
}

var file_system_team_endless_team_endless_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_system_team_endless_team_endless_proto_goTypes = []interface{}{
	(*GetRecentPartnerReq)(nil),     // 0: endless.GetRecentPartnerReq
	(*GetRecentPartnerRsp)(nil),     // 1: endless.GetRecentPartnerRsp
	(*Partner)(nil),                 // 2: endless.Partner
	(*GetGameResultReq)(nil),        // 3: endless.GetGameResultReq
	(*GetGameResultRsp)(nil),        // 4: endless.GetGameResultRsp
	(*UserGameTask)(nil),            // 5: endless.UserGameTask
	(*UserEgg)(nil),                 // 6: endless.UserEgg
	(*UserEggProgress)(nil),         // 7: endless.UserEggProgress
	(*PassCheckExpDetail)(nil),      // 8: endless.PassCheckExpDetail
	(*GamePassCheckExp)(nil),        // 9: endless.GamePassCheckExp
	(*ActReward)(nil),               // 10: endless.ActReward
	(*GameExtraReward)(nil),         // 11: endless.GameExtraReward
	(*UserMeetupProgress)(nil),      // 12: endless.UserMeetupProgress
	(*UserMeetupProgressItem)(nil),  // 13: endless.UserMeetupProgressItem
	(*UserElGameReward)(nil),        // 14: endless.UserElGameReward
	(*EndGameNotify)(nil),           // 15: endless.EndGameNotify
	(*EndlessTeammate)(nil),         // 16: endless.EndlessTeammate
	(*SnakeCoinDetailItem)(nil),     // 17: endless.SnakeCoinDetailItem
	(*TaskInfo)(nil),                // 18: endless.TaskInfo
	(*WebBanner)(nil),               // 19: endless.WebBanner
	(*FloatingItem)(nil),            // 20: endless.FloatingItem
	(*FloatingInfo)(nil),            // 21: endless.FloatingInfo
	nil,                             // 22: endless.EndGameNotify.RecommendInfoEntry
	nil,                             // 23: endless.EndGameNotify.OpenedChestEntry
	nil,                             // 24: endless.EndGameNotify.TurntableEntry
	(*snakecommon.CRewardItem)(nil), // 25: snakecommon.CRewardItem
}
var file_system_team_endless_team_endless_proto_depIdxs = []int32{
	2,  // 0: endless.GetRecentPartnerRsp.user_list:type_name -> endless.Partner
	15, // 1: endless.GetGameResultRsp.result:type_name -> endless.EndGameNotify
	6,  // 2: endless.UserEggProgress.egg_list:type_name -> endless.UserEgg
	8,  // 3: endless.GamePassCheckExp.exp_detail:type_name -> endless.PassCheckExpDetail
	25, // 4: endless.ActReward.reward_list:type_name -> snakecommon.CRewardItem
	25, // 5: endless.GameExtraReward.reward_list:type_name -> snakecommon.CRewardItem
	18, // 6: endless.UserMeetupProgress.task_info:type_name -> endless.TaskInfo
	12, // 7: endless.UserMeetupProgressItem.progress:type_name -> endless.UserMeetupProgress
	18, // 8: endless.UserElGameReward.task_info:type_name -> endless.TaskInfo
	22, // 9: endless.EndGameNotify.recommend_info:type_name -> endless.EndGameNotify.RecommendInfoEntry
	23, // 10: endless.EndGameNotify.opened_chest:type_name -> endless.EndGameNotify.OpenedChestEntry
	17, // 11: endless.EndGameNotify.snake_coin_detail:type_name -> endless.SnakeCoinDetailItem
	24, // 12: endless.EndGameNotify.turntable:type_name -> endless.EndGameNotify.TurntableEntry
	5,  // 13: endless.EndGameNotify.game_task:type_name -> endless.UserGameTask
	7,  // 14: endless.EndGameNotify.hatch_egg:type_name -> endless.UserEggProgress
	9,  // 15: endless.EndGameNotify.pass_check:type_name -> endless.GamePassCheckExp
	10, // 16: endless.EndGameNotify.act_reward:type_name -> endless.ActReward
	11, // 17: endless.EndGameNotify.extra_reward:type_name -> endless.GameExtraReward
	25, // 18: endless.EndGameNotify.endless_reward_list:type_name -> snakecommon.CRewardItem
	12, // 19: endless.EndGameNotify.new_meetup:type_name -> endless.UserMeetupProgress
	12, // 20: endless.EndGameNotify.new_meetup_v2:type_name -> endless.UserMeetupProgress
	12, // 21: endless.EndGameNotify.new_meetup_v3:type_name -> endless.UserMeetupProgress
	13, // 22: endless.EndGameNotify.new_meetup_v3_list:type_name -> endless.UserMeetupProgressItem
	14, // 23: endless.EndGameNotify.endless_game_reward:type_name -> endless.UserElGameReward
	19, // 24: endless.EndGameNotify.web_banner:type_name -> endless.WebBanner
	21, // 25: endless.EndGameNotify.floating_info:type_name -> endless.FloatingInfo
	16, // 26: endless.EndGameNotify.teammates:type_name -> endless.EndlessTeammate
	25, // 27: endless.FloatingInfo.reward_list:type_name -> snakecommon.CRewardItem
	20, // 28: endless.FloatingInfo.floating_list:type_name -> endless.FloatingItem
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_system_team_endless_team_endless_proto_init() }
func file_system_team_endless_team_endless_proto_init() {
	if File_system_team_endless_team_endless_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_system_team_endless_team_endless_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentPartnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentPartnerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEggProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassCheckExpDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePassCheckExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameExtraReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMeetupProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMeetupProgressItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserElGameReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndGameNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessTeammate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeCoinDetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_team_endless_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_team_endless_team_endless_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_system_team_endless_team_endless_proto_goTypes,
		DependencyIndexes: file_system_team_endless_team_endless_proto_depIdxs,
		MessageInfos:      file_system_team_endless_team_endless_proto_msgTypes,
	}.Build()
	File_system_team_endless_team_endless_proto = out.File
	file_system_team_endless_team_endless_proto_rawDesc = nil
	file_system_team_endless_team_endless_proto_goTypes = nil
	file_system_team_endless_team_endless_proto_depIdxs = nil
}
