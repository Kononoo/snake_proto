// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: system/team_endless/unityserver/unity_server.proto

package unityserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeamEndlessSettleType int32

const (
	TeamEndlessSettleType_Normal    TeamEndlessSettleType = 0 // 正常主动结算
	TeamEndlessSettleType_Abnormal  TeamEndlessSettleType = 1 // 异常结算
	TeamEndlessSettleType_Exception TeamEndlessSettleType = 2 // 发生未知错误，默认不进行结算
)

// Enum value maps for TeamEndlessSettleType.
var (
	TeamEndlessSettleType_name = map[int32]string{
		0: "Normal",
		1: "Abnormal",
		2: "Exception",
	}
	TeamEndlessSettleType_value = map[string]int32{
		"Normal":    0,
		"Abnormal":  1,
		"Exception": 2,
	}
)

func (x TeamEndlessSettleType) Enum() *TeamEndlessSettleType {
	p := new(TeamEndlessSettleType)
	*p = x
	return p
}

func (x TeamEndlessSettleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamEndlessSettleType) Descriptor() protoreflect.EnumDescriptor {
	return file_system_team_endless_unityserver_unity_server_proto_enumTypes[0].Descriptor()
}

func (TeamEndlessSettleType) Type() protoreflect.EnumType {
	return &file_system_team_endless_unityserver_unity_server_proto_enumTypes[0]
}

func (x TeamEndlessSettleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamEndlessSettleType.Descriptor instead.
func (TeamEndlessSettleType) EnumDescriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{0}
}

// 玩家结算时的一些数据，同top_list_v2/update_score接口
type TeamEndlessEndGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"` // 结算的玩家uid
	Platform         int32                 `protobuf:"varint,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Market           string                `protobuf:"bytes,4,opt,name=market,proto3" json:"market,omitempty"`
	Version          string                `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	DeviceId         string                `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Kill             int32                 `protobuf:"varint,9,opt,name=kill,proto3" json:"kill,omitempty"`
	Length           int32                 `protobuf:"varint,10,opt,name=length,proto3" json:"length,omitempty"`
	LoginType        int32                 `protobuf:"varint,11,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`
	Buff             int32                 `protobuf:"varint,12,opt,name=buff,proto3" json:"buff,omitempty"`
	FirstChargeState int32                 `protobuf:"varint,13,opt,name=first_charge_state,json=firstChargeState,proto3" json:"first_charge_state,omitempty"`
	ReliveCount      int32                 `protobuf:"varint,14,opt,name=relive_count,json=reliveCount,proto3" json:"relive_count,omitempty"`
	ReliveTypes      string                `protobuf:"bytes,15,opt,name=relive_types,json=reliveTypes,proto3" json:"relive_types,omitempty"`
	SkinId           int32                 `protobuf:"varint,16,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	NewScore         int32                 `protobuf:"varint,17,opt,name=new_score,json=newScore,proto3" json:"new_score,omitempty"`
	GameTime         int32                 `protobuf:"varint,18,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	DestroyLength    int32                 `protobuf:"varint,19,opt,name=destroy_length,json=destroyLength,proto3" json:"destroy_length,omitempty"`
	Score            string                `protobuf:"bytes,20,opt,name=score,proto3" json:"score,omitempty"`
	Collect          int32                 `protobuf:"varint,21,opt,name=collect,proto3" json:"collect,omitempty"`
	SettleType       TeamEndlessSettleType `protobuf:"varint,22,opt,name=settle_type,json=settleType,proto3,enum=unityserver.TeamEndlessSettleType" json:"settle_type,omitempty"` // 结算类型
	Teammates        []*EndlessTeammate    `protobuf:"bytes,23,rep,name=teammates,proto3" json:"teammates,omitempty"`                                                             // 队友
	FollowedList     []string              `protobuf:"bytes,24,rep,name=followed_list,json=followedList,proto3" json:"followed_list,omitempty"`                                   // 被关注的 uid
	GameCount        int64                 `protobuf:"varint,25,opt,name=game_count,json=gameCount,proto3" json:"game_count,omitempty"`                                           // 对局次数
	GameId           string                `protobuf:"bytes,26,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                     // 本局游戏的id，用于区分不同对局的结算，防止重复结算
	TacitCount       int32                 `protobuf:"varint,27,opt,name=tacit_count,json=tacitCount,proto3" json:"tacit_count,omitempty"`                                        // 本局游戏默契次数
	BestTeammate     *BestTeammate         `protobuf:"bytes,28,opt,name=best_teammate,json=bestTeammate,proto3" json:"best_teammate,omitempty"`
	IsExitGame       bool                  `protobuf:"varint,29,opt,name=is_exit_game,json=isExitGame,proto3" json:"is_exit_game,omitempty"`                // 是否直接退出游戏
	IsJoinForbidden  bool                  `protobuf:"varint,30,opt,name=is_join_forbidden,json=isJoinForbidden,proto3" json:"is_join_forbidden,omitempty"` // 是否禁止中途加入
	KillBossCount    int32                 `protobuf:"varint,31,opt,name=kill_boss_count,json=killBossCount,proto3" json:"kill_boss_count,omitempty"`       // 和队友一起击杀boss的次数
}

func (x *TeamEndlessEndGame) Reset() {
	*x = TeamEndlessEndGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessEndGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessEndGame) ProtoMessage() {}

func (x *TeamEndlessEndGame) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessEndGame.ProtoReflect.Descriptor instead.
func (*TeamEndlessEndGame) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{0}
}

func (x *TeamEndlessEndGame) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TeamEndlessEndGame) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *TeamEndlessEndGame) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *TeamEndlessEndGame) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TeamEndlessEndGame) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TeamEndlessEndGame) GetKill() int32 {
	if x != nil {
		return x.Kill
	}
	return 0
}

func (x *TeamEndlessEndGame) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TeamEndlessEndGame) GetLoginType() int32 {
	if x != nil {
		return x.LoginType
	}
	return 0
}

func (x *TeamEndlessEndGame) GetBuff() int32 {
	if x != nil {
		return x.Buff
	}
	return 0
}

func (x *TeamEndlessEndGame) GetFirstChargeState() int32 {
	if x != nil {
		return x.FirstChargeState
	}
	return 0
}

func (x *TeamEndlessEndGame) GetReliveCount() int32 {
	if x != nil {
		return x.ReliveCount
	}
	return 0
}

func (x *TeamEndlessEndGame) GetReliveTypes() string {
	if x != nil {
		return x.ReliveTypes
	}
	return ""
}

func (x *TeamEndlessEndGame) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *TeamEndlessEndGame) GetNewScore() int32 {
	if x != nil {
		return x.NewScore
	}
	return 0
}

func (x *TeamEndlessEndGame) GetGameTime() int32 {
	if x != nil {
		return x.GameTime
	}
	return 0
}

func (x *TeamEndlessEndGame) GetDestroyLength() int32 {
	if x != nil {
		return x.DestroyLength
	}
	return 0
}

func (x *TeamEndlessEndGame) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *TeamEndlessEndGame) GetCollect() int32 {
	if x != nil {
		return x.Collect
	}
	return 0
}

func (x *TeamEndlessEndGame) GetSettleType() TeamEndlessSettleType {
	if x != nil {
		return x.SettleType
	}
	return TeamEndlessSettleType_Normal
}

func (x *TeamEndlessEndGame) GetTeammates() []*EndlessTeammate {
	if x != nil {
		return x.Teammates
	}
	return nil
}

func (x *TeamEndlessEndGame) GetFollowedList() []string {
	if x != nil {
		return x.FollowedList
	}
	return nil
}

func (x *TeamEndlessEndGame) GetGameCount() int64 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *TeamEndlessEndGame) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *TeamEndlessEndGame) GetTacitCount() int32 {
	if x != nil {
		return x.TacitCount
	}
	return 0
}

func (x *TeamEndlessEndGame) GetBestTeammate() *BestTeammate {
	if x != nil {
		return x.BestTeammate
	}
	return nil
}

func (x *TeamEndlessEndGame) GetIsExitGame() bool {
	if x != nil {
		return x.IsExitGame
	}
	return false
}

func (x *TeamEndlessEndGame) GetIsJoinForbidden() bool {
	if x != nil {
		return x.IsJoinForbidden
	}
	return false
}

func (x *TeamEndlessEndGame) GetKillBossCount() int32 {
	if x != nil {
		return x.KillBossCount
	}
	return 0
}

type TeamEndlessEndGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldRankScore       int64   `protobuf:"varint,1,opt,name=old_rank_score,json=oldRankScore,proto3" json:"old_rank_score,omitempty"`                     // 之前的段位分
	NewRankScore       int64   `protobuf:"varint,2,opt,name=new_rank_score,json=newRankScore,proto3" json:"new_rank_score,omitempty"`                     // 新的段位分
	NewRankId          int64   `protobuf:"varint,3,opt,name=new_rank_id,json=newRankId,proto3" json:"new_rank_id,omitempty"`                              // 新的段位id
	AddRankScore       int64   `protobuf:"varint,4,opt,name=add_rank_score,json=addRankScore,proto3" json:"add_rank_score,omitempty"`                     // 增加的段位分
	Ai                 *AiInfo `protobuf:"bytes,5,opt,name=ai,proto3" json:"ai,omitempty"`                                                                // 中途加入的ai,没有ai时为空
	SpeedCardRankScore int64   `protobuf:"varint,6,opt,name=speed_card_rank_score,json=speedCardRankScore,proto3" json:"speed_card_rank_score,omitempty"` // 加速卡获得的段位分
}

func (x *TeamEndlessEndGameRsp) Reset() {
	*x = TeamEndlessEndGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessEndGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessEndGameRsp) ProtoMessage() {}

func (x *TeamEndlessEndGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessEndGameRsp.ProtoReflect.Descriptor instead.
func (*TeamEndlessEndGameRsp) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{1}
}

func (x *TeamEndlessEndGameRsp) GetOldRankScore() int64 {
	if x != nil {
		return x.OldRankScore
	}
	return 0
}

func (x *TeamEndlessEndGameRsp) GetNewRankScore() int64 {
	if x != nil {
		return x.NewRankScore
	}
	return 0
}

func (x *TeamEndlessEndGameRsp) GetNewRankId() int64 {
	if x != nil {
		return x.NewRankId
	}
	return 0
}

func (x *TeamEndlessEndGameRsp) GetAddRankScore() int64 {
	if x != nil {
		return x.AddRankScore
	}
	return 0
}

func (x *TeamEndlessEndGameRsp) GetAi() *AiInfo {
	if x != nil {
		return x.Ai
	}
	return nil
}

func (x *TeamEndlessEndGameRsp) GetSpeedCardRankScore() int64 {
	if x != nil {
		return x.SpeedCardRankScore
	}
	return 0
}

type TeamEndlessExitGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsJoinForbidden bool `protobuf:"varint,1,opt,name=is_join_forbidden,json=isJoinForbidden,proto3" json:"is_join_forbidden,omitempty"` // 是否禁止中途加入
}

func (x *TeamEndlessExitGameReq) Reset() {
	*x = TeamEndlessExitGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessExitGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessExitGameReq) ProtoMessage() {}

func (x *TeamEndlessExitGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessExitGameReq.ProtoReflect.Descriptor instead.
func (*TeamEndlessExitGameReq) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{2}
}

func (x *TeamEndlessExitGameReq) GetIsJoinForbidden() bool {
	if x != nil {
		return x.IsJoinForbidden
	}
	return false
}

type TeamEndlessExitGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ai *AiInfo `protobuf:"bytes,1,opt,name=ai,proto3" json:"ai,omitempty"` // 中途加入的ai
}

func (x *TeamEndlessExitGameRsp) Reset() {
	*x = TeamEndlessExitGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEndlessExitGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEndlessExitGameRsp) ProtoMessage() {}

func (x *TeamEndlessExitGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEndlessExitGameRsp.ProtoReflect.Descriptor instead.
func (*TeamEndlessExitGameRsp) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{3}
}

func (x *TeamEndlessExitGameRsp) GetAi() *AiInfo {
	if x != nil {
		return x.Ai
	}
	return nil
}

type AiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`            //玩家uid
	Platform int32  `protobuf:"varint,2,opt,name=platform,proto3" json:"platform,omitempty"` // 平台
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`  // 昵称
}

func (x *AiInfo) Reset() {
	*x = AiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiInfo) ProtoMessage() {}

func (x *AiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiInfo.ProtoReflect.Descriptor instead.
func (*AiInfo) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{4}
}

func (x *AiInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AiInfo) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *AiInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type EndlessTeammate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Score  int32   `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	SkinId int32   `protobuf:"varint,3,opt,name=skinId,proto3" json:"skinId,omitempty"`
	Tag    []int32 `protobuf:"varint,4,rep,packed,name=tag,proto3" json:"tag,omitempty"`
	IsAi   bool    `protobuf:"varint,5,opt,name=is_ai,json=isAi,proto3" json:"is_ai,omitempty"` // 是否ai
}

func (x *EndlessTeammate) Reset() {
	*x = EndlessTeammate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndlessTeammate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndlessTeammate) ProtoMessage() {}

func (x *EndlessTeammate) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndlessTeammate.ProtoReflect.Descriptor instead.
func (*EndlessTeammate) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{5}
}

func (x *EndlessTeammate) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *EndlessTeammate) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EndlessTeammate) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *EndlessTeammate) GetTag() []int32 {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *EndlessTeammate) GetIsAi() bool {
	if x != nil {
		return x.IsAi
	}
	return false
}

type BestTeammate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                          string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PartnerCount                 int32  `protobuf:"varint,2,opt,name=partner_count,json=partnerCount,proto3" json:"partner_count,omitempty"`
	PartnerTime                  int32  `protobuf:"varint,3,opt,name=partner_time,json=partnerTime,proto3" json:"partner_time,omitempty"`
	PartnerShareLength           int32  `protobuf:"varint,4,opt,name=partner_share_length,json=partnerShareLength,proto3" json:"partner_share_length,omitempty"`
	PartnerKill                  int32  `protobuf:"varint,5,opt,name=partner_kill,json=partnerKill,proto3" json:"partner_kill,omitempty"`
	PartnerLength                int32  `protobuf:"varint,6,opt,name=partner_length,json=partnerLength,proto3" json:"partner_length,omitempty"`
	PartnerKillBossTogetherCount int32  `protobuf:"varint,7,opt,name=partner_kill_boss_together_count,json=partnerKillBossTogetherCount,proto3" json:"partner_kill_boss_together_count,omitempty"`
}

func (x *BestTeammate) Reset() {
	*x = BestTeammate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestTeammate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestTeammate) ProtoMessage() {}

func (x *BestTeammate) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestTeammate.ProtoReflect.Descriptor instead.
func (*BestTeammate) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{6}
}

func (x *BestTeammate) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BestTeammate) GetPartnerCount() int32 {
	if x != nil {
		return x.PartnerCount
	}
	return 0
}

func (x *BestTeammate) GetPartnerTime() int32 {
	if x != nil {
		return x.PartnerTime
	}
	return 0
}

func (x *BestTeammate) GetPartnerShareLength() int32 {
	if x != nil {
		return x.PartnerShareLength
	}
	return 0
}

func (x *BestTeammate) GetPartnerKill() int32 {
	if x != nil {
		return x.PartnerKill
	}
	return 0
}

func (x *BestTeammate) GetPartnerLength() int32 {
	if x != nil {
		return x.PartnerLength
	}
	return 0
}

func (x *BestTeammate) GetPartnerKillBossTogetherCount() int32 {
	if x != nil {
		return x.PartnerKillBossTogetherCount
	}
	return 0
}

// 玩家结算时的一些数据
type DreamGameEndGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"` // 结算的玩家uid
	Platform   int32                 `protobuf:"varint,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Market     string                `protobuf:"bytes,4,opt,name=market,proto3" json:"market,omitempty"`
	Version    string                `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	DeviceId   string                `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Kill       int32                 `protobuf:"varint,9,opt,name=kill,proto3" json:"kill,omitempty"`
	Length     int32                 `protobuf:"varint,10,opt,name=length,proto3" json:"length,omitempty"`
	SettleType TeamEndlessSettleType `protobuf:"varint,11,opt,name=settle_type,json=settleType,proto3,enum=unityserver.TeamEndlessSettleType" json:"settle_type,omitempty"` // 结算类型
	Teammates  []*DreamGameTeammate  `protobuf:"bytes,12,rep,name=teammates,proto3" json:"teammates,omitempty"`                                                             // 队友
	Rid        string                `protobuf:"bytes,13,opt,name=rid,proto3" json:"rid,omitempty"`                                                                         // 本局游戏的rid
}

func (x *DreamGameEndGame) Reset() {
	*x = DreamGameEndGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DreamGameEndGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DreamGameEndGame) ProtoMessage() {}

func (x *DreamGameEndGame) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DreamGameEndGame.ProtoReflect.Descriptor instead.
func (*DreamGameEndGame) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{7}
}

func (x *DreamGameEndGame) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DreamGameEndGame) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *DreamGameEndGame) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *DreamGameEndGame) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DreamGameEndGame) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DreamGameEndGame) GetKill() int32 {
	if x != nil {
		return x.Kill
	}
	return 0
}

func (x *DreamGameEndGame) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DreamGameEndGame) GetSettleType() TeamEndlessSettleType {
	if x != nil {
		return x.SettleType
	}
	return TeamEndlessSettleType_Normal
}

func (x *DreamGameEndGame) GetTeammates() []*DreamGameTeammate {
	if x != nil {
		return x.Teammates
	}
	return nil
}

func (x *DreamGameEndGame) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

type DreamGameTeammate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Score  int32  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	SkinId int32  `protobuf:"varint,3,opt,name=skinId,proto3" json:"skinId,omitempty"`
}

func (x *DreamGameTeammate) Reset() {
	*x = DreamGameTeammate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DreamGameTeammate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DreamGameTeammate) ProtoMessage() {}

func (x *DreamGameTeammate) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DreamGameTeammate.ProtoReflect.Descriptor instead.
func (*DreamGameTeammate) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{8}
}

func (x *DreamGameTeammate) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DreamGameTeammate) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *DreamGameTeammate) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

type DreamGameEndGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DreamGameEndGameRsp) Reset() {
	*x = DreamGameEndGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DreamGameEndGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DreamGameEndGameRsp) ProtoMessage() {}

func (x *DreamGameEndGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DreamGameEndGameRsp.ProtoReflect.Descriptor instead.
func (*DreamGameEndGameRsp) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{9}
}

type DreamGameExitGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DreamGameExitGameReq) Reset() {
	*x = DreamGameExitGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DreamGameExitGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DreamGameExitGameReq) ProtoMessage() {}

func (x *DreamGameExitGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DreamGameExitGameReq.ProtoReflect.Descriptor instead.
func (*DreamGameExitGameReq) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{10}
}

type DreamGameExitGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DreamGameExitGameRsp) Reset() {
	*x = DreamGameExitGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DreamGameExitGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DreamGameExitGameRsp) ProtoMessage() {}

func (x *DreamGameExitGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_team_endless_unityserver_unity_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DreamGameExitGameRsp.ProtoReflect.Descriptor instead.
func (*DreamGameExitGameRsp) Descriptor() ([]byte, []int) {
	return file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP(), []int{11}
}

var File_system_team_endless_unityserver_unity_server_proto protoreflect.FileDescriptor

var file_system_team_endless_unityserver_unity_server_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x22, 0xc3, 0x07, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x62, 0x75, 0x66, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61,
	0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x69, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x6f,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d,
	0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x61, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x61, 0x69, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x70, 0x65, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x54,
	0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x78, 0x69, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x45, 0x78, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x02, 0x61,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x61, 0x69,
	0x22, 0x52, 0x0a, 0x06, 0x41, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f,
	0x61, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x41, 0x69, 0x22, 0xac,
	0x02, 0x0a, 0x0c, 0x42, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73,
	0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd0, 0x02,
	0x0a, 0x10, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b,
	0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64,
	0x22, 0x53, 0x0a, 0x11, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x22, 0x16, 0x0a, 0x14,
	0x44, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x78, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x2a, 0x40, 0x0a, 0x15,
	0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x42, 0x41,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_team_endless_unityserver_unity_server_proto_rawDescOnce sync.Once
	file_system_team_endless_unityserver_unity_server_proto_rawDescData = file_system_team_endless_unityserver_unity_server_proto_rawDesc
)

func file_system_team_endless_unityserver_unity_server_proto_rawDescGZIP() []byte {
	file_system_team_endless_unityserver_unity_server_proto_rawDescOnce.Do(func() {
		file_system_team_endless_unityserver_unity_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_team_endless_unityserver_unity_server_proto_rawDescData)
	})
	return file_system_team_endless_unityserver_unity_server_proto_rawDescData
}

var file_system_team_endless_unityserver_unity_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_system_team_endless_unityserver_unity_server_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_system_team_endless_unityserver_unity_server_proto_goTypes = []interface{}{
	(TeamEndlessSettleType)(0),     // 0: unityserver.TeamEndlessSettleType
	(*TeamEndlessEndGame)(nil),     // 1: unityserver.TeamEndlessEndGame
	(*TeamEndlessEndGameRsp)(nil),  // 2: unityserver.TeamEndlessEndGameRsp
	(*TeamEndlessExitGameReq)(nil), // 3: unityserver.TeamEndlessExitGameReq
	(*TeamEndlessExitGameRsp)(nil), // 4: unityserver.TeamEndlessExitGameRsp
	(*AiInfo)(nil),                 // 5: unityserver.AiInfo
	(*EndlessTeammate)(nil),        // 6: unityserver.EndlessTeammate
	(*BestTeammate)(nil),           // 7: unityserver.BestTeammate
	(*DreamGameEndGame)(nil),       // 8: unityserver.DreamGameEndGame
	(*DreamGameTeammate)(nil),      // 9: unityserver.DreamGameTeammate
	(*DreamGameEndGameRsp)(nil),    // 10: unityserver.DreamGameEndGameRsp
	(*DreamGameExitGameReq)(nil),   // 11: unityserver.DreamGameExitGameReq
	(*DreamGameExitGameRsp)(nil),   // 12: unityserver.DreamGameExitGameRsp
}
var file_system_team_endless_unityserver_unity_server_proto_depIdxs = []int32{
	0, // 0: unityserver.TeamEndlessEndGame.settle_type:type_name -> unityserver.TeamEndlessSettleType
	6, // 1: unityserver.TeamEndlessEndGame.teammates:type_name -> unityserver.EndlessTeammate
	7, // 2: unityserver.TeamEndlessEndGame.best_teammate:type_name -> unityserver.BestTeammate
	5, // 3: unityserver.TeamEndlessEndGameRsp.ai:type_name -> unityserver.AiInfo
	5, // 4: unityserver.TeamEndlessExitGameRsp.ai:type_name -> unityserver.AiInfo
	0, // 5: unityserver.DreamGameEndGame.settle_type:type_name -> unityserver.TeamEndlessSettleType
	9, // 6: unityserver.DreamGameEndGame.teammates:type_name -> unityserver.DreamGameTeammate
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_system_team_endless_unityserver_unity_server_proto_init() }
func file_system_team_endless_unityserver_unity_server_proto_init() {
	if File_system_team_endless_unityserver_unity_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessEndGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessEndGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessExitGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamEndlessExitGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndlessTeammate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestTeammate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DreamGameEndGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DreamGameTeammate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DreamGameEndGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DreamGameExitGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_team_endless_unityserver_unity_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DreamGameExitGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_team_endless_unityserver_unity_server_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_system_team_endless_unityserver_unity_server_proto_goTypes,
		DependencyIndexes: file_system_team_endless_unityserver_unity_server_proto_depIdxs,
		EnumInfos:         file_system_team_endless_unityserver_unity_server_proto_enumTypes,
		MessageInfos:      file_system_team_endless_unityserver_unity_server_proto_msgTypes,
	}.Build()
	File_system_team_endless_unityserver_unity_server_proto = out.File
	file_system_team_endless_unityserver_unity_server_proto_rawDesc = nil
	file_system_team_endless_unityserver_unity_server_proto_goTypes = nil
	file_system_team_endless_unityserver_unity_server_proto_depIdxs = nil
}
