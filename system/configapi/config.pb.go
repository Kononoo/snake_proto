// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: system/configapi/config.proto

package configapi

import (
	snakecommon "git.17zjh.com/snake/snake_proto/snakecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigReq) Reset() {
	*x = ConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_configapi_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigReq) ProtoMessage() {}

func (x *ConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_system_configapi_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigReq.ProtoReflect.Descriptor instead.
func (*ConfigReq) Descriptor() ([]byte, []int) {
	return file_system_configapi_config_proto_rawDescGZIP(), []int{0}
}

// config_v4 resp proto begin
type ConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserConfig                *snakecommon.UserConfig                `protobuf:"bytes,1,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	ClanConfig                *snakecommon.ClanConfig                `protobuf:"bytes,2,opt,name=clan_config,json=clanConfig,proto3" json:"clan_config,omitempty"`
	RankConfig                *snakecommon.RankConfig                `protobuf:"bytes,3,opt,name=rank_config,json=rankConfig,proto3" json:"rank_config,omitempty"`
	ActivityConfig            *snakecommon.ActivityConfig            `protobuf:"bytes,4,opt,name=activity_config,json=activityConfig,proto3" json:"activity_config,omitempty"`
	TextConfig                *snakecommon.TextConfig                `protobuf:"bytes,5,opt,name=text_config,json=textConfig,proto3" json:"text_config,omitempty"`
	CharmExpConfig            *snakecommon.CharmExpConfig            `protobuf:"bytes,6,opt,name=charm_exp_config,json=charmExpConfig,proto3" json:"charm_exp_config,omitempty"`
	ShareConfig               *snakecommon.ShareConfig               `protobuf:"bytes,7,opt,name=share_config,json=shareConfig,proto3" json:"share_config,omitempty"`
	SocialConfig              *snakecommon.SocialConfig              `protobuf:"bytes,8,opt,name=social_config,json=socialConfig,proto3" json:"social_config,omitempty"`
	OlGameConfig              *snakecommon.NetFrameGameConfig        `protobuf:"bytes,9,opt,name=ol_game_config,json=olGameConfig,proto3" json:"ol_game_config,omitempty"`
	ChargeVipConfig           *snakecommon.ChargeVipConfig           `protobuf:"bytes,10,opt,name=charge_vip_config,json=chargeVipConfig,proto3" json:"charge_vip_config,omitempty"`
	UiConfigV3                *snakecommon.HomeUiConfigV3            `protobuf:"bytes,11,opt,name=ui_config_v3,json=uiConfigV3,proto3" json:"ui_config_v3,omitempty"`
	PingConfig                *snakecommon.PingConfig                `protobuf:"bytes,12,opt,name=ping_config,json=pingConfig,proto3" json:"ping_config,omitempty"`
	RewardMark                []*snakecommon.RewardMark              `protobuf:"bytes,13,rep,name=reward_mark,json=rewardMark,proto3" json:"reward_mark,omitempty"`
	ShowAdConfig              *snakecommon.ShowAdConfig              `protobuf:"bytes,14,opt,name=show_ad_config,json=showAdConfig,proto3" json:"show_ad_config,omitempty"`
	OrderConfig               *snakecommon.OrderConfig               `protobuf:"bytes,15,opt,name=order_config,json=orderConfig,proto3" json:"order_config,omitempty"`
	ShowBadge                 *snakecommon.ShowBadgeConfig           `protobuf:"bytes,16,opt,name=show_badge,json=showBadge,proto3" json:"show_badge,omitempty"`
	ShowIllustration          *snakecommon.ShowIllustrationConfig    `protobuf:"bytes,17,opt,name=show_illustration,json=showIllustration,proto3" json:"show_illustration,omitempty"`
	InReviewState             int32                                  `protobuf:"varint,18,opt,name=in_review_state,json=inReviewState,proto3" json:"in_review_state,omitempty"`
	ProtoStoreConfig          *snakecommon.CStoreConfig              `protobuf:"bytes,19,opt,name=proto_store_config,json=protoStoreConfig,proto3" json:"proto_store_config,omitempty"`
	OfflineGameConfig         *snakecommon.OfflineGameConfig         `protobuf:"bytes,20,opt,name=offline_game_config,json=offlineGameConfig,proto3" json:"offline_game_config,omitempty"`
	EndlessBuffPropConfig     []*snakecommon.EndLessBuffPropInfo     `protobuf:"bytes,21,rep,name=endless_buff_prop_config,json=endlessBuffPropConfig,proto3" json:"endless_buff_prop_config,omitempty"`
	HuaweiHighlight           *snakecommon.RecoderConfig             `protobuf:"bytes,22,opt,name=huawei_highlight,json=huaweiHighlight,proto3" json:"huawei_highlight,omitempty"`
	UnityQualifyingOpenConfig *snakecommon.UnityQualifyingOpenConfig `protobuf:"bytes,23,opt,name=unity_qualifying_open_config,json=unityQualifyingOpenConfig,proto3" json:"unity_qualifying_open_config,omitempty"`
	MonthCard                 *snakecommon.MonthCardConfig           `protobuf:"bytes,24,opt,name=month_card,json=monthCard,proto3" json:"month_card,omitempty"`
	SubConfig                 string                                 `protobuf:"bytes,25,opt,name=sub_config,json=subConfig,proto3" json:"sub_config,omitempty"`
	TopListConfig             *snakecommon.TopListConfig             `protobuf:"bytes,26,opt,name=top_list_config,json=topListConfig,proto3" json:"top_list_config,omitempty"`
	CharmTours                *snakecommon.CharmTourConfig           `protobuf:"bytes,27,opt,name=charm_tours,json=charmTours,proto3" json:"charm_tours,omitempty"`
	GiftWall                  *snakecommon.GiftWallConfig            `protobuf:"bytes,28,opt,name=gift_wall,json=giftWall,proto3" json:"gift_wall,omitempty"`
	MentorshipConfig          *snakecommon.MentorConfig              `protobuf:"bytes,29,opt,name=mentorship_config,json=mentorshipConfig,proto3" json:"mentorship_config,omitempty"`
	GiftIllustration          *snakecommon.GiftIllustrationConfig    `protobuf:"bytes,30,opt,name=gift_illustration,json=giftIllustration,proto3" json:"gift_illustration,omitempty"`
}

func (x *ConfigRsp) Reset() {
	*x = ConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_configapi_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRsp) ProtoMessage() {}

func (x *ConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_configapi_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRsp.ProtoReflect.Descriptor instead.
func (*ConfigRsp) Descriptor() ([]byte, []int) {
	return file_system_configapi_config_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigRsp) GetUserConfig() *snakecommon.UserConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *ConfigRsp) GetClanConfig() *snakecommon.ClanConfig {
	if x != nil {
		return x.ClanConfig
	}
	return nil
}

func (x *ConfigRsp) GetRankConfig() *snakecommon.RankConfig {
	if x != nil {
		return x.RankConfig
	}
	return nil
}

func (x *ConfigRsp) GetActivityConfig() *snakecommon.ActivityConfig {
	if x != nil {
		return x.ActivityConfig
	}
	return nil
}

func (x *ConfigRsp) GetTextConfig() *snakecommon.TextConfig {
	if x != nil {
		return x.TextConfig
	}
	return nil
}

func (x *ConfigRsp) GetCharmExpConfig() *snakecommon.CharmExpConfig {
	if x != nil {
		return x.CharmExpConfig
	}
	return nil
}

func (x *ConfigRsp) GetShareConfig() *snakecommon.ShareConfig {
	if x != nil {
		return x.ShareConfig
	}
	return nil
}

func (x *ConfigRsp) GetSocialConfig() *snakecommon.SocialConfig {
	if x != nil {
		return x.SocialConfig
	}
	return nil
}

func (x *ConfigRsp) GetOlGameConfig() *snakecommon.NetFrameGameConfig {
	if x != nil {
		return x.OlGameConfig
	}
	return nil
}

func (x *ConfigRsp) GetChargeVipConfig() *snakecommon.ChargeVipConfig {
	if x != nil {
		return x.ChargeVipConfig
	}
	return nil
}

func (x *ConfigRsp) GetUiConfigV3() *snakecommon.HomeUiConfigV3 {
	if x != nil {
		return x.UiConfigV3
	}
	return nil
}

func (x *ConfigRsp) GetPingConfig() *snakecommon.PingConfig {
	if x != nil {
		return x.PingConfig
	}
	return nil
}

func (x *ConfigRsp) GetRewardMark() []*snakecommon.RewardMark {
	if x != nil {
		return x.RewardMark
	}
	return nil
}

func (x *ConfigRsp) GetShowAdConfig() *snakecommon.ShowAdConfig {
	if x != nil {
		return x.ShowAdConfig
	}
	return nil
}

func (x *ConfigRsp) GetOrderConfig() *snakecommon.OrderConfig {
	if x != nil {
		return x.OrderConfig
	}
	return nil
}

func (x *ConfigRsp) GetShowBadge() *snakecommon.ShowBadgeConfig {
	if x != nil {
		return x.ShowBadge
	}
	return nil
}

func (x *ConfigRsp) GetShowIllustration() *snakecommon.ShowIllustrationConfig {
	if x != nil {
		return x.ShowIllustration
	}
	return nil
}

func (x *ConfigRsp) GetInReviewState() int32 {
	if x != nil {
		return x.InReviewState
	}
	return 0
}

func (x *ConfigRsp) GetProtoStoreConfig() *snakecommon.CStoreConfig {
	if x != nil {
		return x.ProtoStoreConfig
	}
	return nil
}

func (x *ConfigRsp) GetOfflineGameConfig() *snakecommon.OfflineGameConfig {
	if x != nil {
		return x.OfflineGameConfig
	}
	return nil
}

func (x *ConfigRsp) GetEndlessBuffPropConfig() []*snakecommon.EndLessBuffPropInfo {
	if x != nil {
		return x.EndlessBuffPropConfig
	}
	return nil
}

func (x *ConfigRsp) GetHuaweiHighlight() *snakecommon.RecoderConfig {
	if x != nil {
		return x.HuaweiHighlight
	}
	return nil
}

func (x *ConfigRsp) GetUnityQualifyingOpenConfig() *snakecommon.UnityQualifyingOpenConfig {
	if x != nil {
		return x.UnityQualifyingOpenConfig
	}
	return nil
}

func (x *ConfigRsp) GetMonthCard() *snakecommon.MonthCardConfig {
	if x != nil {
		return x.MonthCard
	}
	return nil
}

func (x *ConfigRsp) GetSubConfig() string {
	if x != nil {
		return x.SubConfig
	}
	return ""
}

func (x *ConfigRsp) GetTopListConfig() *snakecommon.TopListConfig {
	if x != nil {
		return x.TopListConfig
	}
	return nil
}

func (x *ConfigRsp) GetCharmTours() *snakecommon.CharmTourConfig {
	if x != nil {
		return x.CharmTours
	}
	return nil
}

func (x *ConfigRsp) GetGiftWall() *snakecommon.GiftWallConfig {
	if x != nil {
		return x.GiftWall
	}
	return nil
}

func (x *ConfigRsp) GetMentorshipConfig() *snakecommon.MentorConfig {
	if x != nil {
		return x.MentorshipConfig
	}
	return nil
}

func (x *ConfigRsp) GetGiftIllustration() *snakecommon.GiftIllustrationConfig {
	if x != nil {
		return x.GiftIllustration
	}
	return nil
}

var File_system_configapi_config_proto protoreflect.FileDescriptor

var file_system_configapi_config_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x61, 0x70, 0x69, 0x1a, 0x18, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x22, 0xcd, 0x0f, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6f, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x56, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x56, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x55, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x33, 0x52, 0x0a, 0x75, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x33, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6c,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x11, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x18, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x50,
	0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45,
	0x0a, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x67, 0x0a, 0x1c, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b,
	0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x67,
	0x69, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x6d,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x10, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37, 0x7a, 0x6a, 0x68, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_configapi_config_proto_rawDescOnce sync.Once
	file_system_configapi_config_proto_rawDescData = file_system_configapi_config_proto_rawDesc
)

func file_system_configapi_config_proto_rawDescGZIP() []byte {
	file_system_configapi_config_proto_rawDescOnce.Do(func() {
		file_system_configapi_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_configapi_config_proto_rawDescData)
	})
	return file_system_configapi_config_proto_rawDescData
}

var file_system_configapi_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_system_configapi_config_proto_goTypes = []interface{}{
	(*ConfigReq)(nil),                             // 0: configapi.ConfigReq
	(*ConfigRsp)(nil),                             // 1: configapi.ConfigRsp
	(*snakecommon.UserConfig)(nil),                // 2: snakecommon.UserConfig
	(*snakecommon.ClanConfig)(nil),                // 3: snakecommon.ClanConfig
	(*snakecommon.RankConfig)(nil),                // 4: snakecommon.RankConfig
	(*snakecommon.ActivityConfig)(nil),            // 5: snakecommon.ActivityConfig
	(*snakecommon.TextConfig)(nil),                // 6: snakecommon.TextConfig
	(*snakecommon.CharmExpConfig)(nil),            // 7: snakecommon.CharmExpConfig
	(*snakecommon.ShareConfig)(nil),               // 8: snakecommon.ShareConfig
	(*snakecommon.SocialConfig)(nil),              // 9: snakecommon.SocialConfig
	(*snakecommon.NetFrameGameConfig)(nil),        // 10: snakecommon.NetFrameGameConfig
	(*snakecommon.ChargeVipConfig)(nil),           // 11: snakecommon.ChargeVipConfig
	(*snakecommon.HomeUiConfigV3)(nil),            // 12: snakecommon.HomeUiConfigV3
	(*snakecommon.PingConfig)(nil),                // 13: snakecommon.PingConfig
	(*snakecommon.RewardMark)(nil),                // 14: snakecommon.RewardMark
	(*snakecommon.ShowAdConfig)(nil),              // 15: snakecommon.ShowAdConfig
	(*snakecommon.OrderConfig)(nil),               // 16: snakecommon.OrderConfig
	(*snakecommon.ShowBadgeConfig)(nil),           // 17: snakecommon.ShowBadgeConfig
	(*snakecommon.ShowIllustrationConfig)(nil),    // 18: snakecommon.ShowIllustrationConfig
	(*snakecommon.CStoreConfig)(nil),              // 19: snakecommon.CStoreConfig
	(*snakecommon.OfflineGameConfig)(nil),         // 20: snakecommon.OfflineGameConfig
	(*snakecommon.EndLessBuffPropInfo)(nil),       // 21: snakecommon.EndLessBuffPropInfo
	(*snakecommon.RecoderConfig)(nil),             // 22: snakecommon.RecoderConfig
	(*snakecommon.UnityQualifyingOpenConfig)(nil), // 23: snakecommon.UnityQualifyingOpenConfig
	(*snakecommon.MonthCardConfig)(nil),           // 24: snakecommon.MonthCardConfig
	(*snakecommon.TopListConfig)(nil),             // 25: snakecommon.TopListConfig
	(*snakecommon.CharmTourConfig)(nil),           // 26: snakecommon.CharmTourConfig
	(*snakecommon.GiftWallConfig)(nil),            // 27: snakecommon.GiftWallConfig
	(*snakecommon.MentorConfig)(nil),              // 28: snakecommon.MentorConfig
	(*snakecommon.GiftIllustrationConfig)(nil),    // 29: snakecommon.GiftIllustrationConfig
}
var file_system_configapi_config_proto_depIdxs = []int32{
	2,  // 0: configapi.ConfigRsp.user_config:type_name -> snakecommon.UserConfig
	3,  // 1: configapi.ConfigRsp.clan_config:type_name -> snakecommon.ClanConfig
	4,  // 2: configapi.ConfigRsp.rank_config:type_name -> snakecommon.RankConfig
	5,  // 3: configapi.ConfigRsp.activity_config:type_name -> snakecommon.ActivityConfig
	6,  // 4: configapi.ConfigRsp.text_config:type_name -> snakecommon.TextConfig
	7,  // 5: configapi.ConfigRsp.charm_exp_config:type_name -> snakecommon.CharmExpConfig
	8,  // 6: configapi.ConfigRsp.share_config:type_name -> snakecommon.ShareConfig
	9,  // 7: configapi.ConfigRsp.social_config:type_name -> snakecommon.SocialConfig
	10, // 8: configapi.ConfigRsp.ol_game_config:type_name -> snakecommon.NetFrameGameConfig
	11, // 9: configapi.ConfigRsp.charge_vip_config:type_name -> snakecommon.ChargeVipConfig
	12, // 10: configapi.ConfigRsp.ui_config_v3:type_name -> snakecommon.HomeUiConfigV3
	13, // 11: configapi.ConfigRsp.ping_config:type_name -> snakecommon.PingConfig
	14, // 12: configapi.ConfigRsp.reward_mark:type_name -> snakecommon.RewardMark
	15, // 13: configapi.ConfigRsp.show_ad_config:type_name -> snakecommon.ShowAdConfig
	16, // 14: configapi.ConfigRsp.order_config:type_name -> snakecommon.OrderConfig
	17, // 15: configapi.ConfigRsp.show_badge:type_name -> snakecommon.ShowBadgeConfig
	18, // 16: configapi.ConfigRsp.show_illustration:type_name -> snakecommon.ShowIllustrationConfig
	19, // 17: configapi.ConfigRsp.proto_store_config:type_name -> snakecommon.CStoreConfig
	20, // 18: configapi.ConfigRsp.offline_game_config:type_name -> snakecommon.OfflineGameConfig
	21, // 19: configapi.ConfigRsp.endless_buff_prop_config:type_name -> snakecommon.EndLessBuffPropInfo
	22, // 20: configapi.ConfigRsp.huawei_highlight:type_name -> snakecommon.RecoderConfig
	23, // 21: configapi.ConfigRsp.unity_qualifying_open_config:type_name -> snakecommon.UnityQualifyingOpenConfig
	24, // 22: configapi.ConfigRsp.month_card:type_name -> snakecommon.MonthCardConfig
	25, // 23: configapi.ConfigRsp.top_list_config:type_name -> snakecommon.TopListConfig
	26, // 24: configapi.ConfigRsp.charm_tours:type_name -> snakecommon.CharmTourConfig
	27, // 25: configapi.ConfigRsp.gift_wall:type_name -> snakecommon.GiftWallConfig
	28, // 26: configapi.ConfigRsp.mentorship_config:type_name -> snakecommon.MentorConfig
	29, // 27: configapi.ConfigRsp.gift_illustration:type_name -> snakecommon.GiftIllustrationConfig
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_system_configapi_config_proto_init() }
func file_system_configapi_config_proto_init() {
	if File_system_configapi_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_system_configapi_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_configapi_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_configapi_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_system_configapi_config_proto_goTypes,
		DependencyIndexes: file_system_configapi_config_proto_depIdxs,
		MessageInfos:      file_system_configapi_config_proto_msgTypes,
	}.Build()
	File_system_configapi_config_proto = out.File
	file_system_configapi_config_proto_rawDesc = nil
	file_system_configapi_config_proto_goTypes = nil
	file_system_configapi_config_proto_depIdxs = nil
}
