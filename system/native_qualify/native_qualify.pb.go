// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.1
// source: system/native_qualify/native_qualify.proto

package native_qualify

import (
	snakecommon "git.17zjh.com/snake/snake_proto/snakecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigVersion   int64 `protobuf:"varint,1,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	AiConfigVersion int64 `protobuf:"varint,2,opt,name=ai_config_version,json=aiConfigVersion,proto3" json:"ai_config_version,omitempty"`
}

func (x *GetConfigReq) Reset() {
	*x = GetConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_native_qualify_native_qualify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReq) ProtoMessage() {}

func (x *GetConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_system_native_qualify_native_qualify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReq.ProtoReflect.Descriptor instead.
func (*GetConfigReq) Descriptor() ([]byte, []int) {
	return file_system_native_qualify_native_qualify_proto_rawDescGZIP(), []int{0}
}

func (x *GetConfigReq) GetConfigVersion() int64 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *GetConfigReq) GetAiConfigVersion() int64 {
	if x != nil {
		return x.AiConfigVersion
	}
	return 0
}

type GetConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosGameConfig     *IOSGameConfig                     `protobuf:"bytes,1,opt,name=ios_game_config,json=iosGameConfig,proto3" json:"ios_game_config,omitempty"`
	AndroidGameConfig *AndroidGameConfig                 `protobuf:"bytes,2,opt,name=android_game_config,json=androidGameConfig,proto3" json:"android_game_config,omitempty"`
	AiPools           []*snakecommon.NativeQualifyAIPool `protobuf:"bytes,3,rep,name=ai_pools,json=aiPools,proto3" json:"ai_pools,omitempty"`
}

func (x *GetConfigRsp) Reset() {
	*x = GetConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_native_qualify_native_qualify_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRsp) ProtoMessage() {}

func (x *GetConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_system_native_qualify_native_qualify_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRsp.ProtoReflect.Descriptor instead.
func (*GetConfigRsp) Descriptor() ([]byte, []int) {
	return file_system_native_qualify_native_qualify_proto_rawDescGZIP(), []int{1}
}

func (x *GetConfigRsp) GetIosGameConfig() *IOSGameConfig {
	if x != nil {
		return x.IosGameConfig
	}
	return nil
}

func (x *GetConfigRsp) GetAndroidGameConfig() *AndroidGameConfig {
	if x != nil {
		return x.AndroidGameConfig
	}
	return nil
}

func (x *GetConfigRsp) GetAiPools() []*snakecommon.NativeQualifyAIPool {
	if x != nil {
		return x.AiPools
	}
	return nil
}

type IOSGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OlGameConfigVersion                           int32     `protobuf:"zigzag32,1,opt,name=ol_game_config_version,json=olGameConfigVersion,proto3" json:"ol_game_config_version,omitempty"`
	OlGameMapWidth                                int32     `protobuf:"zigzag32,2,opt,name=ol_game_map_width,json=olGameMapWidth,proto3" json:"ol_game_map_width,omitempty"`
	OlGameMapHeight                               int32     `protobuf:"zigzag32,3,opt,name=ol_game_map_height,json=olGameMapHeight,proto3" json:"ol_game_map_height,omitempty"`
	OlEatFlyFoodIncreaseFoodCount                 int32     `protobuf:"zigzag32,4,opt,name=ol_eat_fly_food_increase_food_count,json=olEatFlyFoodIncreaseFoodCount,proto3" json:"ol_eat_fly_food_increase_food_count,omitempty"`
	OlMaxDirectionChangePerTurn                   int32     `protobuf:"zigzag32,5,opt,name=ol_max_direction_change_per_turn,json=olMaxDirectionChangePerTurn,proto3" json:"ol_max_direction_change_per_turn,omitempty"`
	OlMaxDirectionChangePerTurnOnSpeedup          int32     `protobuf:"zigzag32,6,opt,name=ol_max_direction_change_per_turn_on_speedup,json=olMaxDirectionChangePerTurnOnSpeedup,proto3" json:"ol_max_direction_change_per_turn_on_speedup,omitempty"`
	OlSnakeNodeTime                               int32     `protobuf:"zigzag32,7,opt,name=ol_snake_node_time,json=olSnakeNodeTime,proto3" json:"ol_snake_node_time,omitempty"`
	OlSnakeSpeedupRate                            float64   `protobuf:"fixed64,8,opt,name=ol_snake_speedup_rate,json=olSnakeSpeedupRate,proto3" json:"ol_snake_speedup_rate,omitempty"`
	OlSnakeInitNodeCount                          int32     `protobuf:"zigzag32,9,opt,name=ol_snake_init_node_count,json=olSnakeInitNodeCount,proto3" json:"ol_snake_init_node_count,omitempty"`
	OlMapScaleScope                               int32     `protobuf:"zigzag32,10,opt,name=ol_map_scale_scope,json=olMapScaleScope,proto3" json:"ol_map_scale_scope,omitempty"`
	OlMapScaleConst1                              float64   `protobuf:"fixed64,11,opt,name=ol_map_scale_const1,json=olMapScaleConst1,proto3" json:"ol_map_scale_const1,omitempty"`
	OlMapScaleFactor1                             int32     `protobuf:"zigzag32,12,opt,name=ol_map_scale_factor1,json=olMapScaleFactor1,proto3" json:"ol_map_scale_factor1,omitempty"`
	OlMapScaleFactor2                             int32     `protobuf:"zigzag32,13,opt,name=ol_map_scale_factor2,json=olMapScaleFactor2,proto3" json:"ol_map_scale_factor2,omitempty"`
	OlMapScaleMinScale                            float64   `protobuf:"fixed64,14,opt,name=ol_map_scale_min_scale,json=olMapScaleMinScale,proto3" json:"ol_map_scale_min_scale,omitempty"`
	OlSnakeWidthScope                             int32     `protobuf:"zigzag32,15,opt,name=ol_snake_width_scope,json=olSnakeWidthScope,proto3" json:"ol_snake_width_scope,omitempty"`
	OlSnakeWidthConst1                            int32     `protobuf:"zigzag32,16,opt,name=ol_snake_width_const1,json=olSnakeWidthConst1,proto3" json:"ol_snake_width_const1,omitempty"`
	OlSnakeWidthFactor1                           int32     `protobuf:"zigzag32,17,opt,name=ol_snake_width_factor1,json=olSnakeWidthFactor1,proto3" json:"ol_snake_width_factor1,omitempty"`
	OlSnakeWidthFactor2                           int32     `protobuf:"zigzag32,18,opt,name=ol_snake_width_factor2,json=olSnakeWidthFactor2,proto3" json:"ol_snake_width_factor2,omitempty"`
	OlSnakeWidthMaxWidth                          int32     `protobuf:"zigzag32,19,opt,name=ol_snake_width_max_width,json=olSnakeWidthMaxWidth,proto3" json:"ol_snake_width_max_width,omitempty"`
	OlFoodInitCount                               int32     `protobuf:"zigzag32,20,opt,name=ol_food_init_count,json=olFoodInitCount,proto3" json:"ol_food_init_count,omitempty"`
	OlFlyFoodInitCount                            int32     `protobuf:"zigzag32,21,opt,name=ol_fly_food_init_count,json=olFlyFoodInitCount,proto3" json:"ol_fly_food_init_count,omitempty"`
	OlSnakeRevivalLengthScope                     *int32    `protobuf:"zigzag32,22,opt,name=ol_snake_revival_length_scope,json=olSnakeRevivalLengthScope,proto3,oneof" json:"ol_snake_revival_length_scope,omitempty"`
	OlSnakeRevivalLengthRate                      *float64  `protobuf:"fixed64,23,opt,name=ol_snake_revival_length_rate,json=olSnakeRevivalLengthRate,proto3,oneof" json:"ol_snake_revival_length_rate,omitempty"`
	OlSnakeRevivalLengthMaxLength                 *int32    `protobuf:"zigzag32,24,opt,name=ol_snake_revival_length_max_length,json=olSnakeRevivalLengthMaxLength,proto3,oneof" json:"ol_snake_revival_length_max_length,omitempty"`
	OlTeamWinLength                               *int32    `protobuf:"zigzag32,25,opt,name=ol_team_win_length,json=olTeamWinLength,proto3,oneof" json:"ol_team_win_length,omitempty"`
	OlEatFoodCountForIncreaseNode                 int32     `protobuf:"zigzag32,26,opt,name=ol_eat_food_count_for_increase_node,json=olEatFoodCountForIncreaseNode,proto3" json:"ol_eat_food_count_for_increase_node,omitempty"`
	OlEatWreckIncreaseFoodCount                   int32     `protobuf:"zigzag32,27,opt,name=ol_eat_wreck_increase_food_count,json=olEatWreckIncreaseFoodCount,proto3" json:"ol_eat_wreck_increase_food_count,omitempty"`
	OlEatFoodRateChangeScope                      int32     `protobuf:"zigzag32,28,opt,name=ol_eat_food_rate_change_scope,json=olEatFoodRateChangeScope,proto3" json:"ol_eat_food_rate_change_scope,omitempty"`
	OlFramesCountForDropFood                      int32     `protobuf:"zigzag32,29,opt,name=ol_frames_count_for_drop_food,json=olFramesCountForDropFood,proto3" json:"ol_frames_count_for_drop_food,omitempty"`
	OlSnakeEatFoodDistance                        int32     `protobuf:"zigzag32,30,opt,name=ol_snake_eat_food_distance,json=olSnakeEatFoodDistance,proto3" json:"ol_snake_eat_food_distance,omitempty"`
	OlSnakeBornProtectTurnCount                   int32     `protobuf:"zigzag32,31,opt,name=ol_snake_born_protect_turn_count,json=olSnakeBornProtectTurnCount,proto3" json:"ol_snake_born_protect_turn_count,omitempty"`
	OlFoodRadius                                  int32     `protobuf:"zigzag32,32,opt,name=ol_food_radius,json=olFoodRadius,proto3" json:"ol_food_radius,omitempty"`
	OlWreckRadius                                 int32     `protobuf:"zigzag32,33,opt,name=ol_wreck_radius,json=olWreckRadius,proto3" json:"ol_wreck_radius,omitempty"`
	OlFlyFoodRadius                               int32     `protobuf:"zigzag32,34,opt,name=ol_fly_food_radius,json=olFlyFoodRadius,proto3" json:"ol_fly_food_radius,omitempty"`
	OlFoodBorderPadding                           int32     `protobuf:"zigzag32,35,opt,name=ol_food_border_padding,json=olFoodBorderPadding,proto3" json:"ol_food_border_padding,omitempty"`
	OlFlyFoodMovePerData                          float64   `protobuf:"fixed64,36,opt,name=ol_fly_food_move_per_data,json=olFlyFoodMovePerData,proto3" json:"ol_fly_food_move_per_data,omitempty"`
	OlGameUploadSnapShotInteval                   *int32    `protobuf:"zigzag32,37,opt,name=ol_game_upload_snap_shot_inteval,json=olGameUploadSnapShotInteval,proto3,oneof" json:"ol_game_upload_snap_shot_inteval,omitempty"`
	OlGameAutoKickSeconds                         int32     `protobuf:"zigzag32,38,opt,name=ol_game_auto_kick_seconds,json=olGameAutoKickSeconds,proto3" json:"ol_game_auto_kick_seconds,omitempty"`
	OlTeamSkinId                                  []int32   `protobuf:"zigzag32,39,rep,packed,name=ol_team_skin_id,json=olTeamSkinId,proto3" json:"ol_team_skin_id,omitempty"`
	OlTeamTimeLimit                               *int32    `protobuf:"zigzag32,40,opt,name=ol_team_time_limit,json=olTeamTimeLimit,proto3,oneof" json:"ol_team_time_limit,omitempty"`
	OlAiCount                                     *int32    `protobuf:"zigzag32,41,opt,name=ol_ai_count,json=olAiCount,proto3,oneof" json:"ol_ai_count,omitempty"`
	OlAiLength                                    *int32    `protobuf:"zigzag32,42,opt,name=ol_ai_length,json=olAiLength,proto3,oneof" json:"ol_ai_length,omitempty"`
	OlAiBorderWarnDistance                        *int32    `protobuf:"zigzag32,43,opt,name=ol_ai_border_warn_distance,json=olAiBorderWarnDistance,proto3,oneof" json:"ol_ai_border_warn_distance,omitempty"`
	OlAiEyeDistance                               *int32    `protobuf:"zigzag32,44,opt,name=ol_ai_eye_distance,json=olAiEyeDistance,proto3,oneof" json:"ol_ai_eye_distance,omitempty"`
	OlAiFoodEyeDistance                           *int32    `protobuf:"zigzag32,45,opt,name=ol_ai_food_eye_distance,json=olAiFoodEyeDistance,proto3,oneof" json:"ol_ai_food_eye_distance,omitempty"`
	OlAiEyeDirectionOffset                        *float64  `protobuf:"fixed64,46,opt,name=ol_ai_eye_direction_offset,json=olAiEyeDirectionOffset,proto3,oneof" json:"ol_ai_eye_direction_offset,omitempty"`
	OlAiWreckEyeDirectionOffset                   *float64  `protobuf:"fixed64,47,opt,name=ol_ai_wreck_eye_direction_offset,json=olAiWreckEyeDirectionOffset,proto3,oneof" json:"ol_ai_wreck_eye_direction_offset,omitempty"`
	OlAiMaxDirectionChangePerTurn                 *int32    `protobuf:"zigzag32,48,opt,name=ol_ai_max_direction_change_per_turn,json=olAiMaxDirectionChangePerTurn,proto3,oneof" json:"ol_ai_max_direction_change_per_turn,omitempty"`
	OlAiMaxDirectionChangePerTurnOnSpeedup        *int32    `protobuf:"zigzag32,49,opt,name=ol_ai_max_direction_change_per_turn_on_speedup,json=olAiMaxDirectionChangePerTurnOnSpeedup,proto3,oneof" json:"ol_ai_max_direction_change_per_turn_on_speedup,omitempty"`
	OlAiSkinId                                    *int32    `protobuf:"zigzag32,50,opt,name=ol_ai_skin_id,json=olAiSkinId,proto3,oneof" json:"ol_ai_skin_id,omitempty"`
	OlGameTeamForeColor                           []int32   `protobuf:"zigzag32,51,rep,packed,name=ol_game_team_fore_color,json=olGameTeamForeColor,proto3" json:"ol_game_team_fore_color,omitempty"`
	OlGameTeamBgColor                             []int32   `protobuf:"zigzag32,52,rep,packed,name=ol_game_team_bg_color,json=olGameTeamBgColor,proto3" json:"ol_game_team_bg_color,omitempty"`
	OlTeamLengthGrowFirstNode                     *int32    `protobuf:"zigzag32,53,opt,name=ol_team_length_grow_first_node,json=olTeamLengthGrowFirstNode,proto3,oneof" json:"ol_team_length_grow_first_node,omitempty"`
	OlTeamLengthGrowSecondNode                    *int32    `protobuf:"zigzag32,54,opt,name=ol_team_length_grow_second_node,json=olTeamLengthGrowSecondNode,proto3,oneof" json:"ol_team_length_grow_second_node,omitempty"`
	OlSnakeWreckRate                              *float64  `protobuf:"fixed64,55,opt,name=ol_snake_wreck_rate,json=olSnakeWreckRate,proto3,oneof" json:"ol_snake_wreck_rate,omitempty"`
	OlFreeTimeLimit                               *int32    `protobuf:"zigzag32,56,opt,name=ol_free_time_limit,json=olFreeTimeLimit,proto3,oneof" json:"ol_free_time_limit,omitempty"`
	OlSnakeEatFoodDistanceWithSkillMagnet         *int32    `protobuf:"zigzag32,57,opt,name=ol_snake_eat_food_distance_with_skill_magnet,json=olSnakeEatFoodDistanceWithSkillMagnet,proto3,oneof" json:"ol_snake_eat_food_distance_with_skill_magnet,omitempty"`
	OlSnakeSkillMagnetTurnCount                   *int32    `protobuf:"zigzag32,58,opt,name=ol_snake_skill_magnet_turn_count,json=olSnakeSkillMagnetTurnCount,proto3,oneof" json:"ol_snake_skill_magnet_turn_count,omitempty"`
	OlSnakeSpeedupRateOnBuff                      *float64  `protobuf:"fixed64,59,opt,name=ol_snake_speedup_rate_on_buff,json=olSnakeSpeedupRateOnBuff,proto3,oneof" json:"ol_snake_speedup_rate_on_buff,omitempty"`
	OlSkillNodeRadius                             *int32    `protobuf:"zigzag32,60,opt,name=ol_skill_node_radius,json=olSkillNodeRadius,proto3,oneof" json:"ol_skill_node_radius,omitempty"`
	OlSkillNodeGenTurn                            *int32    `protobuf:"zigzag32,61,opt,name=ol_skill_node_gen_turn,json=olSkillNodeGenTurn,proto3,oneof" json:"ol_skill_node_gen_turn,omitempty"`
	OlSkillNodeRefreshTurn                        *int32    `protobuf:"zigzag32,62,opt,name=ol_skill_node_refresh_turn,json=olSkillNodeRefreshTurn,proto3,oneof" json:"ol_skill_node_refresh_turn,omitempty"`
	OlSkillNodeGenCount                           *int32    `protobuf:"zigzag32,63,opt,name=ol_skill_node_gen_count,json=olSkillNodeGenCount,proto3,oneof" json:"ol_skill_node_gen_count,omitempty"`
	OlSkillNodeGenShieldRate                      *float64  `protobuf:"fixed64,64,opt,name=ol_skill_node_gen_shield_rate,json=olSkillNodeGenShieldRate,proto3,oneof" json:"ol_skill_node_gen_shield_rate,omitempty"`
	OlSkillNodeRefreshShieldRate                  *float64  `protobuf:"fixed64,65,opt,name=ol_skill_node_refresh_shield_rate,json=olSkillNodeRefreshShieldRate,proto3,oneof" json:"ol_skill_node_refresh_shield_rate,omitempty"`
	OlSkillNodeGenAreas                           []int32   `protobuf:"zigzag32,66,rep,packed,name=ol_skill_node_gen_areas,json=olSkillNodeGenAreas,proto3" json:"ol_skill_node_gen_areas,omitempty"`
	OlSkillNodeProtectTurnCount                   *int32    `protobuf:"zigzag32,67,opt,name=ol_skill_node_protect_turn_count,json=olSkillNodeProtectTurnCount,proto3,oneof" json:"ol_skill_node_protect_turn_count,omitempty"`
	OlMonsterAiGenTurn                            *int32    `protobuf:"zigzag32,68,opt,name=ol_monster_ai_gen_turn,json=olMonsterAiGenTurn,proto3,oneof" json:"ol_monster_ai_gen_turn,omitempty"`
	OlMonsterAiRefreshTurn                        *int32    `protobuf:"zigzag32,69,opt,name=ol_monster_ai_refresh_turn,json=olMonsterAiRefreshTurn,proto3,oneof" json:"ol_monster_ai_refresh_turn,omitempty"`
	OlMonsterBornAreas                            []int32   `protobuf:"zigzag32,70,rep,packed,name=ol_monster_born_areas,json=olMonsterBornAreas,proto3" json:"ol_monster_born_areas,omitempty"`
	OlMonsterAiLength                             *int32    `protobuf:"zigzag32,71,opt,name=ol_monster_ai_length,json=olMonsterAiLength,proto3,oneof" json:"ol_monster_ai_length,omitempty"`
	OlMonsterAiEyeDirectionOffset                 *float64  `protobuf:"fixed64,72,opt,name=ol_monster_ai_eye_direction_offset,json=olMonsterAiEyeDirectionOffset,proto3,oneof" json:"ol_monster_ai_eye_direction_offset,omitempty"`
	OlMonsterAiWreckEyeDirectionOffset            *float64  `protobuf:"fixed64,73,opt,name=ol_monster_ai_wreck_eye_direction_offset,json=olMonsterAiWreckEyeDirectionOffset,proto3,oneof" json:"ol_monster_ai_wreck_eye_direction_offset,omitempty"`
	OlMonsterAiMaxDirectionChangePerTurn          *int32    `protobuf:"zigzag32,74,opt,name=ol_monster_ai_max_direction_change_per_turn,json=olMonsterAiMaxDirectionChangePerTurn,proto3,oneof" json:"ol_monster_ai_max_direction_change_per_turn,omitempty"`
	OlMonsterAiMaxDirectionChangePerTurnOnSpeedup *int32    `protobuf:"zigzag32,75,opt,name=ol_monster_ai_max_direction_change_per_turn_on_speedup,json=olMonsterAiMaxDirectionChangePerTurnOnSpeedup,proto3,oneof" json:"ol_monster_ai_max_direction_change_per_turn_on_speedup,omitempty"`
	OlMonsterAiSkinId                             *int32    `protobuf:"zigzag32,76,opt,name=ol_monster_ai_skin_id,json=olMonsterAiSkinId,proto3,oneof" json:"ol_monster_ai_skin_id,omitempty"`
	OlMonsterBuffKeepTurn                         *int32    `protobuf:"zigzag32,77,opt,name=ol_monster_buff_keep_turn,json=olMonsterBuffKeepTurn,proto3,oneof" json:"ol_monster_buff_keep_turn,omitempty"`
	OlTeamModeWinTipLength                        *int32    `protobuf:"zigzag32,78,opt,name=ol_team_mode_win_tip_length,json=olTeamModeWinTipLength,proto3,oneof" json:"ol_team_mode_win_tip_length,omitempty"`
	OlTeamGameNameList                            []string  `protobuf:"bytes,79,rep,name=ol_team_game_name_list,json=olTeamGameNameList,proto3" json:"ol_team_game_name_list,omitempty"`
	OlSnakeSkillShieldTurnCount                   *int32    `protobuf:"zigzag32,80,opt,name=ol_snake_skill_shield_turn_count,json=olSnakeSkillShieldTurnCount,proto3,oneof" json:"ol_snake_skill_shield_turn_count,omitempty"`
	OlTeamModeLockLength                          *int32    `protobuf:"zigzag32,81,opt,name=ol_team_mode_lock_length,json=olTeamModeLockLength,proto3,oneof" json:"ol_team_mode_lock_length,omitempty"`
	OlTeamModeUnlockLength                        *int32    `protobuf:"zigzag32,82,opt,name=ol_team_mode_unlock_length,json=olTeamModeUnlockLength,proto3,oneof" json:"ol_team_mode_unlock_length,omitempty"`
	OlInitialKillEffectWidth                      *float64  `protobuf:"fixed64,83,opt,name=ol_initial_kill_effect_width,json=olInitialKillEffectWidth,proto3,oneof" json:"ol_initial_kill_effect_width,omitempty"`
	OlInitialKillEffectValue                      *float64  `protobuf:"fixed64,84,opt,name=ol_initial_kill_effect_value,json=olInitialKillEffectValue,proto3,oneof" json:"ol_initial_kill_effect_value,omitempty"`
	OlSnakeKillEffectDistribution                 *float64  `protobuf:"fixed64,85,opt,name=ol_snake_kill_effect_distribution,json=olSnakeKillEffectDistribution,proto3,oneof" json:"ol_snake_kill_effect_distribution,omitempty"`
	OlHappyCoinRate                               *float64  `protobuf:"fixed64,86,opt,name=ol_happy_coin_rate,json=olHappyCoinRate,proto3,oneof" json:"ol_happy_coin_rate,omitempty"`
	OlWtModeFieldCost                             []int32   `protobuf:"zigzag32,87,rep,packed,name=ol_wt_mode_field_cost,json=olWtModeFieldCost,proto3" json:"ol_wt_mode_field_cost,omitempty"`
	OlWtModeWreckIncreaseRate                     []float64 `protobuf:"fixed64,88,rep,packed,name=ol_wt_mode_wreck_increase_rate,json=olWtModeWreckIncreaseRate,proto3" json:"ol_wt_mode_wreck_increase_rate,omitempty"`
	OlCommonFoodNodeUnitValue                     []int32   `protobuf:"zigzag32,89,rep,packed,name=ol_common_food_node_unit_value,json=olCommonFoodNodeUnitValue,proto3" json:"ol_common_food_node_unit_value,omitempty"`
	OlCommonFoodNodeRate                          *float64  `protobuf:"fixed64,90,opt,name=ol_common_food_node_rate,json=olCommonFoodNodeRate,proto3,oneof" json:"ol_common_food_node_rate,omitempty"`
	OlCommonFoodNodeRefreshTurn                   *int32    `protobuf:"zigzag32,91,opt,name=ol_common_food_node_refresh_turn,json=olCommonFoodNodeRefreshTurn,proto3,oneof" json:"ol_common_food_node_refresh_turn,omitempty"`
	OlFlyFoodNodeGenAreas                         []int32   `protobuf:"zigzag32,92,rep,packed,name=ol_fly_food_node_gen_areas,json=olFlyFoodNodeGenAreas,proto3" json:"ol_fly_food_node_gen_areas,omitempty"`
	OlFlyFoodUnitValue                            []int32   `protobuf:"zigzag32,93,rep,packed,name=ol_fly_food_unit_value,json=olFlyFoodUnitValue,proto3" json:"ol_fly_food_unit_value,omitempty"`
	OlFlyFoodNodeRate                             *float64  `protobuf:"fixed64,94,opt,name=ol_fly_food_node_rate,json=olFlyFoodNodeRate,proto3,oneof" json:"ol_fly_food_node_rate,omitempty"`
	OlStealCoinSnakeLength                        *int32    `protobuf:"zigzag32,95,opt,name=ol_steal_coin_snake_length,json=olStealCoinSnakeLength,proto3,oneof" json:"ol_steal_coin_snake_length,omitempty"`
	OlStealCoinSnakeGenTurn                       *int32    `protobuf:"zigzag32,96,opt,name=ol_steal_coin_snake_gen_turn,json=olStealCoinSnakeGenTurn,proto3,oneof" json:"ol_steal_coin_snake_gen_turn,omitempty"`
	OlStealCoinSnakeRefreshAiTurn                 *int32    `protobuf:"zigzag32,97,opt,name=ol_steal_coin_snake_refresh_ai_turn,json=olStealCoinSnakeRefreshAiTurn,proto3,oneof" json:"ol_steal_coin_snake_refresh_ai_turn,omitempty"`
	OlStealCoinSnakeRefreshAiAngleList            []float64 `protobuf:"fixed64,98,rep,packed,name=ol_steal_coin_snake_refresh_ai_angle_list,json=olStealCoinSnakeRefreshAiAngleList,proto3" json:"ol_steal_coin_snake_refresh_ai_angle_list,omitempty"`
	OlStealCoinSnakeRefreshAiDistanceList         []float64 `protobuf:"fixed64,99,rep,packed,name=ol_steal_coin_snake_refresh_ai_distance_list,json=olStealCoinSnakeRefreshAiDistanceList,proto3" json:"ol_steal_coin_snake_refresh_ai_distance_list,omitempty"`
	OlWtModeAutoEndTurn                           *int32    `protobuf:"zigzag32,100,opt,name=ol_wt_mode_auto_end_turn,json=olWtModeAutoEndTurn,proto3,oneof" json:"ol_wt_mode_auto_end_turn,omitempty"`
	OlWtModeAutoEndTime                           *int32    `protobuf:"zigzag32,101,opt,name=ol_wt_mode_auto_end_time,json=olWtModeAutoEndTime,proto3,oneof" json:"ol_wt_mode_auto_end_time,omitempty"`
	OlWtModeWidthScale                            *float64  `protobuf:"fixed64,102,opt,name=ol_wt_mode_width_scale,json=olWtModeWidthScale,proto3,oneof" json:"ol_wt_mode_width_scale,omitempty"`
	OlStealCoinSnakeCount                         *int32    `protobuf:"zigzag32,103,opt,name=ol_steal_coin_snake_count,json=olStealCoinSnakeCount,proto3,oneof" json:"ol_steal_coin_snake_count,omitempty"`
	OlStealCoinSnakeGenAreas                      []int32   `protobuf:"zigzag32,104,rep,packed,name=ol_steal_coin_snake_gen_areas,json=olStealCoinSnakeGenAreas,proto3" json:"ol_steal_coin_snake_gen_areas,omitempty"`
	OlSnakeSkillLargeTurnCount                    *int32    `protobuf:"zigzag32,105,opt,name=ol_snake_skill_large_turn_count,json=olSnakeSkillLargeTurnCount,proto3,oneof" json:"ol_snake_skill_large_turn_count,omitempty"`
	OlSnakeSkillSpeedTurnCount                    *int32    `protobuf:"zigzag32,106,opt,name=ol_snake_skill_speed_turn_count,json=olSnakeSkillSpeedTurnCount,proto3,oneof" json:"ol_snake_skill_speed_turn_count,omitempty"`
	OlSkillNodeGenLargeRate                       *float64  `protobuf:"fixed64,107,opt,name=ol_skill_node_gen_large_rate,json=olSkillNodeGenLargeRate,proto3,oneof" json:"ol_skill_node_gen_large_rate,omitempty"`
	OlSkillNodeRefreshLargeRate                   *float64  `protobuf:"fixed64,108,opt,name=ol_skill_node_refresh_large_rate,json=olSkillNodeRefreshLargeRate,proto3,oneof" json:"ol_skill_node_refresh_large_rate,omitempty"`
	OlSkillNodeGenSpeedRate                       *float64  `protobuf:"fixed64,109,opt,name=ol_skill_node_gen_speed_rate,json=olSkillNodeGenSpeedRate,proto3,oneof" json:"ol_skill_node_gen_speed_rate,omitempty"`
	OlSkillNodeRefreshSpeedRate                   *float64  `protobuf:"fixed64,110,opt,name=ol_skill_node_refresh_speed_rate,json=olSkillNodeRefreshSpeedRate,proto3,oneof" json:"ol_skill_node_refresh_speed_rate,omitempty"`
	OlSkillNodeLargeLength                        *int32    `protobuf:"zigzag32,111,opt,name=ol_skill_node_large_length,json=olSkillNodeLargeLength,proto3,oneof" json:"ol_skill_node_large_length,omitempty"`
	OlStealCoinSnakeSkinId                        *int32    `protobuf:"zigzag32,112,opt,name=ol_steal_coin_snake_skin_id,json=olStealCoinSnakeSkinId,proto3,oneof" json:"ol_steal_coin_snake_skin_id,omitempty"`
	OlWtModeSnakeMaxLength                        *int32    `protobuf:"zigzag32,113,opt,name=ol_wt_mode_snake_max_length,json=olWtModeSnakeMaxLength,proto3,oneof" json:"ol_wt_mode_snake_max_length,omitempty"`
	OlWtModeGuideAiConfigList                     []float64 `protobuf:"fixed64,114,rep,packed,name=ol_wt_mode_guide_ai_config_list,json=olWtModeGuideAiConfigList,proto3" json:"ol_wt_mode_guide_ai_config_list,omitempty"`
	OlWtModeAiChangeDirectionRate                 *float64  `protobuf:"fixed64,115,opt,name=ol_wt_mode_ai_change_direction_rate,json=olWtModeAiChangeDirectionRate,proto3,oneof" json:"ol_wt_mode_ai_change_direction_rate,omitempty"`
	OlWtModeAiCheckCollisionTurn                  *int32    `protobuf:"zigzag32,116,opt,name=ol_wt_mode_ai_check_collision_turn,json=olWtModeAiCheckCollisionTurn,proto3,oneof" json:"ol_wt_mode_ai_check_collision_turn,omitempty"`
	OlTeamJoinRestoreRelayTime                    *int32    `protobuf:"zigzag32,117,opt,name=ol_team_join_restore_relay_time,json=olTeamJoinRestoreRelayTime,proto3,oneof" json:"ol_team_join_restore_relay_time,omitempty"`
	OlSnakeNodeScope1                             *int32    `protobuf:"zigzag32,118,opt,name=ol_snake_node_scope1,json=olSnakeNodeScope1,proto3,oneof" json:"ol_snake_node_scope1,omitempty"`
	OlSnakeNodeScope2                             *int32    `protobuf:"zigzag32,119,opt,name=ol_snake_node_scope2,json=olSnakeNodeScope2,proto3,oneof" json:"ol_snake_node_scope2,omitempty"`
	OlSnakeNodeScope3                             *int32    `protobuf:"zigzag32,120,opt,name=ol_snake_node_scope3,json=olSnakeNodeScope3,proto3,oneof" json:"ol_snake_node_scope3,omitempty"`
	OlSnakeNodeScopeRate1                         *int32    `protobuf:"zigzag32,121,opt,name=ol_snake_node_scope_rate1,json=olSnakeNodeScopeRate1,proto3,oneof" json:"ol_snake_node_scope_rate1,omitempty"`
	OlSnakeNodeScopeRate2                         *int32    `protobuf:"zigzag32,122,opt,name=ol_snake_node_scope_rate2,json=olSnakeNodeScopeRate2,proto3,oneof" json:"ol_snake_node_scope_rate2,omitempty"`
	OlSmallAiBornRegionCount                      *int32    `protobuf:"zigzag32,123,opt,name=ol_small_ai_born_region_count,json=olSmallAiBornRegionCount,proto3,oneof" json:"ol_small_ai_born_region_count,omitempty"`
	OlSmallAiBornRegionArr                        *string   `protobuf:"bytes,124,opt,name=ol_small_ai_born_region_arr,json=olSmallAiBornRegionArr,proto3,oneof" json:"ol_small_ai_born_region_arr,omitempty"`
	OlStarGenTurnCount                            *int32    `protobuf:"zigzag32,125,opt,name=ol_star_gen_turn_count,json=olStarGenTurnCount,proto3,oneof" json:"ol_star_gen_turn_count,omitempty"`
	OlStarRefreshTurnCount                        *int32    `protobuf:"zigzag32,126,opt,name=ol_star_refresh_turn_count,json=olStarRefreshTurnCount,proto3,oneof" json:"ol_star_refresh_turn_count,omitempty"`
	OlStarArr                                     *string   `protobuf:"bytes,127,opt,name=ol_star_arr,json=olStarArr,proto3,oneof" json:"ol_star_arr,omitempty"`
	OlKillProfitRate                              *float64  `protobuf:"fixed64,128,opt,name=ol_kill_profit_rate,json=olKillProfitRate,proto3,oneof" json:"ol_kill_profit_rate,omitempty"`
	OlGrassResidualTurnCount                      *int32    `protobuf:"zigzag32,129,opt,name=ol_grass_residual_turn_count,json=olGrassResidualTurnCount,proto3,oneof" json:"ol_grass_residual_turn_count,omitempty"`
	OlAiDieWreckRate                              *float64  `protobuf:"fixed64,130,opt,name=ol_ai_die_wreck_rate,json=olAiDieWreckRate,proto3,oneof" json:"ol_ai_die_wreck_rate,omitempty"`
	OlSmallAiGenCount                             *int32    `protobuf:"zigzag32,131,opt,name=ol_small_ai_gen_count,json=olSmallAiGenCount,proto3,oneof" json:"ol_small_ai_gen_count,omitempty"`
	OlSmallAiGenTurnCount                         *int32    `protobuf:"zigzag32,132,opt,name=ol_small_ai_gen_turn_count,json=olSmallAiGenTurnCount,proto3,oneof" json:"ol_small_ai_gen_turn_count,omitempty"`
	OlSmallAiRefreshTurnCount                     *int32    `protobuf:"zigzag32,133,opt,name=ol_small_ai_refresh_turn_count,json=olSmallAiRefreshTurnCount,proto3,oneof" json:"ol_small_ai_refresh_turn_count,omitempty"`
	OlSmallAiLength                               *int32    `protobuf:"zigzag32,134,opt,name=ol_small_ai_length,json=olSmallAiLength,proto3,oneof" json:"ol_small_ai_length,omitempty"`
	OlSmallAiBuffEatRate                          *float64  `protobuf:"fixed64,135,opt,name=ol_small_ai_buff_eat_rate,json=olSmallAiBuffEatRate,proto3,oneof" json:"ol_small_ai_buff_eat_rate,omitempty"`
	OlSmallAiBuffTurnCount                        *int32    `protobuf:"zigzag32,136,opt,name=ol_small_ai_buff_turn_count,json=olSmallAiBuffTurnCount,proto3,oneof" json:"ol_small_ai_buff_turn_count,omitempty"`
	OlSmallAiSkinId                               *int32    `protobuf:"zigzag32,137,opt,name=ol_small_ai_skin_id,json=olSmallAiSkinId,proto3,oneof" json:"ol_small_ai_skin_id,omitempty"`
	OlSmallAiPreTipTurnCount                      *int32    `protobuf:"zigzag32,138,opt,name=ol_small_ai_pre_tip_turn_count,json=olSmallAiPreTipTurnCount,proto3,oneof" json:"ol_small_ai_pre_tip_turn_count,omitempty"`
	OlSmallAiMaxLength                            *float64  `protobuf:"fixed64,139,opt,name=ol_small_ai_max_length,json=olSmallAiMaxLength,proto3,oneof" json:"ol_small_ai_max_length,omitempty"`
	OlSmallAiDirChangeMin                         *int32    `protobuf:"zigzag32,140,opt,name=ol_small_ai_dir_change_min,json=olSmallAiDirChangeMin,proto3,oneof" json:"ol_small_ai_dir_change_min,omitempty"`
	OlSmallAiDirChangeMax                         *int32    `protobuf:"zigzag32,141,opt,name=ol_small_ai_dir_change_max,json=olSmallAiDirChangeMax,proto3,oneof" json:"ol_small_ai_dir_change_max,omitempty"`
	OlSmallAiDirChangeSpeedupMin                  *int32    `protobuf:"zigzag32,142,opt,name=ol_small_ai_dir_change_speedup_min,json=olSmallAiDirChangeSpeedupMin,proto3,oneof" json:"ol_small_ai_dir_change_speedup_min,omitempty"`
	OlSmallAiDirChangeSpeedupMax                  *int32    `protobuf:"zigzag32,143,opt,name=ol_small_ai_dir_change_speedup_max,json=olSmallAiDirChangeSpeedupMax,proto3,oneof" json:"ol_small_ai_dir_change_speedup_max,omitempty"`
	OlSmallAiEyeDirMin                            *float64  `protobuf:"fixed64,144,opt,name=ol_small_ai_eye_dir_min,json=olSmallAiEyeDirMin,proto3,oneof" json:"ol_small_ai_eye_dir_min,omitempty"`
	OlSmallAiEyeDirMax                            *float64  `protobuf:"fixed64,145,opt,name=ol_small_ai_eye_dir_max,json=olSmallAiEyeDirMax,proto3,oneof" json:"ol_small_ai_eye_dir_max,omitempty"`
	OlSmallAiEyeDistanceMin                       *int32    `protobuf:"zigzag32,146,opt,name=ol_small_ai_eye_distance_min,json=olSmallAiEyeDistanceMin,proto3,oneof" json:"ol_small_ai_eye_distance_min,omitempty"`
	OlSmallAiEyeDistanceMax                       *int32    `protobuf:"zigzag32,147,opt,name=ol_small_ai_eye_distance_max,json=olSmallAiEyeDistanceMax,proto3,oneof" json:"ol_small_ai_eye_distance_max,omitempty"`
	OlTeamRegularAlertEndTurnCount                *int32    `protobuf:"zigzag32,148,opt,name=ol_team_regular_alert_end_turn_count,json=olTeamRegularAlertEndTurnCount,proto3,oneof" json:"ol_team_regular_alert_end_turn_count,omitempty"`
	OlTeamRegularTurnCount                        *int32    `protobuf:"zigzag32,149,opt,name=ol_team_regular_turn_count,json=olTeamRegularTurnCount,proto3,oneof" json:"ol_team_regular_turn_count,omitempty"`
	OlTeamOvertimeTurnCount                       *int32    `protobuf:"zigzag32,150,opt,name=ol_team_overtime_turn_count,json=olTeamOvertimeTurnCount,proto3,oneof" json:"ol_team_overtime_turn_count,omitempty"`
	OlTeamOvertimeSnakeWreckRate                  *int32    `protobuf:"zigzag32,151,opt,name=ol_team_overtime_snake_wreck_rate,json=olTeamOvertimeSnakeWreckRate,proto3,oneof" json:"ol_team_overtime_snake_wreck_rate,omitempty"`
	OlTeamOvertimeSnakeFlyFoodAddCount            *int32    `protobuf:"zigzag32,152,opt,name=ol_team_overtime_snake_fly_food_add_count,json=olTeamOvertimeSnakeFlyFoodAddCount,proto3,oneof" json:"ol_team_overtime_snake_fly_food_add_count,omitempty"`
	OlTeamOvertimeAlertEndTurnCount1              *int32    `protobuf:"zigzag32,153,opt,name=ol_team_overtime_alert_end_turn_count1,json=olTeamOvertimeAlertEndTurnCount1,proto3,oneof" json:"ol_team_overtime_alert_end_turn_count1,omitempty"`
	OlTeamOvertimeAlertEndTurnCount2              *int32    `protobuf:"zigzag32,154,opt,name=ol_team_overtime_alert_end_turn_count2,json=olTeamOvertimeAlertEndTurnCount2,proto3,oneof" json:"ol_team_overtime_alert_end_turn_count2,omitempty"`
	OlTeamSummitStarCount                         *int32    `protobuf:"zigzag32,155,opt,name=ol_team_summit_star_count,json=olTeamSummitStarCount,proto3,oneof" json:"ol_team_summit_star_count,omitempty"`
	OlTeamSummitStarRefreshTurn                   *int32    `protobuf:"zigzag32,156,opt,name=ol_team_summit_star_refresh_turn,json=olTeamSummitStarRefreshTurn,proto3,oneof" json:"ol_team_summit_star_refresh_turn,omitempty"`
	OlTeamSummitBossBornConfig                    *string   `protobuf:"bytes,157,opt,name=ol_team_summit_boss_born_config,json=olTeamSummitBossBornConfig,proto3,oneof" json:"ol_team_summit_boss_born_config,omitempty"`
	OlTeamSummitBossInitialAiConfig               *string   `protobuf:"bytes,158,opt,name=ol_team_summit_boss_initial_ai_config,json=olTeamSummitBossInitialAiConfig,proto3,oneof" json:"ol_team_summit_boss_initial_ai_config,omitempty"`
	OlTeamSummitOvertimeStarCount                 *int32    `protobuf:"zigzag32,159,opt,name=ol_team_summit_overtime_star_count,json=olTeamSummitOvertimeStarCount,proto3,oneof" json:"ol_team_summit_overtime_star_count,omitempty"`
	OlTeamSummitOvertimeBossReviveTurn            *int32    `protobuf:"zigzag32,160,opt,name=ol_team_summit_overtime_boss_revive_turn,json=olTeamSummitOvertimeBossReviveTurn,proto3,oneof" json:"ol_team_summit_overtime_boss_revive_turn,omitempty"`
	OlTeamSummitOvertimeBossBuffTurn              *int32    `protobuf:"zigzag32,161,opt,name=ol_team_summit_overtime_boss_buff_turn,json=olTeamSummitOvertimeBossBuffTurn,proto3,oneof" json:"ol_team_summit_overtime_boss_buff_turn,omitempty"`
	OlTeamSummitBossBornTurn                      *int32    `protobuf:"zigzag32,162,opt,name=ol_team_summit_boss_born_turn,json=olTeamSummitBossBornTurn,proto3,oneof" json:"ol_team_summit_boss_born_turn,omitempty"`
	OlTeamSummitBossReviveTurn                    *int32    `protobuf:"zigzag32,163,opt,name=ol_team_summit_boss_revive_turn,json=olTeamSummitBossReviveTurn,proto3,oneof" json:"ol_team_summit_boss_revive_turn,omitempty"`
	OlTeamSummitBossBuffTurn                      *int32    `protobuf:"zigzag32,164,opt,name=ol_team_summit_boss_buff_turn,json=olTeamSummitBossBuffTurn,proto3,oneof" json:"ol_team_summit_boss_buff_turn,omitempty"`
	OlAiConfig                                    *string   `protobuf:"bytes,165,opt,name=ol_ai_config,json=olAiConfig,proto3,oneof" json:"ol_ai_config,omitempty"`
	TotalEndTurnCount                             *int32    `protobuf:"zigzag32,166,opt,name=total_end_turn_count,json=totalEndTurnCount,proto3,oneof" json:"total_end_turn_count,omitempty"`
	CountdownTurnCount                            *int32    `protobuf:"zigzag32,167,opt,name=countdown_turn_count,json=countdownTurnCount,proto3,oneof" json:"countdown_turn_count,omitempty"`
	LengthLimit                                   *int32    `protobuf:"zigzag32,168,opt,name=length_limit,json=lengthLimit,proto3,oneof" json:"length_limit,omitempty"`
	KillScoreRate                                 *float64  `protobuf:"fixed64,169,opt,name=kill_score_rate,json=killScoreRate,proto3,oneof" json:"kill_score_rate,omitempty"`
	KillScorePerLimit                             *int32    `protobuf:"zigzag32,170,opt,name=kill_score_per_limit,json=killScorePerLimit,proto3,oneof" json:"kill_score_per_limit,omitempty"`
}

func (x *IOSGameConfig) Reset() {
	*x = IOSGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_native_qualify_native_qualify_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSGameConfig) ProtoMessage() {}

func (x *IOSGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_system_native_qualify_native_qualify_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSGameConfig.ProtoReflect.Descriptor instead.
func (*IOSGameConfig) Descriptor() ([]byte, []int) {
	return file_system_native_qualify_native_qualify_proto_rawDescGZIP(), []int{2}
}

func (x *IOSGameConfig) GetOlGameConfigVersion() int32 {
	if x != nil {
		return x.OlGameConfigVersion
	}
	return 0
}

func (x *IOSGameConfig) GetOlGameMapWidth() int32 {
	if x != nil {
		return x.OlGameMapWidth
	}
	return 0
}

func (x *IOSGameConfig) GetOlGameMapHeight() int32 {
	if x != nil {
		return x.OlGameMapHeight
	}
	return 0
}

func (x *IOSGameConfig) GetOlEatFlyFoodIncreaseFoodCount() int32 {
	if x != nil {
		return x.OlEatFlyFoodIncreaseFoodCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlMaxDirectionChangePerTurn() int32 {
	if x != nil {
		return x.OlMaxDirectionChangePerTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlMaxDirectionChangePerTurnOnSpeedup() int32 {
	if x != nil {
		return x.OlMaxDirectionChangePerTurnOnSpeedup
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeNodeTime() int32 {
	if x != nil {
		return x.OlSnakeNodeTime
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeSpeedupRate() float64 {
	if x != nil {
		return x.OlSnakeSpeedupRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeInitNodeCount() int32 {
	if x != nil {
		return x.OlSnakeInitNodeCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlMapScaleScope() int32 {
	if x != nil {
		return x.OlMapScaleScope
	}
	return 0
}

func (x *IOSGameConfig) GetOlMapScaleConst1() float64 {
	if x != nil {
		return x.OlMapScaleConst1
	}
	return 0
}

func (x *IOSGameConfig) GetOlMapScaleFactor1() int32 {
	if x != nil {
		return x.OlMapScaleFactor1
	}
	return 0
}

func (x *IOSGameConfig) GetOlMapScaleFactor2() int32 {
	if x != nil {
		return x.OlMapScaleFactor2
	}
	return 0
}

func (x *IOSGameConfig) GetOlMapScaleMinScale() float64 {
	if x != nil {
		return x.OlMapScaleMinScale
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeWidthScope() int32 {
	if x != nil {
		return x.OlSnakeWidthScope
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeWidthConst1() int32 {
	if x != nil {
		return x.OlSnakeWidthConst1
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeWidthFactor1() int32 {
	if x != nil {
		return x.OlSnakeWidthFactor1
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeWidthFactor2() int32 {
	if x != nil {
		return x.OlSnakeWidthFactor2
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeWidthMaxWidth() int32 {
	if x != nil {
		return x.OlSnakeWidthMaxWidth
	}
	return 0
}

func (x *IOSGameConfig) GetOlFoodInitCount() int32 {
	if x != nil {
		return x.OlFoodInitCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlFlyFoodInitCount() int32 {
	if x != nil {
		return x.OlFlyFoodInitCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeRevivalLengthScope() int32 {
	if x != nil && x.OlSnakeRevivalLengthScope != nil {
		return *x.OlSnakeRevivalLengthScope
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeRevivalLengthRate() float64 {
	if x != nil && x.OlSnakeRevivalLengthRate != nil {
		return *x.OlSnakeRevivalLengthRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeRevivalLengthMaxLength() int32 {
	if x != nil && x.OlSnakeRevivalLengthMaxLength != nil {
		return *x.OlSnakeRevivalLengthMaxLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamWinLength() int32 {
	if x != nil && x.OlTeamWinLength != nil {
		return *x.OlTeamWinLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.OlEatFoodCountForIncreaseNode
	}
	return 0
}

func (x *IOSGameConfig) GetOlEatWreckIncreaseFoodCount() int32 {
	if x != nil {
		return x.OlEatWreckIncreaseFoodCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlEatFoodRateChangeScope() int32 {
	if x != nil {
		return x.OlEatFoodRateChangeScope
	}
	return 0
}

func (x *IOSGameConfig) GetOlFramesCountForDropFood() int32 {
	if x != nil {
		return x.OlFramesCountForDropFood
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeEatFoodDistance() int32 {
	if x != nil {
		return x.OlSnakeEatFoodDistance
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeBornProtectTurnCount() int32 {
	if x != nil {
		return x.OlSnakeBornProtectTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlFoodRadius() int32 {
	if x != nil {
		return x.OlFoodRadius
	}
	return 0
}

func (x *IOSGameConfig) GetOlWreckRadius() int32 {
	if x != nil {
		return x.OlWreckRadius
	}
	return 0
}

func (x *IOSGameConfig) GetOlFlyFoodRadius() int32 {
	if x != nil {
		return x.OlFlyFoodRadius
	}
	return 0
}

func (x *IOSGameConfig) GetOlFoodBorderPadding() int32 {
	if x != nil {
		return x.OlFoodBorderPadding
	}
	return 0
}

func (x *IOSGameConfig) GetOlFlyFoodMovePerData() float64 {
	if x != nil {
		return x.OlFlyFoodMovePerData
	}
	return 0
}

func (x *IOSGameConfig) GetOlGameUploadSnapShotInteval() int32 {
	if x != nil && x.OlGameUploadSnapShotInteval != nil {
		return *x.OlGameUploadSnapShotInteval
	}
	return 0
}

func (x *IOSGameConfig) GetOlGameAutoKickSeconds() int32 {
	if x != nil {
		return x.OlGameAutoKickSeconds
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSkinId() []int32 {
	if x != nil {
		return x.OlTeamSkinId
	}
	return nil
}

func (x *IOSGameConfig) GetOlTeamTimeLimit() int32 {
	if x != nil && x.OlTeamTimeLimit != nil {
		return *x.OlTeamTimeLimit
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiCount() int32 {
	if x != nil && x.OlAiCount != nil {
		return *x.OlAiCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiLength() int32 {
	if x != nil && x.OlAiLength != nil {
		return *x.OlAiLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiBorderWarnDistance() int32 {
	if x != nil && x.OlAiBorderWarnDistance != nil {
		return *x.OlAiBorderWarnDistance
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiEyeDistance() int32 {
	if x != nil && x.OlAiEyeDistance != nil {
		return *x.OlAiEyeDistance
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiFoodEyeDistance() int32 {
	if x != nil && x.OlAiFoodEyeDistance != nil {
		return *x.OlAiFoodEyeDistance
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiEyeDirectionOffset() float64 {
	if x != nil && x.OlAiEyeDirectionOffset != nil {
		return *x.OlAiEyeDirectionOffset
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiWreckEyeDirectionOffset() float64 {
	if x != nil && x.OlAiWreckEyeDirectionOffset != nil {
		return *x.OlAiWreckEyeDirectionOffset
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiMaxDirectionChangePerTurn() int32 {
	if x != nil && x.OlAiMaxDirectionChangePerTurn != nil {
		return *x.OlAiMaxDirectionChangePerTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiMaxDirectionChangePerTurnOnSpeedup() int32 {
	if x != nil && x.OlAiMaxDirectionChangePerTurnOnSpeedup != nil {
		return *x.OlAiMaxDirectionChangePerTurnOnSpeedup
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiSkinId() int32 {
	if x != nil && x.OlAiSkinId != nil {
		return *x.OlAiSkinId
	}
	return 0
}

func (x *IOSGameConfig) GetOlGameTeamForeColor() []int32 {
	if x != nil {
		return x.OlGameTeamForeColor
	}
	return nil
}

func (x *IOSGameConfig) GetOlGameTeamBgColor() []int32 {
	if x != nil {
		return x.OlGameTeamBgColor
	}
	return nil
}

func (x *IOSGameConfig) GetOlTeamLengthGrowFirstNode() int32 {
	if x != nil && x.OlTeamLengthGrowFirstNode != nil {
		return *x.OlTeamLengthGrowFirstNode
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamLengthGrowSecondNode() int32 {
	if x != nil && x.OlTeamLengthGrowSecondNode != nil {
		return *x.OlTeamLengthGrowSecondNode
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeWreckRate() float64 {
	if x != nil && x.OlSnakeWreckRate != nil {
		return *x.OlSnakeWreckRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlFreeTimeLimit() int32 {
	if x != nil && x.OlFreeTimeLimit != nil {
		return *x.OlFreeTimeLimit
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeEatFoodDistanceWithSkillMagnet() int32 {
	if x != nil && x.OlSnakeEatFoodDistanceWithSkillMagnet != nil {
		return *x.OlSnakeEatFoodDistanceWithSkillMagnet
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeSkillMagnetTurnCount() int32 {
	if x != nil && x.OlSnakeSkillMagnetTurnCount != nil {
		return *x.OlSnakeSkillMagnetTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeSpeedupRateOnBuff() float64 {
	if x != nil && x.OlSnakeSpeedupRateOnBuff != nil {
		return *x.OlSnakeSpeedupRateOnBuff
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeRadius() int32 {
	if x != nil && x.OlSkillNodeRadius != nil {
		return *x.OlSkillNodeRadius
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeGenTurn() int32 {
	if x != nil && x.OlSkillNodeGenTurn != nil {
		return *x.OlSkillNodeGenTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeRefreshTurn() int32 {
	if x != nil && x.OlSkillNodeRefreshTurn != nil {
		return *x.OlSkillNodeRefreshTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeGenCount() int32 {
	if x != nil && x.OlSkillNodeGenCount != nil {
		return *x.OlSkillNodeGenCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeGenShieldRate() float64 {
	if x != nil && x.OlSkillNodeGenShieldRate != nil {
		return *x.OlSkillNodeGenShieldRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeRefreshShieldRate() float64 {
	if x != nil && x.OlSkillNodeRefreshShieldRate != nil {
		return *x.OlSkillNodeRefreshShieldRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeGenAreas() []int32 {
	if x != nil {
		return x.OlSkillNodeGenAreas
	}
	return nil
}

func (x *IOSGameConfig) GetOlSkillNodeProtectTurnCount() int32 {
	if x != nil && x.OlSkillNodeProtectTurnCount != nil {
		return *x.OlSkillNodeProtectTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterAiGenTurn() int32 {
	if x != nil && x.OlMonsterAiGenTurn != nil {
		return *x.OlMonsterAiGenTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterAiRefreshTurn() int32 {
	if x != nil && x.OlMonsterAiRefreshTurn != nil {
		return *x.OlMonsterAiRefreshTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterBornAreas() []int32 {
	if x != nil {
		return x.OlMonsterBornAreas
	}
	return nil
}

func (x *IOSGameConfig) GetOlMonsterAiLength() int32 {
	if x != nil && x.OlMonsterAiLength != nil {
		return *x.OlMonsterAiLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterAiEyeDirectionOffset() float64 {
	if x != nil && x.OlMonsterAiEyeDirectionOffset != nil {
		return *x.OlMonsterAiEyeDirectionOffset
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterAiWreckEyeDirectionOffset() float64 {
	if x != nil && x.OlMonsterAiWreckEyeDirectionOffset != nil {
		return *x.OlMonsterAiWreckEyeDirectionOffset
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterAiMaxDirectionChangePerTurn() int32 {
	if x != nil && x.OlMonsterAiMaxDirectionChangePerTurn != nil {
		return *x.OlMonsterAiMaxDirectionChangePerTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterAiMaxDirectionChangePerTurnOnSpeedup() int32 {
	if x != nil && x.OlMonsterAiMaxDirectionChangePerTurnOnSpeedup != nil {
		return *x.OlMonsterAiMaxDirectionChangePerTurnOnSpeedup
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterAiSkinId() int32 {
	if x != nil && x.OlMonsterAiSkinId != nil {
		return *x.OlMonsterAiSkinId
	}
	return 0
}

func (x *IOSGameConfig) GetOlMonsterBuffKeepTurn() int32 {
	if x != nil && x.OlMonsterBuffKeepTurn != nil {
		return *x.OlMonsterBuffKeepTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamModeWinTipLength() int32 {
	if x != nil && x.OlTeamModeWinTipLength != nil {
		return *x.OlTeamModeWinTipLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamGameNameList() []string {
	if x != nil {
		return x.OlTeamGameNameList
	}
	return nil
}

func (x *IOSGameConfig) GetOlSnakeSkillShieldTurnCount() int32 {
	if x != nil && x.OlSnakeSkillShieldTurnCount != nil {
		return *x.OlSnakeSkillShieldTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamModeLockLength() int32 {
	if x != nil && x.OlTeamModeLockLength != nil {
		return *x.OlTeamModeLockLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamModeUnlockLength() int32 {
	if x != nil && x.OlTeamModeUnlockLength != nil {
		return *x.OlTeamModeUnlockLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlInitialKillEffectWidth() float64 {
	if x != nil && x.OlInitialKillEffectWidth != nil {
		return *x.OlInitialKillEffectWidth
	}
	return 0
}

func (x *IOSGameConfig) GetOlInitialKillEffectValue() float64 {
	if x != nil && x.OlInitialKillEffectValue != nil {
		return *x.OlInitialKillEffectValue
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeKillEffectDistribution() float64 {
	if x != nil && x.OlSnakeKillEffectDistribution != nil {
		return *x.OlSnakeKillEffectDistribution
	}
	return 0
}

func (x *IOSGameConfig) GetOlHappyCoinRate() float64 {
	if x != nil && x.OlHappyCoinRate != nil {
		return *x.OlHappyCoinRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlWtModeFieldCost() []int32 {
	if x != nil {
		return x.OlWtModeFieldCost
	}
	return nil
}

func (x *IOSGameConfig) GetOlWtModeWreckIncreaseRate() []float64 {
	if x != nil {
		return x.OlWtModeWreckIncreaseRate
	}
	return nil
}

func (x *IOSGameConfig) GetOlCommonFoodNodeUnitValue() []int32 {
	if x != nil {
		return x.OlCommonFoodNodeUnitValue
	}
	return nil
}

func (x *IOSGameConfig) GetOlCommonFoodNodeRate() float64 {
	if x != nil && x.OlCommonFoodNodeRate != nil {
		return *x.OlCommonFoodNodeRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlCommonFoodNodeRefreshTurn() int32 {
	if x != nil && x.OlCommonFoodNodeRefreshTurn != nil {
		return *x.OlCommonFoodNodeRefreshTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlFlyFoodNodeGenAreas() []int32 {
	if x != nil {
		return x.OlFlyFoodNodeGenAreas
	}
	return nil
}

func (x *IOSGameConfig) GetOlFlyFoodUnitValue() []int32 {
	if x != nil {
		return x.OlFlyFoodUnitValue
	}
	return nil
}

func (x *IOSGameConfig) GetOlFlyFoodNodeRate() float64 {
	if x != nil && x.OlFlyFoodNodeRate != nil {
		return *x.OlFlyFoodNodeRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlStealCoinSnakeLength() int32 {
	if x != nil && x.OlStealCoinSnakeLength != nil {
		return *x.OlStealCoinSnakeLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlStealCoinSnakeGenTurn() int32 {
	if x != nil && x.OlStealCoinSnakeGenTurn != nil {
		return *x.OlStealCoinSnakeGenTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlStealCoinSnakeRefreshAiTurn() int32 {
	if x != nil && x.OlStealCoinSnakeRefreshAiTurn != nil {
		return *x.OlStealCoinSnakeRefreshAiTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlStealCoinSnakeRefreshAiAngleList() []float64 {
	if x != nil {
		return x.OlStealCoinSnakeRefreshAiAngleList
	}
	return nil
}

func (x *IOSGameConfig) GetOlStealCoinSnakeRefreshAiDistanceList() []float64 {
	if x != nil {
		return x.OlStealCoinSnakeRefreshAiDistanceList
	}
	return nil
}

func (x *IOSGameConfig) GetOlWtModeAutoEndTurn() int32 {
	if x != nil && x.OlWtModeAutoEndTurn != nil {
		return *x.OlWtModeAutoEndTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlWtModeAutoEndTime() int32 {
	if x != nil && x.OlWtModeAutoEndTime != nil {
		return *x.OlWtModeAutoEndTime
	}
	return 0
}

func (x *IOSGameConfig) GetOlWtModeWidthScale() float64 {
	if x != nil && x.OlWtModeWidthScale != nil {
		return *x.OlWtModeWidthScale
	}
	return 0
}

func (x *IOSGameConfig) GetOlStealCoinSnakeCount() int32 {
	if x != nil && x.OlStealCoinSnakeCount != nil {
		return *x.OlStealCoinSnakeCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlStealCoinSnakeGenAreas() []int32 {
	if x != nil {
		return x.OlStealCoinSnakeGenAreas
	}
	return nil
}

func (x *IOSGameConfig) GetOlSnakeSkillLargeTurnCount() int32 {
	if x != nil && x.OlSnakeSkillLargeTurnCount != nil {
		return *x.OlSnakeSkillLargeTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeSkillSpeedTurnCount() int32 {
	if x != nil && x.OlSnakeSkillSpeedTurnCount != nil {
		return *x.OlSnakeSkillSpeedTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeGenLargeRate() float64 {
	if x != nil && x.OlSkillNodeGenLargeRate != nil {
		return *x.OlSkillNodeGenLargeRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeRefreshLargeRate() float64 {
	if x != nil && x.OlSkillNodeRefreshLargeRate != nil {
		return *x.OlSkillNodeRefreshLargeRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeGenSpeedRate() float64 {
	if x != nil && x.OlSkillNodeGenSpeedRate != nil {
		return *x.OlSkillNodeGenSpeedRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeRefreshSpeedRate() float64 {
	if x != nil && x.OlSkillNodeRefreshSpeedRate != nil {
		return *x.OlSkillNodeRefreshSpeedRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSkillNodeLargeLength() int32 {
	if x != nil && x.OlSkillNodeLargeLength != nil {
		return *x.OlSkillNodeLargeLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlStealCoinSnakeSkinId() int32 {
	if x != nil && x.OlStealCoinSnakeSkinId != nil {
		return *x.OlStealCoinSnakeSkinId
	}
	return 0
}

func (x *IOSGameConfig) GetOlWtModeSnakeMaxLength() int32 {
	if x != nil && x.OlWtModeSnakeMaxLength != nil {
		return *x.OlWtModeSnakeMaxLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlWtModeGuideAiConfigList() []float64 {
	if x != nil {
		return x.OlWtModeGuideAiConfigList
	}
	return nil
}

func (x *IOSGameConfig) GetOlWtModeAiChangeDirectionRate() float64 {
	if x != nil && x.OlWtModeAiChangeDirectionRate != nil {
		return *x.OlWtModeAiChangeDirectionRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlWtModeAiCheckCollisionTurn() int32 {
	if x != nil && x.OlWtModeAiCheckCollisionTurn != nil {
		return *x.OlWtModeAiCheckCollisionTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamJoinRestoreRelayTime() int32 {
	if x != nil && x.OlTeamJoinRestoreRelayTime != nil {
		return *x.OlTeamJoinRestoreRelayTime
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeNodeScope1() int32 {
	if x != nil && x.OlSnakeNodeScope1 != nil {
		return *x.OlSnakeNodeScope1
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeNodeScope2() int32 {
	if x != nil && x.OlSnakeNodeScope2 != nil {
		return *x.OlSnakeNodeScope2
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeNodeScope3() int32 {
	if x != nil && x.OlSnakeNodeScope3 != nil {
		return *x.OlSnakeNodeScope3
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeNodeScopeRate1() int32 {
	if x != nil && x.OlSnakeNodeScopeRate1 != nil {
		return *x.OlSnakeNodeScopeRate1
	}
	return 0
}

func (x *IOSGameConfig) GetOlSnakeNodeScopeRate2() int32 {
	if x != nil && x.OlSnakeNodeScopeRate2 != nil {
		return *x.OlSnakeNodeScopeRate2
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiBornRegionCount() int32 {
	if x != nil && x.OlSmallAiBornRegionCount != nil {
		return *x.OlSmallAiBornRegionCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiBornRegionArr() string {
	if x != nil && x.OlSmallAiBornRegionArr != nil {
		return *x.OlSmallAiBornRegionArr
	}
	return ""
}

func (x *IOSGameConfig) GetOlStarGenTurnCount() int32 {
	if x != nil && x.OlStarGenTurnCount != nil {
		return *x.OlStarGenTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlStarRefreshTurnCount() int32 {
	if x != nil && x.OlStarRefreshTurnCount != nil {
		return *x.OlStarRefreshTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlStarArr() string {
	if x != nil && x.OlStarArr != nil {
		return *x.OlStarArr
	}
	return ""
}

func (x *IOSGameConfig) GetOlKillProfitRate() float64 {
	if x != nil && x.OlKillProfitRate != nil {
		return *x.OlKillProfitRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlGrassResidualTurnCount() int32 {
	if x != nil && x.OlGrassResidualTurnCount != nil {
		return *x.OlGrassResidualTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiDieWreckRate() float64 {
	if x != nil && x.OlAiDieWreckRate != nil {
		return *x.OlAiDieWreckRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiGenCount() int32 {
	if x != nil && x.OlSmallAiGenCount != nil {
		return *x.OlSmallAiGenCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiGenTurnCount() int32 {
	if x != nil && x.OlSmallAiGenTurnCount != nil {
		return *x.OlSmallAiGenTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiRefreshTurnCount() int32 {
	if x != nil && x.OlSmallAiRefreshTurnCount != nil {
		return *x.OlSmallAiRefreshTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiLength() int32 {
	if x != nil && x.OlSmallAiLength != nil {
		return *x.OlSmallAiLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiBuffEatRate() float64 {
	if x != nil && x.OlSmallAiBuffEatRate != nil {
		return *x.OlSmallAiBuffEatRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiBuffTurnCount() int32 {
	if x != nil && x.OlSmallAiBuffTurnCount != nil {
		return *x.OlSmallAiBuffTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiSkinId() int32 {
	if x != nil && x.OlSmallAiSkinId != nil {
		return *x.OlSmallAiSkinId
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiPreTipTurnCount() int32 {
	if x != nil && x.OlSmallAiPreTipTurnCount != nil {
		return *x.OlSmallAiPreTipTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiMaxLength() float64 {
	if x != nil && x.OlSmallAiMaxLength != nil {
		return *x.OlSmallAiMaxLength
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiDirChangeMin() int32 {
	if x != nil && x.OlSmallAiDirChangeMin != nil {
		return *x.OlSmallAiDirChangeMin
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiDirChangeMax() int32 {
	if x != nil && x.OlSmallAiDirChangeMax != nil {
		return *x.OlSmallAiDirChangeMax
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiDirChangeSpeedupMin() int32 {
	if x != nil && x.OlSmallAiDirChangeSpeedupMin != nil {
		return *x.OlSmallAiDirChangeSpeedupMin
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiDirChangeSpeedupMax() int32 {
	if x != nil && x.OlSmallAiDirChangeSpeedupMax != nil {
		return *x.OlSmallAiDirChangeSpeedupMax
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiEyeDirMin() float64 {
	if x != nil && x.OlSmallAiEyeDirMin != nil {
		return *x.OlSmallAiEyeDirMin
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiEyeDirMax() float64 {
	if x != nil && x.OlSmallAiEyeDirMax != nil {
		return *x.OlSmallAiEyeDirMax
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiEyeDistanceMin() int32 {
	if x != nil && x.OlSmallAiEyeDistanceMin != nil {
		return *x.OlSmallAiEyeDistanceMin
	}
	return 0
}

func (x *IOSGameConfig) GetOlSmallAiEyeDistanceMax() int32 {
	if x != nil && x.OlSmallAiEyeDistanceMax != nil {
		return *x.OlSmallAiEyeDistanceMax
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamRegularAlertEndTurnCount() int32 {
	if x != nil && x.OlTeamRegularAlertEndTurnCount != nil {
		return *x.OlTeamRegularAlertEndTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamRegularTurnCount() int32 {
	if x != nil && x.OlTeamRegularTurnCount != nil {
		return *x.OlTeamRegularTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamOvertimeTurnCount() int32 {
	if x != nil && x.OlTeamOvertimeTurnCount != nil {
		return *x.OlTeamOvertimeTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamOvertimeSnakeWreckRate() int32 {
	if x != nil && x.OlTeamOvertimeSnakeWreckRate != nil {
		return *x.OlTeamOvertimeSnakeWreckRate
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamOvertimeSnakeFlyFoodAddCount() int32 {
	if x != nil && x.OlTeamOvertimeSnakeFlyFoodAddCount != nil {
		return *x.OlTeamOvertimeSnakeFlyFoodAddCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamOvertimeAlertEndTurnCount1() int32 {
	if x != nil && x.OlTeamOvertimeAlertEndTurnCount1 != nil {
		return *x.OlTeamOvertimeAlertEndTurnCount1
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamOvertimeAlertEndTurnCount2() int32 {
	if x != nil && x.OlTeamOvertimeAlertEndTurnCount2 != nil {
		return *x.OlTeamOvertimeAlertEndTurnCount2
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitStarCount() int32 {
	if x != nil && x.OlTeamSummitStarCount != nil {
		return *x.OlTeamSummitStarCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitStarRefreshTurn() int32 {
	if x != nil && x.OlTeamSummitStarRefreshTurn != nil {
		return *x.OlTeamSummitStarRefreshTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitBossBornConfig() string {
	if x != nil && x.OlTeamSummitBossBornConfig != nil {
		return *x.OlTeamSummitBossBornConfig
	}
	return ""
}

func (x *IOSGameConfig) GetOlTeamSummitBossInitialAiConfig() string {
	if x != nil && x.OlTeamSummitBossInitialAiConfig != nil {
		return *x.OlTeamSummitBossInitialAiConfig
	}
	return ""
}

func (x *IOSGameConfig) GetOlTeamSummitOvertimeStarCount() int32 {
	if x != nil && x.OlTeamSummitOvertimeStarCount != nil {
		return *x.OlTeamSummitOvertimeStarCount
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitOvertimeBossReviveTurn() int32 {
	if x != nil && x.OlTeamSummitOvertimeBossReviveTurn != nil {
		return *x.OlTeamSummitOvertimeBossReviveTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitOvertimeBossBuffTurn() int32 {
	if x != nil && x.OlTeamSummitOvertimeBossBuffTurn != nil {
		return *x.OlTeamSummitOvertimeBossBuffTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitBossBornTurn() int32 {
	if x != nil && x.OlTeamSummitBossBornTurn != nil {
		return *x.OlTeamSummitBossBornTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitBossReviveTurn() int32 {
	if x != nil && x.OlTeamSummitBossReviveTurn != nil {
		return *x.OlTeamSummitBossReviveTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlTeamSummitBossBuffTurn() int32 {
	if x != nil && x.OlTeamSummitBossBuffTurn != nil {
		return *x.OlTeamSummitBossBuffTurn
	}
	return 0
}

func (x *IOSGameConfig) GetOlAiConfig() string {
	if x != nil && x.OlAiConfig != nil {
		return *x.OlAiConfig
	}
	return ""
}

func (x *IOSGameConfig) GetTotalEndTurnCount() int32 {
	if x != nil && x.TotalEndTurnCount != nil {
		return *x.TotalEndTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetCountdownTurnCount() int32 {
	if x != nil && x.CountdownTurnCount != nil {
		return *x.CountdownTurnCount
	}
	return 0
}

func (x *IOSGameConfig) GetLengthLimit() int32 {
	if x != nil && x.LengthLimit != nil {
		return *x.LengthLimit
	}
	return 0
}

func (x *IOSGameConfig) GetKillScoreRate() float64 {
	if x != nil && x.KillScoreRate != nil {
		return *x.KillScoreRate
	}
	return 0
}

func (x *IOSGameConfig) GetKillScorePerLimit() int32 {
	if x != nil && x.KillScorePerLimit != nil {
		return *x.KillScorePerLimit
	}
	return 0
}

type AndroidGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OlGameConfigVersion                   int32     `protobuf:"zigzag32,1,opt,name=ol_game_config_version,json=olGameConfigVersion,proto3" json:"ol_game_config_version,omitempty"`
	OlMapSizeWidthRate                    float32   `protobuf:"fixed32,2,opt,name=ol_map_size_width_rate,json=olMapSizeWidthRate,proto3" json:"ol_map_size_width_rate,omitempty"`
	OlMapSizeHeightRate                   float32   `protobuf:"fixed32,3,opt,name=ol_map_size_height_rate,json=olMapSizeHeightRate,proto3" json:"ol_map_size_height_rate,omitempty"`
	OlSnakeWidthRateDefault               float64   `protobuf:"fixed64,4,opt,name=ol_snake_width_rate_default,json=olSnakeWidthRateDefault,proto3" json:"ol_snake_width_rate_default,omitempty"`
	OlSnakeWidthRate1                     float64   `protobuf:"fixed64,5,opt,name=ol_snake_width_rate1,json=olSnakeWidthRate1,proto3" json:"ol_snake_width_rate1,omitempty"`
	OlSnakeWidthRate2                     float64   `protobuf:"fixed64,6,opt,name=ol_snake_width_rate2,json=olSnakeWidthRate2,proto3" json:"ol_snake_width_rate2,omitempty"`
	OlSnakeWidthLen1                      int32     `protobuf:"zigzag32,7,opt,name=ol_snake_width_len1,json=olSnakeWidthLen1,proto3" json:"ol_snake_width_len1,omitempty"`
	OlSnakeWidthLen2                      int32     `protobuf:"zigzag32,8,opt,name=ol_snake_width_len2,json=olSnakeWidthLen2,proto3" json:"ol_snake_width_len2,omitempty"`
	OlSnakeNodeTime                       float64   `protobuf:"fixed64,9,opt,name=ol_snake_node_time,json=olSnakeNodeTime,proto3" json:"ol_snake_node_time,omitempty"`
	OlSnakeNodePointCount                 int32     `protobuf:"zigzag32,10,opt,name=ol_snake_node_point_count,json=olSnakeNodePointCount,proto3" json:"ol_snake_node_point_count,omitempty"`
	OlSnakeSpeedupRate                    float64   `protobuf:"fixed64,11,opt,name=ol_snake_speedup_rate,json=olSnakeSpeedupRate,proto3" json:"ol_snake_speedup_rate,omitempty"`
	OlFlyFoodSpeedRate                    float64   `protobuf:"fixed64,12,opt,name=ol_fly_food_speed_rate,json=olFlyFoodSpeedRate,proto3" json:"ol_fly_food_speed_rate,omitempty"`
	OlSpeedUpDropNodeFrames               int32     `protobuf:"zigzag32,13,opt,name=ol_speed_up_drop_node_frames,json=olSpeedUpDropNodeFrames,proto3" json:"ol_speed_up_drop_node_frames,omitempty"`
	OlMaxDirectionChangePerFrame          int32     `protobuf:"zigzag32,14,opt,name=ol_max_direction_change_per_frame,json=olMaxDirectionChangePerFrame,proto3" json:"ol_max_direction_change_per_frame,omitempty"`
	OlMaxDirectionChangePerFrameOnSpeedup int32     `protobuf:"zigzag32,15,opt,name=ol_max_direction_change_per_frame_on_speedup,json=olMaxDirectionChangePerFrameOnSpeedup,proto3" json:"ol_max_direction_change_per_frame_on_speedup,omitempty"`
	OlMapScaleDefault                     float32   `protobuf:"fixed32,16,opt,name=ol_map_scale_default,json=olMapScaleDefault,proto3" json:"ol_map_scale_default,omitempty"`
	OlMapScaleFactor1                     float64   `protobuf:"fixed64,17,opt,name=ol_map_scale_factor1,json=olMapScaleFactor1,proto3" json:"ol_map_scale_factor1,omitempty"`
	OlMapScaleFactor2                     float64   `protobuf:"fixed64,18,opt,name=ol_map_scale_factor2,json=olMapScaleFactor2,proto3" json:"ol_map_scale_factor2,omitempty"`
	OlMapScaleLen1                        int32     `protobuf:"zigzag32,19,opt,name=ol_map_scale_len1,json=olMapScaleLen1,proto3" json:"ol_map_scale_len1,omitempty"`
	OlMapScaleLen2                        int32     `protobuf:"zigzag32,20,opt,name=ol_map_scale_len2,json=olMapScaleLen2,proto3" json:"ol_map_scale_len2,omitempty"`
	OlSnakeInitNodeCount                  int32     `protobuf:"zigzag32,21,opt,name=ol_snake_init_node_count,json=olSnakeInitNodeCount,proto3" json:"ol_snake_init_node_count,omitempty"`
	OlEatFlyFoodIncreaseFoodCount         int32     `protobuf:"zigzag32,22,opt,name=ol_eat_fly_food_increase_food_count,json=olEatFlyFoodIncreaseFoodCount,proto3" json:"ol_eat_fly_food_increase_food_count,omitempty"`
	OlFoodInitCount                       int32     `protobuf:"zigzag32,23,opt,name=ol_food_init_count,json=olFoodInitCount,proto3" json:"ol_food_init_count,omitempty"`
	OlFlyFoodInitCount                    int32     `protobuf:"zigzag32,24,opt,name=ol_fly_food_init_count,json=olFlyFoodInitCount,proto3" json:"ol_fly_food_init_count,omitempty"`
	OlSnakeRevivalLengthScope             int32     `protobuf:"zigzag32,25,opt,name=ol_snake_revival_length_scope,json=olSnakeRevivalLengthScope,proto3" json:"ol_snake_revival_length_scope,omitempty"`
	OlSnakeRevivalLengthRate              float64   `protobuf:"fixed64,26,opt,name=ol_snake_revival_length_rate,json=olSnakeRevivalLengthRate,proto3" json:"ol_snake_revival_length_rate,omitempty"`
	OlSnakeRevivalLengthMaxLength         int32     `protobuf:"zigzag32,27,opt,name=ol_snake_revival_length_max_length,json=olSnakeRevivalLengthMaxLength,proto3" json:"ol_snake_revival_length_max_length,omitempty"`
	OlTeamWinLength                       *int32    `protobuf:"zigzag32,28,opt,name=ol_team_win_length,json=olTeamWinLength,proto3,oneof" json:"ol_team_win_length,omitempty"`
	OlSnakeCollisionDisRate               float32   `protobuf:"fixed32,29,opt,name=ol_snake_collision_dis_rate,json=olSnakeCollisionDisRate,proto3" json:"ol_snake_collision_dis_rate,omitempty"`
	OlFoodCollisionDisRate                float64   `protobuf:"fixed64,30,opt,name=ol_food_collision_dis_rate,json=olFoodCollisionDisRate,proto3" json:"ol_food_collision_dis_rate,omitempty"`
	OlFlyFoodCollisionDisRate             float64   `protobuf:"fixed64,31,opt,name=ol_fly_food_collision_dis_rate,json=olFlyFoodCollisionDisRate,proto3" json:"ol_fly_food_collision_dis_rate,omitempty"`
	OlFoodWidthRateDefault                float64   `protobuf:"fixed64,32,opt,name=ol_food_width_rate_default,json=olFoodWidthRateDefault,proto3" json:"ol_food_width_rate_default,omitempty"`
	OlWreckWidthRate                      float64   `protobuf:"fixed64,33,opt,name=ol_wreck_width_rate,json=olWreckWidthRate,proto3" json:"ol_wreck_width_rate,omitempty"`
	OlFlyFoodWidthRate                    float64   `protobuf:"fixed64,34,opt,name=ol_fly_food_width_rate,json=olFlyFoodWidthRate,proto3" json:"ol_fly_food_width_rate,omitempty"`
	OlSuperFrameCount                     int32     `protobuf:"zigzag32,35,opt,name=ol_super_frame_count,json=olSuperFrameCount,proto3" json:"ol_super_frame_count,omitempty"`
	OlSpeedUpMinLength                    int32     `protobuf:"zigzag32,36,opt,name=ol_speed_up_min_length,json=olSpeedUpMinLength,proto3" json:"ol_speed_up_min_length,omitempty"`
	OlEatFoodCountForIncreaseNode         int32     `protobuf:"zigzag32,37,opt,name=ol_eat_food_count_for_increase_node,json=olEatFoodCountForIncreaseNode,proto3" json:"ol_eat_food_count_for_increase_node,omitempty"`
	OlEatWreckIncreaseFoodCount           int32     `protobuf:"zigzag32,38,opt,name=ol_eat_wreck_increase_food_count,json=olEatWreckIncreaseFoodCount,proto3" json:"ol_eat_wreck_increase_food_count,omitempty"`
	OlGameUploadSnapShotInterval          *int32    `protobuf:"zigzag32,39,opt,name=ol_game_upload_snap_shot_interval,json=olGameUploadSnapShotInterval,proto3,oneof" json:"ol_game_upload_snap_shot_interval,omitempty"`
	OlSnakeBornPadding                    int32     `protobuf:"zigzag32,40,opt,name=ol_snake_born_padding,json=olSnakeBornPadding,proto3" json:"ol_snake_born_padding,omitempty"`
	OlTeamSkinId                          []int32   `protobuf:"zigzag32,41,rep,packed,name=ol_team_skin_id,json=olTeamSkinId,proto3" json:"ol_team_skin_id,omitempty"`
	OlTeamTimeLimit                       *int32    `protobuf:"zigzag32,42,opt,name=ol_team_time_limit,json=olTeamTimeLimit,proto3,oneof" json:"ol_team_time_limit,omitempty"`
	OlAiCount                             *int32    `protobuf:"zigzag32,43,opt,name=ol_ai_count,json=olAiCount,proto3,oneof" json:"ol_ai_count,omitempty"`
	OlAiLengthDefault                     *int32    `protobuf:"zigzag32,44,opt,name=ol_ai_length_default,json=olAiLengthDefault,proto3,oneof" json:"ol_ai_length_default,omitempty"`
	OlAiBorderWarnDisRate                 *float64  `protobuf:"fixed64,45,opt,name=ol_ai_border_warn_dis_rate,json=olAiBorderWarnDisRate,proto3,oneof" json:"ol_ai_border_warn_dis_rate,omitempty"`
	OlAiBodyWarnDisRate                   *float64  `protobuf:"fixed64,46,opt,name=ol_ai_body_warn_dis_rate,json=olAiBodyWarnDisRate,proto3,oneof" json:"ol_ai_body_warn_dis_rate,omitempty"`
	OlAiVisualDegree                      *int32    `protobuf:"zigzag32,47,opt,name=ol_ai_visual_degree,json=olAiVisualDegree,proto3,oneof" json:"ol_ai_visual_degree,omitempty"`
	OlAiMaxDirChangePerFrame              *int32    `protobuf:"zigzag32,48,opt,name=ol_ai_max_dir_change_per_frame,json=olAiMaxDirChangePerFrame,proto3,oneof" json:"ol_ai_max_dir_change_per_frame,omitempty"`
	OlAiMaxDirChangePerFrameSpeedup       *int32    `protobuf:"zigzag32,49,opt,name=ol_ai_max_dir_change_per_frame_speedup,json=olAiMaxDirChangePerFrameSpeedup,proto3,oneof" json:"ol_ai_max_dir_change_per_frame_speedup,omitempty"`
	OlAiChangeDirProbability              *float32  `protobuf:"fixed32,50,opt,name=ol_ai_change_dir_probability,json=olAiChangeDirProbability,proto3,oneof" json:"ol_ai_change_dir_probability,omitempty"`
	OlAiWreckEyeDisRate                   *float64  `protobuf:"fixed64,51,opt,name=ol_ai_wreck_eye_dis_rate,json=olAiWreckEyeDisRate,proto3,oneof" json:"ol_ai_wreck_eye_dis_rate,omitempty"`
	OlAiSkinId                            *int32    `protobuf:"zigzag32,52,opt,name=ol_ai_skin_id,json=olAiSkinId,proto3,oneof" json:"ol_ai_skin_id,omitempty"`
	OlGameTeamForeColor                   []int32   `protobuf:"zigzag32,53,rep,packed,name=ol_game_team_fore_color,json=olGameTeamForeColor,proto3" json:"ol_game_team_fore_color,omitempty"`
	OlGameTeamBgColor                     []int32   `protobuf:"zigzag32,54,rep,packed,name=ol_game_team_bg_color,json=olGameTeamBgColor,proto3" json:"ol_game_team_bg_color,omitempty"`
	OlTeamLengthGrowFirstNode             *int32    `protobuf:"zigzag32,55,opt,name=ol_team_length_grow_first_node,json=olTeamLengthGrowFirstNode,proto3,oneof" json:"ol_team_length_grow_first_node,omitempty"`
	OlTeamLengthGrowSecondNode            *int32    `protobuf:"zigzag32,56,opt,name=ol_team_length_grow_second_node,json=olTeamLengthGrowSecondNode,proto3,oneof" json:"ol_team_length_grow_second_node,omitempty"`
	OlSnakeWreckRate                      *float64  `protobuf:"fixed64,57,opt,name=ol_snake_wreck_rate,json=olSnakeWreckRate,proto3,oneof" json:"ol_snake_wreck_rate,omitempty"`
	OlReviveKickTimeSeconds               *int32    `protobuf:"zigzag32,58,opt,name=ol_revive_kick_time_seconds,json=olReviveKickTimeSeconds,proto3,oneof" json:"ol_revive_kick_time_seconds,omitempty"`
	OlFreeTimeLimit                       *int32    `protobuf:"zigzag32,59,opt,name=ol_free_time_limit,json=olFreeTimeLimit,proto3,oneof" json:"ol_free_time_limit,omitempty"`
	OlBigAiBodyWarnDisRate                *float64  `protobuf:"fixed64,60,opt,name=ol_big_ai_body_warn_dis_rate,json=olBigAiBodyWarnDisRate,proto3,oneof" json:"ol_big_ai_body_warn_dis_rate,omitempty"`
	OlBigAiVisualDegree                   *float64  `protobuf:"fixed64,61,opt,name=ol_big_ai_visual_degree,json=olBigAiVisualDegree,proto3,oneof" json:"ol_big_ai_visual_degree,omitempty"`
	OlBigAiMaxDirChangePerFrame           *int32    `protobuf:"zigzag32,62,opt,name=ol_big_ai_max_dir_change_per_frame,json=olBigAiMaxDirChangePerFrame,proto3,oneof" json:"ol_big_ai_max_dir_change_per_frame,omitempty"`
	OlBigAiMaxDirChangePerFrameSpeedup    *int32    `protobuf:"zigzag32,63,opt,name=ol_big_ai_max_dir_change_per_frame_speedup,json=olBigAiMaxDirChangePerFrameSpeedup,proto3,oneof" json:"ol_big_ai_max_dir_change_per_frame_speedup,omitempty"`
	OlBigAiChangeDirProbability           *float32  `protobuf:"fixed32,64,opt,name=ol_big_ai_change_dir_probability,json=olBigAiChangeDirProbability,proto3,oneof" json:"ol_big_ai_change_dir_probability,omitempty"`
	OlBigAiFirstBornTurn                  *int32    `protobuf:"zigzag32,65,opt,name=ol_big_ai_first_born_turn,json=olBigAiFirstBornTurn,proto3,oneof" json:"ol_big_ai_first_born_turn,omitempty"`
	OlBigAiBornSpace                      *int32    `protobuf:"zigzag32,66,opt,name=ol_big_ai_born_space,json=olBigAiBornSpace,proto3,oneof" json:"ol_big_ai_born_space,omitempty"`
	OlBigAiSmallMapAnimTurn               *int32    `protobuf:"zigzag32,67,opt,name=ol_big_ai_small_map_anim_turn,json=olBigAiSmallMapAnimTurn,proto3,oneof" json:"ol_big_ai_small_map_anim_turn,omitempty"`
	OlBigAiInitLength                     *int32    `protobuf:"zigzag32,68,opt,name=ol_big_ai_init_length,json=olBigAiInitLength,proto3,oneof" json:"ol_big_ai_init_length,omitempty"`
	OlBigAiKilledSpeedTurnCount           *int32    `protobuf:"zigzag32,69,opt,name=ol_big_ai_killed_speed_turn_count,json=olBigAiKilledSpeedTurnCount,proto3,oneof" json:"ol_big_ai_killed_speed_turn_count,omitempty"`
	OlBigAiKilledSpeedupRate              *float64  `protobuf:"fixed64,70,opt,name=ol_big_ai_killed_speedup_rate,json=olBigAiKilledSpeedupRate,proto3,oneof" json:"ol_big_ai_killed_speedup_rate,omitempty"`
	OlPropFirstBornTurn                   *int32    `protobuf:"zigzag32,71,opt,name=ol_prop_first_born_turn,json=olPropFirstBornTurn,proto3,oneof" json:"ol_prop_first_born_turn,omitempty"`
	OlPropBornSpace                       *int32    `protobuf:"zigzag32,72,opt,name=ol_prop_born_space,json=olPropBornSpace,proto3,oneof" json:"ol_prop_born_space,omitempty"`
	OlPropShieldTurnCount                 *int32    `protobuf:"zigzag32,73,opt,name=ol_prop_shield_turn_count,json=olPropShieldTurnCount,proto3,oneof" json:"ol_prop_shield_turn_count,omitempty"`
	OlPropMagnetTurnCount                 *int32    `protobuf:"zigzag32,74,opt,name=ol_prop_magnet_turn_count,json=olPropMagnetTurnCount,proto3,oneof" json:"ol_prop_magnet_turn_count,omitempty"`
	OlPropMaxProtectTurn                  *int32    `protobuf:"zigzag32,75,opt,name=ol_prop_max_protect_turn,json=olPropMaxProtectTurn,proto3,oneof" json:"ol_prop_max_protect_turn,omitempty"`
	OlPropMagnetIncreaseCollisionRate     *float64  `protobuf:"fixed64,76,opt,name=ol_prop_magnet_increase_collision_rate,json=olPropMagnetIncreaseCollisionRate,proto3,oneof" json:"ol_prop_magnet_increase_collision_rate,omitempty"`
	OlPropRefreshCount                    *int32    `protobuf:"zigzag32,77,opt,name=ol_prop_refresh_count,json=olPropRefreshCount,proto3,oneof" json:"ol_prop_refresh_count,omitempty"`
	OlTeamWinWarnLengthSpace              *int32    `protobuf:"zigzag32,78,opt,name=ol_team_win_warn_length_space,json=olTeamWinWarnLengthSpace,proto3,oneof" json:"ol_team_win_warn_length_space,omitempty"`
	OlUseSnapshot                         *bool     `protobuf:"varint,79,opt,name=ol_use_snapshot,json=olUseSnapshot,proto3,oneof" json:"ol_use_snapshot,omitempty"`
	OlUseGzip                             *bool     `protobuf:"varint,80,opt,name=ol_use_gzip,json=olUseGzip,proto3,oneof" json:"ol_use_gzip,omitempty"`
	OlPropBornRegion                      *string   `protobuf:"bytes,81,opt,name=ol_prop_born_region,json=olPropBornRegion,proto3,oneof" json:"ol_prop_born_region,omitempty"`
	OlBigAiBornRegion                     *string   `protobuf:"bytes,82,opt,name=ol_big_ai_born_region,json=olBigAiBornRegion,proto3,oneof" json:"ol_big_ai_born_region,omitempty"`
	OlTeamGameNameList                    []string  `protobuf:"bytes,83,rep,name=ol_team_game_name_list,json=olTeamGameNameList,proto3" json:"ol_team_game_name_list,omitempty"`
	OlTeamModeLockLength                  *int32    `protobuf:"zigzag32,84,opt,name=ol_team_mode_lock_length,json=olTeamModeLockLength,proto3,oneof" json:"ol_team_mode_lock_length,omitempty"`
	OlTeamModeUnlockLength                *int32    `protobuf:"zigzag32,85,opt,name=ol_team_mode_unlock_length,json=olTeamModeUnlockLength,proto3,oneof" json:"ol_team_mode_unlock_length,omitempty"`
	OlInitialKillEffectBodyRate           *float64  `protobuf:"fixed64,86,opt,name=ol_initial_kill_effect_body_rate,json=olInitialKillEffectBodyRate,proto3,oneof" json:"ol_initial_kill_effect_body_rate,omitempty"`
	OlInitialKillEffectValue              *float64  `protobuf:"fixed64,87,opt,name=ol_initial_kill_effect_value,json=olInitialKillEffectValue,proto3,oneof" json:"ol_initial_kill_effect_value,omitempty"`
	OlSnakeKillEffectDistribution         *float64  `protobuf:"fixed64,88,opt,name=ol_snake_kill_effect_distribution,json=olSnakeKillEffectDistribution,proto3,oneof" json:"ol_snake_kill_effect_distribution,omitempty"`
	OlHappyCoinRate                       *float64  `protobuf:"fixed64,89,opt,name=ol_happy_coin_rate,json=olHappyCoinRate,proto3,oneof" json:"ol_happy_coin_rate,omitempty"`
	OlWtModeFieldCost                     []int32   `protobuf:"zigzag32,90,rep,packed,name=ol_wt_mode_field_cost,json=olWtModeFieldCost,proto3" json:"ol_wt_mode_field_cost,omitempty"`
	OlWtModeWreckIncreaseRate             []float64 `protobuf:"fixed64,91,rep,packed,name=ol_wt_mode_wreck_increase_rate,json=olWtModeWreckIncreaseRate,proto3" json:"ol_wt_mode_wreck_increase_rate,omitempty"`
	OlCommonFoodNodeUnitValue             []int32   `protobuf:"zigzag32,92,rep,packed,name=ol_common_food_node_unit_value,json=olCommonFoodNodeUnitValue,proto3" json:"ol_common_food_node_unit_value,omitempty"`
	OlCommonFoodNodeRate                  *float64  `protobuf:"fixed64,93,opt,name=ol_common_food_node_rate,json=olCommonFoodNodeRate,proto3,oneof" json:"ol_common_food_node_rate,omitempty"`
	OlCommonFoodNodeRefreshTurn           *int32    `protobuf:"zigzag32,94,opt,name=ol_common_food_node_refresh_turn,json=olCommonFoodNodeRefreshTurn,proto3,oneof" json:"ol_common_food_node_refresh_turn,omitempty"`
	OlFlyFoodNodeGenAreas                 []float64 `protobuf:"fixed64,95,rep,packed,name=ol_fly_food_node_gen_areas,json=olFlyFoodNodeGenAreas,proto3" json:"ol_fly_food_node_gen_areas,omitempty"`
	OlFlyFoodUnitValue                    []int32   `protobuf:"zigzag32,96,rep,packed,name=ol_fly_food_unit_value,json=olFlyFoodUnitValue,proto3" json:"ol_fly_food_unit_value,omitempty"`
	OlFlyFoodNodeRate                     *float64  `protobuf:"fixed64,97,opt,name=ol_fly_food_node_rate,json=olFlyFoodNodeRate,proto3,oneof" json:"ol_fly_food_node_rate,omitempty"`
	OlStealCoinSnakeLength                *int32    `protobuf:"zigzag32,98,opt,name=ol_steal_coin_snake_length,json=olStealCoinSnakeLength,proto3,oneof" json:"ol_steal_coin_snake_length,omitempty"`
	OlStealCoinSnakeGenTurn               *int32    `protobuf:"zigzag32,99,opt,name=ol_steal_coin_snake_gen_turn,json=olStealCoinSnakeGenTurn,proto3,oneof" json:"ol_steal_coin_snake_gen_turn,omitempty"`
	OlStealCoinSnakeRefreshAiTurn         *int32    `protobuf:"zigzag32,100,opt,name=ol_steal_coin_snake_refresh_ai_turn,json=olStealCoinSnakeRefreshAiTurn,proto3,oneof" json:"ol_steal_coin_snake_refresh_ai_turn,omitempty"`
	OlStealCoinSnakeRefreshAiAngleList    []float64 `protobuf:"fixed64,101,rep,packed,name=ol_steal_coin_snake_refresh_ai_angle_list,json=olStealCoinSnakeRefreshAiAngleList,proto3" json:"ol_steal_coin_snake_refresh_ai_angle_list,omitempty"`
	OlStealCoinSnakeRefreshAiDistanceList []float64 `protobuf:"fixed64,102,rep,packed,name=ol_steal_coin_snake_refresh_ai_distance_list,json=olStealCoinSnakeRefreshAiDistanceList,proto3" json:"ol_steal_coin_snake_refresh_ai_distance_list,omitempty"`
	OlWtModeAutoEndTurn                   *int32    `protobuf:"zigzag32,103,opt,name=ol_wt_mode_auto_end_turn,json=olWtModeAutoEndTurn,proto3,oneof" json:"ol_wt_mode_auto_end_turn,omitempty"`
	OlWtModeWidthScale                    *float64  `protobuf:"fixed64,104,opt,name=ol_wt_mode_width_scale,json=olWtModeWidthScale,proto3,oneof" json:"ol_wt_mode_width_scale,omitempty"`
	OlStealCoinSnakeCount                 *int32    `protobuf:"zigzag32,105,opt,name=ol_steal_coin_snake_count,json=olStealCoinSnakeCount,proto3,oneof" json:"ol_steal_coin_snake_count,omitempty"`
	OlStealCoinSnakeGenAreas              []float64 `protobuf:"fixed64,106,rep,packed,name=ol_steal_coin_snake_gen_areas,json=olStealCoinSnakeGenAreas,proto3" json:"ol_steal_coin_snake_gen_areas,omitempty"`
	OlPropIncreaseTargetLength            *int32    `protobuf:"zigzag32,107,opt,name=ol_prop_increase_target_length,json=olPropIncreaseTargetLength,proto3,oneof" json:"ol_prop_increase_target_length,omitempty"`
	OlStealCoinSnakeSkinId                *int32    `protobuf:"zigzag32,108,opt,name=ol_steal_coin_snake_skin_id,json=olStealCoinSnakeSkinId,proto3,oneof" json:"ol_steal_coin_snake_skin_id,omitempty"`
	OlPropIncreaseTurnCount               *int32    `protobuf:"zigzag32,109,opt,name=ol_prop_increase_turn_count,json=olPropIncreaseTurnCount,proto3,oneof" json:"ol_prop_increase_turn_count,omitempty"`
	OlPropAccelerateTurnCount             *int32    `protobuf:"zigzag32,110,opt,name=ol_prop_accelerate_turn_count,json=olPropAccelerateTurnCount,proto3,oneof" json:"ol_prop_accelerate_turn_count,omitempty"`
	OlPropAccelerateSpeedRate             *float64  `protobuf:"fixed64,111,opt,name=ol_prop_accelerate_speed_rate,json=olPropAccelerateSpeedRate,proto3,oneof" json:"ol_prop_accelerate_speed_rate,omitempty"`
	OlPropIncreaseGenerateRate            *float64  `protobuf:"fixed64,112,opt,name=ol_prop_increase_generate_rate,json=olPropIncreaseGenerateRate,proto3,oneof" json:"ol_prop_increase_generate_rate,omitempty"`
	OlPropAccelerateGenerateRate          *float64  `protobuf:"fixed64,113,opt,name=ol_prop_accelerate_generate_rate,json=olPropAccelerateGenerateRate,proto3,oneof" json:"ol_prop_accelerate_generate_rate,omitempty"`
	OlPropShieldGenerateRate              *float64  `protobuf:"fixed64,114,opt,name=ol_prop_shield_generate_rate,json=olPropShieldGenerateRate,proto3,oneof" json:"ol_prop_shield_generate_rate,omitempty"`
	OlPropMagnetGenerateRate              *float64  `protobuf:"fixed64,115,opt,name=ol_prop_magnet_generate_rate,json=olPropMagnetGenerateRate,proto3,oneof" json:"ol_prop_magnet_generate_rate,omitempty"`
	OlTeamJoinRestoreRelayTime            *int32    `protobuf:"zigzag32,116,opt,name=ol_team_join_restore_relay_time,json=olTeamJoinRestoreRelayTime,proto3,oneof" json:"ol_team_join_restore_relay_time,omitempty"`
	OlSnakeNodeScope1                     *int32    `protobuf:"zigzag32,117,opt,name=ol_snake_node_scope1,json=olSnakeNodeScope1,proto3,oneof" json:"ol_snake_node_scope1,omitempty"`
	OlSnakeNodeScope2                     *int32    `protobuf:"zigzag32,118,opt,name=ol_snake_node_scope2,json=olSnakeNodeScope2,proto3,oneof" json:"ol_snake_node_scope2,omitempty"`
	OlSnakeNodeScope3                     *int32    `protobuf:"zigzag32,119,opt,name=ol_snake_node_scope3,json=olSnakeNodeScope3,proto3,oneof" json:"ol_snake_node_scope3,omitempty"`
	OlSnakeNodeScopeRate1                 *int32    `protobuf:"zigzag32,120,opt,name=ol_snake_node_scope_rate1,json=olSnakeNodeScopeRate1,proto3,oneof" json:"ol_snake_node_scope_rate1,omitempty"`
	OlSnakeNodeScopeRate2                 *int32    `protobuf:"zigzag32,121,opt,name=ol_snake_node_scope_rate2,json=olSnakeNodeScopeRate2,proto3,oneof" json:"ol_snake_node_scope_rate2,omitempty"`
	OlSmallAiBornRegionCount              *int32    `protobuf:"zigzag32,122,opt,name=ol_small_ai_born_region_count,json=olSmallAiBornRegionCount,proto3,oneof" json:"ol_small_ai_born_region_count,omitempty"`
	OlSmallAiBornRegionArr                *string   `protobuf:"bytes,123,opt,name=ol_small_ai_born_region_arr,json=olSmallAiBornRegionArr,proto3,oneof" json:"ol_small_ai_born_region_arr,omitempty"`
	OlStarGenTurnCount                    *int32    `protobuf:"zigzag32,124,opt,name=ol_star_gen_turn_count,json=olStarGenTurnCount,proto3,oneof" json:"ol_star_gen_turn_count,omitempty"`
	OlStarRefreshTurnCount                *int32    `protobuf:"zigzag32,125,opt,name=ol_star_refresh_turn_count,json=olStarRefreshTurnCount,proto3,oneof" json:"ol_star_refresh_turn_count,omitempty"`
	OlStarArr                             *string   `protobuf:"bytes,126,opt,name=ol_star_arr,json=olStarArr,proto3,oneof" json:"ol_star_arr,omitempty"`
	OlKillProfitRate                      *float64  `protobuf:"fixed64,127,opt,name=ol_kill_profit_rate,json=olKillProfitRate,proto3,oneof" json:"ol_kill_profit_rate,omitempty"`
	OlSmallAiCount                        *int32    `protobuf:"zigzag32,128,opt,name=ol_small_ai_count,json=olSmallAiCount,proto3,oneof" json:"ol_small_ai_count,omitempty"`
	OlSmallAiGenTurnCount                 *int32    `protobuf:"zigzag32,129,opt,name=ol_small_ai_gen_turn_count,json=olSmallAiGenTurnCount,proto3,oneof" json:"ol_small_ai_gen_turn_count,omitempty"`
	OlSmallAiRefreshTurnCount             *int32    `protobuf:"zigzag32,130,opt,name=ol_small_ai_refresh_turn_count,json=olSmallAiRefreshTurnCount,proto3,oneof" json:"ol_small_ai_refresh_turn_count,omitempty"`
	OlSmallAiSkinId                       *int32    `protobuf:"zigzag32,131,opt,name=ol_small_ai_skin_id,json=olSmallAiSkinId,proto3,oneof" json:"ol_small_ai_skin_id,omitempty"`
	OlSmallAiPreTipsTurnCount             *int32    `protobuf:"zigzag32,132,opt,name=ol_small_ai_pre_tips_turn_count,json=olSmallAiPreTipsTurnCount,proto3,oneof" json:"ol_small_ai_pre_tips_turn_count,omitempty"`
	OlSmallAiDefaultLength                *int32    `protobuf:"zigzag32,133,opt,name=ol_small_ai_default_length,json=olSmallAiDefaultLength,proto3,oneof" json:"ol_small_ai_default_length,omitempty"`
	OlSmallAiMaxLength                    *int32    `protobuf:"zigzag32,134,opt,name=ol_small_ai_max_length,json=olSmallAiMaxLength,proto3,oneof" json:"ol_small_ai_max_length,omitempty"`
	OlSmallAiBufEatRate                   *float64  `protobuf:"fixed64,135,opt,name=ol_small_ai_buf_eat_rate,json=olSmallAiBufEatRate,proto3,oneof" json:"ol_small_ai_buf_eat_rate,omitempty"`
	OlSmallAiBufTurnCount                 *int32    `protobuf:"zigzag32,136,opt,name=ol_small_ai_buf_turn_count,json=olSmallAiBufTurnCount,proto3,oneof" json:"ol_small_ai_buf_turn_count,omitempty"`
	OlSmallAiVisualMinDegree              *float64  `protobuf:"fixed64,137,opt,name=ol_small_ai_visual_min_degree,json=olSmallAiVisualMinDegree,proto3,oneof" json:"ol_small_ai_visual_min_degree,omitempty"`
	OlSmallAiVisualMaxDegree              *float64  `protobuf:"fixed64,138,opt,name=ol_small_ai_visual_max_degree,json=olSmallAiVisualMaxDegree,proto3,oneof" json:"ol_small_ai_visual_max_degree,omitempty"`
	OlSmallAiBodyWarnDisMinRate           *float64  `protobuf:"fixed64,139,opt,name=ol_small_ai_body_warn_dis_min_rate,json=olSmallAiBodyWarnDisMinRate,proto3,oneof" json:"ol_small_ai_body_warn_dis_min_rate,omitempty"`
	OlSmallAiBodyWarnDisMaxRate           *float64  `protobuf:"fixed64,140,opt,name=ol_small_ai_body_warn_dis_max_rate,json=olSmallAiBodyWarnDisMaxRate,proto3,oneof" json:"ol_small_ai_body_warn_dis_max_rate,omitempty"`
	OlSmallAiChangeDirMinProbability      *float32  `protobuf:"fixed32,141,opt,name=ol_small_ai_change_dir_min_probability,json=olSmallAiChangeDirMinProbability,proto3,oneof" json:"ol_small_ai_change_dir_min_probability,omitempty"`
	OlSmallAiChangeDirMaxProbability      *float32  `protobuf:"fixed32,142,opt,name=ol_small_ai_change_dir_max_probability,json=olSmallAiChangeDirMaxProbability,proto3,oneof" json:"ol_small_ai_change_dir_max_probability,omitempty"`
	OlAiWreckRate                         *float64  `protobuf:"fixed64,143,opt,name=ol_ai_wreck_rate,json=olAiWreckRate,proto3,oneof" json:"ol_ai_wreck_rate,omitempty"`
	OlTeamRegularAlertEndTurnCount        *int32    `protobuf:"zigzag32,144,opt,name=ol_team_regular_alert_end_turn_count,json=olTeamRegularAlertEndTurnCount,proto3,oneof" json:"ol_team_regular_alert_end_turn_count,omitempty"`
	OlTeamRegularTurnCount                *int32    `protobuf:"zigzag32,145,opt,name=ol_team_regular_turn_count,json=olTeamRegularTurnCount,proto3,oneof" json:"ol_team_regular_turn_count,omitempty"`
	OlTeamOvertimeTurnCount               *int32    `protobuf:"zigzag32,146,opt,name=ol_team_overtime_turn_count,json=olTeamOvertimeTurnCount,proto3,oneof" json:"ol_team_overtime_turn_count,omitempty"`
	OlTeamOvertimeSnakeWreckRate          *int32    `protobuf:"zigzag32,147,opt,name=ol_team_overtime_snake_wreck_rate,json=olTeamOvertimeSnakeWreckRate,proto3,oneof" json:"ol_team_overtime_snake_wreck_rate,omitempty"`
	OlTeamOvertimeSnakeFlyFoodAddCount    *int32    `protobuf:"zigzag32,148,opt,name=ol_team_overtime_snake_fly_food_add_count,json=olTeamOvertimeSnakeFlyFoodAddCount,proto3,oneof" json:"ol_team_overtime_snake_fly_food_add_count,omitempty"`
	OlTeamOvertimeAlertEndTurnCount1      *int32    `protobuf:"zigzag32,149,opt,name=ol_team_overtime_alert_end_turn_count1,json=olTeamOvertimeAlertEndTurnCount1,proto3,oneof" json:"ol_team_overtime_alert_end_turn_count1,omitempty"`
	OlTeamOvertimeAlertEndTurnCount2      *int32    `protobuf:"zigzag32,150,opt,name=ol_team_overtime_alert_end_turn_count2,json=olTeamOvertimeAlertEndTurnCount2,proto3,oneof" json:"ol_team_overtime_alert_end_turn_count2,omitempty"`
	EndlessAiConfig                       *string   `protobuf:"bytes,151,opt,name=endless_ai_config,json=endlessAiConfig,proto3,oneof" json:"endless_ai_config,omitempty"`
}

func (x *AndroidGameConfig) Reset() {
	*x = AndroidGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_native_qualify_native_qualify_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidGameConfig) ProtoMessage() {}

func (x *AndroidGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_system_native_qualify_native_qualify_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidGameConfig.ProtoReflect.Descriptor instead.
func (*AndroidGameConfig) Descriptor() ([]byte, []int) {
	return file_system_native_qualify_native_qualify_proto_rawDescGZIP(), []int{3}
}

func (x *AndroidGameConfig) GetOlGameConfigVersion() int32 {
	if x != nil {
		return x.OlGameConfigVersion
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMapSizeWidthRate() float32 {
	if x != nil {
		return x.OlMapSizeWidthRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMapSizeHeightRate() float32 {
	if x != nil {
		return x.OlMapSizeHeightRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeWidthRateDefault() float64 {
	if x != nil {
		return x.OlSnakeWidthRateDefault
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeWidthRate1() float64 {
	if x != nil {
		return x.OlSnakeWidthRate1
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeWidthRate2() float64 {
	if x != nil {
		return x.OlSnakeWidthRate2
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeWidthLen1() int32 {
	if x != nil {
		return x.OlSnakeWidthLen1
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeWidthLen2() int32 {
	if x != nil {
		return x.OlSnakeWidthLen2
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeNodeTime() float64 {
	if x != nil {
		return x.OlSnakeNodeTime
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeNodePointCount() int32 {
	if x != nil {
		return x.OlSnakeNodePointCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeSpeedupRate() float64 {
	if x != nil {
		return x.OlSnakeSpeedupRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFlyFoodSpeedRate() float64 {
	if x != nil {
		return x.OlFlyFoodSpeedRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSpeedUpDropNodeFrames() int32 {
	if x != nil {
		return x.OlSpeedUpDropNodeFrames
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMaxDirectionChangePerFrame() int32 {
	if x != nil {
		return x.OlMaxDirectionChangePerFrame
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMaxDirectionChangePerFrameOnSpeedup() int32 {
	if x != nil {
		return x.OlMaxDirectionChangePerFrameOnSpeedup
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMapScaleDefault() float32 {
	if x != nil {
		return x.OlMapScaleDefault
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMapScaleFactor1() float64 {
	if x != nil {
		return x.OlMapScaleFactor1
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMapScaleFactor2() float64 {
	if x != nil {
		return x.OlMapScaleFactor2
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMapScaleLen1() int32 {
	if x != nil {
		return x.OlMapScaleLen1
	}
	return 0
}

func (x *AndroidGameConfig) GetOlMapScaleLen2() int32 {
	if x != nil {
		return x.OlMapScaleLen2
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeInitNodeCount() int32 {
	if x != nil {
		return x.OlSnakeInitNodeCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlEatFlyFoodIncreaseFoodCount() int32 {
	if x != nil {
		return x.OlEatFlyFoodIncreaseFoodCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFoodInitCount() int32 {
	if x != nil {
		return x.OlFoodInitCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFlyFoodInitCount() int32 {
	if x != nil {
		return x.OlFlyFoodInitCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeRevivalLengthScope() int32 {
	if x != nil {
		return x.OlSnakeRevivalLengthScope
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeRevivalLengthRate() float64 {
	if x != nil {
		return x.OlSnakeRevivalLengthRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeRevivalLengthMaxLength() int32 {
	if x != nil {
		return x.OlSnakeRevivalLengthMaxLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamWinLength() int32 {
	if x != nil && x.OlTeamWinLength != nil {
		return *x.OlTeamWinLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeCollisionDisRate() float32 {
	if x != nil {
		return x.OlSnakeCollisionDisRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFoodCollisionDisRate() float64 {
	if x != nil {
		return x.OlFoodCollisionDisRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFlyFoodCollisionDisRate() float64 {
	if x != nil {
		return x.OlFlyFoodCollisionDisRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFoodWidthRateDefault() float64 {
	if x != nil {
		return x.OlFoodWidthRateDefault
	}
	return 0
}

func (x *AndroidGameConfig) GetOlWreckWidthRate() float64 {
	if x != nil {
		return x.OlWreckWidthRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFlyFoodWidthRate() float64 {
	if x != nil {
		return x.OlFlyFoodWidthRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSuperFrameCount() int32 {
	if x != nil {
		return x.OlSuperFrameCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSpeedUpMinLength() int32 {
	if x != nil {
		return x.OlSpeedUpMinLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlEatFoodCountForIncreaseNode() int32 {
	if x != nil {
		return x.OlEatFoodCountForIncreaseNode
	}
	return 0
}

func (x *AndroidGameConfig) GetOlEatWreckIncreaseFoodCount() int32 {
	if x != nil {
		return x.OlEatWreckIncreaseFoodCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlGameUploadSnapShotInterval() int32 {
	if x != nil && x.OlGameUploadSnapShotInterval != nil {
		return *x.OlGameUploadSnapShotInterval
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeBornPadding() int32 {
	if x != nil {
		return x.OlSnakeBornPadding
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamSkinId() []int32 {
	if x != nil {
		return x.OlTeamSkinId
	}
	return nil
}

func (x *AndroidGameConfig) GetOlTeamTimeLimit() int32 {
	if x != nil && x.OlTeamTimeLimit != nil {
		return *x.OlTeamTimeLimit
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiCount() int32 {
	if x != nil && x.OlAiCount != nil {
		return *x.OlAiCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiLengthDefault() int32 {
	if x != nil && x.OlAiLengthDefault != nil {
		return *x.OlAiLengthDefault
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiBorderWarnDisRate() float64 {
	if x != nil && x.OlAiBorderWarnDisRate != nil {
		return *x.OlAiBorderWarnDisRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiBodyWarnDisRate() float64 {
	if x != nil && x.OlAiBodyWarnDisRate != nil {
		return *x.OlAiBodyWarnDisRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiVisualDegree() int32 {
	if x != nil && x.OlAiVisualDegree != nil {
		return *x.OlAiVisualDegree
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiMaxDirChangePerFrame() int32 {
	if x != nil && x.OlAiMaxDirChangePerFrame != nil {
		return *x.OlAiMaxDirChangePerFrame
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiMaxDirChangePerFrameSpeedup() int32 {
	if x != nil && x.OlAiMaxDirChangePerFrameSpeedup != nil {
		return *x.OlAiMaxDirChangePerFrameSpeedup
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiChangeDirProbability() float32 {
	if x != nil && x.OlAiChangeDirProbability != nil {
		return *x.OlAiChangeDirProbability
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiWreckEyeDisRate() float64 {
	if x != nil && x.OlAiWreckEyeDisRate != nil {
		return *x.OlAiWreckEyeDisRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiSkinId() int32 {
	if x != nil && x.OlAiSkinId != nil {
		return *x.OlAiSkinId
	}
	return 0
}

func (x *AndroidGameConfig) GetOlGameTeamForeColor() []int32 {
	if x != nil {
		return x.OlGameTeamForeColor
	}
	return nil
}

func (x *AndroidGameConfig) GetOlGameTeamBgColor() []int32 {
	if x != nil {
		return x.OlGameTeamBgColor
	}
	return nil
}

func (x *AndroidGameConfig) GetOlTeamLengthGrowFirstNode() int32 {
	if x != nil && x.OlTeamLengthGrowFirstNode != nil {
		return *x.OlTeamLengthGrowFirstNode
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamLengthGrowSecondNode() int32 {
	if x != nil && x.OlTeamLengthGrowSecondNode != nil {
		return *x.OlTeamLengthGrowSecondNode
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeWreckRate() float64 {
	if x != nil && x.OlSnakeWreckRate != nil {
		return *x.OlSnakeWreckRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlReviveKickTimeSeconds() int32 {
	if x != nil && x.OlReviveKickTimeSeconds != nil {
		return *x.OlReviveKickTimeSeconds
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFreeTimeLimit() int32 {
	if x != nil && x.OlFreeTimeLimit != nil {
		return *x.OlFreeTimeLimit
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiBodyWarnDisRate() float64 {
	if x != nil && x.OlBigAiBodyWarnDisRate != nil {
		return *x.OlBigAiBodyWarnDisRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiVisualDegree() float64 {
	if x != nil && x.OlBigAiVisualDegree != nil {
		return *x.OlBigAiVisualDegree
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiMaxDirChangePerFrame() int32 {
	if x != nil && x.OlBigAiMaxDirChangePerFrame != nil {
		return *x.OlBigAiMaxDirChangePerFrame
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiMaxDirChangePerFrameSpeedup() int32 {
	if x != nil && x.OlBigAiMaxDirChangePerFrameSpeedup != nil {
		return *x.OlBigAiMaxDirChangePerFrameSpeedup
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiChangeDirProbability() float32 {
	if x != nil && x.OlBigAiChangeDirProbability != nil {
		return *x.OlBigAiChangeDirProbability
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiFirstBornTurn() int32 {
	if x != nil && x.OlBigAiFirstBornTurn != nil {
		return *x.OlBigAiFirstBornTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiBornSpace() int32 {
	if x != nil && x.OlBigAiBornSpace != nil {
		return *x.OlBigAiBornSpace
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiSmallMapAnimTurn() int32 {
	if x != nil && x.OlBigAiSmallMapAnimTurn != nil {
		return *x.OlBigAiSmallMapAnimTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiInitLength() int32 {
	if x != nil && x.OlBigAiInitLength != nil {
		return *x.OlBigAiInitLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiKilledSpeedTurnCount() int32 {
	if x != nil && x.OlBigAiKilledSpeedTurnCount != nil {
		return *x.OlBigAiKilledSpeedTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlBigAiKilledSpeedupRate() float64 {
	if x != nil && x.OlBigAiKilledSpeedupRate != nil {
		return *x.OlBigAiKilledSpeedupRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropFirstBornTurn() int32 {
	if x != nil && x.OlPropFirstBornTurn != nil {
		return *x.OlPropFirstBornTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropBornSpace() int32 {
	if x != nil && x.OlPropBornSpace != nil {
		return *x.OlPropBornSpace
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropShieldTurnCount() int32 {
	if x != nil && x.OlPropShieldTurnCount != nil {
		return *x.OlPropShieldTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropMagnetTurnCount() int32 {
	if x != nil && x.OlPropMagnetTurnCount != nil {
		return *x.OlPropMagnetTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropMaxProtectTurn() int32 {
	if x != nil && x.OlPropMaxProtectTurn != nil {
		return *x.OlPropMaxProtectTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropMagnetIncreaseCollisionRate() float64 {
	if x != nil && x.OlPropMagnetIncreaseCollisionRate != nil {
		return *x.OlPropMagnetIncreaseCollisionRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropRefreshCount() int32 {
	if x != nil && x.OlPropRefreshCount != nil {
		return *x.OlPropRefreshCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamWinWarnLengthSpace() int32 {
	if x != nil && x.OlTeamWinWarnLengthSpace != nil {
		return *x.OlTeamWinWarnLengthSpace
	}
	return 0
}

func (x *AndroidGameConfig) GetOlUseSnapshot() bool {
	if x != nil && x.OlUseSnapshot != nil {
		return *x.OlUseSnapshot
	}
	return false
}

func (x *AndroidGameConfig) GetOlUseGzip() bool {
	if x != nil && x.OlUseGzip != nil {
		return *x.OlUseGzip
	}
	return false
}

func (x *AndroidGameConfig) GetOlPropBornRegion() string {
	if x != nil && x.OlPropBornRegion != nil {
		return *x.OlPropBornRegion
	}
	return ""
}

func (x *AndroidGameConfig) GetOlBigAiBornRegion() string {
	if x != nil && x.OlBigAiBornRegion != nil {
		return *x.OlBigAiBornRegion
	}
	return ""
}

func (x *AndroidGameConfig) GetOlTeamGameNameList() []string {
	if x != nil {
		return x.OlTeamGameNameList
	}
	return nil
}

func (x *AndroidGameConfig) GetOlTeamModeLockLength() int32 {
	if x != nil && x.OlTeamModeLockLength != nil {
		return *x.OlTeamModeLockLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamModeUnlockLength() int32 {
	if x != nil && x.OlTeamModeUnlockLength != nil {
		return *x.OlTeamModeUnlockLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlInitialKillEffectBodyRate() float64 {
	if x != nil && x.OlInitialKillEffectBodyRate != nil {
		return *x.OlInitialKillEffectBodyRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlInitialKillEffectValue() float64 {
	if x != nil && x.OlInitialKillEffectValue != nil {
		return *x.OlInitialKillEffectValue
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeKillEffectDistribution() float64 {
	if x != nil && x.OlSnakeKillEffectDistribution != nil {
		return *x.OlSnakeKillEffectDistribution
	}
	return 0
}

func (x *AndroidGameConfig) GetOlHappyCoinRate() float64 {
	if x != nil && x.OlHappyCoinRate != nil {
		return *x.OlHappyCoinRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlWtModeFieldCost() []int32 {
	if x != nil {
		return x.OlWtModeFieldCost
	}
	return nil
}

func (x *AndroidGameConfig) GetOlWtModeWreckIncreaseRate() []float64 {
	if x != nil {
		return x.OlWtModeWreckIncreaseRate
	}
	return nil
}

func (x *AndroidGameConfig) GetOlCommonFoodNodeUnitValue() []int32 {
	if x != nil {
		return x.OlCommonFoodNodeUnitValue
	}
	return nil
}

func (x *AndroidGameConfig) GetOlCommonFoodNodeRate() float64 {
	if x != nil && x.OlCommonFoodNodeRate != nil {
		return *x.OlCommonFoodNodeRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlCommonFoodNodeRefreshTurn() int32 {
	if x != nil && x.OlCommonFoodNodeRefreshTurn != nil {
		return *x.OlCommonFoodNodeRefreshTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlFlyFoodNodeGenAreas() []float64 {
	if x != nil {
		return x.OlFlyFoodNodeGenAreas
	}
	return nil
}

func (x *AndroidGameConfig) GetOlFlyFoodUnitValue() []int32 {
	if x != nil {
		return x.OlFlyFoodUnitValue
	}
	return nil
}

func (x *AndroidGameConfig) GetOlFlyFoodNodeRate() float64 {
	if x != nil && x.OlFlyFoodNodeRate != nil {
		return *x.OlFlyFoodNodeRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeLength() int32 {
	if x != nil && x.OlStealCoinSnakeLength != nil {
		return *x.OlStealCoinSnakeLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeGenTurn() int32 {
	if x != nil && x.OlStealCoinSnakeGenTurn != nil {
		return *x.OlStealCoinSnakeGenTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeRefreshAiTurn() int32 {
	if x != nil && x.OlStealCoinSnakeRefreshAiTurn != nil {
		return *x.OlStealCoinSnakeRefreshAiTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeRefreshAiAngleList() []float64 {
	if x != nil {
		return x.OlStealCoinSnakeRefreshAiAngleList
	}
	return nil
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeRefreshAiDistanceList() []float64 {
	if x != nil {
		return x.OlStealCoinSnakeRefreshAiDistanceList
	}
	return nil
}

func (x *AndroidGameConfig) GetOlWtModeAutoEndTurn() int32 {
	if x != nil && x.OlWtModeAutoEndTurn != nil {
		return *x.OlWtModeAutoEndTurn
	}
	return 0
}

func (x *AndroidGameConfig) GetOlWtModeWidthScale() float64 {
	if x != nil && x.OlWtModeWidthScale != nil {
		return *x.OlWtModeWidthScale
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeCount() int32 {
	if x != nil && x.OlStealCoinSnakeCount != nil {
		return *x.OlStealCoinSnakeCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeGenAreas() []float64 {
	if x != nil {
		return x.OlStealCoinSnakeGenAreas
	}
	return nil
}

func (x *AndroidGameConfig) GetOlPropIncreaseTargetLength() int32 {
	if x != nil && x.OlPropIncreaseTargetLength != nil {
		return *x.OlPropIncreaseTargetLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStealCoinSnakeSkinId() int32 {
	if x != nil && x.OlStealCoinSnakeSkinId != nil {
		return *x.OlStealCoinSnakeSkinId
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropIncreaseTurnCount() int32 {
	if x != nil && x.OlPropIncreaseTurnCount != nil {
		return *x.OlPropIncreaseTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropAccelerateTurnCount() int32 {
	if x != nil && x.OlPropAccelerateTurnCount != nil {
		return *x.OlPropAccelerateTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropAccelerateSpeedRate() float64 {
	if x != nil && x.OlPropAccelerateSpeedRate != nil {
		return *x.OlPropAccelerateSpeedRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropIncreaseGenerateRate() float64 {
	if x != nil && x.OlPropIncreaseGenerateRate != nil {
		return *x.OlPropIncreaseGenerateRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropAccelerateGenerateRate() float64 {
	if x != nil && x.OlPropAccelerateGenerateRate != nil {
		return *x.OlPropAccelerateGenerateRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropShieldGenerateRate() float64 {
	if x != nil && x.OlPropShieldGenerateRate != nil {
		return *x.OlPropShieldGenerateRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlPropMagnetGenerateRate() float64 {
	if x != nil && x.OlPropMagnetGenerateRate != nil {
		return *x.OlPropMagnetGenerateRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamJoinRestoreRelayTime() int32 {
	if x != nil && x.OlTeamJoinRestoreRelayTime != nil {
		return *x.OlTeamJoinRestoreRelayTime
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeNodeScope1() int32 {
	if x != nil && x.OlSnakeNodeScope1 != nil {
		return *x.OlSnakeNodeScope1
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeNodeScope2() int32 {
	if x != nil && x.OlSnakeNodeScope2 != nil {
		return *x.OlSnakeNodeScope2
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeNodeScope3() int32 {
	if x != nil && x.OlSnakeNodeScope3 != nil {
		return *x.OlSnakeNodeScope3
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeNodeScopeRate1() int32 {
	if x != nil && x.OlSnakeNodeScopeRate1 != nil {
		return *x.OlSnakeNodeScopeRate1
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSnakeNodeScopeRate2() int32 {
	if x != nil && x.OlSnakeNodeScopeRate2 != nil {
		return *x.OlSnakeNodeScopeRate2
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiBornRegionCount() int32 {
	if x != nil && x.OlSmallAiBornRegionCount != nil {
		return *x.OlSmallAiBornRegionCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiBornRegionArr() string {
	if x != nil && x.OlSmallAiBornRegionArr != nil {
		return *x.OlSmallAiBornRegionArr
	}
	return ""
}

func (x *AndroidGameConfig) GetOlStarGenTurnCount() int32 {
	if x != nil && x.OlStarGenTurnCount != nil {
		return *x.OlStarGenTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStarRefreshTurnCount() int32 {
	if x != nil && x.OlStarRefreshTurnCount != nil {
		return *x.OlStarRefreshTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlStarArr() string {
	if x != nil && x.OlStarArr != nil {
		return *x.OlStarArr
	}
	return ""
}

func (x *AndroidGameConfig) GetOlKillProfitRate() float64 {
	if x != nil && x.OlKillProfitRate != nil {
		return *x.OlKillProfitRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiCount() int32 {
	if x != nil && x.OlSmallAiCount != nil {
		return *x.OlSmallAiCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiGenTurnCount() int32 {
	if x != nil && x.OlSmallAiGenTurnCount != nil {
		return *x.OlSmallAiGenTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiRefreshTurnCount() int32 {
	if x != nil && x.OlSmallAiRefreshTurnCount != nil {
		return *x.OlSmallAiRefreshTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiSkinId() int32 {
	if x != nil && x.OlSmallAiSkinId != nil {
		return *x.OlSmallAiSkinId
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiPreTipsTurnCount() int32 {
	if x != nil && x.OlSmallAiPreTipsTurnCount != nil {
		return *x.OlSmallAiPreTipsTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiDefaultLength() int32 {
	if x != nil && x.OlSmallAiDefaultLength != nil {
		return *x.OlSmallAiDefaultLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiMaxLength() int32 {
	if x != nil && x.OlSmallAiMaxLength != nil {
		return *x.OlSmallAiMaxLength
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiBufEatRate() float64 {
	if x != nil && x.OlSmallAiBufEatRate != nil {
		return *x.OlSmallAiBufEatRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiBufTurnCount() int32 {
	if x != nil && x.OlSmallAiBufTurnCount != nil {
		return *x.OlSmallAiBufTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiVisualMinDegree() float64 {
	if x != nil && x.OlSmallAiVisualMinDegree != nil {
		return *x.OlSmallAiVisualMinDegree
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiVisualMaxDegree() float64 {
	if x != nil && x.OlSmallAiVisualMaxDegree != nil {
		return *x.OlSmallAiVisualMaxDegree
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiBodyWarnDisMinRate() float64 {
	if x != nil && x.OlSmallAiBodyWarnDisMinRate != nil {
		return *x.OlSmallAiBodyWarnDisMinRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiBodyWarnDisMaxRate() float64 {
	if x != nil && x.OlSmallAiBodyWarnDisMaxRate != nil {
		return *x.OlSmallAiBodyWarnDisMaxRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiChangeDirMinProbability() float32 {
	if x != nil && x.OlSmallAiChangeDirMinProbability != nil {
		return *x.OlSmallAiChangeDirMinProbability
	}
	return 0
}

func (x *AndroidGameConfig) GetOlSmallAiChangeDirMaxProbability() float32 {
	if x != nil && x.OlSmallAiChangeDirMaxProbability != nil {
		return *x.OlSmallAiChangeDirMaxProbability
	}
	return 0
}

func (x *AndroidGameConfig) GetOlAiWreckRate() float64 {
	if x != nil && x.OlAiWreckRate != nil {
		return *x.OlAiWreckRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamRegularAlertEndTurnCount() int32 {
	if x != nil && x.OlTeamRegularAlertEndTurnCount != nil {
		return *x.OlTeamRegularAlertEndTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamRegularTurnCount() int32 {
	if x != nil && x.OlTeamRegularTurnCount != nil {
		return *x.OlTeamRegularTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamOvertimeTurnCount() int32 {
	if x != nil && x.OlTeamOvertimeTurnCount != nil {
		return *x.OlTeamOvertimeTurnCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamOvertimeSnakeWreckRate() int32 {
	if x != nil && x.OlTeamOvertimeSnakeWreckRate != nil {
		return *x.OlTeamOvertimeSnakeWreckRate
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamOvertimeSnakeFlyFoodAddCount() int32 {
	if x != nil && x.OlTeamOvertimeSnakeFlyFoodAddCount != nil {
		return *x.OlTeamOvertimeSnakeFlyFoodAddCount
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamOvertimeAlertEndTurnCount1() int32 {
	if x != nil && x.OlTeamOvertimeAlertEndTurnCount1 != nil {
		return *x.OlTeamOvertimeAlertEndTurnCount1
	}
	return 0
}

func (x *AndroidGameConfig) GetOlTeamOvertimeAlertEndTurnCount2() int32 {
	if x != nil && x.OlTeamOvertimeAlertEndTurnCount2 != nil {
		return *x.OlTeamOvertimeAlertEndTurnCount2
	}
	return 0
}

func (x *AndroidGameConfig) GetEndlessAiConfig() string {
	if x != nil && x.EndlessAiConfig != nil {
		return *x.EndlessAiConfig
	}
	return ""
}

var File_system_native_qualify_native_qualify_proto protoreflect.FileDescriptor

var file_system_native_qualify_native_qualify_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x1a, 0x20, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xe3, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6f, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x2e, 0x49, 0x4f, 0x53, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x69, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x41, 0x49, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x61,
	0x69, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x8c, 0x74, 0x0a, 0x0d, 0x49, 0x4f, 0x53, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x13, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x11, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a, 0x23, 0x6f, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x5f,
	0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x1d, 0x6f, 0x6c, 0x45, 0x61, 0x74, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1b, 0x6f, 0x6c, 0x4d,
	0x61, 0x78, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x59, 0x0a, 0x2b, 0x6f, 0x6c, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x24, 0x6f,
	0x6c, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0f, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x14, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6f,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x31, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x6f, 0x6c, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x6f,
	0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x31, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x13, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x11, 0x52, 0x13, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x12, 0x36, 0x0a, 0x18, 0x6f,
	0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x11, 0x52, 0x14, 0x6f,
	0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0f, 0x6f, 0x6c, 0x46, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x12, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x19, 0x6f,
	0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6f,
	0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x18, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x11, 0x48, 0x02, 0x52, 0x1d,
	0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x11, 0x48, 0x03, 0x52, 0x0f,
	0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x23, 0x6f, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x1d, 0x6f, 0x6c, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45,
	0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1b, 0x6f, 0x6c, 0x45, 0x61, 0x74, 0x57,
	0x72, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x5f,
	0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x18, 0x6f, 0x6c,
	0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x18, 0x6f,
	0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x44,
	0x72, 0x6f, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x11, 0x52, 0x16, 0x6f, 0x6c, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1b, 0x6f,
	0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x42, 0x6f, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c,
	0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0c, 0x6f, 0x6c, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6c, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x6f, 0x6c, 0x57, 0x72, 0x65,
	0x63, 0x6b, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x66,
	0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x11, 0x52, 0x13, 0x6f, 0x6c, 0x46, 0x6f, 0x6f, 0x64, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x19, 0x6f, 0x6c,
	0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6f,
	0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x11, 0x48, 0x04, 0x52,
	0x1b, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x53, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x15, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x4b, 0x69,
	0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x6f, 0x6c, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x03,
	0x28, 0x11, 0x52, 0x0c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x11, 0x48, 0x05, 0x52, 0x0f,
	0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x11, 0x48, 0x06, 0x52, 0x09, 0x6f, 0x6c, 0x41, 0x69, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x6c, 0x5f, 0x61, 0x69,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x11, 0x48, 0x07, 0x52,
	0x0a, 0x6f, 0x6c, 0x41, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x08, 0x52, 0x16, 0x6f, 0x6c, 0x41, 0x69, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x57, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x09, 0x52, 0x0f, 0x6f,
	0x6c, 0x41, 0x69, 0x45, 0x79, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x17, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x0a, 0x52, 0x13, 0x6f, 0x6c, 0x41, 0x69, 0x46, 0x6f, 0x6f, 0x64, 0x45, 0x79,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a,
	0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0b, 0x52, 0x16, 0x6f, 0x6c, 0x41, 0x69, 0x45, 0x79, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x20, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x79, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x1b, 0x6f, 0x6c, 0x41, 0x69, 0x57,
	0x72, 0x65, 0x63, 0x6b, 0x45, 0x79, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x23, 0x6f, 0x6c, 0x5f,
	0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x11, 0x48, 0x0d, 0x52, 0x1d, 0x6f, 0x6c, 0x41, 0x69, 0x4d, 0x61,
	0x78, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x2e, 0x6f, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x0e, 0x52, 0x26, 0x6f, 0x6c, 0x41, 0x69, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x54,
	0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0d, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x11, 0x48, 0x0f, 0x52, 0x0a, 0x6f, 0x6c, 0x41, 0x69, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x6c, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x33, 0x20, 0x03, 0x28, 0x11, 0x52, 0x13, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x15, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x67,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x34, 0x20, 0x03, 0x28, 0x11, 0x52, 0x11, 0x6f, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x46, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x11, 0x48, 0x10, 0x52, 0x19, 0x6f, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x77, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x11, 0x52, 0x1a, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x47, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x72,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12,
	0x52, 0x10, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x13, 0x52, 0x0f, 0x6f, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x2c, 0x6f, 0x6c, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x11, 0x48, 0x14, 0x52,
	0x25, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e,
	0x65, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x15, 0x52, 0x1b, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x18,
	0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6f,
	0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x17, 0x52, 0x11, 0x6f, 0x6c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x18, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x65, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x11, 0x48, 0x19,
	0x52, 0x16, 0x6f, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x6f,
	0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x11, 0x48, 0x1a, 0x52, 0x13,
	0x6f, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52,
	0x18, 0x6f, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x21,
	0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x1c, 0x6f, 0x6c, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x6c,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x42, 0x20, 0x03, 0x28, 0x11, 0x52, 0x13, 0x6f, 0x6c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73,
	0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x11, 0x48, 0x1d, 0x52, 0x1b, 0x6f, 0x6c,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x16,
	0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x67, 0x65,
	0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x11, 0x48, 0x1e, 0x52, 0x12,
	0x6f, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x54, 0x75,
	0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x11, 0x48, 0x1f, 0x52, 0x16, 0x6f, 0x6c, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18,
	0x46, 0x20, 0x03, 0x28, 0x11, 0x52, 0x12, 0x6f, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x72, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x14, 0x6f, 0x6c, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x47, 0x20, 0x01, 0x28, 0x11, 0x48, 0x20, 0x52, 0x11, 0x6f, 0x6c, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69,
	0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x1d, 0x6f,
	0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x45, 0x79, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x59, 0x0a, 0x28, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69,
	0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x22, 0x52, 0x22, 0x6f, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69,
	0x57, 0x72, 0x65, 0x63, 0x6b, 0x45, 0x79, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x2b, 0x6f, 0x6c,
	0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x23, 0x52, 0x24, 0x6f, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x4d, 0x61,
	0x78, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x36, 0x6f, 0x6c,
	0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x11, 0x48, 0x24, 0x52, 0x2d, 0x6f, 0x6c,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x54, 0x75,
	0x72, 0x6e, 0x4f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f,
	0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x25, 0x52,
	0x11, 0x6f, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x11, 0x48, 0x26, 0x52, 0x15, 0x6f, 0x6c, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x4b, 0x65, 0x65, 0x70, 0x54, 0x75, 0x72,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x11, 0x48, 0x27, 0x52, 0x16, 0x6f, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x70, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x4f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x28, 0x52, 0x1b, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x51, 0x20, 0x01, 0x28, 0x11, 0x48, 0x29, 0x52, 0x14, 0x6f, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x52, 0x20, 0x01, 0x28, 0x11, 0x48, 0x2a, 0x52, 0x16, 0x6f, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x53, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2b, 0x52, 0x18, 0x6f, 0x6c,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x2c, 0x52, 0x18, 0x6f, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x21, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2d, 0x52, 0x1d, 0x6f, 0x6c, 0x53,
	0x6e, 0x61, 0x6b, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x12, 0x6f, 0x6c, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2e, 0x52, 0x0f, 0x6f, 0x6c, 0x48,
	0x61, 0x70, 0x70, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x57, 0x20, 0x03, 0x28, 0x11, 0x52, 0x11,
	0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x58, 0x20, 0x03, 0x28, 0x01, 0x52, 0x19, 0x6f, 0x6c, 0x57, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x59, 0x20, 0x03, 0x28, 0x11, 0x52, 0x19, 0x6f, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2f, 0x52, 0x14, 0x6f, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x11, 0x48, 0x30,
	0x52, 0x1b, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x5c,
	0x20, 0x03, 0x28, 0x11, 0x52, 0x15, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x16, 0x6f,
	0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x5d, 0x20, 0x03, 0x28, 0x11, 0x52, 0x12, 0x6f, 0x6c, 0x46,
	0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x35, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x31,
	0x52, 0x11, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x11, 0x48, 0x32, 0x52, 0x16, 0x6f, 0x6c,
	0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x67,
	0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x60, 0x20, 0x01, 0x28, 0x11, 0x48, 0x33, 0x52,
	0x17, 0x6f, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x47, 0x65, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x23, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x61, 0x20, 0x01, 0x28, 0x11, 0x48, 0x34, 0x52, 0x1d, 0x6f, 0x6c, 0x53, 0x74,
	0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x41, 0x69, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x29,
	0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x62, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x22, 0x6f, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x69, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x2c, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x63, 0x20, 0x03, 0x28, 0x01, 0x52, 0x25, 0x6f, 0x6c, 0x53, 0x74, 0x65,
	0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x41, 0x69, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x35, 0x52, 0x13, 0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x18,
	0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x11, 0x48, 0x36,
	0x52, 0x13, 0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x77,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x01, 0x48, 0x37, 0x52, 0x12, 0x6f, 0x6c, 0x57, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x38, 0x52, 0x15, 0x6f, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43,
	0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x73, 0x18, 0x68, 0x20, 0x03, 0x28, 0x11, 0x52, 0x18, 0x6f, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c,
	0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x47, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x73, 0x12, 0x48, 0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x11, 0x48, 0x39, 0x52, 0x1a, 0x6f, 0x6c,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1f, 0x6f,
	0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x3a, 0x52, 0x1a, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x3b, 0x52, 0x17, 0x6f,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x3c, 0x52, 0x1b, 0x6f, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x3d, 0x52, 0x17, 0x6f,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x3e, 0x52, 0x1b, 0x6f, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x11, 0x48, 0x3f, 0x52, 0x16, 0x6f, 0x6c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x11, 0x48, 0x40, 0x52, 0x16, 0x6f,
	0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53,
	0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x77,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x71, 0x20, 0x01, 0x28, 0x11, 0x48, 0x41, 0x52,
	0x16, 0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1f, 0x6f, 0x6c,
	0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x61,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x72, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x19, 0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x23, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x69, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x01, 0x48, 0x42, 0x52, 0x1d, 0x6f,
	0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x69,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x11, 0x48, 0x43, 0x52, 0x1c, 0x6f,
	0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x69, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x11, 0x48, 0x44, 0x52, 0x1a, 0x6f, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x31,
	0x18, 0x76, 0x20, 0x01, 0x28, 0x11, 0x48, 0x45, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x18, 0x77, 0x20, 0x01, 0x28, 0x11, 0x48, 0x46, 0x52, 0x11,
	0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x33, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x47, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x33, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x6c,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x31, 0x18, 0x79, 0x20, 0x01, 0x28, 0x11, 0x48, 0x48, 0x52,
	0x15, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x32, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x11, 0x48, 0x49, 0x52, 0x15,
	0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x4a, 0x52, 0x18, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x42, 0x6f, 0x72, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f,
	0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x7c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x16, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69,
	0x42, 0x6f, 0x72, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x4c, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x47, 0x65, 0x6e, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x11, 0x48, 0x4d, 0x52,
	0x16, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x4e, 0x52, 0x09, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x41, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x4f, 0x52,
	0x10, 0x6f, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x50, 0x52, 0x18, 0x6f,
	0x6c, 0x47, 0x72, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x54, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6f, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x65, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x51, 0x52, 0x10, 0x6f, 0x6c, 0x41,
	0x69, 0x44, 0x69, 0x65, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x52, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x47, 0x65, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x53, 0x52,
	0x15, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x54, 0x52, 0x19, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x69, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x55, 0x52, 0x0f, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x56, 0x52, 0x14, 0x6f, 0x6c, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x42, 0x75, 0x66, 0x66, 0x45, 0x61, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x57, 0x52, 0x16, 0x6f, 0x6c,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x42, 0x75, 0x66, 0x66, 0x54, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x58, 0x52, 0x0f, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x41, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1e, 0x6f,
	0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x70, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x8a, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x59, 0x52, 0x18, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41,
	0x69, 0x50, 0x72, 0x65, 0x54, 0x69, 0x70, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x8b, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x5a, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41,
	0x69, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x5b, 0x52, 0x15, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x44,
	0x69, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x8d, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x5c, 0x52, 0x15, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69,
	0x44, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64,
	0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75,
	0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x5d, 0x52, 0x1c,
	0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x44, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64,
	0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75,
	0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x5e, 0x52, 0x1c,
	0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x44, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x17, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65,
	0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x5f, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x45, 0x79,
	0x65, 0x44, 0x69, 0x72, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x6f, 0x6c,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x60, 0x52, 0x12,
	0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x45, 0x79, 0x65, 0x44, 0x69, 0x72, 0x4d,
	0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x61, 0x52, 0x17,
	0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x45, 0x79, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x6c,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x62, 0x52, 0x17, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x45, 0x79,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x52, 0x0a, 0x24, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x63,
	0x52, 0x1e, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x64, 0x52, 0x16, 0x6f, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x65, 0x52, 0x17, 0x6f,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x21, 0x6f, 0x6c, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x66, 0x52, 0x1c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57, 0x72, 0x65, 0x63,
	0x6b, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x29, 0x6f, 0x6c, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x67, 0x52, 0x22,
	0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x26, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x68, 0x52, 0x20, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64,
	0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a,
	0x26, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x69,
	0x52, 0x20, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x32, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x6a, 0x52, 0x15, 0x6f, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x6b, 0x52, 0x1b, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6c, 0x52, 0x1a,
	0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6f, 0x73, 0x73,
	0x42, 0x6f, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a,
	0x25, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6d, 0x52,
	0x1f, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6f, 0x73,
	0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x6e, 0x52, 0x1d, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x28, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x6f, 0x52, 0x22, 0x6f, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x73, 0x73, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x56, 0x0a, 0x26, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x70, 0x52, 0x20, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x42, 0x75, 0x66,
	0x66, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x71, 0x52, 0x18, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x6f, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x72, 0x52, 0x1a, 0x6f, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6f, 0x6c,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0xa4, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x73, 0x52, 0x18, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d,
	0x69, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x74, 0x52, 0x0a, 0x6f, 0x6c, 0x41, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x75, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x76, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x77, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x78, 0x52, 0x0d, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x79,
	0x52, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f, 0x6c, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x5f,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69,
	0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x6f,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x42, 0x31, 0x0a, 0x2f, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6f, 0x6c, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x67, 0x72,
	0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x72, 0x65, 0x63,
	0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x2f, 0x0a,
	0x2d, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66,
	0x6f, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x42, 0x23,
	0x0a, 0x21, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x6c, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x23, 0x0a, 0x21,
	0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x2b, 0x0a, 0x29, 0x5f,
	0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x77, 0x72,
	0x65, 0x63, 0x6b, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x6f, 0x6c, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x39, 0x0a, 0x37, 0x5f, 0x6f, 0x6c, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x75, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f,
	0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x23, 0x0a, 0x21, 0x5f,
	0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x1f, 0x0a,
	0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24,
	0x0a, 0x22, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c, 0x5f, 0x68, 0x61, 0x70, 0x70,
	0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x67,
	0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x6f, 0x6c, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x6c,
	0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f,
	0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f,
	0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x25, 0x0a,
	0x23, 0x5f, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x69, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x31, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f,
	0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x33, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x31, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x32, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72,
	0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x65,
	0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x6f, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64,
	0x69, 0x65, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x67, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x78, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x69, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69,
	0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x72,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x2c, 0x0a, 0x2a, 0x5f, 0x6f, 0x6c, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42,
	0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x25, 0x0a,
	0x23, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x20, 0x0a, 0x1e,
	0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x22,
	0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xde, 0x62, 0x0a, 0x11, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x6f,
	0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x13, 0x6f, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x6c,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x32, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x6c,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e,
	0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x31, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x32,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x32, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x15, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x17, 0x6f, 0x6c,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x1c, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5b,
	0x0a, 0x2c, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x25, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x6f,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x6c, 0x4d, 0x61,
	0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x12, 0x2f, 0x0a,
	0x14, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x12, 0x29,
	0x0a, 0x11, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x32, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x4c, 0x65, 0x6e, 0x32, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x11, 0x52, 0x14, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x23,
	0x6f, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1d, 0x6f, 0x6c, 0x45, 0x61, 0x74,
	0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x46,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x66,
	0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x6f, 0x6c, 0x46, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f,
	0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x19, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x6f,
	0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x69, 0x76, 0x61,
	0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x6f,
	0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1d, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x61, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x6f,
	0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6f, 0x6c, 0x46, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6f, 0x6c, 0x46, 0x6c,
	0x79, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6f, 0x6c, 0x46, 0x6f, 0x6f,
	0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6f, 0x6c, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x23, 0x6f, 0x6c, 0x5f,
	0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1d, 0x6f, 0x6c, 0x45, 0x61, 0x74, 0x46, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x5f,
	0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x66,
	0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x1b, 0x6f, 0x6c, 0x45, 0x61, 0x74, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x21,
	0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01, 0x52, 0x1c, 0x6f, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x6c,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x42, 0x6f, 0x72, 0x6e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a,
	0x0f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x29, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x02, 0x52, 0x0f, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x11, 0x48, 0x03, 0x52, 0x09, 0x6f,
	0x6c, 0x41, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6f,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x04, 0x52, 0x11, 0x6f, 0x6c, 0x41,
	0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x15, 0x6f, 0x6c, 0x41, 0x69, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x13, 0x6f, 0x6c, 0x41, 0x69, 0x42, 0x6f, 0x64, 0x79, 0x57,
	0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x13, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x11, 0x48, 0x07, 0x52, 0x10, 0x6f, 0x6c,
	0x41, 0x69, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x11, 0x48, 0x08, 0x52, 0x18, 0x6f, 0x6c, 0x41,
	0x69, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x26, 0x6f, 0x6c, 0x5f, 0x61,
	0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x75, 0x70, 0x18, 0x31, 0x20, 0x01, 0x28, 0x11, 0x48, 0x09, 0x52, 0x1f, 0x6f, 0x6c, 0x41, 0x69,
	0x4d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x18, 0x6f, 0x6c, 0x41, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x77, 0x72, 0x65,
	0x63, 0x6b, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x13, 0x6f, 0x6c, 0x41, 0x69, 0x57, 0x72, 0x65,
	0x63, 0x6b, 0x45, 0x79, 0x65, 0x44, 0x69, 0x73, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0d, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x11, 0x48, 0x0c, 0x52, 0x0a, 0x6f, 0x6c, 0x41, 0x69, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x6c, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x35, 0x20, 0x03, 0x28, 0x11, 0x52, 0x13, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x15, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x67,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x36, 0x20, 0x03, 0x28, 0x11, 0x52, 0x11, 0x6f, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x46, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x11, 0x48, 0x0d, 0x52, 0x19, 0x6f, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x77, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x0e, 0x52, 0x1a, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x47, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x72,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f,
	0x52, 0x10, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x11, 0x48, 0x10, 0x52, 0x17, 0x6f, 0x6c,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x11, 0x52, 0x0f, 0x6f, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1c, 0x6f, 0x6c,
	0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x61, 0x72,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x12, 0x52, 0x16, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x42, 0x6f, 0x64, 0x79, 0x57,
	0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x17, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13,
	0x52, 0x13, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x62,
	0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x14, 0x52, 0x1b, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x4d,
	0x61, 0x78, 0x44, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x2a, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67,
	0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x11, 0x48, 0x15, 0x52, 0x22, 0x6f, 0x6c,
	0x42, 0x69, 0x67, 0x41, 0x69, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x48, 0x16, 0x52,
	0x1b, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69,
	0x72, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x17, 0x52, 0x14, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x6f, 0x72, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x14, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x11, 0x48, 0x18, 0x52, 0x10, 0x6f,
	0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x42, 0x6f, 0x72, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x43, 0x20, 0x01, 0x28, 0x11, 0x48, 0x19, 0x52, 0x17, 0x6f, 0x6c, 0x42,
	0x69, 0x67, 0x41, 0x69, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x69, 0x6d,
	0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x62, 0x69,
	0x67, 0x5f, 0x61, 0x69, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x11, 0x48, 0x1a, 0x52, 0x11, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41,
	0x69, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x21, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x11, 0x48, 0x1b, 0x52, 0x1b, 0x6f, 0x6c, 0x42,
	0x69, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x6f,
	0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1c, 0x52, 0x18, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x17, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x1d, 0x52, 0x13, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x42, 0x6f, 0x72, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12,
	0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x11, 0x48, 0x1e, 0x52, 0x0f, 0x6f, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x42, 0x6f, 0x72, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x1f, 0x52, 0x15, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x19, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x20, 0x52, 0x15, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74,
	0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x18,
	0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x11, 0x48, 0x21,
	0x52, 0x14, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x26, 0x6f, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x21, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x23, 0x52, 0x12, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x24, 0x52, 0x18, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x6e, 0x57, 0x61, 0x72,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x25, 0x52, 0x0d, 0x6f, 0x6c, 0x55, 0x73,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x7a, 0x69, 0x70, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x26, 0x52, 0x09, 0x6f, 0x6c, 0x55, 0x73, 0x65, 0x47, 0x7a, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x6f, 0x72,
	0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27,
	0x52, 0x10, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x42, 0x6f, 0x72, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f,
	0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x11, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x41, 0x69, 0x42,
	0x6f, 0x72, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x16,
	0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x53, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x29, 0x52, 0x14, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x1a, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x55, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x2a, 0x52, 0x16, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2b, 0x52, 0x1b, 0x6f, 0x6c, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x6c,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x2c, 0x52, 0x18, 0x6f, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x21, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2d, 0x52, 0x1d, 0x6f, 0x6c,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x12, 0x6f, 0x6c, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2e, 0x52, 0x0f, 0x6f, 0x6c,
	0x48, 0x61, 0x70, 0x70, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x11, 0x52,
	0x11, 0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x5b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x19, 0x6f, 0x6c, 0x57, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x5c, 0x20, 0x03, 0x28, 0x11, 0x52, 0x19, 0x6f,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2f, 0x52, 0x14, 0x6f, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x30, 0x52, 0x1b, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18,
	0x5f, 0x20, 0x03, 0x28, 0x01, 0x52, 0x15, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x16,
	0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x60, 0x20, 0x03, 0x28, 0x11, 0x52, 0x12, 0x6f, 0x6c,
	0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x35, 0x0a, 0x15, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x31, 0x52, 0x11, 0x6f, 0x6c, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x62, 0x20, 0x01, 0x28, 0x11, 0x48, 0x32, 0x52, 0x16, 0x6f,
	0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f,
	0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x11, 0x48, 0x33,
	0x52, 0x17, 0x6f, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x47, 0x65, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x23,
	0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x11, 0x48, 0x34, 0x52, 0x1d, 0x6f, 0x6c, 0x53,
	0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x41, 0x69, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a,
	0x29, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x65, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x22, 0x6f, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x69, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x2c, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x01, 0x52, 0x25, 0x6f, 0x6c, 0x53, 0x74,
	0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x41, 0x69, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x35, 0x52, 0x13, 0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x16, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x01, 0x48, 0x36, 0x52,
	0x12, 0x6f, 0x6c, 0x57, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x11, 0x48, 0x37, 0x52, 0x15, 0x6f, 0x6c, 0x53,
	0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x6a, 0x20, 0x03, 0x28, 0x01, 0x52, 0x18, 0x6f, 0x6c,
	0x53, 0x74, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x47, 0x65,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x11, 0x48, 0x38,
	0x52, 0x1a, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x39, 0x52, 0x16, 0x6f, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x43,
	0x6f, 0x69, 0x6e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x11, 0x48, 0x3a, 0x52, 0x17, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x11, 0x48, 0x3b, 0x52, 0x19, 0x6f,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6f,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x3c, 0x52, 0x19, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x01, 0x48, 0x3d, 0x52, 0x1a, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x20, 0x6f,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x01, 0x48, 0x3e, 0x52, 0x1c, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x01, 0x48, 0x3f,
	0x52, 0x18, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x1c, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x40, 0x52, 0x18, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x11, 0x48, 0x41, 0x52, 0x1a, 0x6f,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14,
	0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x31, 0x18, 0x75, 0x20, 0x01, 0x28, 0x11, 0x48, 0x42, 0x52, 0x11, 0x6f, 0x6c,
	0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x18, 0x76, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x43, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6f, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x33,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x11, 0x48, 0x44, 0x52, 0x11, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x33, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x19, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x31, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x45, 0x52, 0x15, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x19, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x32, 0x18, 0x79, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x46, 0x52, 0x15, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d,
	0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x47, 0x52, 0x18, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69,
	0x42, 0x6f, 0x72, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72,
	0x72, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x16, 0x6f, 0x6c, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x41, 0x69, 0x42, 0x6f, 0x72, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x49, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x47, 0x65,
	0x6e, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x4a, 0x52, 0x16, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x7e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x09, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x41, 0x72, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x4c, 0x52, 0x10, 0x6f, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6f, 0x6c, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x4d, 0x52, 0x0e, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x4e, 0x52,
	0x15, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x6f, 0x6c, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x4f, 0x52, 0x19, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x50, 0x52, 0x0f, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x51, 0x52, 0x19, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x50, 0x72, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x52, 0x52, 0x16, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x41, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x86, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x53, 0x52, 0x12, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x18,
	0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x54, 0x52, 0x13, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x42, 0x75, 0x66, 0x45,
	0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x55,
	0x52, 0x15, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x42, 0x75, 0x66, 0x54, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6f, 0x6c,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x56, 0x52, 0x18, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69,
	0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x57, 0x52, 0x18, 0x6f, 0x6c, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x44,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x61, 0x72,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x8b,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x58, 0x52, 0x1b, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x41, 0x69, 0x42, 0x6f, 0x64, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x4d, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x22, 0x6f, 0x6c, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x59, 0x52, 0x1b, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41,
	0x69, 0x42, 0x6f, 0x64, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x26, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x5a, 0x52, 0x20, 0x6f, 0x6c, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x41, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x4d, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x56,
	0x0a, 0x26, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x5b, 0x52, 0x20, 0x6f, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x5c, 0x52, 0x0d, 0x6f, 0x6c, 0x41, 0x69, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x24, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x5d, 0x52, 0x1e, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x6f, 0x6c, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x5e,
	0x52, 0x16, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x54,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x5f, 0x52, 0x17, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x21, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x60, 0x52, 0x1c, 0x6f,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x6b, 0x65, 0x57, 0x72, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b,
	0x0a, 0x29, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x94, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x61, 0x52, 0x22, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x46, 0x6c, 0x79, 0x46, 0x6f, 0x6f, 0x64,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x26, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x62, 0x52, 0x20,
	0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x26, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x18, 0x96, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x63, 0x52, 0x20, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x64, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6f, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69,
	0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x42, 0x21,
	0x0a, 0x1f, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x79,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f,
	0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x21, 0x0a, 0x1f,
	0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x67, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x42,
	0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f,
	0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61,
	0x69, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x42,
	0x25, 0x0a, 0x23, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69,
	0x67, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67,
	0x5f, 0x61, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f,
	0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62,
	0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f,
	0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61,
	0x69, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x24, 0x0a,
	0x22, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x61,
	0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x6f,
	0x72, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61,
	0x67, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x7a, 0x69, 0x70, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f,
	0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f,
	0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c, 0x5f, 0x68, 0x61,
	0x70, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x69, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x6f, 0x6c, 0x5f, 0x77, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6f, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x20, 0x0a, 0x1e,
	0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x21,
	0x0a, 0x1f, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x31, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x33, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x31, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x32, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x72, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x6c, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x67, 0x65,
	0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x21, 0x0a, 0x1f,
	0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f,
	0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x6c, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f,
	0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x69, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x69, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f,
	0x64, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x25, 0x0a, 0x23,
	0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x29,
	0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x69, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x6c,
	0x5f, 0x61, 0x69, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x27,
	0x0a, 0x25, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x6c, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b,
	0x65, 0x5f, 0x77, 0x72, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x2c, 0x0a, 0x2a,
	0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x2e, 0x31, 0x37,
	0x7a, 0x6a, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_native_qualify_native_qualify_proto_rawDescOnce sync.Once
	file_system_native_qualify_native_qualify_proto_rawDescData = file_system_native_qualify_native_qualify_proto_rawDesc
)

func file_system_native_qualify_native_qualify_proto_rawDescGZIP() []byte {
	file_system_native_qualify_native_qualify_proto_rawDescOnce.Do(func() {
		file_system_native_qualify_native_qualify_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_native_qualify_native_qualify_proto_rawDescData)
	})
	return file_system_native_qualify_native_qualify_proto_rawDescData
}

var file_system_native_qualify_native_qualify_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_system_native_qualify_native_qualify_proto_goTypes = []interface{}{
	(*GetConfigReq)(nil),                    // 0: nativequalify.GetConfigReq
	(*GetConfigRsp)(nil),                    // 1: nativequalify.GetConfigRsp
	(*IOSGameConfig)(nil),                   // 2: nativequalify.IOSGameConfig
	(*AndroidGameConfig)(nil),               // 3: nativequalify.AndroidGameConfig
	(*snakecommon.NativeQualifyAIPool)(nil), // 4: snakecommon.NativeQualifyAIPool
}
var file_system_native_qualify_native_qualify_proto_depIdxs = []int32{
	2, // 0: nativequalify.GetConfigRsp.ios_game_config:type_name -> nativequalify.IOSGameConfig
	3, // 1: nativequalify.GetConfigRsp.android_game_config:type_name -> nativequalify.AndroidGameConfig
	4, // 2: nativequalify.GetConfigRsp.ai_pools:type_name -> snakecommon.NativeQualifyAIPool
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_system_native_qualify_native_qualify_proto_init() }
func file_system_native_qualify_native_qualify_proto_init() {
	if File_system_native_qualify_native_qualify_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_system_native_qualify_native_qualify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_native_qualify_native_qualify_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_native_qualify_native_qualify_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_native_qualify_native_qualify_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_system_native_qualify_native_qualify_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_system_native_qualify_native_qualify_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_native_qualify_native_qualify_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_system_native_qualify_native_qualify_proto_goTypes,
		DependencyIndexes: file_system_native_qualify_native_qualify_proto_depIdxs,
		MessageInfos:      file_system_native_qualify_native_qualify_proto_msgTypes,
	}.Build()
	File_system_native_qualify_native_qualify_proto = out.File
	file_system_native_qualify_native_qualify_proto_rawDesc = nil
	file_system_native_qualify_native_qualify_proto_goTypes = nil
	file_system_native_qualify_native_qualify_proto_depIdxs = nil
}
