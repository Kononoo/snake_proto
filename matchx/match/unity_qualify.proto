syntax = "proto3";

package match;
option go_package = "git.17zjh.com/snake/snake_proto/matchx/match";

import "matchx/match/match.proto";

// Unity 团战额外定义

message UnityQualifyUploadAttr { // Unity 团战：上传用户额外属性，存储在payload中
  repeated int64 skin_id_list = 1;
  int64 suit_id = 2;
  int64 team_broadcast_id = 3;
  int64 team_bubble_id = 4;
  repeated SkinSkill skin_skill_list = 5;
  int64 prop_id = 6;
}

message ReportRoomScoreNotify {
}

message SkinSkill {
  int32 skill_type = 1;
  double value = 2;
}

message UnityQualifyMatchSuccessNotify { // 团战: 匹配成功 Push 额外信息
  int64 game_config_version = 1; // 游戏配置版本（目前只有原生团战有用）
  double room_rank_score = 2; // 房间段位分（目前只有原生团战有用）
  int64 team_voice = 3; // 组队语音（目前只有原生团战有用）
  map<int32, UnityQualifyAIConfig> ai_pools = 4; // ai_level -> AI 行为配置
}

message UnityQualifyRoomMember { // Unity 团战：房间内玩家额外信息，存储在RoomMember的payload中
  int32 ai_level = 1;
  int64 team_broadcast_id = 2;
  int64 team_bubble_id = 3;
  int64 suit_id = 4;
  int32 suit_chosen = 5;
  repeated int64 skin_id_list = 6;
  int32 mentorship = 7;
  int64 ring_id = 8;
  bool malicious = 9; // 中途退出次数大于 x 次为恶意用户
}

message UnityQualifyGroupMember {
  int32 state = 1; // 在队伍中状态。默认0准备好，1结算中，2未准备
  int64 ring_id = 2;
  int64 prop_id = 3;
  int64 suit_id = 4; // 队服 id
  int64 show_value = 5; // show 值
}

message UnityQualifySyncGroupMemberNotify {
  int64 max_star = 1; // 组队中的最大历史最大星星数 (HistoryMaxStar)
}

message UnityQualifyJoinRoom {
  UploadAttrReq attr = 1;
}

message UnityQualifyAIConfig { // AI 行为配置
  int32 level = 1;
  string comment = 2;
  double border_dis_factor = 3;
  double snake_dis_factor = 4;
  double wreck_dis_factor = 5;
  double floater_dis_factor = 6;
  double ai_snake_view_angle = 7;
  double attack_border_dis_factor = 8;
  double attack_snake_dis_factor = 9;
  double attack_wreck_dis_factor = 10;
  double attack_ai_snake_view_angle = 11;
  double attack_floater_dis_factor = 12;
  double attack_circle_dis_factor = 13;
  double attack_rate = 14;
  double change_direction_rate = 15;
  double delay_direction_rate = 16;
  repeated AttackTimeConfig attack_times = 17;
  double speedup_rate = 18;
  double speedup_time = 19;

  message AttackTimeConfig {
    double time = 1;
    int32 weight = 2;
  }
}

