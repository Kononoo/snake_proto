syntax = "proto3";

package match;
option go_package = "git.17zjh.com/snake/snake_proto/matchx/match";

message CreateGroupReq { // 创建队伍
  int64 game_mode = 1;
  int64 mode_version = 2;
  int64 skin_id = 3; // 当前穿戴的皮肤
  bytes payload = 4; // 额外的数据
}
message CreateGroupRsp {
  int64 group_id = 1; // 创建的队伍id
}

message ExitGroupReq { // 退出队伍
}
message ExitGroupRsp {
}

message DissolveGroupReq { // 解散队伍
}
message DissolveGroupRsp {
}

message DissolveGroupNotify { // 解散队伍的push
  int64 group_id = 1; // 队伍id
}

message GroupMember { // 队伍成员
  string uid = 1; // 玩家uid
  int64 skin_id = 2; // 玩家当前使用的皮肤id
  bytes payload = 3;
  int64 voice_state = 4; // 语音状态
  int64 team_id = 5;
}

message SyncGroupMemberNotify { // 队伍成员push
  int64 group_id = 1;
  string owner = 2;
  int64 game_mode = 3;
  int64 mode_version = 4;
  repeated GroupMember members = 5;
  bytes payload = 6;
 }

message InviteFriendReq { // 邀请好友
  string target_uid = 1; // 邀请的目标玩家uid
  int64 source = 2; // 邀请的来源
}
message InviteFriendRsp {
}

message InviteFriendsReq { // 邀请多个好友
  repeated string target_uid = 1; // 邀请的目标玩家uid列表
  int64 source = 2; // 邀请的来源
}
message InviteFriendsRsp {
}

message InviteFriendNotify { // 邀请好友的push消息
  string source_uid = 1; // 邀请者uid
  int64 game_mode = 2;
  int64 mode_version = 3;
  int64 source = 4;
}

message AcceptInviteReq { // 同意邀请
  string source_uid = 1; // // 邀请者uid
  int64 source = 2;
  int64 skin_id = 3;
  int64 game_mode = 4;
  int64 mode_version = 5;
  bytes payload = 6;
}
message AcceptInviteRsp {
}

message AcceptInviteNotify { // 同意邀请的push
  string uid = 1; // 同意邀请的玩家
}

message RejectInviteReq { // 拒绝邀请
  string source_uid = 1; // // 邀请者uid
  int64 source = 2;
  string message = 3; // 拒绝邀请的消息
  int64 game_mode = 4;
}
message RejectInviteRsp {
}

message RejectInviteNotify { // 拒绝邀请的push
  string uid = 1; // 拒绝邀请的玩家
  string message = 2; // 拒绝邀请的消息
}

message GroupKickReq { // 踢出队伍
  string target_uid = 1; // 被踢的玩家uid
}
message GroupKickRsp {
}

message GroupKickNotify { // 踢出队伍的push
  int64 group_id = 1; //队伍id
}

message StartMatchReq { // 开始匹配
  int64 game_mode = 1;
  int64 mode_version = 2;
  int64 skin_id = 3; // 当前穿戴的皮肤
  bytes payload = 4; // 额外的数据
}
message StartMatchRsp {
  int64 group_id = 1; // 队伍id
  int64 need_player_num = 2; // 需要的玩家人数
  bytes payload = 3; // 额外的数据
}

enum MatchType {
  MatchTypeNone = 0;
  MatchTypeNormal  = 1; // 普通匹配
  MatchTypeDynamic = 2; // 动态匹配
}

message MatchSuccessNotify { // 匹配成功的push
  int64 rid = 1; // 房间id
  int64 game_mode = 2; // 游戏模式
  int64 mode_version = 3; // 模式版本号
  int64 seed = 4; // 随机种子
  int64 room_member_limit = 5; // 房间成员最大的人数上限
  int64 time_limit = 6; // 房间时长限制秒
  int64 matched_ts = 7; // 匹配成功的时间戳
  int64 player_index = 8; // 玩家在房间中的位置，从1开始
  int64 team_id = 9; // 阵营id
  repeated int64 team_id_list = 10; // 阵营id列表
  RelayServer relay_server = 11; // relay服务器信息，帧同步模式玩法需要用到
  bytes payload = 12; // 额外的数据
  repeated RoomMember members = 13;
  MatchType match_type = 14; // 匹配类型
}

message RoomMember {
  string uid = 1; // 玩家uid
  string nickname = 2;
  int64 skin_id = 3; // 玩家当前使用的皮肤id
  int64 voice_state = 4; // 语音状态
  int64 team_id = 5;
  int64 group_id = 6;
  bool is_original = 7; // 是否是初始匹配加入的玩家
  bytes payload = 8;
  int64 kill_effect = 9; // 击杀特效
  int64 show_level = 10; // show等级
  int64 show_value = 11; // show值
  string show_skill = 12; // show的属性加成
  bool is_ai = 13; // 是否是ai
}

message SyncGroupStateNotify { // 同步队伍状态
  int64 group_id = 1;
  int64 state = 2; // 状态
  string operator = 3; // 操作者uid
}

message RelayServer { // relay服务器信息
  string ip = 1;
  int64 tcp_port = 2;
  int64 udp_port = 3;
  int64 kcp_port = 4;
  bytes relay_sign = 5;
}

message CancelMatchReq { // 取消匹配
}
message CancelMatchRsp {
}

message UploadAttrReq { // 上传用户属性
  int64 skin_id = 1;
  string nickname = 2;
  bytes payload = 3; // 额外属性
  int64 kill_effect = 4; // 击杀特效
  int64 show_level = 5; // show等级
  int64 show_value = 6; // show值
  string show_skill = 7; // show的属性加成
}
message UploadAttrRsp {
}

message ExitGameReq { // 退出游戏
  int64 exit_type = 1; // 退出类型
}
message ExitGameRsp {
}

message GroupReadyReq { // 队伍成员准备
  bool is_auto = 1; // 是否自动准备，部分游戏模式需要强制手动准备
}
message GroupReadyRsp {
}

message GroupReadyNotify { // 队伍成员准备push
  string uid = 1; // 玩家uid
  bool is_auto = 2; // 是否自动准备
}

message CancelGroupReadyReq { // 队伍成员取消准备
}
message CancelGroupReadyRsp {
}

message CancelGroupReadyNotify { // 队伍成员取消准备push
  string uid = 1; // 玩家uid
}

message SetVoiceStateReq { // 设置语音状态
  int64 state = 1;
}

message SetVoiceStateRsp {}

message VoiceStateNotify { // 语音状态push
  string uid = 1; // 玩家uid
  int64 state = 2; // 语音状态
}

message MatchxRestore { // matchx的恢复数据
  int64 state = 1; // 玩家状态
  MatchSuccessNotify match_info = 2;
  SyncGroupMemberNotify group_member = 3;
}